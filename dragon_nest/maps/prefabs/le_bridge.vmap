		"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}
}"DOTAAbilities"
{
	"riki_cloak"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_riki/riki_cloak.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"riki_permanent_invisibility"
		"InnateAbility"					"1"
		"MaxLevel"						"1"
		"HasScepterUpgrade"				"1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"4"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"3.5"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"move_speed"					"100"
			}
		}
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_riki.vsndevts"
	
			"particle"			"particles/units/heroes/hero_riki/riki_backstab.vpcf"
		}
	}
	"riki_dagger"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_riki/riki_dagger.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"custom/riki_backstab"
		"MaxLevel"						"7"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"damage_multiplier"				"0.6 0.8 1.0 1.2 1.4 1.6 1.8"
				"LinkedSpecialBonus"			"special_bonus_unique_riki_dagger_2"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"backstab_angle"				"105"
			}		
		}
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_riki.vsndevts"
	
			"particle"			"particles/units/heroes/hero_riki/riki_backstab.vpcf"
		}
	}
	"riki_dance"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_riki/riki_dance.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"riki_blink_strike"
		"MaxLevel"						"7"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		"AbilityThreat"					"-5"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"7 6 5 4 3 2 1"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"150 175 200 225 250 275 300"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"800"
				"LinkedSpecialBonus"	"special_bonus_unique_riki_dance_1"
			}
		}
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_riki.vsndevts"
			"particle"			"particles/units/heroes/hero_riki/riki_blink_strike.vpcf"
		}
	}
	"riki_smoke_bomb"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_riki/riki_smoke_bomb.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"riki_smoke_screen"
		"MaxLevel"						"7"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"15"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"30 60 90 120 150 180 210"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"5.0"
				"LinkedSpecialBonus"		"special_bonus_unique_riki_smoke_bomb_1"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"miss_rate"					"40"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"400"
			}		
		}
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_riki.vsndevts"	//Hero_Riki.Smoke_Screen
	
			"particle"			"particles/units/heroes/hero_riki/riki_smokebomb.vpcf"
			"particle"			"particles/generic_gameplay/generic_silence.vpcf"
		}
	}
	"riki_traded_tricks"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_riki/riki_traded_tricks.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"riki_tricks_of_the_trade"
		"MaxLevel"						"6"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"500"
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"40.0 35.0 30 25.0 20 15"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5.0"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"interval"				"1"
				"LinkedSpecialBonus"	"special_bonus_unique_riki_traded_tricks_2"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"500"
				"LinkedSpecialBonus"	"special_bonus_unique_riki_traded_tricks_1"
			}		
		}
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_riki.vsndevts"	//Hero_Riki.Smoke_Screen
	
			"particle"			"particles/units/heroes/hero_riki/riki_tricks.vpcf"
			"particle"  		"particles/units/heroes/hero_riki/riki_tricks_cast.vpcf"
			"particle"  		"particles/units/heroes/hero_riki/riki_tricks_end.vpcf"
		}
	}
	"special_bonus_unique_riki_dagger_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"8"
			}
		}
	}
	"special_bonus_unique_riki_dagger_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"0.5"
			}
		}
	}
	"special_bonus_unique_riki_dance_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1200"
			}
		}
	}
	"special_bonus_unique_riki_dance_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
		}
	}
	"special_bonus_unique_riki_smoke_bomb_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_riki_smoke_bomb_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"3"
			}
		}
	}
	"special_bonus_unique_riki_traded_tricks_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"500"
			}
		}
	}
	"special_bonus_unique_riki_traded_tricks_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-0.3"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Telekinesis
	//=================================================================================================================
	"rubick_lift"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_rubick/rubick_lift"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_NONE"
		//"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"rubick_telekinesis"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.1"
		"AbilityCastRange"				"550 575 600 625 650 675 700"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"34 30 26 22 18 14 10"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"125"
		
		"precache"
		{
			"particle"  				"particles/units/heroes/hero_rubick/rubick_telekinesis_marker.vpcf"
			"particle"					"particles/units/heroes/hero_rubick/rubick_telekinesis_land.vpcf"
			"particle"					"particles/units/heroes/hero_rubick/rubick_telekinesis.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_rubick.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"lift_duration"				"1.5"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"stun_duration"				"1.0 1.25 1.5 1.75 2 2.25 2.5"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"325"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"cast_range"				"550 575 600 625 650 675 700"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_lift_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"10"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_lift_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"rubick_bolt"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_rubick/rubick_bolt"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityTextureName"			"rubick_fade_bolt"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.1"
		"AbilityCastRange"				"800"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16 14 12 10 8 6 4"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120 130 140 150 160 170 180"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_rubick/rubick_fade_bolt.vpcf"
			"particle"					"particles/units/heroes/hero_rubick/rubick_fade_bolt_debuff.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_rubick.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"80 160 240 320 400 480 560"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage_reduc_pct"			"4"
				"LinkedSpecialBonus"		"special_bonus_unique_rubick_bolt_2"
				"CalculateSpellDamageTooltip"	"0"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"damage_reduc"				"20 25 30 35 40 45 50"
				"CalculateSpellDamageTooltip"	"0"
			}			
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"10"
				"LinkedSpecialBonus"		"special_bonus_unique_rubick_bolt_1"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"440"
			}			
			"07"
			{
				"var_type"					"FIELD_FLOAT"
				"jump_delay"				"0.25"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_bolt_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_bolt_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"-2"
			}
		}
	}

	//=================================================================================================================
	// Null Supremacy
	//=================================================================================================================
	"rubick_arcane"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_rubick/rubick_arcane"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		//"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		//"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityTextureName"			"rubick_null_field"
		"MaxLevel"						"7"
		
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"850"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_rubick/rubick_nullfield_offensive.vpcf"
			"particle"					"particles/units/heroes/hero_rubick/rubick_nullfield_defensive.vpcf"
			"particle"					"particles/units/heroes/hero_oracle/oracle_purifyingflames_cast.vpcf"
			"particle"  				"particles/units/heroes/hero_dark_willow/dark_willow_leyconduit_marker_helper.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_rubick.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"spell_amp"						"14 18 22 26 28 30 32"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"status_resist"					"-4 -12 -20 -28 -36 -44 -52"
			}
			"03"
			{
				"var_type"						"FIELD_FLOAT"
				"magic_resist_reduc"			"-6 -10 -14 -18 -22 -26 -28"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"5"
			}	
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_arcane_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_arcane_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Innate
	//=================================================================================================================
	"rubick_echo"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_rubick/rubick_echo"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"custom/rubick_spell_echo"
		"MaxLevel"						"1"
		"InnateAbility"					"1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"

		"precache"
		{	
			"particle"					"particles/rubick_spell_echo.vpcf"
			"particle"					"particles/units/heroes/hero_lone_druid/lone_druid_bear_entangle.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_rubick.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"delay"					"0.25"
			}
		}
	}

	//=================================================================================================================
	// Spell Steal
	//=================================================================================================================
	"rubick_steal"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_rubick/rubick_steal"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		//"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		//"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"			"rubick_spell_steal"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.1"
		"AbilityCastRange"				"1000"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_7"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"25 23 21 19 17 15"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"200"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_rubick/rubick_spell_steal.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_rubick.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{	
						
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_steal_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_rubick_steal_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
}"DOTAAbilities"
{
	"sand_burrow"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"sandking_burrowstrike"
		"ScriptFile"					"heroes/hero_sand/sand_burrow.lua"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"	"particles/units/heroes/hero_sandking/sandking_burrowstrike.vpcf"
			"soundfile"	"soundevents/game_sounds_heroes/game_sounds_sandking.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_SAND_KING_BURROW_IN"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"11"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"			"FIELD_INTEGER"
				"damage"			"85 150 215 280 345 410 475"
			}
			"02"
			{
				"var_type"			"FIELD_FLOAT"
				"duration"			"2.2"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"range"							"350 450 600 750 900 1050 1200"
				"LinkedSpecialBonus"			"special_bonus_unique_sand_burrow_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"04"
			{
				"var_type"			"FIELD_INTEGER"
				"width"				"250"
			}
		}
	}
	"sand_caustics"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sand/sand_caustics.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"sandking_caustic_finale"
		"InnateAbility" 				"1"
		"MaxLevel"						"1"
		"HasScepterUpgrade"				"1"
		
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_sandking.vsndevts" //Ability.SandKing_CausticFinale
			"particle"			"particles/units/heroes/hero_sandking/sandking_caustic_finale_debuff.vpcf"
			"particle"  		"particles/units/heroes/hero_sandking/sandking_caustic_finale_explode.vpcf"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"350"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"damage"						"5"
				"CalculateSpellDamageTooltip"	"0"
			}
			"03"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"2"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_damage"				"8"
				"CalculateSpellDamageTooltip"	"0"
			}
		}
	}
	"sand_claw_impact"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/sand_claw_impact"
		"ScriptFile"					"heroes/hero_sand/sand_claw_impact.lua"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"	"particles/units/heroes/hero_lion/lion_spell_impale_hit_spikes.vpcf"
			"particle"  "particles/units/heroes/hero_lion/lion_spell_impale.vpcf"

			"soundfile"	"soundevents/game_sounds_heroes/game_sounds_sandking.vsndevts"
			"soundfile"	"soundevents/game_sounds_custom_hero.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"750"
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_ATTACK"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"80"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"75 150 225 300 375 450 525"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3.5"
			}
		}
	}
	"sand_sandstorm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"                     "ability_lua"
		"ScriptFile"                    "heroes/hero_sand/sand_sandstorm.lua"
		"AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityCastAnimation"          "ACT_DOTA_SPAWN" 
		"MaxLevel"						"7"
		"AbilityTextureName"			"sandking_sand_storm"

		// Time     
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"               "40 36 32 28 24 20 16"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"               "60"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"                      "FIELD_INTEGER"
				"sandstorm_damage"     			"30 60 90 120 150 180 210"
			}
			"02"
			{
				"var_type"                      "FIELD_FLOAT"
				"sandstorm_duration"     		"10"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"sandstorm_base_radius"			"200"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"sandstorm_radius_grow"			"10 15 20 25 30 35 40"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"sandstorm_think"				"0.5"
			}
			"06"
			{
				"var_type"                      "FIELD_INTEGER"
				"tornado_damage"     			"15 25 35 45 55 65 75"
			}
			"07"
			{
				"var_type"                      "FIELD_FLOAT"
				"tornado_lifetime"     			"3.5"
			}
			"08"
			{
				"var_type"                      "FIELD_INTEGER"
				"tornado_radius"     			"500"
			}
			"09"
			{
				"var_type"						"FIELD_FLOAT"
				"tornado_rate"					"1.5"
			}
			"10"
			{
				"var_type"                      "FIELD_INTEGER"
				"tornado_search_radius"     	"2000"
			}
			"11"
			{
				"var_type"                      "FIELD_INTEGER"
				"tornado_speed"     			"300"
			}
			"12"
			{
				"var_type"						"FIELD_FLOAT"
				"tornado_think"					"0.5"
			}
			"13"
			{
				"var_type"						"FIELD_INTEGER"
				"slow_blind"					"0"
				"LinkedSpecialBonus"			"special_bonus_unique_sand_sandstorm_1"
			}
			"14"
			{
				"var_type"						"FIELD_FLOAT"
				"grace_period"					"1.25"
			}
		}

		"precache"
		{
			"particle"  "particles/units/heroes/hero_brewmaster/brewmaster_cyclone.vpcf"
			"particle"	"particles/units/heroes/hero_sandking/sand_sandstorm.vpcf"
			"particle"  "particles/econ/courier/courier_roshan_desert_sands/baby_roshan_desert_sands_ambient.vpcf"

			"soundfile"	"soundevents/game_sounds_heroes/game_sounds_sandking.vsndevts"
		}
	}
	"sand_tremors"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"                     "ability_lua"
		"ScriptFile"                    "heroes/hero_sand/sand_tremors.lua"
		"AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityCastAnimation"          "ACT_DOTA_SPAWN"
		"MaxLevel"						"6"
		"AbilityTextureName"			"sandking_epicenter"
		"AbilityType"                   "DOTA_ABILITY_TYPE_ULTIMATE"

		"AbilityCastPoint"              "1.5"
		"AbilityCastAnimation"          "ACT_DOTA_CAST_ABILITY_4"

		// Time     
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"               "80.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"              	"150 225 300 375 450 525"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"              "FIELD_INTEGER"
				"damage"                "150 175 200 225 250 275"
			}
			"02"
			{
				"var_type"              "FIELD_INTEGER"
				"duration"              "2 4 6 8 10 12 14"
			}
			"03"
			{
				"var_type"              "FIELD_INTEGER"
				"radius"                "575"
			}        
			"04"
			{
				"var_type"              "FIELD_INTEGER"
				"slow_move"             "-30 -35 -40 -45 -50 -55 -60"
			}
			"05"
			{
				"var_type"              "FIELD_INTEGER"
				"slow_as"               "-60 -70 -80 -90 -100 -110 -120"
			}
			"06"
			{
				"var_type"              "FIELD_FLOAT"
				"tremor_rate"           "1"
				"LinkedSpecialBonus"    "special_bonus_unique_sand_tremors_1"
			}
		}

		"precache"
		{
			"particle"  "particles/units/heroes/hero_sandking/sandking_epicenter.vpcf"

			"soundfile"	"soundevents/game_sounds_heroes/game_sounds_sandking.vsndevts"
		}
	}
	"special_bonus_unique_sand_burrow_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
		}
	}
	"special_bonus_unique_sand_burrow_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_sand_claw_impact_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-4"
			}
		}
	}
	"special_bonus_unique_sand_claw_impact_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"75"
			}
		}
	}
	"special_bonus_unique_sand_sandstorm_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"30"
			}
		}
	}
	"special_bonus_unique_sand_sandstorm_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"3000"
			}
		}
	}
	"special_bonus_unique_sand_tremors_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-0.25"
			}
		}
	}
	"special_bonus_unique_sand_tremors_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
		}
	}
}"DOTAAbilities"
{	
	"sd_disruption"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_demon/SD_disruption.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"shadow_demon_disruption"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_shadow_demon/shadow_demon_disruption.vpcf"
			"particle"  				"particles/units/heroes/hero_dark_seer/dark_seer_ion_shell_damage.vpcf"
			"particle" 	 				"particles/units/heroes/hero_shadow_demon/shadow_demon_distruption_orb.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_shadow_demon.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"600"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"13 12 11 10 9 8 7"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"25 35 45 55 65 75 85"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"450"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"tick_rate"				"0.2"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"charges"				"0"
				"LinkedSpecialBonus"	"special_bonus_unique_sd_disruption_1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_disruption_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_disruption_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"sd_soul_catcher"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_demon/sd_soul_catcher.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"shadow_demon_soul_catcher"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_shadow_demon/shadow_demon_soul_catcher.vpcf"
			"particle"  				"particles/units/heroes/hero_shadow_demon/shadow_demon_soul_catcher_debuff.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_shadow_demon.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"600"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"45 44 43 42 41 40 39"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50 60 70 80 90 100 110"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"amp"					"10 15 20 25 30 35 40"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"12"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"450"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_soul_catcher_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-10"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_soul_catcher_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"sd_shadow_poison"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_demon/sd_shadow_poison.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"shadow_demon_shadow_poison"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_shadow_demon/shadow_demon_shadow_poison_projectile.vpcf"
			"particle"  				"particles/units/heroes/hero_shadow_demon/shadow_demon_loadout.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_shadow_demon.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1500"
		"AbilityCastPoint"				"0.25"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"2.5"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_impact"			"26 34 42 50 58 66 74"
				"LinkedSpecialBonus"	"special_bonus_unique_sd_shadow_poison_2"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_time"			"20 35 50 65 80 95 110"
				"LinkedSpecialBonus"	"special_bonus_unique_sd_shadow_poison_2"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"1000"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"distance"				"1500"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"width"					"200"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"stacks"				"5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_shadow_poison_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_shadow_poison_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"35"
			}
		}
	}

	"sd_void_release"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_demon/sd_void_release.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/ms_shadow_walk"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_shadow_demon/shadow_demon_void_form_status_effect.vpcf"
			"particle"  				"particles/units/heros/hero_shadow_demon/shadow_demon_projection.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_shadow_demon.vsndevts"
		}
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"chance"				"10"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100"
			}
		}
	}

	"sd_demonic_purge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_demon/sd_demonic_purge.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"shadow_demon_demonic_purge"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_shadow_demon/shadow_demon_demonic_purge.vpcf"
			"particle"					"particles/units/heroes/hero_shadow_demon/shadow_demon_demonic_purge_cast.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_shadow_demon.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"60"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"200"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"200 300 400 500 600 700"
				"LinkedSpecialBonus"	"special_bonus_unique_sd_demonic_purge_1"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"7"
				"LinkedSpecialBonus"	"special_bonus_unique_sd_demonic_purge_1"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"max_slow"				"-100"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"charges"				"3"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_demonic_purge_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"500"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sd_demonic_purge_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"3"
			}
		}
	}
}"DOTAAbilities"
{	
	"shadow_fiend_shadowraze1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_fiend/shadow_fiend_shadowraze1.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"nevermore_shadowraze1"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_RAZE_1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"90 160 230 300 330 360 430"
				"LinkedSpecialBonus"	"special_bonus_unique_shadow_fiend_shadowraze_2"		
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"350"
				"LinkedSpecialBonus"	"special_bonus_unique_shadow_fiend_shadowraze_1"
			}
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"range"							"200"
				"LinkedSpecialBonus"			"special_bonus_unique_shadow_fiend_shadowraze_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_SUBTRACT"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"combo_amp"				"50 60 70 80 90 100 110"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"combo_time"			"8"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"soul_cost"				"6"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_shadowraze.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_shadowraze_debuff.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_nevermore.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_shadowraze_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"200"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_shadowraze_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"150"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"cdr"						"-3"
			}
		}
	}

	"shadow_fiend_shadowraze2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_fiend/shadow_fiend_shadowraze2.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"nevermore_shadowraze2"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_RAZE_2"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"90 160 230 300 330 360 430"
				"LinkedSpecialBonus"	"special_bonus_unique_shadow_fiend_shadowraze_2"		
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"350"		
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"450"		
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"combo_amp"				"50 60 70 80 90 100 110"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"combo_time"			"8"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"soul_cost"				"6"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_shadowraze.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_shadowraze_debuff.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_nevermore.vsndevts"
		}
	}

	"shadow_fiend_shadowraze3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_fiend/shadow_fiend_shadowraze3.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"nevermore_shadowraze3"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_RAZE_3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"90 160 230 300 330 360 430"
				"LinkedSpecialBonus"	"special_bonus_unique_shadow_fiend_shadowraze_2"		
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"350"		
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"700"		
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"combo_amp"				"50 60 70 80 90 100 110"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"combo_time"			"8"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"soul_cost"				"6"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_shadowraze.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_shadowraze_debuff.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_nevermore.vsndevts"
		}
	}

	"shadow_fiend_necro"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_fiend/shadow_fiend_necro.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"AbilityTextureName"			"nevermore_necromastery"
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"7"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"armor_debuff"					"2 3 4 5 6 7 8"
				"LinkedSpecialBonus"			"special_bonus_unique_shadow_fiend_necro_2"
				"LinkedSpecialBonusField"		"value2"
			}	
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"damage"						"2"
				"LinkedSpecialBonus"			"special_bonus_unique_shadow_fiend_necro_1"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"max_souls"						"12 20 28 36 42 50 58"
				"LinkedSpecialBonus"			"special_bonus_unique_shadow_fiend_necro_2"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"death_soul_loss"				"60"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"excess_loss_rate"				"40"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_necro_souls.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_souls.vpcf"

			"soundfile" "soundevents/game_sounds_heroes/game_sounds_nevermore.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_necro_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_necro_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"10"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"value2"					"3"
			}
		}
	}

	"shadow_fiend_dark_lord"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_fiend/shadow_fiend_dark_lord.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityTextureName"			"nevermore_dark_lord"
		"MaxLevel"						"7"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.2"
		//"AbilityCastAnimation"			"ACT_DOTA_GENERIC_CHANNEL_1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"40 38 36 34 32 30 28"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"160 180 200 240 280 320 400"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"damage_weak"					"100"
				"LinkedSpecialBonus"			"special_bonus_unique_shadow_fiend_dark_lord_1"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"9"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"souls_per_second"				"1 1 1 2 2 2 3"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"soul_rate"						"1"
				"LinkedSpecialBonus"			"special_bonus_unique_shadow_fiend_dark_lord_1"
				"LinkedSpecialBonusField"		"soul_rate"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_SUBTRACT"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_necro_souls.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_souls.vpcf"
			"particle"  "particles/nevermore_shadowraze_lower_effect.vpcf"

			"soundfile" "soundevents/game_sounds_heroes/game_sounds_death_prophet.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_dark_lord_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"100"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"soul_rate"					"0.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_dark_lord_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"shadow_fiend_requiem"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_fiend/shadow_fiend_requiem.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"nevermore_requiem"
		"MaxLevel"						"6"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"1.67"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_6"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"120 110 100 90 80 70"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"150 175 200 225 250 275"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"cast_time_tooltip"		"1.67"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"6 7 8 9 10 11"
			}	
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"1000"		
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"reduction_ms"			"-25"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"reduction_damage"		"-50"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"reduction_duration"	"5.0"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"soul_cost"				"12"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"700"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"width_start"			"125"
			}
			"11"
			{
				"var_type"				"FIELD_INTEGER"
				"width_end"				"425"
			}

		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_requiemofsouls.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_requiemofsouls_line.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_wings.vpcf"
			"particle"  "particles/units/heroes/hero_nevermore/nevermore_requiemofsouls_a.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_nevermore.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_requiem_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_shadow_fiend_requiem_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"40"
			}
		}
	}
}"DOTAAbilities"
{	
	"shadow_shaman_binding_shackle"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_shaman/shadow_shaman_binding_shackle"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"MaxLevel"						"7"
		"AbilityTextureName"			"shadow_shaman_shackles"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"400"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityChannelTime"			"2 2.5 3 3.5 4 4.5 5"
		"AbilityCooldown"				"20"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"140 150 160 170 180 190 200"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"tick_interval"			"0.1 0.1 0.1 0.1"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"channel_time"			"2 2.5 3 3.5 4 4.5 5"
				"LinkedSpecialBonus"	"special_bonus_unique_shadow_shaman_binding_shackle_1"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"total_damage"			"55"
			}
			// Extra, calculated as total_damage / channel_time * tick_interval
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"aftershackle_duration"	"1"
			}
		}
	
		"precache"
		{
			"particle"  "particles/status_fx/status_effect_shaman_shackle.vpcf" 	
			"particle"	"particles/units/heroes/hero_shadowshaman/shadowshaman_shackle.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_shadowshaman.vsndevts"
		}
	}
	//--------------------
	// Shadow Shaman	
	//--------------------
	"shadow_shaman_ether_lightning"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_shaman/shadow_shaman_ether_lightning"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"MaxLevel"						"7"
		"AbilityTextureName"			"shadow_shaman_ether_shock"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"600"
		"AbilityCastPoint"				"0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"8"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"95 110 125 140 155 170 185"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"start_radius"				"200"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"end_radius"				"300"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"end_distance"				"500"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"targets"					"8"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"140 200 260 320 380 440 500"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_shadowshaman/shadowshaman_ether_shock.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_shadowshaman.vsndevts"
		}
	}
	"shadow_shaman_ignited_voodoo"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_shaman/shadow_shaman_ignited_voodoo"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"7"
		"FightRecapLevel"				"1"
		"AbilityTextureName"			"shadow_shaman_voodoo"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"500"
		"AbilityCastPoint"				"0"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"22"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110 140 170 200 230 260 290"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"movespeed"					"100"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"2 2.2 2.4 2.6 2.8 3 3.2"
				"LinkedSpecialBonus"		"special_bonus_unique_shadow_shaman_ignited_voodoo_2"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"damage"					"100 150 200 250 300 350 400"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"radius"					"600"
			}
		}
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_shadowshaman.vsndevts"
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_techies.vsndevts"
			"particle"			"particles/units/heroes/hero_shadowshaman/shadowshaman_voodoo.vpcf"
			"particle"			"particles/units/heroes/hero_techies/techies_suicide.vpcf"
			"model"				"models/props_gameplay/chicken.vmdl"
		}
	}
	//=================================================================================================================
	// Shadow Shaman: Mass Serpent Ward
	//=================================================================================================================
	"shadow_shaman_snake_totem"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_shadow_shaman/shadow_shaman_snake_totem"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"shadow_shaman_mass_serpent_ward"
		"FightRecapLevel"				"2"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"550"
		"AbilityCastPoint"				"0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"200 300 400 500 600 700"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ward_count"			"1"
				"LinkedSpecialBonus"	"special_bonus_unique_shadow_shaman_snake_totem_2"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50 90 130 170 210 250"
				"CalculateSpellDamageTooltip"	"0"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"30"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"health"				"15"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"scepter_range"			"600"
			}
		}
	}
	
	// TALENTS
	"special_bonus_unique_shadow_shaman_ether_lightning_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.3"
			}
		}
	}
	"special_bonus_unique_shadow_shaman_ether_lightning_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}
	"special_bonus_unique_shadow_shaman_ignited_voodoo_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"33"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"6"
			}
		}
	}
	"special_bonus_unique_shadow_shaman_ignited_voodoo_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"2"
			}
		}
	}
	"special_bonus_unique_shadow_shaman_binding_shackle_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1"
			}
		}
	}
	"special_bonus_unique_shadow_shaman_binding_shackle_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	"special_bonus_unique_shadow_shaman_snake_totem_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"600"
			}
		}
	}
	"special_bonus_unique_shadow_shaman_snake_totem_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
}"DOTAAbilities"
{	
	
	//=================================================================================================================
	// Silencer: Curse of the silent
	//=================================================================================================================
	"silencer_arcane_curse_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_silencer/silencer_arcane_curse_bh"
		"AbilityTextureName"			"silencer_curse_of_the_silent"
		"AbilityType"					"DOTA_ABILITY_TYPE_BASIC"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Silencer.Curse.Cast"
		"MaxLevel"						"7"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_silencer.vsndevts"
			"particle"					"particles/units/heroes/hero_silencer/silencer_curse_aoe.vpcf"
			"particle"					"particles/units/heroes/hero_silencer/silencer_curse.vpcf"
			"particle"					"particles/units/heroes/hero_silencer/silencer_curse_cast.vpcf"
		}
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75 100 125 150 175 200 225"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.5"	// Mainly about damage
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"14 22 30 38 46 52 60"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"425"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"6"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"penalty_duration"		"4"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"movespeed"				"-15"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_arcane_curse_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_arcane_curse_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Silencer: Glaives of Wisdom
	//=================================================================================================================
	"silencer_glaives_of_wisdom_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_silencer/silencer_glaives_of_wisdom_bh"
		"AbilityTextureName"			"silencer_glaives_of_wisdom"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_AUTOCAST"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"AbilitySound"					"Hero_Silencer.GlaivesOfWisdom"
		"MaxLevel"						"7"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDuration"				"0.0 0.0 0.0 0.0"
		"AbilityCastRange"				"600"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"10 12 14 16 18 20 22"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"intellect_damage_pct"	"15 20 25 30 35 40 45"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_glaives_of_wisdom_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_glaives_of_wisdom_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Silencer: Last Word
	//=================================================================================================================
	"silencer_last_word_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_silencer/silencer_last_word_bh"
		"AbilityTextureName"			"silencer_last_word"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Silencer.LastWord.Target"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"900"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"8"
		"AbilityManaCost"				"120 150 180 210 240 270 300"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.3"	// Applies multiple modifiers


		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"150 200 250 300 350 400 450"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_duration"		"3"
				"LinkedSpecialBonus"	"special_bonus_unique_silencer_last_word_1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"5"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_last_word_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-3"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_last_word_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}
	//=================================================================================================================
	// Silencer: Last Word
	//=================================================================================================================
	"silencer_feed_the_mind"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_silencer/silencer_feed_the_mind"
		"AbilityTextureName"			"custom/silencer_feed_the_mind"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Silencer.LastWord.Target"
		"MaxLevel"						"1"
		"InnateAbility"					"1"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"			"FIELD_INTEGER"
				"boss_int"			"2"
			}
			"02"
			{
				"var_type"			"FIELD_FLOAT"
				"minion_int"		"1"
			}
			"03"
			{
				"var_type"			"FIELD_INTEGER"
				"minion_duration"	"60"
			}
			"04"
			{
				"var_type"			"FIELD_INTEGER"
				"radius"			"900"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Silencer: Global Silence
	//=================================================================================================================
	"silencer_global_silence_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_silencer/silencer_global_silence_bh"
		"AbilityTextureName"			"silencer_global_silence"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"FightRecapLevel"				"2"
		"AbilitySound"					"Hero_Silencer.GlobalSilence.Cast"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3 0.3 0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"100.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"250 375 500 625 750 875"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.5"	// Hits all units on the map.
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_silencer/silencer_global_silence_hero.vpcf"
			"particle"					"particles/units/heroes/hero_silencer/silencer_global_silence.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_silencer.vsndevts"
		}

		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4.5 5.5 6.5 7.5 8.5 9.5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"scepter_duration"		"6 8 9 10 11 12"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_global_silence_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_silencer_global_silence_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
}"DOTAAbilities"
{	
	"skywrath_arcane"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_skywrath/skywrath_arcane.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"7"
		"AbilityTextureName"			"skywrath_mage_arcane_bolt"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"875"
		"AbilityCastPoint"				"0.1"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"2.5"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"70 75 80 85 90 95 100"
		
		"precache"
		{
			"particle"                  "particles/units/heroes/hero_skywrath_mage/skywrath_mage_arcane_bolt.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_skywrath_mage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"damage"						"40 80 120 160 200 240 280"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"int_multiplier"				"160"
				"LinkedSpecialBonus"			"special_bonus_unique_skywrath_arcane_2"
				"CalculateSpellDamageTooltip"	"0"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"speed"							"500"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"vision"						"325"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_arcane_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"100"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"radius"					"325"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_arcane_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"40"
			}
		}
	}
	"skywrath_concussive"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_skywrath/skywrath_concussive.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"7"
		"AbilityTextureName"			"skywrath_mage_concussive_shot"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1600"
		"AbilityCastPoint"				"0.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"18 16 14 12 10 8 6"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"95"
		
		"precache"
		{
			"particle"                  "particles/units/heroes/hero_skywrath_mage/skywrath_mage_concussive_shot.vpcf"
			"particle"  				"particles/units/heroes/hero_skywrath_mage/skywrath_mage_concussive_shot_slow_debuff.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_skywrath_mage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"70 140 210 280 350 420 490"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"250"
				"LinkedSpecialBonus"	"special_bonus_unique_skywrath_concussive_2"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"slow"					"30"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"slow_duration"			"4"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"450"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"vision"				"300"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"search_range"			"1600"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_concussive_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_concussive_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"250"
			}
		}
	}

	"skywrath_seal"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_skywrath/skywrath_seal.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"7"
		"AbilityTextureName"			"skywrath_mage_ancient_seal"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"80 90 100 110 120 130 140"
		
		"precache"
		{
			"particle"                  "particles/units/heroes/hero_skywrath_mage/skywrath_mage_ancient_seal_debuff.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_skywrath_mage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"2 2.5 3 3.5 4 4.5 5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"mr_reduc"				"-35"
				"LinkedSpecialBonus"	"special_bonus_unique_skywrath_seal_1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_seal_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-15"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_seal_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-7"
			}
		}
	}

	"skywrath_int"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_skywrath/skywrath_int.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		"HasScepterUpgrade"				"1"	
		"AbilityTextureName"			"custom/skywrath_mage_int"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_int"				"20"
			}
		}
	}

	"skywrath_flare"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_skywrath/skywrath_flare.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"MaxLevel"						"6"
		"AbilityTextureName"			"skywrath_mage_mystic_flare"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1200"
		"AbilityCastPoint"				"0.1"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"400 700 1000 1300 1600 1900"
		
		"precache"
		{
			"particle"                  "particles/units/heroes/hero_skywrath_mage/skywrath_mage_mystic_flare_ambient.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_skywrath_mage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"damage"						"600 1000 1400 1800 2200 2600"
				"LinkedSpecialBonus"			"special_bonus_unique_skywrath_flare_1"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"2.4"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"170"
				"LinkedSpecialBonus"			"special_bonus_unique_skywrath_flare_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"tick_rate"						"0.1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_flare_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"600"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_skywrath_flare_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"3"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Ability: Slardar Sprint
	//=================================================================================================================
	"slardar_sprint_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slardar/slardar_sprint_bh"
		"AbilityTextureName"			"slardar_sprint"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"Hero_Slardar.Sprint"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.0 0.0 0.0 0.0"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"17"
		
		"AbilitySpecial"
		{			
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_speed"				"20 28 36 44 52 60 68"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"10"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_sprint_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"20"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_sprint_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"value2"					"15"
			}
		}
	}
	//=================================================================================================================
	// Ability: Slardar Slithereen Crush
	//=================================================================================================================
	"slardar_slithereen_crush_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slardar/slardar_slithereen_crush_bh"
		"AbilityTextureName"			"slardar_slithereen_crush"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES_STRONG"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Slardar.Slithereen_Crush"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.35 0.35 0.35 0.35"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"8"
		"AbilityDuration"				"1.25 1.5 1.75 2.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"85 95 105 115 125 135 145"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.5"	// Applies multiple modifiers

		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"crush_radius"					"350"
				"LinkedSpecialBonus"			"special_bonus_unique_slardar_slithereen_crush_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"crush_extra_slow"				"-50"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"crush_attack_slow_tooltip"		"-50"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"crush_extra_slow_duration"		"4.5"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"stun_duration"					"1.5"
			}
			"06"
			{
				"var_type"						"FIELD_INTEGER"
				"damage"						"75 125 175 225 275 325 375"
				"LinkedSpecialBonus"			"special_bonus_unique_slardar_slithereen_crush_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_slithereen_crush_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"600"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"speed"						"900"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_slithereen_crush_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Slardar Bash
	//=================================================================================================================
	"slardar_oathbreaker"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slardar/slardar_oathbreaker"
		"AbilityTextureName"			"slardar_bash"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES_STRONG"
		"AbilitySound"					"Hero_Slardar.Bash"
		"LinkedAbility"					"slardar_oathkeeper"
		"MaxLevel"						"7"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportBonus"		"25"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"chance"				"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"60 80 100 120 140 160 180"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"1.0"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"duration_creep"		"2.0"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_oathbreaker_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_slardar_oathbreaker"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Slardar Bash
	//=================================================================================================================
	"slardar_oathkeeper"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slardar/slardar_oathkeeper"
		"AbilityTextureName"			"custom/slardar_oathkeeper"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"LinkedAbility"					"slardar_oathbreaker"
		"MaxLevel"						"7"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportBonus"		"25"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"3 6 9 12 15 18 21"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_oathkeeper_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_slardar_oathkeeper"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"15"
			}
		}
	}
	//=================================================================================================================
	// Ability: Slardar Amplify Damage
	//=================================================================================================================
	"slardar_amplify_damage_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slardar/slardar_amplify_damage_bh"
		"AbilityTextureName"			"slardar_amplify_damage"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Slardar.Amplify_Damage"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700"
		"AbilityCastPoint"				"0.35 0.35 0.35"
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_4"
		"MaxLevel"						"6"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"35"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"25 50 75 100 125 150 175"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"6.0"	// Very valuable compared to cost.

		
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"armor_reduction"		"-5 -10 -15 -20 -25 -30"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"18"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_amplify_damage_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"350"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slardar_amplify_damage_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Slark: Dark Pact
	//=================================================================================================================
	"slark_dark_pact_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slark/slark_dark_pact_ebf"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Slark.DarkPact.Cast"
		"AbilityTextureName"			"slark_dark_pact"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.001 0.001 0.001 0.001"
		"AbilityCastRange"				"325"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"9.0 8.5 8.0 7.5 7.0 6.5 6.0"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"55 50 45 40 35 30 25"	
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_slark/slark_dark_pact_start.vpcf"
			"particle"					"particles/units/heroes/hero_slark/slark_dark_pact_pulses.vpcf"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"delay"					"1.5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"pulse_duration"		"1.0"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"325"
			}	
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"total_damage"			"75 150 225 300 375 450 525"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"total_pulses"			"10"
			}	
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"pulse_interval"		"0.1"
			}			
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_dark_pact_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.75"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_dark_pact_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1.6"
			}
		}
	}

	//=================================================================================================================
	// Slark: Pounce
	//=================================================================================================================
	"slark_pounce_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slark/slark_pounce_ebf"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Slark.Pounce.Cast"
		"AbilityTextureName"			"slark_pounce"
		"MaxLevel"						"7"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 95 90 85 80 75 70"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_slark/slark_pounce_trail.vpcf"
			"particle"					"particles/units/heroes/hero_slark/slark_pounce_start.vpcf"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"pounce_distance"		"700"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"pounce_speed"			"933.33"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"pounce_radius"			"95"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"pounce_damage"			"40 80 120 160 200 240 280"
				"LinkedSpecialBonus"	"special_bonus_unique_slark_pounce_2"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"leash_duration"		"3.5"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_pounce_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-1.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_pounce_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"150"
			}
		}
	}

	//=================================================================================================================
	// Slark: Essence Shift
	//=================================================================================================================
	"slark_essence_shift_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slark/slark_essence_shift_ebf"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"			"slark_essence_shift"
		"MaxLevel"						"7"	

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"agi_gain"						"3"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"ad_loss"						"-1"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"as_loss"						"-1"
				
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"hp_loss"						"-20"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"ar_loss"						"-0.16"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"20 22.5 25 27.5 30 32.5 35"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_essence_shift_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_essence_shift_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"30"
			}
		}
	}
	
	//=================================================================================================================
	// Slark: Acrobatics
	//=================================================================================================================
	"slark_acrobatics"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slark/slark_acrobatics"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"HasScepterUpgrade"				"1"
		"AbilityTextureName"			"custom/slark_acrobatics"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		"AbilityCooldown"				"6"
	}

	
	
	//=================================================================================================================
	// Slark Shadow Dance
	//=================================================================================================================
	"slark_shadow_dance_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_slark/slark_shadow_dance_ebf"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"FightRecapLevel"				"2"
		"AbilitySound"					"Hero_Slark.ShadowDance"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		"AbilityTextureName"			"slark_shadow_dance"
		"MaxLevel"						"6"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"60.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120 120 120"		

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"4.0"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_movement_speed"		"30 35 40 45 50 55"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_regen_pct"			"3 5 7 9 11 13"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"search_radius"				"750"
				"LinkedSpecialBonus"		"special_bonus_unique_slark_shadow_dance_2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_shadow_dance_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"900"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_slark_shadow_dance_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_slark_shadow_dance_handler"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-750"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"1.5"
			}
		}
	}
}"DOTAAbilities"
{	
	"sniper_shrapnel_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sniper/sniper_shrapnel_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"sniper_shrapnel"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1800"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"23"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_sniper/sniper_shrapnel_launch.vpcf"
			"particle"  				"particles/units/heroes/hero_sniper/sniper_shrapnel.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_sniper.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"15 35 55 75 95 105 125"
				"LinkedSpecialBonus"	"special_bonus_unique_sniper_shrapnel_bh_1"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"delay"					"1.2"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"450"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"slow_movement_speed"	"-15 -20 -25 -30 -35 -40 -45"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"slow_duration"			"2"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_shrapnel_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"100"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_shrapnel_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-10"
			}
		}
	}

	"sniper_headshot_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sniper/sniper_headshot_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"sniper_headshot"
		"MaxLevel"						"7"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"particle"					"particles/units/heroes/hero_sniper/sniper_headshot_slow.vpcf"
			"particle"  				"particles/units/heroes/hero_sniper/sniper_headshot_slow_caster.vpcf"
			"particle"  				"particles/econ/items/sniper/sniper_immortal_cape/sniper_immortal_cape_headshot_slow_caster.vpcf"
			"particle"  				"particles/econ/items/sniper/sniper_immortal_cape/sniper_immortal_cape_headshot_slow_ring.vpcf"		
		}
		
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"chance"					"40"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"15 40 65 90 115 140 165"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"0.5"
				"LinkedSpecialBonus"		"special_bonus_unique_sniper_headshot_bh_2"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"movespeed_slow"			"-100"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"attackspeed_slow"			"-100"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"blind"						"50"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"assassinate_chance"		"25"
			}
			"08"
			{
				"var_type"					"FIELD_FLOAT"
				"assassinate_cooldown"		"50" //percent
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_headshot_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"35"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_headshot_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"3"
			}
		}
	}

	"sniper_rapid_fire"
	{
	    "BaseClass"                     "ability_lua"
	    "ScriptFile"                    "heroes/hero_sniper/sniper_rapid_fire.lua"
	    "AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityTextureName"			"custom/armadillo_swashbuckle"
	    "AbilityUnitDamageType"         "DAMAGE_TYPE_PHYSICAL"
		"MaxLevel"						"7"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"1.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"15"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
		
		"precache"
		{
			"particle"	"particles/units/heroes/hero_sniper/sniper_rapid_fire.vpcf"
			"particle"  "particles/units/heroes/hero_sniper/sniper_base_attack_explosion.vpcf"
			"particle"  "particles/units/heroes/hero_sniper/sniper_rapid_fire_launch.vpcf"

			"soundfile"	"soundevents/game_sounds_heroes/game_sounds_sniper.vsndevts"
		}
		
	    "AbilitySpecial"
	    {
	    	"01"
	        {
	            "var_type"                      "FIELD_FLOAT"
	            "channel"     					"1"
	            "LinkedSpecialBonus"			"special_bonus_unique_sniper_rapid_fire_1"
	        }
	        "02"
	        {
	            "var_type"                      "FIELD_FLOAT"
	            "firerate"     					"0.1 0.09 0.08 0.07 0.06 0.05 0.04"
	        }
			"03"
	        {
	            "var_type"                      "FIELD_INTEGER"
	            "spread_rad"     				"60"
	        }
	        "04"
	        {
	            "var_type"                      "FIELD_INTEGER"
	            "range"     					"1000"
	        }
	        "05"
	        {
	            "var_type"                      "FIELD_INTEGER"
	            "width"     					"50"
	        }
	    }
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_rapid_fire_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}


	"sniper_take_aim_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sniper/sniper_take_aim_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"sniper_take_aim"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"range_damage"			"10"
				"CalculateSpellDamageTooltip"	"0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"range_per_lvl"			"10"
				"LinkedSpecialBonus"	"special_bonus_unique_sniper_take_aim_bh_1"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_take_aim_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"5"
			}
		}
	}

	"sniper_assassinate_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sniper/sniper_assassinate_bh"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"AbilityTextureName"			"sniper_assassinate"
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"6"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"2000 2250 2500 2750 3000 3250"
		"AbilityCastPoint"				"2.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 18 16 14 12 10"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"175 275 375 475 575 675"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"320 485 650 815 980 1145"
			}
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"speed"						"2500"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"range"						"2000 2250 2500 2750 3000 3250"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"ministun_duration"			"0.1"
			}
		}
		
		// Data driven
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_sniper.vsndevts"
			"particle"					"particles/units/heroes/hero_sniper/sniper_assassinate.vpcf"
			"particle"					"particles/units/heroes/hero_sniper/sniper_crosshair.vpcf"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_assassinate_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-1.5"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sniper_assassinate_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"400"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Spectre: Spectral Dagger
	//=================================================================================================================
	"spectre_spectral_dagger_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spectre/spectre_spectral_dagger_bh"
		"AbilityTextureName"			"spectre_spectral_dagger"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Spectre.DaggerCast"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1200"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16.0 16.0 16.0 16.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"130 140 150 160 170 180 190"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.0"	// Modifier has no support value

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"damage"						"50 100 150 200 250 300 350"
				"LinkedSpecialBonus"			"special_bonus_unique_spectre_spectral_dagger_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
				
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_movespeed"				"20"
				"LinkedSpecialBonus"			"special_bonus_unique_spectre_spectral_dagger_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"dagger_path_duration"	"12.0 12.0 12.0 12.0"
			}
			"04"	
			{
				"var_type"				"FIELD_FLOAT"
				"buff_persistence"		"4.0 4.0 4.0 4.0"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"dagger_radius"			"125 125 125 125"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"path_radius"			"175 175 175 175"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_radius"			"200"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"800"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"distance"				"2000"
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"dagger_grace_period"	"2.0"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_spectral_dagger_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedAbilityName"				"spectre_spectral_dagger_bh"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_spectral_dagger_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Spectre: Echo Scream
	//=================================================================================================================
	"spectre_echo_scream"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spectre/spectre_echo_scream"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityTextureName"			"custom/spectre_echo_scream"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spectre.vsndevts"		
			"particle"					"particles/spectre_echo_scream.vpcf"
		}
		
		"AbilityCooldown" 				"15.0"
		"AbilityDuration" 				"5.0"
		"AbilityCastRange"				"800"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"scream_radius"					"475"
				"LinkedSpecialBonus"			"special_bonus_unique_spectre_echo_scream_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"scream_slow"					"-20 -25 -30 -35 -40 -45 -50"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"scream_miss"					"20 25 30 35 40 45 50"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"scream_duration"				"5"
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"scream_damage"					"65 110 155 200 245 290 335"
			}
			"06"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_scream_attacks"		"4"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_echo_scream_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_echo_scream_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Spectre: Desolate
	//=================================================================================================================
	"spectre_desolate_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spectre/spectre_desolate_bh"
		"AbilityTextureName"			"spectre_desolate"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilitySound"					"Hero_Spectre.Desolate"
		"MaxLevel"						"7"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage"				"20 30 40 50 60 70 80"
			}
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage_solo"			"60 90 120 150 180 210 240"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"325"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_desolate_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_desolate_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-0.25"
			}
		}
	}
	//=================================================================================================================
	// Spectre: Dimensional Interjection
	//=================================================================================================================
	"spectre_dimensional_interjection"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spectre/spectre_dimensional_interjection"
		"AbilityTextureName"			"spectre_haunt"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"InnateAbility"					"1"
		"MaxLevel"						"1"
		
		"AbilityCooldown"				"4"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"teleport_distance"			"450"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	"spectre_dispersion_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spectre/spectre_dispersion_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		
		"AbilityTextureName"			"spectre_dispersion"
		"AbilityCastRange"				"1000"
		"MaxLevel"						"6"
		
		"NoThreatFlag"					"1"
		
		"precache"
		{
			"particle"	"particles/units/heroes/hero_spectre/spectre_dispersion.vpcf"
		}
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_INTEGER"
				"min_radius"						"300"
			}
			"02"
			{
				"var_type"							"FIELD_INTEGER"
				"max_radius"						"1200"
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"damage_reflection_pct"				"20 23 26 29 32 35"
				"LinkedSpecialBonus"				"special_bonus_unique_spectre_dispersion_1"
				"CalculateSpellDamageTooltip"		"0"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_dispersion_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_spectre_dispersion_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_spectre_dispersion_aura"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"900"
			}
		}
	}
}"DOTAAbilities"
{	
	"sb_charge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spirit_breaker/sb_charge"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"spirit_breaker_charge_of_darkness"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.25"
		"AbilityCastAnimation"			"ACT_DOTA_SPIRIT_BREAKER_CHARGE_POSE"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_charge.vpcf"
			"particle"  				"particles/units/heroes/hero_ursa/ursa_earthshock_modifier.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spirit_breaker.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"movement_speed"		"600 650 700 750 800 850 900"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"status_resistance"		"50"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bash_radius"			"350"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_radius"			"400"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"vision_duration"		"0.94"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_charge_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_charge_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"sb_haste"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spirit_breaker/sb_haste"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_AURA"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_INVULNERABLE"
		"AbilityTextureName"			"spirit_breaker_empowering_haste"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_haste_owner.vpcf"
			"particle"  				"particles/units/heroes/hero_dark_seer/dark_seer_vacuum.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_shredder.vsndevts"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_pudge.vsndevts"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_meepo.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_self"			"12 16 20 24 28 32 36"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_allies"		"6 8 10 12 14 16 18"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_extra"		"30 40 50 60 70 80 90"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_haste_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_haste_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	
	"sb_bash"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spirit_breaker/sb_bash"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"spirit_breaker_greater_bash"
		"MaxLevel"						"7"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"1.5"

		"precache"
		{
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_greater_bash.vpcf"
			"particle"  				"particles/units/heroes/hero_spirit_breaker/spirit_breaker_jinda_slow.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spirit_breaker.vsndevts"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"chance"				"17"
				"LinkedSpecialBonus"	"special_bonus_unique_spirit_breaker_1"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"damage"				"12 24 36 48 60 72 84"
				"CalculateSpellDamageTooltip"	"1"
				"LinkedSpecialBonus"	"special_bonus_unique_spirit_breaker_3"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"1.4"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"knockback_duration"	"0.5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"knockback_distance"	"125"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"knockback_height"		"50"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"17"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"ms_duration"			"3"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_bash_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_bash_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"sb_armor"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spirit_breaker/sb_armor"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"spirit_breaker_charge_of_darkness_alt"
		"MaxLevel"						"1"
		"InnateAbility"					"1"

		"precache"
		{
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_greater_bash.vpcf"
			"particle"  				"particles/units/heroes/hero_spirit_breaker/spirit_breaker_jinda_slow.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spirit_breaker.vsndevts"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"ms_to_armor"			"4"
			}
		}
	}

	"sb_nether_strike"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_spirit_breaker/sb_nether_strike"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET |DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"spirit_breaker_nether_strike"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700"
		"AbilityCastRangeBuffer"		"500"
		"AbilityCastPoint"				"1.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"100 90 80 70 60 50"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"125 150 175 200 225 250"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_nether_strike_start.vpcf"
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_nether_strike_end.vpcf"
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_nether_strike_begin.vpcf"
			"particle"					"particles/units/heroes/hero_spirit_breaker/spirit_breaker_track_trail.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spirit_breaker.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"150 200 250 300 350 400"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"700"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"range_scepter"			"850"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bash_radius_scepter"	"250"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown_scepter"		"20"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_nether_strike_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"100"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_sb_nether_strike_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Static Remnant
	//=================================================================================================================
	"ss_static_remnant"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_storm_spirit/ss_static_remnant"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"storm_spirit_static_remnant"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"
		"AbilityCastRange"				"235"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"3.5"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
		
		"precache"
		{
			"particle"  				"particles/units/heroes/hero_stormspirit/stormspirit_static_remnant.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_stormspirit.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"damage"						"120 170 220 270 320 370 420"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"search_radius"					"250"	
				"LinkedSpecialBonus"			"special_bonus_unique_ss_static_remnant_1"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"damage_radius"					"300"
				"CalculateSpellDamageTooltip"	"0"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"delay"							"1"
			}
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"12"
			}
			
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_static_remnant_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"750"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_static_remnant_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"20"
			}
		}
	}

	"ss_electric_vortex"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_storm_spirit/ss_electric_vortex"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityTextureName"			"storm_spirit_electric_vortex"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"300 325 350 375 400 425 450"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"22 20 18 16 14 12 10"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"85"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_stormspirit/stormspirit_electric_vortex.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_sven.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range"			"300 325 350 375 400 425 450"		
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"1.4 1.8 2.2 2.6 3 3.4 3.8"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_electric_vortex_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_electric_vortex_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Thunder Punch
	//=================================================================================================================
	"ss_thunder_punch"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_storm_spirit/ss_thunder_punch"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		//"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityTextureName"			"custom/Mandate_of_the_Stormborn_Overload_icon"
		"MaxLevel"						"7"
		
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.5"
		"AbilityCastRange"				"850"
		"AbilityCastAnimation"			"ACT_DOTA_ATTACK"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"5"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"70 72 74 76 78 80 82"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_storm_spirit/ss_thunder_punch.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_stormspirit.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"attack_damage"					"25 40 55 70 85 100 115"
				"CalculateSpellDamageTooltip"	"0"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"mana_cost"						"70 72 74 76 78 80 82"
			}	
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_thunder_punch_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_thunder_punch_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Overload
	//=================================================================================================================
	"ss_overload"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_storm_spirit/ss_overload"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"storm_spirit_overload"
		"MaxLevel"						"1"
		"InnateAbility"					"1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"0"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"

		"precache"
		{	
			"particle"					"particles/units/heroes/hero_stormspirit/stormspirit_overload_ambient.vpcf"
			"particle"					"particles/units/heroes/hero_stormspirit/stormspirit_overload_discharge.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_stormspirit.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"base_damage"			"40"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_lvl"		"5"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300"
			}
		}
	}

	//=================================================================================================================
	// Ball Lightning
	//=================================================================================================================
	"ss_ball_lightning"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_storm_spirit/ss_ball_lightning"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityTextureName"			"storm_spirit_ball_lightning"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"0"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"30"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_stormspirit/stormspirit_ball_lightning.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_stormspirit.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{	
			"01"
			{
				"var_type"							"FIELD_INTEGER"
				"damage"							"8 12 16 20 24 28"		
			}
			"02"
			{
				"var_type"							"FIELD_FLOAT"
				"mana_cost_pct"						"8"		
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"mana_cost_base"					"30"		
			}
			"04"
			{
				"var_type"							"FIELD_INTEGER"
				"speed"								"1250 1875 2500 3125 3750 4375"		
			}
			"05"
			{
				"var_type"							"FIELD_INTEGER"
				"radius"							"200"		
			}
			"06"
			{
				"var_type"							"FIELD_INTEGER"
				"travel_cost_base"					"12"		
			}
			"07"
			{
				"var_type"							"FIELD_FLOAT"
				"travel_cost_percent"				"0.7"		
			}
			"08"
			{
				"var_type"							"FIELD_INTEGER"
				"vision_radius"						"400"		
			}		
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_ball_lightning_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ss_ball_lightning_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Ability: Storm Bolt
	//=================================================================================================================
	"sven_storm_bolt_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sven/sven_storm_bolt_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES_STRONG"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Sven.StormBoltImpact"
		"AbilityTextureName"			"sven_storm_bolt"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"600"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"14"

		// Damage.
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDamage"					"175 250 325 400 475 550 625"
		"AbilityThreat"					"5"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"140"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_sven/sven_spell_storm_bolt.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_sven.vsndevts"
		}
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bolt_speed"			"1000"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bolt_stun_duration"	"1.4"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bolt_aoe"				"255"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_radius"			"225"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	"special_bonus_unique_sven_storm_bolt_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_sven_storm_bolt_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"14"
			}
		}
	}
	"sven_valiant_charge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sven/sven_valiant_charge"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityTextureName"			"custom/sven_valiant_charge"
		"MaxLevel"						"7"
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_sven.vsndevts"
			"particle"			"particles/units/heroes/hero_sven/sven_spell_warcry.vpcf"
			"particle"			"particles/units/heroes/hero_sven/sven_warcry_buff.vpcf"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_earthshaker/earthshaker_totem_leap_blur.vpcf"
		}
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"distance"					"300 450 600 750 900 1050 1200"		
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"knockback"					"300"	
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"armor_damage"				"10 10.75 11.5 12.25 13 13.75 14.5"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"daze_duration"				"5"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"movespeed"					"200"
			}
		}
	}
	"special_bonus_unique_sven_valiant_charge_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_sven_valiant_charge_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"8"
			}
		}
	}
	"sven_warcry_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sven/sven_warcry_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityTextureName"			"sven_warcry"
		"MaxLevel"						"7"
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_sven.vsndevts"
			"particle"			"particles/units/heroes/hero_sven/sven_spell_warcry.vpcf"
			"particle"			"particles/units/heroes/hero_sven/sven_warcry_buff.vpcf"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.0 0.0 0.0 0.0"
		"AbilityCastRange"				"900"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"24.0 22.0 20.0 18.0 16.0 14.0 12.0"
		"AbilityDuration"				"8.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"25 25 25 25"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_INTEGER"
				"warcry_armor"						"5 10 15 20 25 30 35"
				"LinkedSpecialBonus"				"special_bonus_unique_sven_warcry_2"
				"LinkedSpecialBonusOperation"		"SPECIAL_BONUS_MULTIPLY"				
			}
			"02"
			{
				"var_type"							"FIELD_INTEGER"
				"warcry_movespeed"					"35"
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"warcry_radius"						"900"
			}
			"04"
			{
				"var_type"							"FIELD_INTEGER"
				"duration_tooltip"					"8"
			}
		}
	}
	"special_bonus_unique_sven_warcry_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"80"
			}
		}
	}
	"special_bonus_unique_sven_warcry_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"2"
			}
		}
	}
	"sven_great_cleave_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sven/sven_great_cleave_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"sven_great_cleave"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"particle"			"particles/units/heroes/hero_sven/sven_spell_great_cleave.vpcf"
		}
				
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"cleave_starting_width"		"300"
			}			
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"cleave_ending_width"		"400"
			}			
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"cleave_distance"			"550"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"great_cleave_damage"		"50"
			}
		}
	}
	//=================================================================================================================
	// Ability: God's Strength
	//=================================================================================================================
	"sven_gods_strength_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_sven/sven_gods_strength_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Sven.GodsStrength"
		"AbilityTextureName"			"sven_gods_strength"
		"MaxLevel"						"6"

		"HasScepterUpgrade"				"1"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3 0.3 0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"80"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 150 200 250 300 350"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"gods_strength_damage"			"80 120 160 200 240 280"		
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"gods_strength_bonus_str"		"10 20 30 40 50 60 70"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"radius_scepter"				"900"		
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"gods_strength_damage_scepter"	"75 100 125 150 175 200"		
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"duration"						"25"		
			}
		}
	}
	"special_bonus_unique_sven_gods_strength_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_sven_gods_strength_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2"
			}
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"8"
			}
		}
	}
}"DOTAAbilities"
{
	"tech_blasting_off"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"techies_suicide"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_NORMAL_WHEN_STOLEN"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"1.0"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"35"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"700"
				"LinkedSpecialBonus"		"special_bonus_unique_tech_blasting_off_1"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"0.75"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"hp_cost"					"100"
			} 
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"600"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"silence_duration"			"10"
			} 		
		}
	}
	"tech_drastic"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tech/tech_drastic.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PURE"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"techies_focused_detonate"
		"MaxLevel"						"6"

		
		// Time     
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"               "160"
	
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"                  	"FIELD_INTEGER"
				"damage"            			"350 575 800 1025 1250 1375"
			}
			"02"
			{
				"var_type"                  	"FIELD_FLOAT"
				"delay_time" 					"2.5"
			}		
			"03"
			{
				"var_type"                  	"FIELD_FLOAT"
				"fallout_duration"  			"20"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"max_health_damage"				"1"
				"CalculateSpellDamageTooltip"  	"0"
			}	
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_techies/techies_land_mine_explode.vpcf"
			"particle"  "particles/units/heroes/hero_pudge/pudge_rot.vpcf"
			"particle"  "particles/units/heroes/hero_techies/techies_suicide.vpcf"
			"particle"  "particles/units/heroes/hero_techies/techies_remote_mines_detonate.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_techies.vsndevts"
			"soundfile"	"soundevents/game_sounds_custom.vsndevts"
		}
	}
	"tech_mine"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tech/tech_mine.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"techies_land_mines"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110 130 150 170 190 210 230"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"active_delay"				"1.75"
				"LinkedSpecialBonus"		"special_bonus_unique_tech_mine_2"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"100 150 200 250 300 350 400"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"400"
			}	
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_techies/techies_land_mine_explode.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_techies.vsndevts"
		}
	}
	"tech_robo_mine"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tech/tech_robo_mine.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"techies_remote_mines"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30 28 26 24 22 20 18"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"200"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"active_delay"				"1.75"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"150 225 300 375 450 525 600"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"400"
				"LinkedSpecialBonus"		"special_bonus_unique_tech_robo_mine_2"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"move_speed"				"150"
				"LinkedSpecialBonus"		"special_bonus_unique_tech_robo_mine_1"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_techies/techies_remote_mines_detonate.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_techies.vsndevts"
		}
	}
	"tech_stasis_mine"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tech/tech_stasis_mine.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"  
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"techies_stasis_trap"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"80 110 140 170 200 230 260"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"active_delay"				"1.75"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"stun_duration"				"2 2.5 3 3.5 4 4.5 5"
				"LinkedSpecialBonus"		"special_bonus_unique_tech_stasis_mine_2"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"stun_radius"				"400"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"magic_resist"				"0"
				"LinkedSpecialBonus"		"special_bonus_unique_tech_stasis_mine_1"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_techies/techies_stasis_trap_explode.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_techies.vsndevts"
		}
	}
	"tech_suicide"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tech/tech_suicide.lua"
		"AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PURE"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"custom/techies_suicide_old"
		"InnateAbility" 				"1"
		"MaxLevel"						"1"
		"HasScepterUpgrade"				"1"
		"PiercesDisableReduction"		"1"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"                  	"FIELD_INTEGER"
				"damage"            			"17"
				"CalculateSpellDamageTooltip"	"0"
			}
			"02"
			{
				"var_type"                  "FIELD_INTEGER"
				"radius"           			"1000"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_techies/techies_suicide.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_techies.vsndevts"
		}
	}
	"special_bonus_unique_tech_blasting_off_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"5000"
			}
		}
	}
	"special_bonus_unique_tech_mine_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
		}
	}
	"special_bonus_unique_tech_mine_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-1.75"
			}
		}
	}
	"special_bonus_unique_tech_robo_mine_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"500"
			}
		}
	}
	"special_bonus_unique_tech_robo_mine_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"250"
			}
		}
	}
	"special_bonus_unique_tech_stasis_mine_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-25.0"
			}
		}
	}
	"special_bonus_unique_tech_stasis_mine_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"3.0"
			}
		}
	}
}"DOTAAbilities"
{
	"ta_refract"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ta/ta_refract.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET |DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityTextureName"			"templar_assassin_refraction"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastAnimation"			"ACT_DOTA_CAST_REFRACTION"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage"				"20 40 60 80 100 120 140"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"block_count"				"6"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"4"
				"LinkedSpecialBonus"		"special_bonus_unique_ta_refract_2"
			}	
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_templar_assassin/templar_assassin_refraction.vpcf"
			//"particle"  "particle_name"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_templar_assassin.vsndevts"
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_refract_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_refract_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"3"
			}
		}
	}
	"ta_meld"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ta/ta_meld.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET |  DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PHYSICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"templar_assassin_meld"
		"MaxLevel"						"7"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"armor_reduc"				"-2 -4 -6 -8 -10 -12 -14"
				"LinkedSpecialBonus"		"special_bonus_unique_ta_meld_1"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage"				"50 100 150 200 250 300 350"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_range"				"100 150 200 250 300 400 500"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"invis_duration"			"10"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"reduc_duration"			"10"
			}	
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_templar_assassin/templar_assassin_meld.vpcf"
			"particle"  "particles/units/heroes/hero_templar_assassin/templar_assassin_meld_attack.vpcf"
			"particle"  "particles/units/heroes/hero_templar_assassin/templar_assassin_meld_armor.vpcf"
			"particle"  "particles/units/heroes/hero_templar_assassin/templar_meld_overhead.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_templar_assassin.vsndevts"
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_meld_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"-8"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_meld_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	"ta_psi_blades"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ta/ta_psi_blades.lua"
		"AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"templar_assassin_psi_blades"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PHYSICAL" 
		"MaxLevel"						"7"
		//"HasScepterUpgrade"				"1"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_range"					"60 120 180 240 300 360 420"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_range_pct"				"30"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"240 260 280 300 320 340 360"
				"LinkedSpecialBonus"			"special_bonus_unique_ta_psi_blades_1"
			}
			// "04"
			// {
				// "var_type"						"FIELD_INTEGER"
				// "max_units"						"2"
				// "LinkedSpecialBonus"			"special_bonus_unique_ta_psi_blades_1"
			// }
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_templar_assassin/templar_assassin_psi_blade.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_templar_assassin.vsndevts"
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_psi_blades_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"340"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_psi_blades_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1"
			}
		}
	}
	"ta_trap"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ta/ta_trap.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"templar_assassin_psionic_trap"
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"6"
	
		"precache"
		{
			"particle"			"particles/units/heroes/hero_templar_assassin/templar_assassin_trap.vpcf"
			"particle"			"particles/units/heroes/hero_templar_assassin/templar_assassin_trap_explode.vpcf"
			"soundfile" 		"soundevents/game_sounds_heroes/game_sounds_templar_assassin.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"2000"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"
		"AbilityCastPoint"				"0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6.0 5.5 5 4.5 4 3.5"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"15"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"max_traps"						"3 4 4 5 5 6"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"trap_fade_time"				"2.0"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"movement_speed_min_tooltip"	"30"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"movement_speed_max_tooltip"	"50"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"damage_min_tooltip"			"75 100 125 150 175 200"
				"LinkedSpecialBonus"			"special_bonus_unique_ta_trap_1"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"damage_max_tooltip"			"150 200 250 300 350 400"
				"LinkedSpecialBonus"			"special_bonus_unique_ta_trap_1"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"tick_rate"						"0.1"
			}
			"06"
			{
				"var_type"						"FIELD_FLOAT"
				"total_tick_time"				"4.0"
			}
			"07"
			{
				"var_type"						"FIELD_INTEGER"
				"trap_duration_tooltip"			"5"
			}
			"08"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_bonus_radius"			"150"
			}
			"09"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_cooldown_reduction"	"-2"
			}
			"10"
			{
				"var_type"						"FIELD_INTEGER"
				"trap_radius"					"400"
			}
		}
	}
	"ta_trap_spring"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ta/ta_trap_spring.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"1"
		"AbilityTextureName"			"templar_assassin_self_trap"
		//"InnateAbility"					"1"
		
		"precache"
		{
			"particle"			"particles/units/heroes/hero_templar_assassin/templar_assassin_trap_slow.vpcf"
			"particle"			"particles/units/heroes/hero_templar_assassin/templar_assassin_trap_explode.vpcf"
			"soundfile" 		"soundevents/game_sounds_heroes/game_sounds_templar_assassin.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"0.5"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"trap_radius"				"400"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"trap_duration"				"5.0"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_bonus_radius"			"150"
			}
		}
	}
	"ta_trap_tp"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ta/ta_trap_tp.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"1"
		"AbilityTextureName"			"templar_assassin_trap"
		//"InnateAbility"					"1"
		
		
		"precache"
		{
			"particle"			"particles/units/heroes/hero_templar_assassin/templar_assassin_trap_slow.vpcf"
			"particle"			"particles/units/heroes/hero_templar_assassin/templar_assassin_trap_explode.vpcf"
			
			"soundfile" 		"soundevents/game_sounds_heroes/game_sounds_templar_assassin.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"0.5"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"trap_radius"				"400"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"trap_duration"				"5.0"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_bonus_radius"			"150"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_trap_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"200"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ta_trap_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Terrorblade: Conjure Image
	//=================================================================================================================
	"terrorblade_reflection_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_terrorblade/terrorblade_reflection_bh"
		"AbilityTextureName"			"terrorblade_reflection"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilitySound"					"Hero_Terrorblade.ConjureImage"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.15"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"60 75 90 105 110 115 120"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_INTEGER"
				"illusion_count"					"1"
			}
			"02"
			{
				"var_type"							"FIELD_FLOAT"
				"illusion_outgoing_damage"			"40 60 80 100 100 100 100"
				"LinkedSpecialBonus"				"special_bonus_unique_terrorblade_reflection_1"
				"LinkedSpecialBonusOperation"		"SPECIAL_BONUS_MULTIPLY"
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"slow"								"-25 -25 -25 -25 -50 -75 -100"
			}
			"04"
			{
				"var_type"							"FIELD_INTEGER"
				"radius"							"900"
			}
			"05"
			{
				"var_type"							"FIELD_FLOAT"
				"duration"							"5"
			}	
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_reflection_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_reflection_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Terrorblade: Conjure Image
	//=================================================================================================================
	"terrorblade_conjure_image_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_terrorblade/terrorblade_conjure_image_bh"
		"AbilityTextureName"			"terrorblade_conjure_image"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilitySound"					"Hero_Terrorblade.ConjureImage"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.15"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"70"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_FLOAT"
				"illusion_duration"					"34.0"
			}
			"02"
			{
				"var_type"							"FIELD_FLOAT"
				"illusion_outgoing_damage"			"30 40 50 60 70 80 90"
			}
			"03"
			{
				"var_type"							"FIELD_FLOAT"
				"illusion_incoming_damage"			"400.0"
			}	
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_conjure_image_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"-5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_conjure_image_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"10"
			}
		}
	}
	"terrorblade_zeal"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_terrorblade/terrorblade_zeal"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"AbilityTextureName"			"custom/terrorblade_zeal"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
		
		"precache"
		{
			"particle"	"particles/units/heroes/hero_terrorblade/terrorblade_death.vpcf"
			"particle"	"particles/units/heroes/hero_dragon_knight/dragon_knight_transform_blue.vpcf"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"400"
		"AbilityCastPoint"				"0.2"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"illusion_explosion_radius"		"400"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"illusion_explosion_damage"		"100 140 180 220 260 300 340"
				"LinkedSpecialBonus"			"special_bonus_unique_terrorblade_zeal_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}	
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"self_explosion_damage"			"200 280 360 440 520 600 680"
			}		
			"03"
			{
				"var_type"						"FIELD_FLOAT"
				"attackspeed_bonus"				"25 50 75 100 125 150 175"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"health_regen"					"3 6 9 12 15 18 21"
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_cd"					"22"
			}
			"06"
			{
				"var_type"						"FIELD_FLOAT"
				"scepter_duration"				"5"
			}
			"07"
			{
				"var_type"						"FIELD_INTEGER"
				"scepter_increase"				"100"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_zeal_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_zeal_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"3"
			}
		}
	}
	//=================================================================================================================
	// Terrorblade: Metamorphosis
	//=================================================================================================================
	"terrorblade_metamorphosis_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_terrorblade/terrorblade_metamorphosis_bh"
		"AbilityTextureName"			"terrorblade_metamorphosis"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilitySound"					"Hero_Terrorblade.Metamorphosis"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"MaxLevel"						"6"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0."

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"155.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"40 44 48 52 56 60"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"transformation_time"		"0.35"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"base_attack_time"			"1.5"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_range"				"500"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"tooltip_attack_range"		"650"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage"				"40 70 100 130 160 190"
				"LinkedSpecialBonus"		"special_bonus_unique_terrorblade_metamorphosis_2"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"speed_loss"				"-25"
			}
			"08"
			{
				"var_type"					"FIELD_INTEGER"
				"metamorph_aura_tooltip"	"900"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_metamorphosis_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_terrorblade_metamorphosis_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}
}"DOTAAbilities"
{
	"tide_hydro_cannon"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tide/tide_hydro_cannon.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PHYSICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tidehunter_gush"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1800"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90 100 110 120 130 140 150"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"110 160 210 260 310 360 410"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"7"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"move_speed"			"-40"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"reduc_armor"			"-3 -4 -5 -6 -7 -8 -9"
				"LinkedSpecialBonus"	"special_bonus_unique_tide_hydro_cannon_2"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_tidehunter/tidehunter_gush_upgrade.vpcf"
			"particle"  "particles/units/heroes/hero_tidehunter/tidehunter_gush_slow.vpcf"
			"particle"  "particles/units/heroes/hero_tidehunter/tidehunter_gush_splash.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_tidehunter.vsndevts"
		}
	}
	"special_bonus_unique_tide_hydro_cannon_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-5"
			}
		}
	}
	"special_bonus_unique_tide_hydro_cannon_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-6"
			}
		}
	}
	"tide_tongue_whip"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tide/tide_tongue_whip.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/tide_tongue_whip"
		"LevelsBetweenUpgrades"			"5"
		"MaxLevel"						"7"
		"RequiredLevel"					"6"								
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		"AbilityCastRange"				"1000 1100 1200 1300 1400 1500 1600"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110 120 130 140 150 160 170"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"damage"						"160 210 260 310 360 410 460"
				"LinkedSpecialBonus"			"special_bonus_unique_tide_tongue_whip_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"distance"				"1000 1100 1200 1300 1400 1500 1600"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"3200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"width"					"75"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"eat_threshold"			"15"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"eat_health"			"100"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_gain"			"25"
			}
		}

		"precache"
		{
			"particle"  "particles/units/heroes/hero_pudge/pudge_meathook_impact.vpcf"
			"particle"  "particles/units/heroes/hero_tide/tide_tongue_whip/tide_tongue_whip_b.vpcf"

			"soundfile" "soundevents/tide_tongue_whip.vsndevts"
		}
	}
	"special_bonus_unique_tide_tongue_whip_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1.35"
			}
		}
	}
	"special_bonus_unique_tide_tongue_whip_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-40"
			}
		}
	}
	"tide_anchor"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tide/tide_anchor.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PHYSICAL"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tidehunter_anchor_smash"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"60 100 140 180 220 260 300"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_reduction"		"-25"
				"LinkedSpecialBonus"	"special_bonus_unique_tide_anchor_1"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6.0"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"350"
				"LinkedSpecialBonus"	"special_bonus_unique_tide_anchor_2"
			}
		}
	
		"precache"
		{
			"particle"  "particles/units/heroes/hero_tidehunter/tidehunter_anchor_hero.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_tidehunter.vsndevts"
		}
	}
	"special_bonus_unique_tide_anchor_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-10"
			}
		}
	}
	"special_bonus_unique_tide_anchor_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"800"
			}
		}
	}
	"tide_turtle_shell"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tide/tide_turtle_shell.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"tidehunter_kraken_shell"
		"InnateAbility" 				"1"
		"MaxLevel"						"1"
		"HasScepterUpgrade"				"1"
		
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_tidehunter.vsndevts"
			"particle"			"particles/units/heroes/hero_tidehunter/tidehunter_krakenshell_purge.vpcf"
		}
		
		"AbilityCooldown"				"3"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_reduction_mult"	"2.5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"critical_chance"		"30"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"critical_heal"			"12"
			}
		}
	}
	"tide_the_kraken"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tide/tide_the_kraken.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"tidehunter_ravage"
		"MaxLevel"						"6"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"120"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"150 225 300 375 450 525"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"300 420 540 660 680 800"
			}
			"02"
			{	
				"var_type"				"FIELD_FLOAT"
				"duration"				"2.5"
				"LinkedSpecialBonus"	"special_bonus_unique_tide_the_kraken_1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"1000 1250 1500 1750 2000 2250 2500"
			}
		}
	
		"precache"
		{
			"particle"  "particles/econ/events/ti7/shivas_guard_active_ti7.vpcf"
			"particle"  "particles/units/heroes/hero_tidehunter/tidehunter_spell_ravage.vpcf"
			"particle"  "particles/units/heroes/hero_tidehunter/tidehunter_ravage_tentacle_model.vpcf"
			"particle"  "particles/units/heroes/hero_beast/beast_hawk_spirit_aura/beast_hawk_spirit_aura.vpcf"
			
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_tidehunter.vsndevts"
		}
	}
	"special_bonus_unique_tide_the_kraken_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2.5"
			}
		}
	}
	"special_bonus_unique_tide_the_kraken_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1000"
			}
		}
	}
}"DOTAAbilities"
{
	"timbersaw_bonesplitter"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_timbersaw/timbersaw_bonesplitter.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_AUTOCAST | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/shredder_bonesplitter"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"300"
		"AbilityCastPoint"				"0"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"70"
		"AbilityThreat"					"50"		
		
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_shredder.vsndevts"
			"particle" 			"particles/units/heroes/hero_shredder/shredder_whirling_death.vpcf"
			"particle"  		"particles/units/heroes/hero_shredder/shredder_whirling_death_debuff.vpcf"
		}
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"100 150 200 250 300 350 400"
			}			
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"debuff"					"-30"
				"LinkedSpecialBonus"		"special_bonus_unique_timbersaw_bonesplitter_1"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"debuff_duration"			"14.0"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"300"
			}
		}
	}
	"special_bonus_unique_timbersaw_bonesplitter_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-10"
			}
		}
	}
	"special_bonus_unique_timbersaw_bonesplitter_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-3"
			}
		}
	}

	"timbersaw_claw"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_timbersaw/timbersaw_claw.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PURE"   
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"shredder_timber_chain"
		"MaxLevel"						"7"					
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		"AbilityCastRange"				"800 1000 1200 1400 1600 1800 2000"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"4"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"60 70 80 90 100 110 120"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100 140 180 220 260 300 340"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"distance"				"800 1000 1200 1400 1600 1800 2000"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"knockback"				"500"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"1600 2000 2400 2800 3200 3600 4000"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"width"					"150"
			}
		}

		"precache"
		{
			"particle"  "particles/units/heroes/hero_pudge/pudge_meathook_impact.vpcf"
			"particle"  "particles/units/heroes/hero_shredder/shredder_timberchain.vpcf"

			"soundfile" "soundevents/game_sounds_heroes/game_sounds_shredder.vsndevts"
		}
	}

	"special_bonus_unique_timbersaw_claw_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
		}
	}
	"special_bonus_unique_timbersaw_claw_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1"
			}
		}
	}

	"timbersaw_reactive"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_timbersaw/timbersaw_reactive.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityTextureName"			"shredder_reactive_armor"
		"MaxLevel"						"7"							
		
		"AbilityCooldown"				"60"
		"AbilityManaCost"				"200"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_FLOAT"
				"bonus_armor"						"1 1.2 1.4 1.6 1.8 2 2.2"
			}
			"02"
			{
				"var_type"							"FIELD_FLOAT"
				"bonus_hp_regen"					"1 1.15 1.3 1.45 1.6 1.75 1.9"
			}
			"04"
			{
				"var_type"							"FIELD_FLOAT"
				"stack_duration"					"10 13 16 19 22 25 28"
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"stack_limit"						"20"
				"LinkedSpecialBonus"				"special_bonus_unique_timbersaw_reactive_1"
			}
		}
	}

	"special_bonus_unique_timbersaw_reactive_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_timbersaw_reactive_handle"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"10"
			}
		}
	}
	"special_bonus_unique_timbersaw_reactive_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1.5"
			}
		}
	}

	"timbersaw_hylophobia"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_timbersaw/timbersaw_hylophobia.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"shredder_return_chakram"
		"MaxLevel"						"1"
		"InnateAbility"					"1"							

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"bonus_spell_amp"				"2"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"15.0"
			}
		}
	}

	"timbersaw_chak2"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_timbersaw/timbersaw_chak2.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT + DOTA_ABILITY_BEHAVIOR_DIRECTIONAL + DOTA_ABILITY_BEHAVIOR_HIDDEN + DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PURE" 
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"  
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"shredder_chakram_2"
		"MaxLevel"						"6"	
		"IsGrantedByScepter"			"1"
		"HasScepterUpgrade"				"1"							
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		"AbilityCastRange"				"1200"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"8"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 150 200 250 300 350 400"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"260 300 340 380 420 460"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"max_distance"			"1200"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"900"
				"LinkedSpecialBonus"				"special_bonus_unique_timbersaw_chak_1"
			}			
		}

		"precache"
		{
			"particle"  "particles/econ/items/shredder/hero_shredder_icefx/shredder_chakram_ice.vpcf"
			"particle"  "particles/econ/items/shredder/hero_shredder_icefx/shredder_chakram_return_ice.vpcf"
			"particle"  "particles/units/heroes/hero_timbersaw/timbersaw_chak_chain.vpcf"
			"particle"  "particles/units/heroes/hero_shredder/shredder_chakram_hit.vpcf"

			"soundfile" "soundevents/game_sounds_heroes/game_sounds_shredder.vsndevts"
		}
	}

	"timbersaw_chak"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_timbersaw/timbersaw_chak.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PURE" 
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"  
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"shredder_chakram"
		"MaxLevel"						"6"								
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		"AbilityCastRange"				"1200"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"8"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 150 200 250 300 350 400"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"260 300 340 380 420 460"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"max_distance"			"1200"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"900"
				"LinkedSpecialBonus"				"special_bonus_unique_timbersaw_chak_1"
			}			
		}

		"precache"
		{
			"particle"  "particles/units/heroes/hero_shredder/shredder_chakram.vpcf"
			"particle"  "particles/units/heroes/hero_shredder/shredder_chakram_return.vpcf"
			"particle"  "particles/units/heroes/hero_timbersaw/timbersaw_chak_chain.vpcf"
			"particle"  "particles/units/heroes/hero_shredder/shredder_chakram_hit.vpcf"

			"soundfile" "soundevents/game_sounds_heroes/game_sounds_shredder.vsndevts"
		}
	}

	"special_bonus_unique_timbersaw_chak_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-200"
			}
		}
	}
	"special_bonus_unique_timbersaw_chak_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"20"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Tinker: Laser
	//=================================================================================================================
	"tinker_laser_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tinker/tinker_laser_ebf.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tinker_laser"
		"AbilitySound"					"Hero_Tinker.Laser"
		"MaxLevel"						"7"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
			"particle"					"particles/units/heroes/hero_tinker/tinker_laser.vpcf"
			"particle"					"particles/units/heroes/hero_tinker/tinker_laser_debuff.vpcf"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.53"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"
	
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90 110 130 150 170 190 210"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{	
			"03"	
			{
				"var_type"						"FIELD_INTEGER"
				"laser_damage"					"60 120 180 240 300 360 420"
				"LinkedSpecialBonus"			"special_bonus_unique_tinker_laser_ebf_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
		}
	}

	"special_bonus_unique_tinker_laser_ebf_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1.25"
			}
		}
	}

	"special_bonus_unique_tinker_laser_ebf_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"3"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"blind"					"100"
			}
		}
	}

	"tinker_missile_ebf"
	{
	    // General
	    //-------------------------------------------------------------------------------------------------------------
	    "BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tinker/tinker_missile_ebf.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
	    "AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
	    "AbilityTextureName"			"tinker_heat_seeking_missile"
	    "MaxLevel"						"7"
	
	    // Casting
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCastRange"				"4000"
		"AbilityCastPoint"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
	    
	    // Time     
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCooldown"               "20"
	
	    // Cost
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityManaCost"              "80 100 120 140 160 180 200"
	
	    // Special
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilitySpecial"
	    {
	    	"01"
	        {
	            "var_type"          "FIELD_INTEGER"
	            "damage"    		"75 125 175 225 275 325 375"
	        }
	        "02"
	        {
	            "var_type"          "FIELD_INTEGER"
	            "radius"            "4000"
	        }
	        "03"
	        {
	            "var_type"          "FIELD_INTEGER"
	            "speed"             "500 600 700 800 900 1000 1500"
	        }
	        "04"
	        {
	            "var_type"          "FIELD_INTEGER"
	            "targets"           "2 2 3 3 4 4 5"
	            "LinkedSpecialBonus" "special_bonus_unique_tinker_missile_ebf_1"
	        }
	        
	    }
	    
	    // Datadriven
	    //-------------------------------------------------------------------------------------------------------------
	    "precache"
	    {
	        "soundfile"             "soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
	        "particle"              "particles/units/heroes/hero_tinker/tinker_missile.vpcf"
	        "particle"              "particles/units/heroes/hero_tinker/tinker_missle_explosion.vpcf"
	    }
	}

	"special_bonus_unique_tinker_missile_ebf_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"3"
			}
		}
	}

	"special_bonus_unique_tinker_missile_ebf_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"0.25"
			}
		}
	}

	"tinker_march"
	{
	    // General
	    //-------------------------------------------------------------------------------------------------------------
	    "BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tinker/tinker_march.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
	    "AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
	    "AbilityTextureName"			"tinker_march_of_the_machines"
		"MaxLevel"					"7"
	
	    // Casting
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCastRange"				"1800"
		"AbilityCastPoint"				"0.53"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
	    
	    // Time     
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCooldown"               "35"
	
	    // Cost
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityManaCost"               "145 150 165 180 195 210 225"
	
	    // Special
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilitySpecial"
	    {
	    	"01"
			{
				"var_type"				"FIELD_INTEGER"
				"max_robots"			"24"
			}
	    	"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"16 24 32 40 48 56 64"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"1800"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"collision_radius"		"100"
			}			
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"spawn_radius"			"250"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"spawn_rate"			"0.25"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"400"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"splash_radius"			"250"
			}    
	    }
	    
	    // Datadriven
	    //-------------------------------------------------------------------------------------------------------------
	    "precache"
	    {
	        "soundfile"					"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
			"particle" 					"particles/units/heroes/hero_tinker/tinker_machine.vpcf"
	    }
	}

	"special_bonus_unique_tinker_march_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1"
			}
		}
	}

	"special_bonus_unique_tinker_march_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1"
			}
		}
	}

	"tinker_turret"
	{
	    // General
	    //-------------------------------------------------------------------------------------------------------------
	    "BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tinker/tinker_turret.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
	    "AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
	    "AbilityTextureName"			"custom/tinker_turret"
	    "MaxLevel"						"1"
		"InnateAbility"					"1"
		"HasScepterUpgrade"				"1"
	
	    // Casting
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.53"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
	    
	    // Time     
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCooldown"               "35"
	
	    // Cost
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityManaCost"               "250"
	
	    // Special
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilitySpecial"
	    {
	    	"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10.0"
			}   
	    }
	    
	    // Datadriven
	    //-------------------------------------------------------------------------------------------------------------
	    "precache"
	    {
	        "soundfile"					"soundevents/game_sounds_items.vsndevts"
	        "soundfile"					"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
			"particle" 					"particles/units/heroes/hero_tinker/tinker_turret_attack.vpcf"
			"particle"  				"particles/units/heroes/hero_tinker/tinker_turret_ambient.vpcf"
			"particle"  				"particles/dev/library/base_dust_hit.vpcf"
			"particle"              	"particles/units/heroes/hero_tinker/tinker_missile.vpcf"
	        "particle"              	"particles/units/heroes/hero_tinker/tinker_missle_explosion.vpcf"
	    }
	}
	"tinker_rearm_ebf"
	{
	    // General
	    //-------------------------------------------------------------------------------------------------------------
	    "BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tinker/tinker_rearm_ebf.lua"
	    "AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
	    "AbilityType"                   "DOTA_ABILITY_TYPE_ULTIMATE"
	    "AbilityTextureName"			"tinker_rearm"
	    "AbilityCastAnimation"          "ACT_DOTA_CHANNEL_ABILITY_4"
	    "MaxLevel"						"6"
	
	    // Casting
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCastPoint"              "0.53"
	    "AbilityChannelTime"            "4 3.5 3 2.5 2 1.5 1"
		"AbilityManaCost"				"100 200 300 400 500 600 700"

	    
	    // Special
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilitySpecial"
	    {
	        "01"
	        {
	            "var_type"              "FIELD_FLOAT"
	            "channel_tooltip"       "4 3.5 3 2.5 2 1.5 1"
	        }
	    }
	    
	    // Data Driven
	    //-------------------------------------------------------------------------------------------------------------
	    "precache"
	    {
	        "soundfile"             "soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
	        "particle"              "particles/units/heroes/hero_tinker/tinker_rearm.vpcf"
	    }
	}

	"special_bonus_unique_tinker_rearm_ebf_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"0.5"
			}
		}
	}

	"special_bonus_unique_tinker_rearm_ebf_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"amount"				"30"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Avalanche
	//=================================================================================================================
	"tiny_avalanche_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tiny/tiny_avalanche_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tiny_avalanche"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"600"
		"AbilityCastPoint"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 19 18 17 16 15 14"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"120 180 240 300 360 420 480"
				"LinkedSpecialBonus"		"special_bonus_unique_tiny_avalanche_bh_2"
			}
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"275"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"tick_interval"				"0.25"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"num_ticks"					"4"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"stun_duration"				"1"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"projectile_duration"		"0.5"
			}
			
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_tiny/tiny_avalanche_projectile.vpcf"
			"particle"  	"particles/units/heroes/hero_tiny/tiny_avalanche.vpcf"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_tiny.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_avalanche_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-6"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_avalanche_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"125"
			}
		}
	}

	//=================================================================================================================
	// Toss
	//=================================================================================================================
	"tiny_toss_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tiny/tiny_toss_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tiny_toss"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
		"PiercesDisableReduction"		"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1300"
		"AbilityCastPoint"				"0"
		"AbilityCastAnimation"			"ACT_TINY_TOSS"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 19 18 17 16 15 14"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"75 150 225 300 375 450 525"
			}
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"1.3"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"275"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage_pct"		"30"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"1300"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_tiny/tiny_toss_blur.vpcf"
			"particle"  	"particles/units/heroes/hero_tiny/tiny_toss_boulder.vpcf"
			"particle"  	"particles/units/heroes/hero_nyx_assassin/nyx_assassin_impale_burrow_soil.vpcf"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_tiny.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_toss_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_toss_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"3"
			}
		}
	}
	
	//=================================================================================================================
	// Tree
	//=================================================================================================================
	"tiny_tree_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tiny/tiny_tree_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_NONE"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_TREE"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"AbilityTextureName"			"tiny_craggy_exterior"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"	
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"165"
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 19 18 17 16 15 14"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"attack_range"					"350"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_damage"					"25 30 35 40 45 50 55"
				"CalculateSpellDamageTooltip"	"0"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"splash_width"					"200"
			}
			"06"
			{
				"var_type"						"FIELD_INTEGER"
				"splash_range"					"400"
			}
			"07"
			{
				"var_type"						"FIELD_INTEGER"
				"splash_pct"					"50"
				"CalculateSpellDamageTooltip"	"0"
			}
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"speed"							"900"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"range"							"1300"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"splash_radius"					"275"
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"toss_splash_damage"			"60 80 100 120 140 160 180"
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"width"							"150"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_tiny/tiny_tree_proj.vpcf"
			"particle"  	"particles/units/heroes/hero_tiny/tiny_tree_linear_proj.vpcf"
			"particle"  	"particles/units/heroes/hero_tiny/tiny_craggy_cleave.vpcf"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_tiny.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_tree_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-7"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_tree_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"200"
			}
		}
	}
	
	//=================================================================================================================
	// Craggy Exterior
	//=================================================================================================================
	"tiny_craggy_exterior_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tiny/tiny_craggy_exterior_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
	    "AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityTextureName"			"custom/tiny_Craggy_Exterior_icon_old"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"bonus_armor"				"5"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"chance"					"25"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"damage"					"100"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"stun_duration"				"0.5"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_tiny/tiny_craggy_hit.vpcf"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_tiny.vsndevts"
		}
	}

	//=================================================================================================================
	// Craggy Exterior
	//=================================================================================================================
	"tiny_grow_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tiny/tiny_grow_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"tiny_grow"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"	
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_armor"				"5 10 15 20 25 30"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_attack_range"		"50 100 150 200 250 300"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage"				"30 45 60 75 90 105"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"status_resistance"			"20 30 40 50 60 70"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"attack_speed_reduction"	"-20 -35 -50 -65 -80 -95"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_tiny/tiny_transform.vpc"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_tiny.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_grow_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_tiny_grow_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"20"
			}
		}
	}
}"DOTAAbilities"
{	
	"treant_little_tree"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"AbilityTextureName"			"custom/treant_happy_little_tree"
		"ScriptFile"					"heroes/hero_treant_protector/treant_little_tree"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"FightRecapLevel"				"1"
		
		"MaxLevel"						"7"
	
		"precache"
		{
			"particle"	"particles/items_fx/ironwood_tree.vpcf"
		}
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"750"
		"AbilityCastPoint"				"0.2"
		"AbilityCooldown"				"20"
		"AbilityThreat"					"3.5"
		"AbilityManaCost"				"120"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"aura_radius"				"750"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"leech"							"30 40 50 60 70 80 90"
				"LinkedSpecialBonus"			"special_bonus_unique_treant_little_tree_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"heal"							"15 20 25 30 35 40 45"
				"LinkedSpecialBonus"			"special_bonus_unique_treant_little_tree_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"duration"					"20"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_little_tree_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_little_tree_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"5"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"radius"					"500"
			}
		}
	}
	//=================================================================================================================
	// Treant Protector: Overgrowth
	//=================================================================================================================
	"treant_overgrowth_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"AbilityTextureName"			"treant_overgrowth"
		"ScriptFile"					"heroes/hero_treant_protector/treant_overgrowth_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"		
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"		
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"Hero_Treant.Overgrowth.Cast"
		"MaxLevel"						"7"
		
		"AbilityCastPoint"				"0.5 0.5 0.5 0.5"
		"AbilityCastRange"				"750"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"

		"FightRecapLevel"				"2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 18 16 14 12 10 8"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"150 175 200 225 250 275 300"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"2.0 2.5 3.0 3.5 4.0 4.5 5"
			}	
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_overgrowth_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_overgrowth_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Treant Protector: Living Armor
	//=================================================================================================================
	"treant_living_armor_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"AbilityTextureName"			"treant_living_armor"
		"ScriptFile"					"heroes/hero_treant_protector/treant_living_armor_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC | DOTA_UNIT_TARGET_BUILDING"					
		"SpellImmunityType"				"SPELL_IMMUNITY_ALLIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"Hero_Treant.LivingArmor.Cast"

		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.5 0.5 0.5 0.5"
		"FightRecapLevel"				"1"
		"MaxLevel"						"7"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"

		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_count"			"4 5 6 7 8 9 10"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"health_regen"			"4 7 10 13 16 19 22"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"60 65 70 75 80 85 90"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"30.0"
			}

		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_living_armor_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"8"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_living_armor_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"25"
			}
		}
	}
	//=================================================================================================================
	// Treant Protector: Leech Seed
	//=================================================================================================================
	"treant_leech_seed_bh"
	{
		"BaseClass"						"ability_lua"
		"AbilityTextureName"			"treant_leech_seed"
		"ScriptFile"					"heroes/hero_treant_protector/treant_leech_seed_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"	
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"Hero_Treant.LeechSeed.Cast"
		"MaxLevel"						"1"
		"InnateAbility"					"1"

		"AbilityCastRange"				"350"
		"AbilityCastPoint"				"0.5 0.5 0.5 0.5"
		"FightRecapLevel"				"1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"8"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"80 95 110 125 140 155 170"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"leech_heal"					"40"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"leech_damage"					"40"
			}		
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"movement_slow"					"-40"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"500"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"4.5"
			}
			"06"
			{
				"var_type"						"FIELD_INTEGER"
				"projectile_speed"				"400"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Treant Protector: Great Protector
	//=================================================================================================================
	"treant_great_protector"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"AbilityTextureName"			"treant_natures_guise"
		"ScriptFile"					"heroes/hero_treant_protector/treant_great_protector"
	
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"		
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"6"
		
		"AbilityCastPoint"				"0.0"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"60"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"225 275 325 375 425 475"
		
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_treant.vsndevts"
			"particle"			"particles/units/heroes/hero_lone_druid/lone_druid_bear_entangle.vpcf"
			"particle"			"particles/units/heroes/hero_treant/treant_overgrowth_cast.vpcf"
		}
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"20"
			}		
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_strength"				"35 70 95 120 145 170"
				"LinkedSpecialBonus"			"special_bonus_unique_treant_great_protector_1"
			}			
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"move_speed"					"-400"
				"LinkedSpecialBonus"			"special_bonus_unique_treant_great_protector_2"
			}	
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"model_scale"					"25 30 35 40 45 50"
			}	
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"root_duration"					"2"
			}
			"06"
			{
				"var_type"						"FIELD_FLOAT"
				"root_chance"					"15"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_great_protector_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"30"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"armor"						"20"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_treant_great_protector_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"150"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Troll Warlord: Berserker's Rage
	//=================================================================================================================
	"troll_warlord_inflame"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_troll_warlord/troll_warlord_inflame"
		"AbilityTextureName"			"custom/troll_warlord_inflame"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_HIDDEN"
		"MaxLevel"						"7"
		"LinkedAbility"					"troll_warlord_focus"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_dmg"				"20 30 40 50 60 70 80"
				"LinkedSpecialBonus"	"special_bonus_unique_troll_warlord_inflame_1"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"20 35 50 65 80 95 110"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	//=================================================================================================================
	// Troll Warlord: Berserker's Rage
	//=================================================================================================================
	"troll_warlord_focus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_troll_warlord/troll_warlord_focus"
		"AbilityTextureName"			"custom/troll_warlord_focus"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"MaxLevel"						"7"
		"LinkedAbility"					"troll_warlord_inflame"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_range"			"50 75 100 125 150 175 200"
				"LinkedSpecialBonus"	"special_bonus_unique_troll_warlord_focus_1"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_acc"				"10 15 20 25 30 35 40"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	"special_bonus_unique_troll_warlord_inflame_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"40"
			}
		}
	}
	"special_bonus_unique_troll_warlord_focus_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"200"
			}
		}
	}

	//=================================================================================================================
	// Troll Warlord: Whirling Axes (Throw)
	//=================================================================================================================
	"troll_warlord_axe_throw"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_troll_warlord/troll_warlord_axe_throw"
		"AbilityTextureName"			"troll_warlord_whirling_axes_ranged"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_TrollWarlord.WhirlingAxes.Ranged"
		"MaxLevel"						"7"
		"LinkedAbility"					"troll_warlord_whirling_axes"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.2 0.2 0.2 0.2"
  		"AbilityCastAnimation"			"ACT_DOTA_WHIRLING_AXES_RANGED"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"9"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_troll_warlord/troll_warlord_whirling_axe_ranged.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_troll_warlord.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"axe_width"					"100"
			}
			
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"axe_speed"					"1500.0"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"axe_range"					"1000.0"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"axe_damage"				"75 100 125 150 175 200 225"
				"LinkedSpecialBonus"		"special_bonus_unique_troll_warlord_whirling_axes_2"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"axe_slow_duration"			"2.5 3 3.5 4 4.5 5 5.5"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"movement_speed"			"40"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"axe_spread"				"25"
			}
			"08"
			{
				"var_type"					"FIELD_INTEGER"
				"axe_count"					"5"
			}
		}
	}

	//=================================================================================================================
	// Troll Warlord: Whirling Axes Spin
	//=================================================================================================================
	"troll_warlord_whirling_axes"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_troll_warlord/troll_warlord_whirling_axes"
		"AbilityTextureName"			"troll_warlord_whirling_axes_melee"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_HIDDEN"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_TrollWarlord.WhirlingAxes.Melee"
		"MaxLevel"						"7"
		"LinkedAbility"					"troll_warlord_axe_throw"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.0"
 		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"9"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"


		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"100 150 200 250 300 350 400"
				"LinkedSpecialBonus"		"special_bonus_unique_troll_warlord_whirling_axes_2"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"hit_radius"				"100"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"max_range"					"450.0"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"axe_movement_speed"		"1250"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"blind_duration"			"5"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"blind_pct"					"60"
			}
			"07"
			{
				"var_type"					"FIELD_FLOAT"
				"whirl_duration"			"3.0"
			}
		}
	}
	"special_bonus_unique_troll_warlord_whirling_axes_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedAbilityName"				"troll_warlord_axe_throw"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"15"
			}
		}
	}
	"special_bonus_unique_troll_warlord_whirling_axes_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"120"
			}
		}
	}
	
	//=================================================================================================================
	// Troll Warlord: Fervor
	//=================================================================================================================
	"troll_warlord_fervor_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_troll_warlord/troll_warlord_fervor_bh"
		"AbilityTextureName"			"troll_warlord_fervor"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
 		"AbilityCastAnimation"			"ACT_INVALID"
		"MaxLevel"						"7"
		
		// Casting
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"max_stacks"			"3 4 6 7 8 9 10"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"attack_speed"			"-0.05"
			}
		}
	}
	"special_bonus_unique_troll_warlord_fervor_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_troll_warlord_fervor_bh"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"4"
			}
		}
	}
	"special_bonus_unique_troll_warlord_fervor_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_troll_warlord_fervor_bh_handler"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"900"
			}
		}
	}
	//=================================================================================================================
	// Troll Warlord: Berserker's Rage
	//=================================================================================================================
	"troll_warlord_berserkers_rage_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_troll_warlord/troll_warlord_berserkers_rage_bh"
		"AbilityTextureName"			"troll_warlord_berserkers_rage"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_TOGGLE | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilitySound"					"Hero_TrollWarlord.BerserkersRage.Toggle"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_troll_warlord/troll_warlord_berserk_buff.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_troll_warlord.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_hp"				"25"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"6"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"base_attack_time"		"1.55"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	//=================================================================================================================
	//  Troll Warlord: Battle Trance
	//=================================================================================================================
	"troll_warlord_battle_trance_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_troll_warlord/troll_warlord_battle_trance_bh"
		"AbilityTextureName"			"troll_warlord_battle_trance"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"3"
		"FightRecapLevel"				"2"
		"AbilitySound"					"Hero_TrollWarlord.BattleTrance.Cast"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.0 0.0 0.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_troll_warlord/troll_warlord_battletrance_cast.vpcf"
			"particle"					"particles/units/heroes/hero_troll_warlord/troll_warlord_battletrance_buff.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_troll_warlord.vsndevts"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"trance_duration"		"6.5"		
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_speed"			"140 170 200 230 260 290"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"move_speed"			"30 35 40 45 50 55"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"lifesteal"				"50"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"scepter_cleave"		"35"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"scepter_attack_range"	"4000"
			}
		}
	}
	"special_bonus_unique_troll_warlord_battle_trance_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"100"
			}
		}
	}
	"special_bonus_unique_troll_warlord_battle_trance_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"2"
			}
		}
	}
}"DOTAAbilities"
{
	"tusk_ice"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tusk/tusk_ice.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"  
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tusk_ice_shards"
		"MaxLevel"						"7"								
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.1"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		"AbilityCastRange"				"2000"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"13 12 11 10 9 8 7"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 105 110 115 120 125 130"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"angle"						"35"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"70 130 190 250 310 370 430"
				"LinkedSpecialBonus"		"special_bonus_unique_tusk_ice_2"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"7"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"200"
			}			
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"speed"						"1200.0"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"width"						"300"
			}
		}

		"precache"
		{
			"particle"  "particles/units/heroes/hero_tusk/tusk_ice_shards_projectile.vpcf"
			"particle"  "particles/units/heroes/hero_tusk/tusk_shards.vpcf"
			"particle"  "particles/units/heroes/hero_tusk/tusk_ice_shards.vpcf"

			"soundfile" "soundevents/game_sounds_heroes/game_sounds_tusk.vsndevts"
		}
	}

	"special_bonus_unique_tusk_ice_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-3"
			}
		}
	}
	"special_bonus_unique_tusk_ice_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"100"
			}
		}
	}

	"tusk_snow"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tusk/tusk_snow.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"  
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tusk_snowball"
		"MaxLevel"						"7"							
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.1"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		"AbilityCastRange"				"1250"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"15"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"chill_amount"				"10 11 12 13 14 15 16"
			}
			"06"
			{
				"var_type"					"FIELD_FLOAT"
				"chill_duration"			"10.0"
			}
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"100 150 200 250 300 350 400"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"350"
			}			
		}

		"precache"
		{
			"particle"  "particles/units/heroes/hero_lich/lich_frost_nova.vpcf"
			"particle"  "particles/units/heroes/hero_tusk/tusk_snow_copy.vpcf"
			"particle"  "particles/units/heroes/hero_tusk/tusk_shards.vpcf"
			"particle"  "particles/units/heroes/hero_tusk/tusk_ice_shards.vpcf"

			"soundfile" "soundevents/game_sounds_heroes/game_sounds_tusk.vsndevts"
		}
	}

	"special_bonus_unique_tusk_snow_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_tusk_snow_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1.5"
			}
		}
	}

	"tusk_frozen_wasteland"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tusk/tusk_frozen_wasteland.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityTextureName"			"tusk_frozen_sigil"
		"MaxLevel"						"7"							
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.1"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
		"AbilityCastRange"				"600"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"50 46 42 38 34 30 26"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"duration"					"30"
			}			
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"slow_attack"				"-90"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"slow_move"					"-40"
				"LinkedSpecialBonus"		"special_bonus_unique_tusk_frozen_wasteland_1"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage_taken"		"10 20 30 40 50 60 70"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"600"
			}		
		}

		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_tusk.vsndevts"
			"particle"			"particles/units/heroes/hero_tusk/tusk_frozen_sigil.vpcf"
			"particle"			"particles/units/heroes/hero_tusk/tusk_frozen_sigil_status.vpcf"			
		}
	}

	"special_bonus_unique_tusk_frozen_wasteland_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-30"
			}
		}
	}
	"special_bonus_unique_tusk_frozen_wasteland_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"300"
			}
		}
	}

	"tusk_kick"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tusk/tusk_kick.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"  
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"tusk_walrus_kick"
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"1"
		"InnateAbility"					"1"		

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.2"
		"AbilityCastRange"				"150"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"14"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"air_time"					"1.0"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"300"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"push_length"				"1400"
			}			
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"width"						"150"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"scepter_damage"			"150"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"scepter_radius"			"500"
			}
		}

		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_tusk.vsndevts"

			"particle"			"particles/units/heroes/hero_tusk/tusk_walruskick_tgt.vpcf"
			"particle"			"particles/units/heroes/hero_tusk/tusk_walruskick_txt_ult.vpcf"
			"particle"  		"particles/units/heroes/hero_tusk/tusk_walruskick_tgt_status.vpcf"
		}
	}

	"tusk_punch"
	{
		// General
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_tusk/tusk_punch.lua"	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_AUTOCAST"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_PHYSICAL"  
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"tusk_walrus_punch"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE" 
		"MaxLevel"						"6"
		"IsOrb"							"1"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"
		"AbilityCastRange"				"150"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"36 33 30 24 18 12"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50 75 100 125 150 175"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"crit_multiplier"			"350"
				"LinkedSpecialBonus"		"special_bonus_unique_tusk_punch_2"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"air_time"					"1.0"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"2.0 3.0 4.0 5.0 6.0 7.0"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"move_slow"					"-40 -45 -50 -60 -65"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"height"					"650"
			}		
		}

		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_tusk.vsndevts"

			"particle"			"particles/units/heroes/hero_tusk/tusk_walruspunch_txt.vpcf"
			"particle"			"particles/units/heroes/hero_tusk/tusk_walruspunch_txt_ult.vpcf"
			"particle"  		"particles/units/heroes/hero_tusk/tusk_walruspunch_tgt_status.vpcf"	
			"particle"  		"particles/units/heroes/hero_tusk/tusk_walruspunch_tgt.vpcf"
			"particle"  		"particles/units/heroes/hero_tusk/tusk_walruspunch_status.vpcf"
			"particle"  		"particles/units/heroes/hero_tusk/tusk_walruspunch_start.vpcf"
		}
	}

	"special_bonus_unique_tusk_punch_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"10"
			}
		}
	}
	"special_bonus_unique_tusk_punch_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"350"
			}
		}
	}
}"DOTAAbilities"
{	
	"undying_decay_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"             		"ability_lua"
		"ScriptFile"					"heroes/hero_undying/undying_decay_bh"
		"AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitDamageType"         "DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"             "SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"               "2"
		"AbilityTextureName"			"undying_decay"
		"AOERadius"                     "600"
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"650"
		"AbilityCastAnimation"			"ACT_DOTA_UNDYING_DECAY"
		"AbilityCastPoint"            	 "0.45 0.45 0.45 0.45"
		
		// Time     
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"               "10 9 8 7 6 5 4"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"              	"70 85 100 115 130 145 160"	
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_undying/undying_decay.vpcf"
			"particle"					"particles/units/heroes/hero_undying/undying_decay_strength_buff.vpcf"
			"particle"					"particles/units/heroes/hero_undying/undying_decay_strength_xfer.vpcf"
			"particle"					"particles/units/heroes/hero_undying/undying_decay_fakeprojectile_glow.vpcf"
		}
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"325"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"45"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"80 140 200 260 320 380 440"
				"LinkedSpecialBonus"		"special_bonus_unique_undying_decay_1"
			}
			"04"
			{
				"var_type"              	"FIELD_FLOAT"
				"str_per_boss"			 	"4"
			}
			"05"
			{
				"var_type"              	"FIELD_FLOAT"
				"str_per_mob"				"1"
			}
			"06"
			{
				"var_type"              	"FIELD_FLOAT"
				"scepter_str_per_boss"		"10"
			}
		}
		
		// Data driven
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"             "sounds/weapons/hero/undying/decay_cast.vsnd"
			"particle"              "particles/units/heroes/hero_undying/undying_decay.vpcf"       // Attach for core
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_decay_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"180"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_decay_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"5"
			}
		}
	}
	"undying_soul_rip_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_undying/undying_soul_rip_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK | DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"AbilityTextureName"			"undying_soul_rip"
		"MaxLevel"						"7"
		
		"precache"
	    {
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
	        "particle"					"particles/units/heroes/hero_undying/undying_soul_rip_damage.vpcf"
			"particle"					"particles/units/heroes/hero_undying/undying_soul_rip_heal.vpcf"
	    } 
	    
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"9"
		"AbilityCastAnimation"			"ACT_DOTA_UNDYING_SOUL_RIP"
		"AbilityManaCost"				"80"		
		
		"AbilityCastRange"				"1200"
		"AbilityCastPoint"				"0.3 0.3 0.3"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"enemy_hp_loss"					"36 44 52 60 68 76 84"
				"CalculateSpellDamageTooltip"	"1"
				"LinkedSpecialBonus"			"special_bonus_unique_undying_soul_rip_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"health_per_unit"				"18 22 26 30 34 38 42"
				"LinkedSpecialBonus"			"special_bonus_unique_undying_soul_rip_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"range"							"1200"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_soul_rip_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"2.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_soul_rip_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"100"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"10"
			}
		}
	}
	"undying_summon_zombies"
	{
	    // General
	    //-------------------------------------------------------------------------------------------------------------
	    "BaseClass"             		"ability_lua"
		"ScriptFile"					"heroes/hero_undying/undying_summon_zombies"
	    "AbilityBehavior"               "DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
	    "AbilityTextureName"			"custom/undying_summon_zombies"
		"AbilityCastAnimation"			"ACT_DOTA_UNDYING_TOMBSTONE"
	    "MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
	
	    // Precache
	    //-------------------------------------------------------------------------------------------------------------
	    "precache"
	    {
	        "soundfile"     "soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
			"soundfile"     "soundevents/game_sounds_heroes/game_sounds_bane.vsndevts"
	        "particle"      "particles/zombie_grab.vpcf"
			"particle"		"particles/units/heroes/hero_lycan/lycan_summon_wolves_cast.vpcf"
			"particle"		"particles/units/heroes/hero_undying/undying_soul_rip_heal.vpcf"
	    }   
	    
	    // Casting
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCastPoint"              "0.3 0.3 0.3 0.3"
		"AbilityCastRange"				"900"
	
	    // Time     
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityCooldown"               "20"
	
	    // Cost
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilityManaCost"               "35 60 85 110 135 160 185"
	
	    // Special
	    //-------------------------------------------------------------------------------------------------------------
	    "AbilitySpecial"
	    {
	        "01"
	        {
	            "var_type"                  "FIELD_FLOAT"
	            "zombie_duration"           "12"
	        }
			"02"
	        {
	            "var_type"                  "FIELD_FLOAT"
	            "movement_slow"             "-35"
	        }
			"03"
	        {
	            "var_type"                  "FIELD_FLOAT"
	            "turn_slow_tooltip"         "-35"
	        }
			"04"
	        {
	            "var_type"                  "FIELD_FLOAT"
	            "damage"					"35 70 105 140 175 210 245"
	        }
			"05"
	        {
	            "var_type"                  "FIELD_FLOAT"
	            "heal_pct"         			"50"
				"LinkedSpecialBonus"		"special_bonus_unique_undying_summon_zombies_2"
	        }
	    }
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_summon_zombies_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"900"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_summon_zombies_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"75"
			}
		}
	}
	"undying_the_undying"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_undying/undying_the_undying"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"AbilityTextureName"			"undying_tombstone"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		"precache"
	    {
	        "soundfile"     			"sounds/weapons/hero/undying/decay_cast.vsnd"        
	    }
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"damage_pct"					"35"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"health_pct"					"20"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"boss_duration"					"30"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"mob_duration"					"15"
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"900"
			}
		}
	}
	//=================================================================================================================
	// Undying: Flesh Golem
	//=================================================================================================================
	"undying_flesh_golem_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_undying/undying_flesh_golem_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"			"undying_flesh_golem"
		"FightRecapLevel"				"2"
		"AbilitySound"					"Hero_Undying.FleshGolem"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		"MaxLevel"						"6"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"75.0 75.0 75.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 100 100"

		"precache"
		{
			"model"						"models/heroes/undying/undying_flesh_golem.vmdl"
			"particle"					"particles/units/heroes/hero_undying/undying_fg_aura.vpcf"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"30"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"750"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"full_power_radius"			"200"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"max_damage_amp"			"20 25 30 35 40 45"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"min_damage_amp"			"1"
				"LinkedSpecialBonus"		"special_bonus_unique_undying_flesh_golem_1"
			}			
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"max_speed_slow"			"20"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"min_speed_slow"			"1"
				"LinkedSpecialBonus"		"special_bonus_unique_undying_flesh_golem_1"
			}
			"08"
			{
				"var_type"					"FIELD_INTEGER"
				"death_heal"				"10"
			}
			"09"
			{
				"var_type"					"FIELD_INTEGER"
				"death_heal_creep"			"2"
			}		
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_flesh_golem_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"19"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_undying_flesh_golem_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"10"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"2"
			}
		}
	}
}"DOTAAbilities"
{	
	"ursa_earthshock_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ursa/ursa_earthshock_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"ursa_earthshock"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"385"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"5"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_ursa/ursa_earthshock.vpcf"
			"particle"  				"particles/units/heroes/hero_ursa/ursa_earthshock_modifier.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_ursa.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50 100 150 200 250 300 350"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"slow_ms"				"-25 -35 -45 -55 -65 -75 -85"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"385"
				"LinkedSpecialBonus"	"special_bonus_unique_ursa_earthshock_bh_1"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_earthshock_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"600"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_earthshock_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"3"
			}
		}
	}

	"ursa_overpower_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ursa/ursa_overpower_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityTextureName"			"ursa_overpower"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.3"
		//"AbilityCastAnimation"			"ACT_DOTA_OVERRIDE_ABILITY_3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"
		"AbilityDuration"				"20"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
		
		"precache"
		{
			"particle"					"particles/status_fx/status_effect_overpower.vpcf"
			"particle"  				"particles/units/heroes/hero_ursa/ursa_overpower_buff.vpcf"
			"particle"  				"particles/units/heroes/hero_sven/sven_spell_great_cleave_gods_strength.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_ursa.vsndevts"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"max_attacks"				"4 5 6 7 8 9 10"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"attack_speed_bonus_pct"	"400"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"duration"					"20"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_overpower_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_overpower_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1"
			}
		}
	}

	"ursa_lunge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ursa/ursa_lunge"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/ursa_claw"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_GENERIC_CHANNEL_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12 11 10 9 8 7 6"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"150"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_ursa/ursa_lunge.vpcf"
			"particle"  				"particles/units/heroes/hero_ursa/ursa_earthshock_modifier.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_lone_druid.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"reduction"					"-25"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"jump_duration"				"0.5"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"jump_distance"				"500"
				"LinkedSpecialBonus"		"special_bonus_unique_ursa_lunge_1"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_lunge_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"500"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_lunge_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"ursa_fury_swipes_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ursa/ursa_fury_swipes_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"ursa_fury_swipes"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_ursa/ursa_fury_swipes.vpcf"
			"particle"					"particles/units/heroes/hero_ursa/ursa_fury_swipes_debuff.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_ursa.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_ad"				"1.5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5"
			}
		}
	}
	
	"ursa_enrage_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ursa/ursa_enrage_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"			"ursa_enrage"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"50 45 40 35 30 25"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_ursa/ursa_enrage_hero_effect.vpcf"
			"particle"  				"particles/units/heroes/hero_ursa/ursa_enrage_buff.vpcf"
			"particle"  				"particles/units/heroes/hero_ursa/status_effect_ursa_enrage_bh_3.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_ursa.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"fury_multiplier"		"1.4 1.7 2 2.3 2.6 2.9"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4"
				"LinkedSpecialBonus"	"special_bonus_unique_ursa_enrage_bh_1"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"reduction"				"-80"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"status_resist"			"0"
				"LinkedSpecialBonus"	"special_bonus_unique_ursa_enrage_bh_2"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown_scepter"		"-5"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_enrage_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_ursa_enrage_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"80"
			}
		}
	}
}"DOTAAbilities"
{	
	"vengefulspirit_magic_missile_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_vengeful/vengefulspirit_magic_missile_ebf.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/vengefulspirit_magic_barrage"
		"MaxLevel"						"7"
		
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_vengefulspirit.vsndevts"
			"particle"			"particles/units/heroes/hero_vengeful/vengeful_magic_missle.vpcf"		
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"500"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"13 12 11 10 9 8 7"
	
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110 120 130 140 150 160 170"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100 175 250 325 400 475 550"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"250"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"1250"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"1"
				"LinkedSpecialBonus"	"special_bonus_unique_vengefulspirit_magic_missile_ebf_1"
			}
		}
	}

	"special_bonus_unique_vengefulspirit_magic_missile_ebf_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-0.5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"cdr"					"-3"
			}
		}
	}

	"special_bonus_unique_vengefulspirit_magic_missile_ebf_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
		}
	}

	"vengefulspirit_wave"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_vengeful/vengefulspirit_wave.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_DIRECTIONAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"vengefulspirit_wave_of_terror"
		"MaxLevel"						"7"
		
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_vengefulspirit.vsndevts"
			"particle"			"particles/units/heroes/hero_vengeful/vengeful_wave_of_terror.vpcf"
			"particle"  		"particles/units/heroes/hero_vengeful/vengeful_wave_of_terror_orig.vpcf"
			"particle"  		"particles/units/heroes/hero_vengeful/vengeful_wave_of_terror_recipient.vpcf"	
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1400"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10"
	
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"40"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"armor_reduction"		"-3 -4 -5 -6 -7 -8 -9"
				"LinkedSpecialBonus"	"special_bonus_unique_vengefulspirit_wave_1"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"45 70 95 120 145 170 195"
				"LinkedSpecialBonus"	"special_bonus_unique_vengefulspirit_wave_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"8"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"daze_duration"			"1"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"2000"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"width"					"300"
			}			
		}
	}

	"special_bonus_unique_vengefulspirit_wave_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"-3"
			}
		}
	}

	"special_bonus_unique_vengefulspirit_wave_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"2"
			}
		}
	}

	"vengefulspirit_haunt"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_vengeful/vengefulspirit_haunt.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/vengefulspirit_command_aura_huangs"
		"MaxLevel"						"7"
		
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_vengefulspirit.vsndevts"
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_arc_warden.vsndevts"
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_bane.vsndevts"

			"particle"			"particles/units/heroes/hero_vengeful/vengeful_haunt_debuff.vpcf"
			"particle"  		"particles/units/heroes/hero_vengeful/vengeful_haunt.vpcf"		
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"750"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_ATTACK"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"
	
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110 120 130 140 150 160 170"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"6 8 10 12 14 16 18"
				//"LinkedSpecialBonus"	"special_bonus_unique_vengeful_spirit_1"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50 75 100 125 150 175 200"
				//"LinkedSpecialBonus"	"special_bonus_unique_vengeful_spirit_1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"800"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4"
			}
		}
	}

	"special_bonus_unique_vengefulspirit_haunt_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1"
			}
		}
	}

	"special_bonus_unique_vengefulspirit_haunt_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1"
			}
		}
	}

	"vengefulspirit_aura"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_vengeful/vengefulspirit_aura.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityTextureName"			"vengefulspirit_command_aura"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		"HasScepterUpgrade"				"1"	
		
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"particle"			"particles/units/heroes/hero_vengeful/vengeful_venge_aura_cast.vpcf"
		}
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"30"
			}			
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"image_damage_in"		"0"
			}	
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"image_damage_out"		"100"
			}		
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"image_duration"		"12"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"1200"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"scepter_bonus_damage"			"40"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"scepter_image_damage_out"		"250"
			}	
		}
	}

	"vengefulspirit_swap"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_vengeful/vengefulspirit_swap.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"vengefulspirit_nether_swap"
		"MaxLevel"						"6"
		
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_vengefulspirit.vsndevts"
			"particle"			"particles/units/heroes/hero_vengeful/vengeful_nether_swap.vpcf"
			"particle"  		"particles/units/heroes/hero_vengeful/vengeful_nether_swap_target.vpcf"	
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700 900 1200 1500 1800 2100 2400"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CHANNEL_START_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"45"
	
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 150 200 250 300 350 400"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"250 325 400 475 550 625 700"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"daze_duration"			"5.0"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3.0"
				"LinkedSpecialBonus"	"special_bonus_unique_vengefulspirit_swap_2"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"speed"					"100"
			}
		}
	}

	"special_bonus_unique_vengefulspirit_swap_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"250"
			}
		}
	}

	"special_bonus_unique_vengefulspirit_swap_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2"
			}
		}
	}

	"vengefulspirit_nether_furor"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_vengeful/vengefulspirit_nether_furor.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/vengefulspirit_nether_furor"
		"FightRecapLevel"				"1"
		"LevelsBetweenUpgrades"			"5"
		"MaxLevel"						"7"
		"RequiredLevel"					"5"
		"HasScepterUpgrade"				"1"
		
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_vengefulspirit.vsndevts"
			"particle"			"particles/vengefulspirit_nether_furor_debuff.vpcf"		
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"25"
		"AbilityDuration"				"5"
		"HasPureCooldown"				"1"
	
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 150 300 600 900 1200 2400"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"allied_resist"			"-50 -55 -60 -65 -70 -75 -80"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"allied_damage"			"10 12.5 15 17.5 20 22.5 25"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"enemy_amp"				"50 55 60 65 70 75 80"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"enemy_damage"			"-10 -12.5 -15 -17.5 -20 -22.5 -25"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"scepter_cooldown"		"15"
			}
		}
}
}"DOTAAbilities"
{
	"venomancer_poison_nova_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_venomancer/venomancer_poison_nova_ebf"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"FightRecapLevel"				"2"
		"AbilityTextureName"			"venomancer_poison_nova"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_venomancer.vsndevts"
			"particle"			"particles/units/heroes/hero_venomancer/venomancer_poison_nova.vpcf"
			"particle"			"particles/units/heroes/hero_venomancer/venomancer_poison_debuff_nova.vpcf"
			"particle"			"particles/units/heroes/hero_venomancer/venomancer_poison_nova_cast.vpcf"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"70.0 65.0 60.0 55.0 50.0 45.0 40.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"200 300 400 500 600 700"
	
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.0"	// just does damage
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"830"
				"LinkedSpecialBonus"		"special_bonus_unique_venomancer_6"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"start_radius"				"255 255 255"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"16.0"
				"LinkedSpecialBonus"		"special_bonus_unique_venomancer_4"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"30 55 80 105 130 155"
			}
			"06"
			{
				"var_type"					"FIELD_FLOAT"
				"duration_scepter"			"18.0"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"damage_scepter"			"60 85 110 135 160 185"
			}
			"08"
			{
				"var_type"					"FIELD_INTEGER"
				"speed"						"500 500 500"
			}
		}
	}
	"special_bonus_unique_venomancer_poison_nova_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_venomancer_poison_nova_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"1"
			}
		}
	}
	"venomancer_poison_sting_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_venomancer/venomancer_poison_sting_ebf"
		"AbilityType"					"DOTA_ABILITY_TYPE_BASIC"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"venomancer_poison_sting"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"					"particles/status_fx/status_effect_poison_venomancer.vpcf"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"10.0"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage_stack"				"1"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"ms_stack"					"-0.25"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"mr_stack"					"-0.25"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"initial_stacks"			"12 16 20 24 28 32 36"
			}
		}
	}
	"venomancer_venomous_gale_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_venomancer/venomancer_venomous_gale_ebf"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"AbilityTextureName"			"venomancer_venomous_gale"
		"MaxLevel"						"7"
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"soundfile"			"soundevents/game_sounds_heroes/game_sounds_venomancer.vsndevts"
			"particle"			"particles/units/heroes/hero_venomancer/venomancer_venomous_gale.vpcf"
			"particle"			"particles/units/heroes/hero_venomancer/venomancer_gale_poison_debuff.vpcf"
			"particle"			"particles/units/heroes/hero_venomancer/venomancer_venomous_gale_impact.vpcf"
		}
	
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 19 18 17 16 15 14"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"125"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"15.0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"strike_damage"			"100 125 150 175 200 225 250"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"tick_damage"			"20 40 60 80 100 120 140"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"tick_interval"			"3.0"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"movement_slow"			"-50 -50 -50 -50"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"125"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"1200 1200 1200 1200"
			}
		}
	}
	//=================================================================================================================
	// Venomancer: Plague Ward
	//=================================================================================================================
	"venomancer_plague_ward_ebf"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_venomancer/venomancer_plague_ward_ebf"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"venomancer_plague_ward"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"850"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"5.0"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"20"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"40"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"ward_hp"						"3"
				"LinkedSpecialBonus"			"special_bonus_unique_venomancer_plague_ward_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"ward_damage"					"13 22 31 40 49 58 67"
				"LinkedSpecialBonus"			"special_bonus_unique_venomancer_plague_ward_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
				"CalculateSpellDamageTooltip"	"0"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"spawn_count"					"1"
				"LinkedSpecialBonus"			"special_bonus_unique_venomancer_plague_ward_1"
			}
		}
	}
	"special_bonus_unique_venomancer_venomous_gale_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"2"
			}
		}
	}
	"special_bonus_unique_venomancer_venomous_gale_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-8"
			}
		}
	}
	"special_bonus_unique_venomancer_poison_sting_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"500"
			}
		}
	}
	"special_bonus_unique_venomancer_poison_sting_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"300"
			}
		}
	}
	"special_bonus_unique_venomancer_plague_ward_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"3"
			}
		}
	}
	"special_bonus_unique_venomancer_plague_ward_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"3.5"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Viper: Poison Attack
	//=================================================================================================================
	"viper_poison_attack_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_viper/viper_poison_attack_bh"
		"AbilityTextureName"			"viper_poison_attack"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_AUTOCAST"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"hero_viper.poisonAttack.Cast"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"600"
		"AbilityCastPoint"				"0"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"3.0"

		// Damage.
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDamage"					"0 0 0 0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"40"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"3"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"damage"						"0.5 0.75 1.0 1.25 1.5 1.75 2.0"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_movement_speed"			"-35"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_attack_speed"			"-35"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_poison_attack_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_poison_attack_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Viper: Nethertoxin
	//=================================================================================================================
	"viper_nethertoxin_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_viper/viper_nethertoxin_bh"
		"AbilityTextureName"			"viper_nethertoxin"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.2"
		"AbilityCastRange"				"900"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"5.0"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
		
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"damage"						"20 30 40 50 60 70 80"
				"LinkedSpecialBonus"			"special_bonus_unique_viper_nethertoxin_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"300"
				"LinkedSpecialBonus"			"special_bonus_unique_viper_nethertoxin_1"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"magic_resistance"				"-10 -15 -20 -25 -30 -35 -40"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"duration"						"8"
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"projectile_speed"				"2000"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_nethertoxin_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_nethertoxin_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Viper: Corrosive Skin
	//=================================================================================================================
	"viper_corrosive_skin_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_viper/viper_corrosive_skin_bh"
		"AbilityTextureName"			"viper_corrosive_skin"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"hero_viper.CorrosiveSkin"
		"MaxLevel"						"7"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportBonus"		"10"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_FLOAT"
				"duration"							"4.0"
				"LinkedSpecialBonus"				"special_bonus_unique_viper_corrosive_skin_2"
				"LinkedSpecialBonusField"			"value2"
				"LinkedSpecialBonusOperation"		"SPECIAL_BONUS_MULTIPLY"
			}
			"02"
			{
				"var_type"							"FIELD_INTEGER"
				"bonus_attack_speed"				"8 16 24 32 40 48 56"
				"LinkedSpecialBonus"				"special_bonus_unique_viper_corrosive_skin_2"
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"bonus_magic_resistance"			"10 15 20 25 30 35 40"
				"LinkedSpecialBonus"				"special_bonus_unique_viper_corrosive_skin_2"
			}
			"04"
			{
				"var_type"							"FIELD_INTEGER"
				"damage"							"8 16 24 32 40 48 56"
				"LinkedSpecialBonus"				"special_bonus_unique_viper_corrosive_skin_2"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"max_range_tooltip"					"1400"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_corrosive_skin_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_viper_corrosive_skin_bh"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"300"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_corrosive_skin_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedModifierName"			"modifier_viper_corrosive_skin_bh"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"25"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"value2"					"2"
			}
		}
	}
	"viper_venombringer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_viper/viper_venombringer"
		"AbilityTextureName"			"custom/viper_venombringer"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage"			"15"
			}
		}
	}
	"viper_viper_strike_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_viper/viper_viper_strike_bh"
		"AbilityTextureName"			"viper_viper_strike"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET |DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"FightRecapLevel"				"2"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"particle"		"particles/units/heroes/hero_viper/viper_viper_strike_beam.vpcf" // Wonky projectile
			"particle"		"particles/units/heroes/hero_viper/viper_viper_strike_debuff.vpcf" // ?
			"particle"		"particles/units/heroes/hero_viper/viper_viper_strike_warmup.vpcf" //- Seems to be like a "link" meaning it needs the caster #0 and target #1
			"particle"		"particles/status_fx/status_effect_poison_viper.vpcf"
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_viper.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		"AbilityCastRange"				"500"
		"AbilityCastPoint"				"0.3 0.3 0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"70.0 65.0 60.0 55.0 50.0 45.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"125 175 225 275 325 375"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5.1 5.1 5.1"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"60 100 145 195 250 310"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_movement_speed"	"-50 -60 -70 -80 -90 -100"
				"LinkedSpecialBonus"	"special_bonus_unique_viper_viper_strike_2"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"-150 -175 -200 -225 -250 -275"
				"LinkedSpecialBonus"	"special_bonus_unique_viper_viper_strike_2"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown_scepter"		"20.0"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range_scepter"	"900"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"projectile_speed"		"1200"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_viper_strike_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"350"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_viper_viper_strike_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"-60"
			}
		}
	}
}"DOTAAbilities"
{	
	"visage_chill"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_visage/visage_chill"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"visage_grave_chill"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"625"
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16 14 12 10 8 6 4"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90"
	
		"precache"
		{
			"particle"  				"particles/units/heroes/hero_visage/visage_grave_chill_cast_beams.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_grave_chill_caster.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_grave_chill_tgt.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/status_effect_visage_chill_slow.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_visage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_as"					"64"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_ms"					"32"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"1 2 3 4 5 6 7"
				"LinkedSpecialBonus"		"special_bonus_unique_visage_chill_2"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_chill_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"int"						"100"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"chill_amount"				"14"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_chill_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"3"
			}
		}
	}

	"visage_soul"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_visage/visage_soul"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"visage_soul_assumption"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"900"
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"4"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"170 160 150 140 130 120 110"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_visage/visage_soul_counter.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_soul_assumption_bolt.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_soul_assumption_bolt1.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_soul_assumption_bolt2.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_soul_assumption_bolt3.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_soul_assumption_bolt4.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_soul_assumption_bolt5.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_soul_assumption_bolt6.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_visage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"base_damage"				"20"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"charge_damage"				"65"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"stack_limit"				"3 4 5 6 7 8 9"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"health_check"				"5"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_soul_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_soul_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"chance"					"25"
			}
		}
	}

	"visage_cloak"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_visage/visage_cloak"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"visage_gravekeepers_cloak"
		"MaxLevel"						"7"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_visage/visage_cloak_ambient.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_visage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_INTEGER"
				"max_layers"						"4"
			}
			"02"
			{
				"var_type"							"FIELD_INTEGER"
				"reduction"							"8 10 12 14 16 18 20"
			}
			"03"
			{
				"var_type"							"FIELD_FLOAT"
				"recovery_time"						"9 8 7 6 5 4 3"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_cloak_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"25"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_cloak_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"visage_familiars"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_visage/visage_familiars"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityTextureName"			"visage_summon_familiars"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		"HasScepterUpgrade"				"1"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"130"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"150"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_visage/visage_summon_familiars.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_visage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"familiar_count"			"2"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"familiar_hp"				"25"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"familiar_armor"			"5"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"familiar_ad"				"25"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"familiar_count_scepter"	"2"
			}
		}
	}

	"visage_stone"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_visage/visage_stone"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"visage_summon_familiars_stone_form"
		"MaxLevel"						"6"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
		
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_visage/visage_stone_form.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_stone_form_area_energy.vpcf"
			"particle"  				"particles/units/heroes/hero_visage/visage_familiar_transform.vpcf"
			"particle"  				"particles/status_fx/status_effect_statue.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_visage.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{		
			"01"
			{
				"var_type"							"FIELD_INTEGER"
				"damage"							"60 100 140 180 220 260"
			}
			"02"
			{
				"var_type"							"FIELD_FLOAT"
				"duration"							"1.75 2 2.25 2.5 2.75 3"
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"hp_regen"							"8 9 10 11 12 13"
				"LinkedSpecialBonus"				"special_bonus_unique_visage_stone_1"
			}
			"04"
			{
				"var_type"							"FIELD_FLOAT"
				"delay"								"0.55"
			}
			"05"
			{
				"var_type"							"FIELD_INTEGER"
				"radius"							"350"
			}
			"06"
			{
				"var_type"							"FIELD_FLOAT"
				"stone_duration_hero"				"3.0"
			}
			"07"
			{
				"var_type"							"FIELD_FLOAT"
				"stone_duration"					"6.0"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_stone_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"4"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_visage_stone_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
}"DOTAAbilities"
{	
	"warlock_chaos_bolt"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_chaos_bolt.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/warlock_deepfire_ember"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_warlock/warlock_chaos_bolt.vpcf"
			"particle"  				"particles/econ/items/wraith_king/wraith_king_ti6_bracer/wraith_king_ti6_hellfireblast_debuff.vpcf"
			"particle"					"particles/units/heroes/hero_warlock/warlock_imp_bolt.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_abaddon.vsndevts"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_batrider.vsndevts"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.3"
		"AbilityCastAnimation"			"ACT_DOTA_ATTACK"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100 130 160 190 220 250 280"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"chance"				"30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"crit_mult"				"300"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_duration"		"3"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_over_time"		"15 30 45 60 75 100 125"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_amp"			"12.5 15 17.5 20 22.5 25"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_chaos_bolt_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"damage"					"80"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"250"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_chaos_bolt_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-80"
			}
		}
	}

	"warlock_corruption_curse"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_corruption_curse.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"warlock_shadow_word"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_warlock/warlock_shadow_word_debuff.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"450 550 650 750 850 950 1050"
		"AbilityCastPoint"				"0.5"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120 130 140 150 160 170 180"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"15 25 35 45 55 65 75"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"12"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"boss_hp_mult"			"3"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_corruption_curse_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"600"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_corruption_curse_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"15"
			}
		}
	}

	"warlock_sacrifice"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_sacrifice.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_PLAYER_CONTROLLED"
		"AbilityTextureName"			"warlock_fatal_bonds"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_warlock/warlock_sacrifice.vpcf"
			"particle"  				"particles/units/heroes/hero_nevermore/nevermore_shadowraze_debuff.vpcf"
			"particle"  				"particles/units/heroes/hero_life_stealer/life_stealer_infest_emerge_bloody.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_lich.vsndevts"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.5"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120 130 140 150 160 170 180"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"spell_amp"				"15 25 35 45 55 65 75"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"health_regen"			"9 12 15 18 21 24 27"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"golem_health_regen"	"27 36 45 54 63 72 81"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"golem_bonus_damage"	"15 25 35 45 55 65 75"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"8"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_sacrifice_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_sacrifice_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"damage"					"100"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"500"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"golem_mult"				"3"
			}
		}
	}

	"warlock_summon_imp"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_summon_imp.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityTextureName"			"dark_troll_warlord_raise_dead"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		"HasScepterUpgrade"				"1"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_lycan/lycan_summon_wolves_spawn.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_furion.vsndevts"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.5"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"180"
	}

	"warlock_imp_bolt"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_imp_bolt.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"black_dragon_fireball"
		"MaxLevel"						"1"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_warlock/warlock_imp_bolt.vpcf"
			"particle"					"particles/units/heroes/hero_warlock/warlock_chaos_bolt.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_jakiro.vsndevts"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_ATTACK"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"1"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"damage"				"80"
			}
		}
	}

	"warlock_demonic_summons"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_demonic_summons.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"warlock_rain_of_chaos"
		"MaxLevel"						"6"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_warlock/warlock_rain_of_chaos_start.vpcf"
			"particle"  				"particles/units/heroes/hero_warlock/warlock_rain_of_chaos_staff.vpcf"
			"particle"  				"particles/units/heroes/hero_warlock/warlock_rain_of_chaos.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1200"
		"AbilityCastPoint"				"0.5"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"170"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"250 375 500 625 750 875"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"250 375 500 625 750 875"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"stun_radius"			"600"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"golem_number"			"1"
				"LinkedSpecialBonus"	"special_bonus_unique_warlock_demonic_summons_1"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"golem_duration"		"60"
				"LinkedSpecialBonus"	"special_bonus_unique_warlock_demonic_summons_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"golem_damage"			"250 375 500 625 750 875"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"golem_hp"				"250 375 500 625 750 875"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"delay"					"0.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_demonic_summons_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"mr"						"100"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"hp"						"1.5"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"dmg"						"1.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_warlock_demonic_summons_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}

	"warlock_golem_gloves"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_golem_gloves.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"warlock_golem_flaming_fists"
		"MaxLevel"						"6"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_centaur/centaur_warstomp.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"300"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50 60 80 100 120 160"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300"
			}
		}
	}

	"warlock_golem_immolation"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_warlock/warlock_golem_immolation.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_AURA"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"warlock_golem_permanent_immolation"
		"MaxLevel"						"6"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_phoenix/phoenix_sunray_debuff.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_warlock.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"300"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"30 60 90 120 150 180"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// The Swarm
	//=================================================================================================================
	"weaver_swarm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_weaver/weaver_swarm"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"weaver_the_swarm"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"3000"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"44 40 34 30 24 20 14"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_weaver/weaver_swarm_projectile.vpcf"
			"particle"					"particles/generic_gameplay/generic_hit_blood.vpcf"
			"particle"					"particles/units/heroes/hero_weaver/weaver_swarm_debuff.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_weaver.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"			"FIELD_INTEGER"
				"damage"			"18 20 22 24 26 28 30"
			}
			"02"
			{
				"var_type"			"FIELD_FLOAT"
				"attack_rate"		"1.25 1.1 0.95 0.8 0.65 0.5 0.35"
			}
			"03"
			{
				"var_type"			"FIELD_INTEGER"
				"count"				"12"
			}
			"04"
			{
				"var_type"			"FIELD_FLOAT"
				"armor_reduction"	"1"
				"LinkedSpecialBonus"	"special_bonus_unique_weaver_swarm_1"
			}
			"05"
			{
				"var_type"			"FIELD_FLOAT"
				"duration"			"16"
			}
			"06"
			{
				"var_type"			"FIELD_INTEGER"
				"destroy_attacks"	"8"
			}
			"07"
			{
				"var_type"			"FIELD_INTEGER"
				"radius"			"100"
			}
			"08"
			{
				"var_type"			"FIELD_INTEGER"
				"speed"				"600"
			}
			"09"
			{
				"var_type"			"FIELD_INTEGER"
				"spawn_radius"		"300"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_swarm_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_swarm_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"weaver_shukuchi_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_weaver/weaver_shukuchi_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"weaver_shukuchi"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"18 16 14 12 10 8 6"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"70"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_weaver/weaver_shukuchi.vpcf"
			"particle"					"particles/units/heroes/hero_weaver/weaver_shukuchi_damage.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_weaver.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100 125 150 175 200 225 250"
				"LinkedSpecialBonus"	"special_bonus_unique_weaver_shukuchi_bh_1"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4.0"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"50"
				"LinkedSpecialBonus"	"special_bonus_unique_weaver_shukuchi_bh_2"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"175"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"fade_time"				"0.25"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_shukuchi_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"150"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_shukuchi_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}

	//=================================================================================================================
	// Fabric Tear
	//=================================================================================================================
	"weaver_fabric_tear"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_weaver/weaver_fabric_tear"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"greevil_time_lock"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"900"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50 70 90 110 120 130 140"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_weaver/weaver_fabric_tear.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_arc_warden.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"outgoing"				"100 125 150 175 200 225 250"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300"
			}
			
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_fabric_tear_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Geminate Attack
	//=================================================================================================================
	"weaver_geminate"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_weaver/weaver_geminate"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"			"weaver_geminate_attack"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		"AbilityCooldown"				"3"

		"precache"
		{			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_weaver.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"delay"					"0.25"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"max_attacks"			"1"
				"LinkedSpecialBonus"	"special_bonus_unique_weaver_geminate_1"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_geminate_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Time Lapse
	//=================================================================================================================
	"weaver_time"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_weaver/weaver_time"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_MOVEMENT | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"weaver_time_lapse"
		"MaxLevel"						"6"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"150 130 110 90 70 50"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"70 62 55 46 40 30"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_weaver/weaver_timelapse.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_weaver.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{	
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"time"					"5"
			}							
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_time_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_weaver_time_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
}"DOTAAbilities"
{	
	"windrunner_bolas"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_windrunner/windrunner_bolas.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"windrunner_shackleshot"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"		"particles/units/heroes/hero_windrunner/windrunner_shackleshot.vpcf"
			"particle"  	"particles/units/heroes/hero_windrunner/windrunner_shackleshot_pair.vpcf"
			"particle"  	"particles/units/heroes/hero_windrunner/windrunner_shackleshot_pair_tree.vpcf"
			"particle"  	"particles/units/heroes/hero_windrunner/windrunner_shackleshot_single.vpcf"
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_windrunner.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.15"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"18 16 14 12 10 8 6"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"70 85 100 115 130 145 160"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"575"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"2"
				"LinkedSpecialBonus"	"special_bonus_unique_windrunner_bolas_1"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50 75 100 125 150 175 200"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_bolas_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_bolas_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"windrunner_powershot_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_windrunner/windrunner_powershot_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"windrunner_powershot"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"		"particles/units/heroes/hero_windrunner/windrunner_spell_powershot.vpcf"
			"particle"  	"particles/econ/items/windrunner/windrunner_ti6/windrunner_spell_powershot_channel_ti6.vpcf"
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_windrunner.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"2600"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12 11 10 9 8 7 6"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90 100 110 120 130 140 150"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"channel_time"			"2"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"300 400 500 600 700 800 900"
				"LinkedSpecialBonus"	"special_bonus_unique_windrunner_powershot_bh_1"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_reduction"		"20"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"arrow_width"			"125"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"arrow_range"			"2600"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"arrow_speed"			"3000"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"tree_width"			"75"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_radius"			"400"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"vision_duration"		"3.34"
			}
			
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_powershot_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"300"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_powershot_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"windrunner_windrun_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_windrunner/windrunner_windrun_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"windrunner_windrun"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"		"particles/units/heroes/hero_windrunner/windrunner_windrun_slow.vpcf"
			"particle"  	"particles/units/heroes/hero_windrunner/windrunner_windrun.vpcf"
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_windrunner.vsndevts"
		}
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"24"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"buff_duration"				"3 4 5 6 7 8 9"
			}		
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"movespeed_bonus_pct"		"100"		
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"movespeed_bonus_limit"		"200"		
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"evasion"					"100"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"enemy_movespeed_bonus_pct"	"-15 -20 -25 -30 -35 -40 -45"
				"LinkedSpecialBonus"		"special_bonus_unique_windrunner_windrun_bh_1"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"325"
			}
			"07"
			{
				"var_type"					"FIELD_FLOAT"
				"debuff_duration"			"2.5"
			}
				
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_windrun_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-30"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_windrun_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"windrunner_skillshot"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_windrunner/windrunner_skillshot.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"custom/windrunner_skillshot"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		"precache"
		{
			"particle"					"particles/skillshot.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_windrunner.vsndevts"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_ATTACK"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"passive_cooldown"		"2.5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"chance"				"10"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"pierce_pct"			"40"
			}
			// "06"
			// {
			// 	"var_type"				"FIELD_INTEGER"
			// 	"base_damage"			"0"
			// }
		}
	}

	"windrunner_focusfire_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_windrunner/windrunner_focusfire_bh.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"windrunner_focusfire"
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"6"
		
		"precache"
		{
			"particle"		"particles/units/heroes/hero_windrunner/windrunner_windrun_slow.vpcf"
			"particle"  	"particles/units/heroes/hero_windrunner/windrunner_windrun.vpcf"
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_windrunner.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"600"
		"AbilityCastPoint"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75 100 125 150 175 200"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_as"						"400"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"bonus_at"						"-0.2"
			}
			"03"
			{
				"var_type"						"FIELD_FLOAT"
				"dmg_reduction"					"-25"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"scepter_dmg_reduction"			"0"
			}
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"duration"						"8 9 10 11 12 13"
				"LinkedSpecialBonus"			"special_bonus_unique_windrunner_focusfire_bh_2"
			}				
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_focusfire_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_windrunner_focusfire_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"5"
			}
		}
	}

}"DOTAAbilities"
{	
	//=================================================================================================================
	// Arctic Sting
	//=================================================================================================================
	"winterw_arctic_sting"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ww/winterw_arctic_sting.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"winter_wyvern_arctic_burn"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"25"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_range_bonus"	"175 275 375 475 575 675 775"
			}
			"03"
			{
				"var_type"						"FIELD_FLOAT"
				"burn"							"3.0 3.25 3.5 3.75 4 4.25 4.5"
				"CalculateSpellDamageTooltip"	"0"
				"LinkedSpecialBonus"			"special_bonus_unique_winterw_arctic_sting_1"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"burn_duration"			"5.0"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"8.0"
			}			
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_cost_scepter"		"40"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"move_slow"				"-20 -25 -30 -35 -40 -45 -50"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"night_vision_bonus"	"400"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"projectile_speed_bonus""500"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"tree_destruction_radius"	"250"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/status_fx/status_effect_wyvern_arctic_burn.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_arctic_burn_buff.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_arctic_burn_flying.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_arctic_burn_hero_effect.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_arctic_burn_slow.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_arctic_burn_start.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/winter_wyvern_arctic_attack.vpcf"
	
			"soundfile" 	"soundevents/game_sounds_heroes/game_sounds_winter_wyvern.vsndevts"
		}
	}
	//=================================================================================================================
	// Frozen Splinter
	//=================================================================================================================
	"winterw_frozen_splinter"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ww/winterw_frozen_splinter.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"winter_wyvern_splinter_blast"
		"MaxLevel"						"7"
	
		"PiercesDisableReduction"		"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"1200"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"7"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120 130 140 150 160 170 180"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100 180 260 340 420 500 580"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"move_slow"				"-25"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"slow_duration"			"4.0"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"search_radius"			"500"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"1200"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_winter_wyvern/wyvern_splinter.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_splinter_blast.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_splinter_blast_slow.vpcf"	
	
			"soundfile" 	"soundevents/game_sounds_heroes/game_sounds_winter_wyvern.vsndevts"
		}
	}
	//=================================================================================================================
	// Ice Shell
	//=================================================================================================================
	"winterw_ice_shell"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ww/winterw_ice_shell.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityTextureName"			"winter_wyvern_cold_embrace"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"1000"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"24 22.5 21 19.5 18 17.5 16"
		"HasPureCooldown"				"1"
		"AbilityDuration"				"4.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"heal"					"3 3.5 4 4.5 5 5.5 6"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4.0"
				"LinkedSpecialBonus"	"special_bonus_unique_winterw_frozen_ice_shell_1"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_winter_wyvern/wyvern_cold_embrace_buff.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_cold_embrace_start.vpcf"
	
			"soundfile" 	"soundevents/game_sounds_heroes/game_sounds_winter_wyvern.vsndevts"
		}
	}
	//=================================================================================================================
	// Winter's Kiss
	//=================================================================================================================
	"winterw_winters_kiss"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_ww/winterw_winters_kiss.lua"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityTextureName"			"winter_wyvern_winters_curse"
		"MaxLevel"						"6"
	
		"PiercesDisableReduction"		"1"
		"AbilityThreat"					"20.0"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.3"
		"AbilityCastRange"				"800"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"80"
		"HasPureCooldown"				"1"
		"AbilityDuration"				"4.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"250"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_as"				"85"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3 3.25 3.5 3.75 4 4.25 4.5"
				"LinkedSpecialBonus"	"special_bonus_unique_winterw_winters_kiss_1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"500"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_winterw/winterw_winters_kiss_debuff.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_winters_curse_ground.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_winters_curse_ring_rope.vpcf"
			"particle"  	"particles/units/heroes/hero_winter_wyvern/wyvern_winters_curse_buff.vpcf"
			"particle"  	"particles/econ/items/effigies/status_fx_effigies/status_effect_effigy_frosty_dire.vpcf"
	
	
			"soundfile" 	"soundevents/game_sounds_heroes/game_sounds_winter_wyvern.vsndevts"
		}
	}
	"special_bonus_unique_winterw_arctic_sting_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1"
			}
		}
	}
	"special_bonus_unique_winterw_arctic_sting_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"6"
			}
		}
	}
	"special_bonus_unique_winterw_frozen_ice_shell_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"-2.0"
			}
		}
	}
	"special_bonus_unique_winterw_frozen_ice_shell_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"8.0"
			}
		}
	}
	"special_bonus_unique_winterw_frozen_splinter_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1.0"
			}
		}
	}
	"special_bonus_unique_winterw_frozen_splinter_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"4"
			}
		}
	}
	"special_bonus_unique_winterw_winters_kiss_1" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"value"					"1.5"
			}
		}
	}
	"special_bonus_unique_winterw_winters_kiss_2" 
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"value"					"35"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Tether
	//=================================================================================================================
	"wisp_tether_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wisp/wisp_tether_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_NONE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"			"wisp_tether"
		"MaxLevel"						"7"
		"HasScepterUpgrade"				"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"
		"AbilityCastRange"				"1800"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"40"
		
		"precache"
		{
			"particle"  				"particles/units/heroes/hero_wisp/wisp_tether.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_ms"					"5 8 11 14 17 20 23"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"restore_amp"				"105 120 135 150 165 180 195"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"break_distance"			"1200"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"pull_distance"				"350"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_tether_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_tether_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.5"
			}
		}
	}

	//=================================================================================================================
	// Spirits
	//=================================================================================================================
	"wisp_spirits_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wisp/wisp_spirits_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"			"wisp_spirits"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"350"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"40 36 32 28 24 20 16"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_wisp/wisp_guardian_explosion_small.vpcf"
			"particle"  				"particles/units/heroes/hero_wisp/wisp_guardian_explosion.vpcf"
			"particle"  				"particles/units/heroes/hero_wisp/wisp_guardian_.vpcf"
			"particle"  				"particles/econ/items/wisp/wisp_guardian_ti7.vpcf"
			"particle"  				"particles/units/heroes/hero_zuus/zuus_arc_lightning.vpcf"
			"particle"  				"particles/econ/items/wisp/wisp_ambient_ti7_trace.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage_end"				"20 40 60 80 100 120 140"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage_collide"			"10 18 26 34 42 50 58"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"slow_duration"				"0.5"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"explode_radius"			"360"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"hit_radius"				"75"
			}
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"spirit_movement_rate"		"250"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"max_wisps"					"5"
			}
			"08"
			{
				"var_type"					"FIELD_INTEGER"
				"min_radius"				"100"
			}
			"09"
			{
				"var_type"					"FIELD_FLOAT"
				"wisp_regen_rate"			"1"
			}
			"10"
			{
				"var_type"					"FIELD_INTEGER"
				"wisp_regen_cost"			"5 10 15 20 25 30 35"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_spirits_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"25"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"width"						"50"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"tick_rate"					"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_spirits_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"37"
			}
		}
	}

	//=================================================================================================================
	// Overcharge
	//=================================================================================================================
	"wisp_overcharge_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wisp/wisp_overcharge_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_TOGGLE | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		//"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		//"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"			"wisp_overcharge"
		"MaxLevel"						"7"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"2"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_wisp/wisp_overcharge.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_FLOAT"
				"bonus_as"						"40 50 60 70 80 90 100"
				"LinkedSpecialBonus"			"special_bonus_unique_wisp_overcharge_bh_2"
				"LinkedSpecialBonusField"		"as"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"bonus_reduc"					"5 10 15 20 25 30 35"
				"LinkedSpecialBonus"			"special_bonus_unique_wisp_overcharge_bh_2"
				"LinkedSpecialBonusField"		"red"
			}
			"03"
			{
				"var_type"						"FIELD_FLOAT"
				"drain_interval"				"0.2"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"drain_pct"						"6"
				"LinkedSpecialBonus"			"special_bonus_unique_wisp_overcharge_bh_2"
				"LinkedSpecialBonusField"		"drain"
			}	
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_overcharge_bh_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"50"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_overcharge_bh_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"as"						"100"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"red"						"15"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"drain"						"2"
			}
		}
	}

	//=================================================================================================================
	// Spirit In/Out
	//=================================================================================================================
	"wisp_spirit_inout"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wisp/wisp_spirit_inout"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"AbilityTextureName"			"wisp_spirits_out"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
	}

	//=================================================================================================================
	// Reverse Transfer
	//=================================================================================================================
	"wisp_transfer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wisp/wisp_transfer"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"custom/wisp_evil_tether"
		"MaxLevel"						"1"
		"InnateAbility"					"1"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"
		"AbilityCastRange"				"1800"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"40"

		"precache"
		{	
			"particle"					"particles/units/heroes/hero_wisp/wisp_evil_tether.vpcf"
			"particle"					"particles/units/heroes/hero_grimstroke/grimstroke_base_attack.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"health_drain"			"0.1"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"break_distance"			"1200"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"pull_distance"				"350"
			}
		}
	}

	//=================================================================================================================
	// Worm Hole
	//=================================================================================================================
	"wisp_worm_hole"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wisp/wisp_worm_hole"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"wisp_relocate"
		"MaxLevel"						"6"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"
		"AbilityCastRange"				"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"130 120 110 100 90 80"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_wisp/wisp_relocate_channel.vpcf"
			"particle"					"particles/units/heroes/hero_wisp/wisp_worm_hole_end.vpcf"
			"particle"					"particles/econ/items/wisp/wisp_relocate_marker_ti7.vpcf"
			"particle"					"particles/units/heroes/hero_wisp/wisp_relocate_teleport.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{	
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"7 8 9 10 11 12"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"sickness_duration"		"5"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"50"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"channel_time"			"2.7 2.35 2 1.65 1.3 0.95"
			}		
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_worm_hole_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"250"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wisp_worm_hole_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_ms"					"100"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"1"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Witch Doctor: Paralyzing Cask
	//=================================================================================================================
	"witch_doctor_paralyzing_cask_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_witch_doctor/witch_doctor_paralyzing_cask_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES_STRONG"
		"AbilityTextureName"			"witch_doctor_paralyzing_cask"
		"CastFilterRejectCaster" 		"1"
		"FightRecapLevel"				"1"
		"MaxLevel"						"7"
		
		"precache"
		{
			"particle"		"particles/units/heroes/hero_witchdoctor/witchdoctor_cask.vpcf"
			"soundfile"		"sounds/weapons/hero/witch_doctor/cask_cast.vsnd"
			"soundfile"		"sounds/weapons/hero/witch_doctor/cask_bounce01.vsnd"
			"soundfile"		"sounds/weapons/hero/witch_doctor/cask_bounce02.vsnd"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700"
		"AbilityCastPoint"				"0.35 0.35 0.35 0.35"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20.0 19.0 18.0 17.0 16.0 15.0 14.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110 120 130 140 150 160 170"
	
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.5"	// Can have multiple bounces
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"hero_duration"			"1.0"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"creep_duration"		"3.0"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50 70 90 110 130 150 170"
				"LinkedSpecialBonus"	"special_bonus_unique_witch_doctor_paralyzing_cask_2"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"heal"					"25 35 45 55 65 75 65"
				"LinkedSpecialBonus"	"special_bonus_unique_witch_doctor_paralyzing_cask_1"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bounce_range"			"750"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bounces"				"6"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"1200"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"bounce_delay"			"0.3"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_paralyzing_cask_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"35"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_paralyzing_cask_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"120"
			}
		}
	}
	//=================================================================================================================
	// Witch Doctor: Voodoo Restoration
	//=================================================================================================================
	"witch_doctor_voodoo_restoration_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"							"ability_lua"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"					"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_TOGGLE | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
		"SpellDispellableType"				"SPELL_DISPELLABLE_NO"
		"AbilityTextureName"				"witch_doctor_voodoo_restoration"
		"ScriptFile"						"heroes/hero_witch_doctor/witch_doctor_voodoo_restoration_bh"
		"MaxLevel"							"7"
		
		"precache"
		{
			"particle"		"particles/units/heroes/hero_witchdoctor/witchdoctor_voodoo_restoration.vpcf"
			"particle"		"particles/units/heroes/hero_witchdoctor/witchdoctor_voodoo_restoration_flame.vpcf"
			"particle"		"particles/units/heroes/hero_witchdoctor/witchdoctor_ward_attack_explosion.vpcf"
			"soundfile"		"sounds/weapons/hero/witch_doctor/voodoo_restoration.vsnd"
			"soundfile"		"sounds/weapons/hero/witch_doctor/voodoo_restoration_loop.vsnd"
			"soundfile"		"sounds/weapons/hero/witch_doctor/voodoo_restoration_off.vsnd"
		}
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"					"0.0 0.0 0.0 0.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"					"80 100 120 140 160 180 200"	
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"mana_per_second"			"8 16 24 32 40 48 56"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"600"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"heal"						"16 24 32 40 48 56 64"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"int_to_heal"				"20"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"cleanse_interval"			"2.5"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"cleanse_heal"				"3"
			}
			"06"
			{
				"var_type"					"FIELD_FLOAT"
				"heal_interval"				"0.2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_voodoo_restoration_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"5"
			}
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"interval"					"8"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_voodoo_restoration_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Witch Doctor: Maledict
	//=================================================================================================================
	"witch_doctor_maledict_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"AbilityTextureName"			"witch_doctor_maledict"
		"ScriptFile"					"heroes/hero_witch_doctor/witch_doctor_maledict_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_WitchDoctor.Maledict_Cast"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"575"
		"AbilityCastPoint"				"0.35 0.35 0.35 0.35"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20.0"
		"AbilityDuration"				"12.0"


		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"105 110 115 120 125 130 135"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"180"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"duration_tooltip"				"12"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"bonus_damage"					"20"
				"LinkedSpecialBonus"			"special_bonus_unique_witch_doctor_maledict_1"
			}	
			"05"
			{
				"var_type"						"FIELD_INTEGER"
				"burst_interval"				"4"
			}
			"06"
			{
				"var_type"						"FIELD_INTEGER"
				"base_damage"					"7 14 21 28 35 42 49"
				"LinkedSpecialBonus"			"special_bonus_unique_witch_doctor_maledict_2"
				"LinkedSpecialBonusOperation"	"SPECIAL_BONUS_MULTIPLY"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_maledict_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"10"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_maledict_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"2"
			}
		}
	}
	//=================================================================================================================
	// Witch Doctor: Death Ward
	//=================================================================================================================
	"witch_doctor_death_ward_bh"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"AbilityTextureName"			"witch_doctor_death_ward"
		"ScriptFile"					"heroes/hero_witch_doctor/witch_doctor_death_ward_bh"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"	
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"FightRecapLevel"				"2"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
		
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_witchdoctor/witchdoctor_ward_attack.vpcf"
			"particle"		"particles/units/heroes/hero_witchdoctor/witchdoctor_deathward_glow_c.vpcf"
			"particle"		"particles/units/heroes/hero_witchdoctor/witchdoctor_ward_skull.vpcf"
			"particle"		"particles/units/heroes/hero_witchdoctor/witchdoctor_ward_cast_staff_fire.vpcf"
			"soundfile"		"sounds/weapons/hero/witch_doctor/deathward_build.vsnd"
		}
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"750"
		"AbilityCastPoint"				"0.3"
		"AbilityChannelAnimation"		"ACT_DOTA_CAST_ABILITY_4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"60.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"200 200 200"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"120 210 300 390 480 570"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"base_attack_time"		"0.3"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bounces_scepter"		"4"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bounce_radius"			"650"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"int_to_damage"			"100"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"total_duration"		"6"
				"LinkedSpecialBonus"	"special_bonus_unique_witch_doctor_death_ward_2"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_death_ward_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_witch_doctor_death_ward_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"-3"
			}
		}
	}
}"DOTAAbilities"
{	
	"wk_blast"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wraith_king/wk_blast"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"skeleton_king_hellfire_blast"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"525"
		"AbilityCastPoint"				"0.35"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"14 12 10 8 6 4 2"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"95 110 125 140 155 170 185"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_skeletonking/skeletonking_hellfireblast_warmup.vpcf"
			"particle"  				"particles/units/heroes/hero_skeletonking/skeletonking_hellfireblast_debuff.vpcf"
			"particle"  				"particles/units/heroes/hero_skeletonking/skeletonking_hellfireblast.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spirit_breaker.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"dot_damage"			"10 30 50 70 90 110 130"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"1000"
			}			
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"1"
				"LinkedSpecialBonus"	"special_bonus_unique_wk_blast_2"
			}			
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"dot_duration"			"2"
				"LinkedSpecialBonus"	"special_bonus_unique_wk_blast_2"
			}			
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"slow"					"-20 -25 -30 -35 -40 -45 -50"
			}			
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_blast_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_blast_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"wk_vamp"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wraith_king/wk_vamp"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED | DOTA_ABILITY_BEHAVIOR_AURA"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"skeleton_king_vampiric_aura"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"900"
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_undying/undying_soul_rip_damage.vpcf"
			"particle"  				"particles/units/heroes/hero_undying/undying_fg_heal.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_shredder.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"lifesteal"				"18 22 26 30 34 38 42"
				"LinkedSpecialBonus"	"special_bonus_unique_wk_vamp_1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"life_drain"			"10"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"channel_duration"		"2.5"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_vamp_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"25"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_vamp_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	
	"wk_skeletons"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wraith_king/wk_skeletons"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityTextureName"			"custom/wraith_king_summon_skeletons"
		"MaxLevel"						"7"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"1"
		"AbilityCastAnimation"			"ACT_DOTA_VICTORY"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"50"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"30 45 60 75 90 105 120"

		"precache"
		{
			"particle"					"particles/status_fx/status_effect_wraithking_ghosts.vpcf"
			"particle"  				"particles/units/heroes/hero_skeletonking/wraith_king_ghosts_ambient.vpcf"
			"particle"  				"particles/units/heroes/hero_undying/undying_tombstone_spawn.vpcf"
			"particle"  				"particles/items2_fx/ward_spawn_generic.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_skeletonking.vsndevts"
			"soundfile"					"soundevents/game_sounds_creeps.vsndevts"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"skeleton_duration"			"90"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"max_skeleton_charges"		"1 2 3 4 5 6 7"
				"LinkedSpecialBonus"		"special_bonus_unique_wraith_king_5"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"spawn_interval"			"0.25"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"skeleton_damage"			"50"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"skeleton_health"			"25"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_skeletons_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_skeletons_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}

	"wk_crit"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wraith_king/wk_crit"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityTextureName"			"skeleton_king_mortal_strike"
		"MaxLevel"						"1"
		"InnateAbility"					"1"


		"precache"
		{
			"particle"					"particles/vampiric_shockwave.vpcf"
			"particle"  				"particles/units/heroes/hero_spirit_breaker/spirit_breaker_jinda_slow.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spirit_breaker.vsndevts"
		}

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"crit_mult"					"300"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"crit_chance"				"15"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"cleave_damage"				"75"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"cleave_width"				"100"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"cleave_distance"			"500"
			}
		}
	}

	"wk_reincarnation"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_wraith_king/wk_reincarnation"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"skeleton_king_reincarnation"
		"MaxLevel"						"6"
		"HasScepterUpgrade"				"1"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"200 180 160 140 120 40"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"160"
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_skeletonking/wraith_king_reincarnate.vpcf"
			"particle"					"particles/status_fx/status_effect_wraithking_ghosts.vpcf"
			"particle"  				"particles/units/heroes/hero_skeletonking/wraith_king_ghosts_ambient.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_spirit_breaker.vsndevts"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"reincarnate_time"		"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"slow_ms"				"-75"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"slow_as"				"-75"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"scepter_duration"		"7"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"aura_radius"			"1200"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_reincarnation_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_wk_reincarnation_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-10"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Chain Lightning
	//=================================================================================================================
	"zeus_chain_lightning"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_zeus/zeus_chain_lightning.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"zuus_arc_lightning"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"850"
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"1.6"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"65 70 75 80 85 90 95"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"70 95 120 145 170 195 220"
				"LinkedSpecialBonus"	"special_bonus_unique_zeus_chain_lightning_2"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"500"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"jump_count"			"9"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"jump_delay"			"0.25"
			}
			//Talent
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"angle"					"20"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_zuus/zuus_arc_lightning_.vpcf"
			"particle"  	"particles/units/heroes/hero_zuus/zuus_arc_lightning_head.vpcf"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_chain_lightning_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_chain_lightning_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"155"
			}
		}
	}

	//=================================================================================================================
	// Thunder Bolt
	//=================================================================================================================
	"zeus_thunder_bolt"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_zeus/zeus_thunder_bolt.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_OPTIONAL_POINT"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"zuus_lightning_bolt"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700"
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_2"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75 95 115 135 155 175 195"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"125 200 275 350 425 500 575"
			}
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"0.2"
				"LinkedSpecialBonus"	"special_bonus_unique_zeus_thunder_bolt_1"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"search_radius"			"375"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_radius"			"375"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"vision_duration"		"2"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_zuus/zuus_lightning_bolt_start.vpcf"
			"particle"  	"particles/units/heroes/hero_zeus/zeus_thunder_bolt.vpcf"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_thunder_bolt_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"1"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_thunder_bolt_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"						"120"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"5"
			}
		}
	}

	//=================================================================================================================
	// Nimbus Storm
	//=================================================================================================================
	"zeus_nimbus_storm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_zeus/zeus_nimbus_storm.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"  		"DOTA_UNIT_TARGET_TEAM_ENEMY"
	    "AbilityUnitTargetType"  		"DOTA_UNIT_TARGET_ALL"
	    "AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"zuus_cloud"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.2"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"150 175 200 225 250 275 300"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10 13 16 19 22 25 28"
				"LinkedSpecialBonus"	"special_bonus_unique_zeus_nimbus_storm_2"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bolt_interval"			"3"
				"LinkedSpecialBonus"	"special_bonus_unique_zeus_nimbus_storm_1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"500"
			}
		}
	
		"precache"
		{
			"particle" 		"particles/units/heroes/hero_zeus/zeus_cloud.vpcf"
			"particle"  	"particles/units/heroes/hero_zeus/zeus_cloud_strike.vpcf"
	
			"soundfile"		"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_nimbus_storm_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"-1.5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_nimbus_storm_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"12"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"value2"					"-20"
			}
		}
	}

	"zeus_static_field"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_zeus/zeus_static_field.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"	
		"AbilityTextureName"			"zuus_static_field"
		"MaxLevel"						"1"
		"InnateAbility"					"1"
		
		"precache"
		{
			"particle"					"particles/units/heroes/hero_zuus/zuus_static_field.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1200"
		"NoThreatFlag"					"1"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"radius"						"1200"
			}
			"02"
			{
				"var_type"						"FIELD_FLOAT"
				"damage_health_pct"				"1.6"
				"CalculateSpellDamageTooltip"	"0"
			}
			"03"
			{
				"var_type"						"FIELD_FLOAT"
				"minion_damage_pct"				"4.8"
				"CalculateSpellDamageTooltip"	"0"
			}
			"04"
			{
				"var_type"						"FIELD_INTEGER"
				"stack_duration"				"10"
			}
		}
	}
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_static_field_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"0.3"
			}
		}
	}
	//=================================================================================================================
	// Olympus Calls
	//=================================================================================================================
	"zeus_olympus_calls"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"heroes/hero_zeus/zeus_olympus_calls.lua"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"	
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilityTextureName"			"zuus_thundergods_wrath"
		"HasScepterUpgrade"				"1"
		"MaxLevel"						"6"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.4"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"90"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"225 300 375 450 525 600"
	
		// Special
		//-----------------------------------------------------	--------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_spell_amp"		"20 40 60 80 100 120"
				"LinkedSpecialBonus"	"special_bonus_unique_zeus_olympus_calls_2"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"75 125 175 225 275 325"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"750"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"tick_rate"				"0.33"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"scepter_damage"		"135 185 245 305 365 425"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"scepter_radius"		"1500"
			}
		}
	
		"precache"
		{
			"particle"					"particles/units/heroes/hero_zeus/zeus_olympus_calls.vpcf"
			"particle"					"particles/units/heroes/hero_zuus/zuus_thundergods_wrath_start.vpcf"
			"particle"  				"particles/units/heroes/hero_zeus/zeus_olympus_calls_cloud.vpcf"

			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_olympus_calls_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"LinkedAbilityName"				"zeus_olympus_calls"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"25"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_zeus_olympus_calls_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_undefined"
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"						"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_aeon_shard"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6625"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"400"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_aeon_shard"
		"ItemRequirements"
		{
			"01"						"item_gauntlet_of_alacrity;item_gauntlet_of_alacrity;item_gauntlet_of_alacrity;item_gauntlet_of_alacrity"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_aeon_shard"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6626"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_aeon_shard"
		"AbilityTextureName"			"item_moon_shard"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"attackspeed"
		"ItemQuality"					"epic"
		"ItemAliases"					"moon shard;aeon shard"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/heavens_halberd_debuff_disarm.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"100"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"consumed_attackspeed"	"30"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_amulet_of_aggression"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3226"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_amulet_of_aggression"
		"AbilityTextureName"			"custom/amulet_of_aggression"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"220"
		"ItemShopTags"					"aggro;threat"
		"ItemQuality"					"component"
		"ItemAliases"					"amulet of aggression"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"15"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_threat"			"30"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_gain"			"5"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_gain_ult"		"20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_angelic_guard"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3243"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_angelic_guard"
		"ItemRequirements"
		{
			"01"						"item_purging_stone;item_pages_buckler"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_angelic_guard"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3244"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_angelic_guard"
		"AbilityTextureName"			"item_mekansm"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"mana"
		"ItemQuality"					"epic"
		"ItemAliases"					"mekansm;angelic guard"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/mekanism_recipient.vpcf"
			"particle"					"particles/items2_fx/mekanism.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"30"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"heal"					"15"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"block_chance"			"50"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"30"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health_regen"	"3"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"min_heal"				"250"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_antique_battlestaff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7061"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1500"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_antique_battlestaff"
		"ItemRequirements"
		{
			"01"						"item_visionarys_cutlass;item_orb_of_haste;"
		}
	}
	//=================================================================================================================
	// Barrier Leaves
	//=================================================================================================================
	"item_antique_battlestaff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7062"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_antique_battlestaff"
		"AbilityTextureName"			"item_monkey_king_bar"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"525"
		"ItemShopTags"					"damage;mkb"
		"ItemQuality"					"epic"
		"ItemAliases"					"mkb;monkey king bar"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"80"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"15"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"50"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_move_speed"		"10"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"pierce_chance"			"80"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"pierce_damage"			"100"
			}
		}

		"precache"
		{
			"particle"  "particles/items2_fx/pipe_of_insight.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_HERO.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_anvil"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6649"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_anvil"
		"ItemRequirements"
		{
			"01"						"item_titan_blade;item_titan_blade"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_anvil"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6650"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_anvil"
		"AbilityTextureName"			"item_basher"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"strength;damage;bash;stun"
		"ItemQuality"					"epic"
		"ItemAliases"					"skull basher;anvil"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}
		
		"AbilityCooldown"				"3"

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"25"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"25"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bash_chance"			"25"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bash_chance_ranged"	"15"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bash_duration"			"1"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_arcane_accelerator"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3261"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_arcane_accelerator"
		"ItemRequirements"
		{
			"01"						"item_runed_artifact;item_staff_of_magi;item_strange_trinket;item_sorcerers_staff"
		}
	}
	"item_arcane_accelerator"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3262"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_arcane_accelerator"
		"AbilityTextureName"			"item_octarine_core"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"cooldown;reduction"
		"ItemQuality"					"epic"
		"ItemAliases"					"octarine core;arcane_accelerator"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"status_amp"			"15"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_spell_amp"		"15"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"20"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"650"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_arcane_reaver"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6639"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"350"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_arcane_reaver"
		"ItemRequirements"
		{
			"01"						"item_cultists_veil;item_orb_of_essence"
		}
	}
	"item_arcane_reaver"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6640"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_arcane_reaver"
		"AbilityTextureName"			"custom/arcane_reaver_off"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;intellect;mana"
		"ItemQuality"					"epic"
		"ItemAliases"					"refresher orb;arcane reaver"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"minus_damage"			"-100"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_pct"			"100"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_on_hit"			"35"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"magic_resistance"		"-25"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_duration"		"5"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"20"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana_regen"		"5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_archmages_orb"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3239"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_archmages_orb"
		"ItemRequirements"
		{
			"01"						"item_sorcerers_staff;item_ring_of_mana;item_strange_trinket;item_elven_boots"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_archmages_orb"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3240"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_archmages_orb"
		"AbilityTextureName"			"item_arcane_boots"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"400"
		"ItemShopTags"					"mana;spell amp;mr;mana regen"
		"ItemQuality"					"epic"
		"ItemAliases"					"archmages orb;mana boots"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items3_fx/warmage_recipient.vpcf"
			"particle"					"particles/units/heroes/hero_nyx_assassin/nyx_assassin_mana_burn.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"15"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_regen"			"2.5"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"spell_amp"				"20"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"400"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_restore"			"15"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"15"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"min_restore"			"250"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_armor_of_invasion"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7091"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_armor_of_invasion"
		"ItemRequirements"
		{
			"01"						"item_mithril_armor;item_mithril_armor;item_gauntlet_of_alacrity;item_reaping_scythe"
		}
	}
	"item_armor_of_invasion"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7092"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_armor_of_invasion"
		"AbilityTextureName"			"item_assault"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"armor;aura;utility;tank"
		"ItemQuality"					"epic"
		"ItemAliases"					"assault cuirass;ac;armor of invasion"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"10"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage"			"50"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_attack_speed"	"20"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"aura_armor"			"6"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"aura_attack_speed"		"20"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"aura_radius"			"900"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Barrier Leaves
	//=================================================================================================================
	"item_barrier_leaves"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7019"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_barrier_leaves"
		"AbilityTextureName"			"tango"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"525"
		"ItemShopTags"					"barrier"
		"ItemQuality"					"component"
		"ItemAliases"					"faerie fire"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"20"
		"AbilityManaCost"				"75"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"block"					"300"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3.0"
			}
		}

		"precache"
		{
			"particle"  "particles/items2_fx/pipe_of_insight.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_HERO.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_behemoths_heart"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6271"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_heart"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"2050"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_behemoths_heart"
		"ItemRequirements"
		{
			"01"						"item_orb_of_vitality;item_orb_of_vitality"
		}
	}
	"item_behemoths_heart"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3272"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_behemoths_heart"
		"AbilityTextureName"			"item_heart"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"regen;health"
		"ItemQuality"					"epic"
		"ItemAliases"					"heart of tarrasque;behemoths_heart"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"35"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"active_regen"			"5"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"stack_regen"			"10"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"max_stacks"			"15"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"stack_delay"			"1.5"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_per_str"			"0"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"25"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"1200"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_berserkers_cape"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"998"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"950"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_berserkers_cape"
		"ItemRequirements"
		{
			"01"						"item_gauntlet_of_alacrity;item_mithril_armor"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_berserkers_cape_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"999"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_berserkers_cape_2"
		"ItemRequirements"
		{
			"01"						"item_berserkers_cape;item_recipe_berserkers_cape"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_berserkers_cape_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1000"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_berserkers_cape_3"
		"ItemRequirements"
		{
			"01"						"item_berserkers_cape_2;item_recipe_berserkers_cape"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_berserkers_cape_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1001"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_berserkers_cape_4"
		"ItemRequirements"
		{
			"01"						"item_berserkers_cape_3;item_recipe_berserkers_cape"
		}
	}
	"item_berserkers_cape"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1002"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_berserkers_cape"
		"AbilityTextureName"			"custom/berserkers_cape"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"4"
		"ItemBaseLevel"					"1"
		
		"UpgradesItems"					"item_berserkers_cape;item_berserkers_cape_2;item_berserkers_cape_3;item_berserkers_cape_4"
		"UpgradeRecipe"					"item_recipe_berserkers_cape"
		
		"ItemShopTags"					"attack speed;;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"armlet;berserkers cape"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5 6 7 8"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"40 45 50 55"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_drain"			"1.25 2.5 3.75 5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_damage"			"1.5 3 4.5 6"
			}
		}
	}
	"item_berserkers_cape_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1003"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_berserkers_cape"
		"AbilityTextureName"			"custom/berserkers_cape"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"4"
		"ItemBaseLevel"					"2"
		
		"UpgradesItems"					"item_berserkers_cape;item_berserkers_cape_2;item_berserkers_cape_3;item_berserkers_cape_4"
		"UpgradeRecipe"					"item_recipe_berserkers_cape"
		
		"ItemShopTags"					"attack speed;;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"armlet;berserkers cape"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5 6 7 8"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"40 45 50 55"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_drain"			"1.25 2.5 3.75 5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_damage"			"2 4 6 8"
			}
		}
	}
	"item_berserkers_cape_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1004"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_berserkers_cape"
		"AbilityTextureName"			"custom/berserkers_cape"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"4"
		"ItemBaseLevel"					"3"
		
		"UpgradesItems"					"item_berserkers_cape;item_berserkers_cape_2;item_berserkers_cape_3;item_berserkers_cape_4"
		"UpgradeRecipe"					"item_recipe_berserkers_cape"
		
		"ItemShopTags"					"attack speed;;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"armlet;berserkers cape"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5 6 7 8"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"40 45 50 55"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_drain"			"1.25 2.5 3.75 5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_damage"			"2 4 6 8"
			}
		}
	}
	"item_berserkers_cape_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1005"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_berserkers_cape"
		"AbilityTextureName"			"custom/berserkers_cape"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"4"
		"ItemBaseLevel"					"4"
		
		"UpgradesItems"					"item_berserkers_cape;item_berserkers_cape_2;item_berserkers_cape_3;item_berserkers_cape_4"
		"UpgradeRecipe"					"item_recipe_berserkers_cape"
		
		"ItemShopTags"					"attack speed;;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"armlet;berserkers cape"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5 6 7 8"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"40 45 50 55"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_drain"			"1.25 2.5 3.75 5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_damage"			"2 4 6 8"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_blade_of_agility"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6615"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blade_of_agility"
		"AbilityTextureName"			"item_blade_of_alacrity"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"900"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"blade of alacrity;blade of agility"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_blade_of_dominion"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7051"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1000"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_blade_of_dominion"
		"ItemRequirements"
		{
			"01"						"item_angelic_guard;item_incandescance;item_sorcerers_staff"
		}
	}
	"item_blade_of_dominion"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7052"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blade_of_dominion"
		"AbilityTextureName"			"custom/blade_of_dominion"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;slow"
		"ItemQuality"					"epic"
		"ItemAliases"					"radiance;blade_of_dominion"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"100"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"blind"					"33"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_per_second"		"75"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_mana_cost"		"20"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_spell_amp"		"15"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_health_regen"	"5"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"block_chance"			"50"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_block"			"45"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"min_radius"			"300"
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"1200"
			}
			"11"
			{
				"var_type"				"FIELD_FLOAT"
				"radius_change"			"90"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_blade_of_storm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6617"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"2225"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_blade_of_storm"
		"ItemRequirements"
		{
			"01"						"item_broadsword;item_breeze_amulet;item_orb_of_haste;item_iron_rod"
		}
	}
	"item_blade_of_storm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6618"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blade_of_storm"
		"AbilityTextureName"			"item_butterfly"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;crit"
		"ItemQuality"					"epic"
		"ItemAliases"					"crystalys;blade_of_storm"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"35"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_evasion"			"35"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage"			"35"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_agility"			"35"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_movespeed"		"12"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"shock_chance"			"15"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"shock_damage"			"80"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"shock_duration"		"0.5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_blood_gods_mask"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4603"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_blood_gods_mask"
		"ItemRequirements"
		{
			"01"						"item_crystal_of_life;item_sanguine_mask"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_blood_gods_mask_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1006"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_blood_gods_mask_2"
		"ItemRequirements"
		{
			"01"						"item_blood_gods_mask;item_recipe_blood_gods_mask"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_blood_gods_mask_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1007"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_blood_gods_mask_3"
		"ItemRequirements"
		{
			"01"						"item_blood_gods_mask_2;item_recipe_blood_gods_mask"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_blood_gods_mask_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1008"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_blood_gods_mask_4"
		"ItemRequirements"
		{
			"01"						"item_blood_gods_mask_3;item_recipe_blood_gods_mask"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_blood_gods_mask_5"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1009"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_blood_gods_mask_5"
		"ItemRequirements"
		{
			"01"						"item_blood_gods_mask_4;item_recipe_blood_gods_mask"
		}
	}
	"item_blood_gods_mask"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4604"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blood_gods_mask"
		"AbilityTextureName"			"item_mask_of_madness"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"1"
		
		"UpgradesItems"					"item_blood_gods_mask;item_blood_gods_mask_2;item_blood_gods_mask_3;item_blood_gods_mask_4;item_blood_gods_mask_5"
		"UpgradeRecipe"					"item_recipe_blood_gods_mask"
		
		"ItemShopTags"					"attack speed;lifesteal"
		"ItemQuality"					"epic"
		"ItemAliases"					"mask of madness;blood gods mask"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items2_fx/mask_of_madness.vpcf"
			"particle"					"particles/status_fx/status_effect_beserkers_call.vpcf"
		}
		
		"AbilityCooldown"				"30"
		"AbilitySharedCooldown"			"mask"
		"AbilityManaCost"				"60"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"12 13 14 15 16"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"18 19 20 21 22"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"400 500 600 700 800"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_attack_speed"	"125 150 175 200 225"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_bonus_damage"	"20 25 30 35 40"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_movement_speed"	"20 25 30 35 40"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"active_damage_taken"	"20 25 30 35 40"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6.0"
			}
		}
	}
	"item_blood_gods_mask_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1010"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blood_gods_mask"
		"AbilityTextureName"			"item_mask_of_madness"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"2"
		
		"UpgradesItems"					"item_blood_gods_mask;item_blood_gods_mask_2;item_blood_gods_mask_3;item_blood_gods_mask_4;item_blood_gods_mask_5"
		"UpgradeRecipe"					"item_recipe_blood_gods_mask"
		
		"ItemShopTags"					"attack speed;lifesteal"
		"ItemQuality"					"epic"
		"ItemAliases"					"mask of madness;blood gods mask"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items2_fx/mask_of_madness.vpcf"
			"particle"					"particles/status_fx/status_effect_beserkers_call.vpcf"
		}
		
		"AbilityCooldown"				"30"
		"AbilitySharedCooldown"			"mask"
		"AbilityManaCost"				"60"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"12 13 14 15 16"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"18 19 20 21 22"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"400 500 600 700 800"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_attack_speed"	"125 150 175 200 225"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_bonus_damage"	"20 25 30 35 40"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_movement_speed"	"20 25 30 35 40"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"active_damage_taken"	"20 25 30 35 40"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6.0"
			}
		}
	}
	"item_blood_gods_mask_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1012"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blood_gods_mask"
		"AbilityTextureName"			"item_mask_of_madness"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"3"
		
		"UpgradesItems"					"item_blood_gods_mask;item_blood_gods_mask_2;item_blood_gods_mask_3;item_blood_gods_mask_4;item_blood_gods_mask_5"
		"UpgradeRecipe"					"item_recipe_blood_gods_mask"
		
		"ItemShopTags"					"attack speed;lifesteal"
		"ItemQuality"					"epic"
		"ItemAliases"					"mask of madness;blood gods mask"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items2_fx/mask_of_madness.vpcf"
			"particle"					"particles/status_fx/status_effect_beserkers_call.vpcf"
		}
		
		"AbilityCooldown"				"30"
		"AbilitySharedCooldown"			"mask"
		"AbilityManaCost"				"60"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"12 13 14 15 16"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"18 19 20 21 22"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"400 500 600 700 800"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_attack_speed"	"125 150 175 200 225"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_bonus_damage"	"20 25 30 35 40"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_movement_speed"	"20 25 30 35 40"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"active_damage_taken"	"20 25 30 35 40"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6.0"
			}
		}
	}
	"item_blood_gods_mask_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1013"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blood_gods_mask"
		"AbilityTextureName"			"item_mask_of_madness"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"4"
		
		"UpgradesItems"					"item_blood_gods_mask;item_blood_gods_mask_2;item_blood_gods_mask_3;item_blood_gods_mask_4;item_blood_gods_mask_5"
		"UpgradeRecipe"					"item_recipe_blood_gods_mask"
		
		"ItemShopTags"					"attack speed;lifesteal"
		"ItemQuality"					"epic"
		"ItemAliases"					"mask of madness;blood gods mask"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items2_fx/mask_of_madness.vpcf"
			"particle"					"particles/status_fx/status_effect_beserkers_call.vpcf"
		}
		
		"AbilityCooldown"				"30"
		"AbilitySharedCooldown"			"mask"
		"AbilityManaCost"				"60"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"12 13 14 15 16"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"18 19 20 21 22"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"400 500 600 700 800"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_attack_speed"	"125 150 175 200 225"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_bonus_damage"	"20 25 30 35 40"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_movement_speed"	"20 25 30 35 40"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"active_damage_taken"	"20 25 30 35 40"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6.0"
			}
		}
	}
	"item_blood_gods_mask_5"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1014"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_blood_gods_mask"
		"AbilityTextureName"			"item_mask_of_madness"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"5"
		
		"UpgradesItems"					"item_blood_gods_mask;item_blood_gods_mask_2;item_blood_gods_mask_3;item_blood_gods_mask_4;item_blood_gods_mask_5"
		"UpgradeRecipe"					"item_recipe_blood_gods_mask"
		
		"ItemShopTags"					"attack speed;lifesteal"
		"ItemQuality"					"epic"
		"ItemAliases"					"mask of madness;blood gods mask"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items2_fx/mask_of_madness.vpcf"
			"particle"					"particles/status_fx/status_effect_beserkers_call.vpcf"
		}
		
		"AbilityCooldown"				"30"
		"AbilitySharedCooldown"			"mask"
		"AbilityManaCost"				"60"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"12 13 14 15 16"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"18 19 20 21 22"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"400 500 600 700 800"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_attack_speed"	"125 150 175 200 225"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_bonus_damage"	"20 25 30 35 40"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_movement_speed"	"20 25 30 35 40"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"active_damage_taken"	"20 25 30 35 40"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6.0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_boomstick"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7081"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_boomstick"
		"ItemRequirements"
		{
			"01"						"item_siegebreaker;item_reaping_scythe;item_blade_of_agility"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_boomstick"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7082"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_boomstick"
		"AbilityTextureName"			"custom/boomstick"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		"ItemStackable"					"1"
		
		"ItemShopTags"					"crits;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"daedalus;crystalys;boomstick"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/econ/items/sniper/sniper_charlie/sniper_assassinate_charlie.vpcf"
		}
		
		"AbilityCooldown"				"14"
		"AbilityManaCost"				"100"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"armor_shred"			"-6"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"shred_duration"		"7"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"35"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_range"			"350"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"15"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_shred"			"-8"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"active_duration"		"6"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"active_distance"		"1000"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_borealis_cloak"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7093"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1350"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_borealis_cloak"
		"ItemRequirements"
		{
			"01"						"item_mithril_armor;item_mithril_armor;item_orb_of_essence;item_ice_fang"
		}
	}
	"item_borealis_cloak"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7094"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbiltyUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_borealis_cloak"
		"AbilityTextureName"			"item_shivas_guard"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"intelligence;tank;durable"
		"ItemQuality"					"epic"
		"ItemAliases"					"shivas guard;shiva;borealis;cloak"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"20"
		"AbilityManaCost"				"125"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"12"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana_regen"		"3.5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_damage"			"225"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_radius"			"1200"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_speed"			"350"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"debuff_ms"				"-35"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"debuff_as"				"-80"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"debuff_damage"			"50"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_duration"		"5.0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_breeze_amulet"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3290"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_breeze_amulet"
		"AbilityTextureName"			"item_talisman_of_evasion"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"625"
		"ItemShopTags"					"evasion"
		"ItemQuality"					"component"
		"ItemAliases"					"talisman of evasion;breeze amulet"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_evasion"			"20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_warm_fire"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3294"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_TOGGLE | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_warm_fire"
		"AbilityTextureName"			"custom/warm_fire"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"400"
		"ItemShopTags"					"aura;damage"
		"ItemQuality"					"component"
		"ItemAliases"					"radiance;warm fire"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"20"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"500"
			}
		}
	}
}"DOTAAbilities"
{
	"item_broadsword"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"949"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_broadsword"
		"AbilityTextureName"			"item_broadsword"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage"
		"ItemCost"						"425"
		"ItemQuality"					"epic"
		"ItemAliases"					"broadsword"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_calming_skull"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3289"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_calming_skull"
		"AbilityTextureName"			"custom/calming_skull"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"385"
		"ItemShopTags"					"mana cost;mana"
		"ItemQuality"					"component"
		"ItemAliases"					"calming skull"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_cost_reduction"	"20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_cloak_of_the_hunter"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7049"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"730"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_cloak_of_the_hunter"
		"ItemRequirements"
		{
			"01"						"item_gauntlet_of_alacrity;item_orb_of_shadows;item_power_core"
		}
	}
	"item_cloak_of_the_hunter"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7050"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_cloak_of_the_hunter"
		"AbilityTextureName"			"custom/cloak_of_the_hunter"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;slow"
		"ItemQuality"					"epic"
		"ItemAliases"					"radiance;cloak_of_the_hunter"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"20"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"invis_duration"		"8"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"15"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all"				"10"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_accuracy"		"35"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_aura_as"			"30"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"900"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_conquerors_helm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6653"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_conquerors_helm"
		"ItemRequirements"
		{
			"01"						"item_orb_of_vitality;item_soul_vessel;item_mithril_armor"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_conquerors_helm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6654"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_conquerors_helm"
		"AbilityTextureName"			"item_helm_of_the_dominator"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"strength;lifesteal;regen;armor;fear;tank"
		"ItemQuality"					"epic"
		"ItemAliases"					"helm of the dominator;hotd;conquerors helm"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/units/heroes/hero_lone_druid/lone_druid_savage_roar.vpcf"
			"particle"					"particles/units/heroes/hero_lone_druid/lone_druid_savage_roar_debuff.vpcf"
			"particle"					"particles/status_fx/status_effect_lone_druid_savage_roar.vpcf"
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_lone_druid.vsndevts"
		}
		
		"AbilityCooldown"				"30"
		"AbilityChannelTime"			"1.5"

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"15"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"750"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_hp_regen"		"5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_per_str"			"0"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"lifesteal"				"15"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"mob_lifesteal"			"3.75"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"active_channel"		"1.5"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"active_duration"		"6.0"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"active_radius"			"600"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_creed_of_knowledge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"9999"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_creed_of_knowledge"
		"AbilityTextureName"			"custom/creed_of_omniscience"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/clarity.vmdl"	
		
		"ItemCost"						"1000"
		"ItemShopTags"					"xp;experience"
		"ItemQuality"					"consumable"
		"ItemAliases"					"tome of knowledge;creed of knowledge"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE"
		"ItemPermanent"					"0"
		"ItemStackable"					"1"
		"ItemInitialCharges"			"1"
		"ItemDisplayCharges"			"1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_xp"				"1500"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_crown_of_thorns"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3221"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_crown_of_thorns"
		"AbilityTextureName"			"custom/crown_of_thorns"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"250"
		"ItemShopTags"					"reflect;blade;mail"
		"ItemQuality"					"component"
		"ItemAliases"					"blade mail;crown;crown of thorns"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"reflect"				"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_crystalline_staff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6278"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"2300"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_crystalline_staff"
		"ItemRequirements"
		{
			"01"						"item_spell_refinery;item_sorcerers_staff;item_staff_of_magi"
		}
	}
	"item_crystalline_staff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3279"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_crystalline_staff"
		"AbilityTextureName"			"custom/crystalline_staff"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;attack range"
		"ItemQuality"					"epic"
		"ItemAliases"					"dragon lance;lance of longinus"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_cast_range"		"450"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_spell_damage"	"35"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_intellect"		"20"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage_taken"	"30"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_crystal_of_life"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3220"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_crystal_of_life"
		"AbilityTextureName"			"custom/crystal_of_life"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"400"
		"ItemShopTags"					"life;health;hp"
		"ItemQuality"					"component"
		"ItemAliases"					"lifecrystal;crystal;crystal of life"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_per_str"			"0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"400"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_culling_greataxe"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3241"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1600"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_culling_greataxe"
		"ItemRequirements"
		{
			"01"						"item_hunters_hatchet;item_blade_of_agility;item_titan_blade"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_culling_greataxe"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3242"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_TREE | DOTA_UNIT_TARGET_CUSTOM"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_culling_greataxe"
		"AbilityTextureName"			"item_bfury"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1800"
		"ItemShopTags"					"damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"battle fury;culling greataxe"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/generic_gameplay/generic_purge.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"0.1"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"55"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"splash_damage"			"35"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"350"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"15"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_cultists_veil"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1293"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"250"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_cultists_veil"
		"ItemRequirements"
		{
			"01"						"item_calming_skull;item_mithril_armor;item_staff_of_magi"
		}
	}
	"item_cultists_veil"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3256"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_cultists_veil"
		"AbilityTextureName"			"item_veil_of_discord"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1765"
		"ItemShopTags"					"magic"
		"ItemQuality"					"component"
		"ItemAliases"					"veil of discord;cultists veil"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"25"
		"AbilityCastRange"				"750"
		"AbilityManaCost"				"55"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_magic_damage"	"25"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"15"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"625"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_intellect"		"15"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_armor"			"5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_cost_reduction"	"20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_cursed_amulet"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3233"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_cursed_amulet"
		"AbilityTextureName"			"item_nullifier"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"425"
		"ItemShopTags"					"heal"
		"ItemQuality"					"component"
		"ItemAliases"					"cursed amulet"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
	

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"chance"				"25"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"2"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_dagger_of_escape"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3223"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dagger_of_escape"
		"AbilityTextureName"			"item_blink"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"420"
		"ItemShopTags"					"blink;mobility"
		"ItemQuality"					"artifact"
		"ItemAliases"					"blink;keelans dagger of escape"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"16"
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"blink_range"			"1200"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_dark_ones_blessing"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4589"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1150"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_dark_ones_blessing"
		"ItemRequirements"
		{
			"01"						"item_mantle_of_the_fallen;item_orb_of_shadows"
		}
	}
	"item_dark_ones_blessing"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4590"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dark_ones_blessing"
		"AbilityTextureName"			"item_vladmir"
		"AbilitySharedCooldown"			"invis"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"lifesteal;armor;damage;invis"
		"ItemQuality"					"epic"
		"ItemAliases"					"vladmir;dark ones blessing"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"24"
		"AbilityManaCost"				"50"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"15"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage"			"20"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_armor"			"5"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana_regen"		"3"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"900"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"12"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: Dark Wand 1
	//=================================================================================================================
	"item_recipe_dark_wand"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7003"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_dark_wand"
		"ItemRequirements"
		{
			"01"						"item_staff_of_magi"
		}
	}
	//=================================================================================================================
	// Recipe: Dark Wand 2
	//=================================================================================================================
	"item_recipe_dark_wand_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7004"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_dark_wand_2"
		"ItemRequirements"
		{
			"01"						"item_dark_wand;item_recipe_dark_wand"
		}
	}
	//=================================================================================================================
	// Recipe: Dark Wand 3
	//=================================================================================================================
	"item_recipe_dark_wand_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7005"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_dark_wand_3"
		"ItemRequirements"
		{
			"01"						"item_dark_wand_2;item_recipe_dark_wand"
		}
	}
	//=================================================================================================================
	// Recipe: Dark Wand 4
	//=================================================================================================================
	"item_recipe_dark_wand_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7006"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_dark_wand_4"
		"ItemRequirements"
		{
			"01"						"item_dark_wand_3;item_recipe_dark_wand"
		}
	}
	//=================================================================================================================
	// Recipe: Dark Wand
	//=================================================================================================================
	"item_recipe_dark_wand_5"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7007"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_dark_wand_5"
		"ItemRequirements"
		{
			"01"						"item_dark_wand_4;item_recipe_dark_wand"
		}
	}
	"item_dark_wand"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7008"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilitySharedCooldown"			"dagon"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dark_wand"
		"AbilityTextureName"			"dagon"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"1"
		
		"UpgradesItems"					"item_dark_wand;item_dark_wand_2;item_dark_wand_3;item_dark_wand_4;item_dark_wand_5"
		"UpgradeRecipe"					"item_recipe_dark_wand"
		
		"ItemShopTags"					"magic"
		"ItemQuality"					"epic"
		"ItemAliases"					"dagon;wand"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items_fx/dagon.vpcf"
		}
		
		"AbilityCooldown"				"20 17.5 15 12.5 10"
		"AbilitySharedCooldown"			"dagon"
		"AbilityManaCost"				"300"

		"AbilityCastRange"				"600 650 700 750 800"
		"AbilityCastPoint"				"0.03"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"18 21 24 27 30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range"			"600 650 700 750 800"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"600 600 700 800 900"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown"				"20 17.5 15 12.5 10"
			}
		}
	}
	"item_dark_wand_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7009"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilitySharedCooldown"			"dagon"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dark_wand"
		"AbilityTextureName"			"dagon_2"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"2"
		
		"UpgradesItems"					"item_dark_wand;item_dark_wand_2;item_dark_wand_3;item_dark_wand_4;item_dark_wand_5"
		"UpgradeRecipe"					"item_recipe_dark_wand"
		
		"ItemShopTags"					"magic"
		"ItemQuality"					"epic"
		"ItemAliases"					"dagon;wand"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items_fx/dagon.vpcf"
		}
		
		"AbilityCooldown"				"20 17.5 15 12.5 10"
		"AbilitySharedCooldown"			"dagon"
		"AbilityManaCost"				"300"

		"AbilityCastRange"				"600 650 700 750 800"
		"AbilityCastPoint"				"0.03"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"18 21 24 27 30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range"			"600 650 700 750 800"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"600 600 700 800 900"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown"				"20 17.5 15 12.5 10"
			}
		}
	}
	"item_dark_wand_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7010"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilitySharedCooldown"			"dagon"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dark_wand"
		"AbilityTextureName"			"dagon_3"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"3"
		
		"UpgradesItems"					"item_dark_wand;item_dark_wand_2;item_dark_wand_3;item_dark_wand_4;item_dark_wand_5"
		"UpgradeRecipe"					"item_recipe_dark_wand"
		
		"ItemShopTags"					"magic"
		"ItemQuality"					"epic"
		"ItemAliases"					"dagon;wand"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items_fx/dagon.vpcf"
		}
		
		"AbilityCooldown"				"20 17.5 15 12.5 10"
		"AbilitySharedCooldown"			"dagon"
		"AbilityManaCost"				"300"

		"AbilityCastRange"				"600 650 700 750 800"
		"AbilityCastPoint"				"0.03"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"18 21 24 27 30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range"			"600 650 700 750 800"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"600 600 700 800 900"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown"				"20 17.5 15 12.5 10"
			}
		}
	}
	"item_dark_wand_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7011"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilitySharedCooldown"			"dagon"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dark_wand"
		"AbilityTextureName"			"dagon_4"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"4"
		
		"UpgradesItems"					"item_dark_wand;item_dark_wand_2;item_dark_wand_3;item_dark_wand_4;item_dark_wand_5"
		"UpgradeRecipe"					"item_recipe_dark_wand"
		
		"ItemShopTags"					"magic"
		"ItemQuality"					"epic"
		"ItemAliases"					"dagon;wand"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items_fx/dagon.vpcf"
		}
		
		"AbilityCooldown"				"20 17.5 15 12.5 10"
		"AbilitySharedCooldown"			"dagon"
		"AbilityManaCost"				"300"

		"AbilityCastRange"				"600 650 700 750 800"
		"AbilityCastPoint"				"0.03"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"18 21 24 27 30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range"			"600 650 700 750 800"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"600 600 700 800 900"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown"				"20 17.5 15 12.5 10"
			}
		}
	}
	"item_dark_wand_5"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7012"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilitySharedCooldown"			"dagon"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dark_wand"
		"AbilityTextureName"			"dagon_5"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"5"
		
		"UpgradesItems"					"item_dark_wand;item_dark_wand_2;item_dark_wand_3;item_dark_wand_4;item_dark_wand_5"
		"UpgradeRecipe"					"item_recipe_dark_wand"
		
		"ItemShopTags"					"magic"
		"ItemQuality"					"epic"
		"ItemAliases"					"dagon;wand"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items_fx/dagon.vpcf"
		}
		
		"AbilityCooldown"				"20 17.5 15 12.5 10"
		"AbilitySharedCooldown"			"dagon"
		"AbilityManaCost"				"300"

		"AbilityCastRange"				"600 650 700 750 800"
		"AbilityCastPoint"				"0.03"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"18 21 24 27 30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range"			"600 650 700 750 800"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"600 600 700 800 900"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown"				"20 17.5 15 12.5 10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_death_sentence"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7095"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"600"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_death_sentence"
		"ItemRequirements"
		{
			"01"						"item_focused_lens;item_blade_of_agility;item_blade_of_agility;item_broadsword"
		}
	}
	"item_death_sentence"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7096"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_death_sentence"
		"AbilityTextureName"			"item_greater_crit"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"intelligence;mana regen"
		"ItemQuality"					"epic"
		"ItemAliases"					"energy booster;orb of essence"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"12"
		"AbilityManaCost"				"35"
		"AbilityCastRange"				"625"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_cast_range"		"400"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"50"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"10"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"20"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"target_amp"			"30"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"target_cast_range"		"250"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"target_accuracy"		"-40"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_dust_of_stasis"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4502"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_dust_of_stasis"
		"AbilityTextureName"			"item_dust"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"100"
		"ItemShopTags"					"consumable"
		"ItemQuality"					"consumable"
		"ItemAliases"					"smoke of deceit;dust of stasis"
		"ItemStackable"					"1"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE"
		"ItemPermanent"					"0"
		"ItemInitialCharges"			"1"
		"ItemDisplayCharges"			"1"
		"ItemStockMax"					"2"
		"ItemStockTime"					"900.0"			  
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_TO_SPECTATORS"
		"ItemSupport"					"1"
		"ItemAlertable"					"1"
		"IsTempestDoubleClonable"		"0"
		
		"precache"
		{
			"particle"					"particles/items_fx/dust_of_appearance.vpcf"
			"particle"					"particles/items_fx/dust_of_appearance_debuff.vpcf"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"stasis_duration"		"20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: War Drum
	//=================================================================================================================
	"item_recipe_echoing_tambourine"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7042"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_echoing_tambourine"
		"ItemRequirements"
		{
			"01"						"item_orb_of_essence;item_orb_of_renewal;item_war_drum"
		}
	}
	//=================================================================================================================
	// War Drum
	//=================================================================================================================
	"item_echoing_tambourine"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7043"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_echoing_tambourine"
		"AbilityTextureName"			"custom/echoing_tambourine"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1615"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"drum of endurance;drum"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"30"
		"AbilityManaCost"				"0"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"10"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"25"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"10"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mregen"			"5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_as"				"35"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_aura"			"20" //flat
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_buff"			"15" //percent
			}
			"08"
			{
				"var_type"							"FIELD_INTEGER"
				"cooldown_reduction_buff"			"20" //percent
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"status_amp_buff"			"15" //percent
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_restore"			"30" //percent
			}
			"11"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_restore"			"10" //percent
			}
			"12"
			{
				"var_type"				"FIELD_INTEGER"
				"daze_radius"			"500" //percent
			}
			"13"
			{
				"var_type"				"FIELD_FLOAT"
				"daze_duration"			"2.5" //percent
			}
			"14"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6"
			}
			"15"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}

		"precache"
		{
			"particle"  "particles/neutral_fx/neutral_centaur_khan_war_stomp.vpcf"
			"soundfile" "soundevents/game_sounds_items.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_elven_boots"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3228"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_elven_boots"
		"AbilityTextureName"			"item_slippers"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"360"
		"ItemShopTags"					"movespeed;ms"
		"ItemQuality"					"component"
		"ItemAliases"					"boots;elven boots"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"15"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_emission"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6661"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_emission"
		"ItemRequirements"
		{
			"01"						"item_frostbite;item_power_core"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_emission"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6662"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_TOGGLE | DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_emission"
		"AbilityTextureName"			"custom/emission"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"radiance"
		"ItemQuality"					"epic"
		"ItemAliases"					"emission"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"75"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"base_damage"			"75"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"slow"					"-20"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"900"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all"				"15"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_essence_piercer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7059"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1250"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_essence_piercer"
		"ItemRequirements"
		{
			"01"						"item_focused_lens;item_staff_of_magi;item_sorcerers_staff;item_gauntlet_of_alacrity"
		}
	}
	"item_essence_piercer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7060"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_essence_piercer"
		"AbilityTextureName"			"item_orchid"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"cast range;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"orchid;bloodthorn"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"12"
		"AbilityManaCost"				"35"
		"AbilityCastRange"				"625"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_cast_range"		"500"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"target_amp"			"20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_spell_amp"		"25"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_attack_speed"	"25"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_intellect"		"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_everbright_shield"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6280"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1600"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_everbright_shield"
		"ItemRequirements"
		{
			"01"						"item_pages_buckler;item_spell_refinery;item_chainmail;item_worn_cloak"
		}
	}
	"item_everbright_shield"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3281"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_everbright_shield"
		"AbilityTextureName"			"item_black_king_bar"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"defense;magic resist;status resist"
		"ItemQuality"					"epic"
		"ItemAliases"					"everbright shield;black king bar;bkb"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"12"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_cast_range"		"300"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_magic_resist"	"20"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"active_magic_resist"	"100"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_status_resist"	"50"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"30"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"block_chance"			"50"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_executioners_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6279"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1600"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_executioners_blade"
		"ItemRequirements"
		{
			"01"						"item_broadsword"
		}
	}
	"item_executioners_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3280"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_executioners_blade"
		"AbilityTextureName"			"item_demon_edge"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;crit"
		"ItemQuality"					"epic"
		"ItemAliases"					"daedalus;executioners_blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"critical_chance"		"20"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"critical_damage"		"225"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: Father Pipe
	//=================================================================================================================
	"item_recipe_father_pipe"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7020"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"700"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_father_pipe"
		"ItemRequirements"
		{
			"01"						"item_barrier_leaves;item_ruby_ring;item_worn_cloak;item_power_core"
		}
	}
	//=================================================================================================================
	// Pipe
	//=================================================================================================================
	"item_father_pipe"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7021"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_father_pipe"
		"AbilityTextureName"			"pipe"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1615"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"drum of endurance;drum"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"50"
		"AbilityManaCost"				"125"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"block"					"500"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"hp_regen"				"10"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_all"				"15"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"aura_magic_resist"		"15"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}

		"precache"
		{
			"particle"  "particles/items2_fx/pipe_of_insight.vpcf"
			"soundfile" "soundevents/game_sounds_items.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_ferrum_ascensus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7083"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_ferrum_ascensus"
		"ItemRequirements"
		{
			"01"						"item_legionnaires_dualswords;item_warlocks_reliquary"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_ferrum_ascensus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7084"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ferrum_ascensus"
		"AbilityTextureName"			"custom/ferrum_ascensus"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"blink;tp"
		"ItemQuality"					"epic"
		"ItemAliases"					"blink;tricksters blade;manta"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/sange_maim.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"25"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"40"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"25"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_movespeed"		"16"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_spell_amp"		"33"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_cost_reduction"	"33"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_slow"			"-64"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"disable_duration"		"3.5"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"disable_chance"		"50"
			}

		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_flashback"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6637"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_flashback"
		"ItemRequirements"
		{
			"01"						"item_orb_of_essence;item_orb_of_essence"
		}
	}
	"item_flashback"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6638"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_flashback"
		"AbilityTextureName"			"item_refresher"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"cooldown;reduction;refresh"
		"ItemQuality"					"epic"
		"ItemAliases"					"refresher orb;flashback"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"160"
		"AbilityManaCost"				"175"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"basic_chance"			"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"ult_chance"			"10"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"40"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana_regen"		"5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_focused_lens"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6282"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1500"
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_focused_lens"
		"ItemRequirements"
		{
			"01"						"item_spell_refinery;item_staff_of_magi"
		}
	}
	"item_focused_lens"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3283"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_focused_lens"
		"AbilityTextureName"			"custom/focused_lens"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"cast range;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"focused lens"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"12"
		"AbilityManaCost"				"35"
		"AbilityCastRange"				"625"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_cast_range"		"350"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"10"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"target_amp"			"20"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"target_cast_range"		"225"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_fortress_shield"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4601"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"425"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_fortress_shield"
		"ItemRequirements"
		{
			"01"						"item_pages_buckler;item_pages_buckler;item_pages_buckler"
		}
	}
	"item_fortress_shield"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4602"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_fortress_shield"
		"AbilityTextureName"			"custom/fortress_shield"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;slow"
		"ItemQuality"					"epic"
		"ItemAliases"					"radiance;fortress_shield"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"80"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"block_chance"			"50"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health_regen"	"5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_frostbite"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4597"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"425"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_frostbite"
		"ItemRequirements"
		{
			"01"						"item_warm_fire;item_ice_fang"
		}
	}
	"item_frostbite"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4598"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_frostbite"
		"AbilityTextureName"			"custom/frostbite"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;slow"
		"ItemQuality"					"epic"
		"ItemAliases"					"radiance;frostbite"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"base_damage"			"50"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"slow"					"-16"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"900"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_frostfire_brand"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7045"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"325"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_frostfire_brand"
		"ItemRequirements"
		{
			"01"						"item_ice_fang;item_incandescance;item_broadsword;item_power_core"
		}
	}
	"item_frostfire_brand"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7046"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_frostfire_brand"
		"AbilityTextureName"			"custom/frostfire_brand"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;slow"
		"ItemQuality"					"epic"
		"ItemAliases"					"radiance;frostfire_brand"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"base_damage"			"100"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"slow"					"-16"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"blind"					"33"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage"			"55"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"min_radius"			"300"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"900"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"radius_change"			"75"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_all"				"12"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Recipe: Galactic Hammer
	//=================================================================================================================
	"item_recipe_galactic_hammer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7022"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_galactic_hammer"
		"ItemRequirements"
		{
			"01"						"item_ogre_club;item_staff_of_magi;item_ruby_ring;item_ring_of_mana"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_galactic_hammer_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7065"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_galactic_hammer_2"
		"ItemRequirements"
		{
			"01"						"item_galactic_hammer;item_recipe_galactic_hammer"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_galactic_hammer_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7066"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_galactic_hammer_3"
		"ItemRequirements"
		{
			"01"						"item_galactic_hammer_2;item_recipe_galactic_hammer"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_galactic_hammer_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7067"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_galactic_hammer_4"
		"ItemRequirements"
		{
			"01"						"item_galactic_hammer_3;item_recipe_galactic_hammer"
		}
	}
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_galactic_hammer_5"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7068"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_galactic_hammer_5"
		"ItemRequirements"
		{
			"01"						"item_galactic_hammer_4;item_recipe_galactic_hammer"
		}
	}
	"item_galactic_hammer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7023"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_galactic_hammer"
		"AbilityTextureName"			"item_meteor_hammer"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"1"
		
		"UpgradesItems"					"item_galactic_hammer;item_galactic_hammer_2;item_galactic_hammer_3;item_galactic_hammer_4;item_galactic_hammer_5"
		"UpgradeRecipe"					"item_recipe_galactic_hammer"
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		//"ItemCost"						"425"	
		"ItemShopTags"					"meteor hammer"
		"ItemQuality"					"epic"
		"ItemAliases"					"meteor hammer"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items4_fx/meteor_hammer_spell.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_spell_debuff.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_cast.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_aoe.vpcf"
		}
		
		"AbilityCastRange"				"600"
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"200"

		"AbilityCastRange"				"600"
		"AbilityCastAnimation"			"ACT_DOTA_GENERIC_CHANNEL_1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"12 14 16 18 20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"12 14 16 18 20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"hp_regen"				"1.5 2 2.5 3 3.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"m_regen"				"6"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"200 250 300 350 400"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_sec"		"100"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6 7 8 9 10"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"0.25"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"channel"				"1.25"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300 350 400 450 500"
			}
		}
	}
	"item_galactic_hammer_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7069"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_galactic_hammer"
		"AbilityTextureName"			"item_meteor_hammer"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"2"
		
		"UpgradesItems"					"item_galactic_hammer;item_galactic_hammer_2;item_galactic_hammer_3;item_galactic_hammer_4;item_galactic_hammer_5"
		"UpgradeRecipe"					"item_recipe_galactic_hammer"
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		//"ItemCost"						"425"	
		"ItemShopTags"					"meteor hammer"
		"ItemQuality"					"epic"
		"ItemAliases"					"meteor hammer"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items4_fx/meteor_hammer_spell.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_spell_debuff.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_cast.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_aoe.vpcf"
		}
		
		"AbilityCastRange"				"600"
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"200"

		"AbilityCastRange"				"600"
		"AbilityCastAnimation"			"ACT_DOTA_GENERIC_CHANNEL_1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"12 14 16 18 20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"12 14 16 18 20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"hp_regen"				"1.5 2 2.5 3 3.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"m_regen"				"6"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"200 250 300 350 400"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_sec"		"100"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6 7 8 9 10"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"0.25"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"channel"				"1.25"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300 350 400 450 500"
			}
		}
	}
	"item_galactic_hammer_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7070"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_galactic_hammer"
		"AbilityTextureName"			"item_meteor_hammer"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"3"
		
		"UpgradesItems"					"item_galactic_hammer;item_galactic_hammer_2;item_galactic_hammer_3;item_galactic_hammer_4;item_galactic_hammer_5"
		"UpgradeRecipe"					"item_recipe_galactic_hammer"
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		//"ItemCost"						"425"	
		"ItemShopTags"					"meteor hammer"
		"ItemQuality"					"epic"
		"ItemAliases"					"meteor hammer"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items4_fx/meteor_hammer_spell.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_spell_debuff.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_cast.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_aoe.vpcf"
		}
		
		"AbilityCastRange"				"600"
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"200"

		"AbilityCastRange"				"600"
		"AbilityCastAnimation"			"ACT_DOTA_GENERIC_CHANNEL_1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"12 14 16 18 20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"12 14 16 18 20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"hp_regen"				"1.5 2 2.5 3 3.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"m_regen"				"6"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"200 250 300 350 400"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_sec"		"100"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6 7 8 9 10"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"0.25"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"channel"				"1.25"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300 350 400 450 500"
			}
		}
	}
	"item_galactic_hammer_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7071"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_galactic_hammer"
		"AbilityTextureName"			"item_meteor_hammer"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"4"
		
		"UpgradesItems"					"item_galactic_hammer;item_galactic_hammer_2;item_galactic_hammer_3;item_galactic_hammer_4;item_galactic_hammer_5"
		"UpgradeRecipe"					"item_recipe_galactic_hammer"
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		//"ItemCost"						"425"	
		"ItemShopTags"					"meteor hammer"
		"ItemQuality"					"epic"
		"ItemAliases"					"meteor hammer"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items4_fx/meteor_hammer_spell.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_spell_debuff.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_cast.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_aoe.vpcf"
		}
		
		"AbilityCastRange"				"600"
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"200"

		"AbilityCastRange"				"600"
		"AbilityCastAnimation"			"ACT_DOTA_GENERIC_CHANNEL_1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"12 14 16 18 20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"12 14 16 18 20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"hp_regen"				"1.5 2 2.5 3 3.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"m_regen"				"6"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"200 250 300 350 400"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_sec"		"100"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6 7 8 9 10"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"0.25"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"channel"				"1.25"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300 350 400 450 500"
			}
		}
	}
	"item_galactic_hammer_5"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7072"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_galactic_hammer"
		"AbilityTextureName"			"item_meteor_hammer"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"MaxUpgradeLevel"				"5"
		"ItemBaseLevel"					"5"
		
		"UpgradesItems"					"item_galactic_hammer;item_galactic_hammer_2;item_galactic_hammer_3;item_galactic_hammer_4;item_galactic_hammer_5"
		"UpgradeRecipe"					"item_recipe_galactic_hammer"
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		//"ItemCost"						"425"	
		"ItemShopTags"					"meteor hammer"
		"ItemQuality"					"epic"
		"ItemAliases"					"meteor hammer"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/items4_fx/meteor_hammer_spell.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_spell_debuff.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_cast.vpcf"
			"particle"  				"particles/items4_fx/meteor_hammer_aoe.vpcf"
		}
		
		"AbilityCastRange"				"600"
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"200"

		"AbilityCastRange"				"600"
		"AbilityCastAnimation"			"ACT_DOTA_GENERIC_CHANNEL_1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"12 14 16 18 20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"12 14 16 18 20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"hp_regen"				"1.5 2 2.5 3 3.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"m_regen"				"6"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"200 250 300 350 400"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_sec"		"100"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6 7 8 9 10"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"stun_duration"			"0.25"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"channel"				"1.25"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300 350 400 450 500"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_gauntlet_of_alacrity"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3293"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_gauntlet_of_alacrity"
		"AbilityTextureName"			"item_gloves"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"400"
		"ItemShopTags"					"invis"
		"ItemQuality"					"component"
		"ItemAliases"					"shadow amulet;orb of shadows"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_gauntlet_of_might"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6657"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_gauntlet_of_might"
		"ItemRequirements"
		{
			"01"						"item_gem_of_inner_power;item_plate_of_the_unbreakable;item_mithril_armor"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_gauntlet_of_might"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6658"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_gauntlet_of_might"
		"AbilityTextureName"			"custom/gauntlet_of_might"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"heal;purge;dispel;armor;aura"
		"ItemQuality"					"epic"
		"ItemAliases"					"gauntlet of might"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"25"

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"armor"					"0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"armor_aura"			"10"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_per_str"			"0"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"750"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_heal"			"20"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"750"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_gauntlet_of_the_void"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6641"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_gauntlet_of_the_void"
		"ItemRequirements"
		{
			"01"						"item_arcane_reaver;item_soul_vessel"
		}
	}
	"item_gauntlet_of_the_void"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6642"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_gauntlet_of_the_void"
		"AbilityTextureName"			"custom/gauntlet_of_the_void_off"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;intellect;mana"
		"ItemQuality"					"epic"
		"ItemAliases"					"refresher orb;arcane reaver"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"minus_damage"			"-100"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_pct"			"100"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_on_hit"			"35"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"magic_resistance"		"-25"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_duration"		"5"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"20"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana_regen"		"5"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"lifesteal"				"20"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"mob_lifesteal"			"5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_gem_of_corruption"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3232"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_gem_of_corruption"
		"AbilityTextureName"			"item_blight_stone"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"425"
		"ItemShopTags"					"corruption;armor"
		"ItemQuality"					"component"
		"ItemAliases"					"blight stone;gem of corruption"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"armor_reduction"		"-4"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"7.0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_gem_of_inner_power"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4605"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"600"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_gem_of_inner_power"
		"ItemRequirements"
		{
			"01"						"item_crystal_of_life;item_purging_stone"
		}
	}
	"item_gem_of_inner_power"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4606"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_gem_of_inner_power"
		"AbilityTextureName"			"custom/gem_of_inner_power"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"lifesteal;armor;damage;invis"
		"ItemQuality"					"epic"
		"ItemAliases"					"vladmir;dark ones blessing"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"25"
		"AbilityManaCost"				"50"

		"precache"
		{
			"particle"					"particles/titan_selfheal_flare.vpcf"
		}
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_per_str"			"0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"650"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_heal"			"15"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"600"
			}
		}
	}
}"DOTAAbilities"
{	
	//=================================================================================================================
	// Recipe: Ghost Saber
	//=================================================================================================================
	"item_recipe_ghost_saber"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7016"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1000"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_ghost_saber"
		"ItemRequirements"
		{
			"01"						"item_phantom_staff;item_power_core"
		}
	}
	"item_ghost_saber"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7017"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ghost_saber"
		"AbilitySharedCooldown"			"ghost"
		"AbilityTextureName"			"item_ethereal_blade"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1000"
		"ItemShopTags"					"ethereal blade"
		"ItemQuality"					"epic"
		"ItemAliases"					"ethereal blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/units/heroes/hero_pugna/pugna_decrepify.vpcf"
			"particle"					"particles/status_fx/status_effect_necrolyte_spirit.vpcf"
		}
		
		"AbilityCooldown"				"35"
		"AbilitySharedCooldown"			"ghost;ethereal"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_stats"			"20"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"1.5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_glacier_boots"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3249"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"850"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_glacier_boots"
		"ItemRequirements"
		{
			"01"						"item_elven_boots;item_mithril_armor;item_ice_fang"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_glacier_boots"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3250"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_glacier_boots"
		"AbilityTextureName"			"custom/glacier_boots"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1450"
		"ItemShopTags"					"boots;slow"
		"ItemQuality"					"epic"
		"ItemAliases"					"shivas;glacier boots"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/status_fx/status_effect_wyvern_cold_embrace.vpcf"
			"particle"					"particles/generic_gameplay/generic_slowed_cold.vpcf"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"active_ms"				"-175"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"active_armor"			"10"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_as"				"-100"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"aura_slow"				"-35"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_guillotine"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6613"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1400"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_guillotine"
		"ItemRequirements"
		{
			"01"						"item_executioners_blade;item_broadsword"
		}
	}
	"item_guillotine"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6614"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_guillotine"
		"AbilityTextureName"			"item_lesser_crit"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;crit"
		"ItemQuality"					"epic"
		"ItemAliases"					"crystalys;guillotine"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"critical_chance"		"27"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"critical_damage"		"285"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"70"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Barrier Leaves
	//=================================================================================================================
	"item_hawks_feather"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7034"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_hawks_feather"
		"AbilityTextureName"			"custom/hawks_feather"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"325"
		"ItemShopTags"					"barrier"
		"ItemQuality"					"component"
		"ItemAliases"					"faerie fire"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"pierce_chance"			"35"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_headchopper"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6647"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_headchopper"
		"ItemRequirements"
		{
			"01"						"item_titan_blade;item_executioners_blade;item_cursed_amulet"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_headchopper"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6648"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_headchopper"
		"AbilityTextureName"			"item_sange"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"strength;damage;crit"
		"ItemQuality"					"epic"
		"ItemAliases"					"daedalus;headchopper"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"15"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"45"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"critical_chance"		"20"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"critical_damage"		"225"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"curse_duration"		"3"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"curse_duration"		"3"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"effect_bonus_damage"	"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_hunters_hatchet"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3227"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_TREE | DOTA_UNIT_TARGET_CUSTOM"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_CUSTOM"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_hunters_hatchet"
		"AbilityTextureName"			"item_quelling_blade"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"450"
		"ItemShopTags"					"damage"
		"ItemQuality"					"component"
		"ItemAliases"					"quelling_blade;hunters hatchet"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"0.1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"splash_damage"			"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"350"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_hurricane_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6623"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"650"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_hurricane_blade"
		"ItemRequirements"
		{
			"01"						"item_breeze_amulet;item_ogre_club"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_hurricane_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6624"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_hurricane_blade"
		"AbilityTextureName"			"item_heavens_halberd"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"evasion;hp;disarm"
		"ItemQuality"					"epic"
		"ItemAliases"					"heavens halberd;hurricane blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/heavens_halberd_debuff_disarm.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"15"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_evasion"			"25"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"disarm_duration"		"5.0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_ice_fang"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3294"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ice_fang"
		"AbilityTextureName"			"custom/ice_fang"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"625"
		"ItemShopTags"					"slow;damage"
		"ItemQuality"					"component"
		"ItemAliases"					"orb of venom;ice fang"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"particle"					"particles/generic_gameplay/generic_slowed_cold.vpcf"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_over_time"		"0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"base_damage"			"35"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"slow"					"-20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_illusionists_charm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6643"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"240"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_illusionists_charm"
		"ItemRequirements"
		{
			"01"						"item_mirrors_edge;item_orb_of_vitality;item_orb_of_haste"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_illusionists_charm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6644"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_illusionists_charm"
		"AbilityTextureName"			"custom/illusionists_charm"
		"AbilitySharedCooldown"			"manta"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"blink;tp"
		"ItemQuality"					"epic"
		"ItemAliases"					"blink;tricksters blade;manta"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}
		
		"AbilityCooldown"				"32"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"32"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"50"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_movespeed"		"10"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"15"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"600"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_hp_regen"		"3"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_per_str"			"0"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"illusion_count"		"2"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"illu_outgoing_damage"	"33"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"illu_incoming_damage"	"200"
			}
			"11"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"16"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_incandescance"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4594"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1750"
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_incandescance"
		"ItemRequirements"
		{
			"01"						"item_warm_fire;item_breeze_amulet"
		}
	}
	"item_incandescance"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4595"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_TOGGLE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_incandescance"
		"AbilityTextureName"			"item_radiance"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;blind"
		"ItemQuality"					"epic"
		"ItemAliases"					"radiance;incandescance"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"blind"					"25"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"min_radius"			"150"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"500"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"radius_change"			"50"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: War Drum
	//=================================================================================================================
	"item_recipe_inspiring_bongos"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7038"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"425"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_inspiring_bongos"
		"ItemRequirements"
		{
			"01"						"item_war_drum;item_orb_of_vitality;item_orb_of_haste"
		}
	}
	//=================================================================================================================
	// War Drum
	//=================================================================================================================
	"item_inspiring_bongos"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7039"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_inspiring_bongos"
		"AbilityTextureName"			"custom/inspiring_bongos"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1615"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"drum of endurance;drum"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"30"
		"AbilityManaCost"				"0"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"6"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"20"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mregen"			"3"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_as"				"70"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_hp_aura"			"500" //flat
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_regen_aura"		"3" //flat
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_as_aura"			"30" //flat
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_aura"			"40" //flat
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_buff"			"16" //percent
			}
			"11"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"500" //percent
			}
			"12"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6"
			}
			"13"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}

		"precache"
		{
			"particle"  "particles/items_fx/drum_of_endurance_buff.vpcf"
			"soundfile" "soundevents/game_sounds_items.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Barrier Leaves
	//=================================================================================================================
	"item_iron_rod"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7035"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_iron_rod"
		"AbilityTextureName"			"item_javelin"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"525"
		"ItemShopTags"					"damage;dps"
		"ItemQuality"					"component"
		"ItemAliases"					"javelin;iron rod"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"pierce_chance"			"25"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"pierce_damage"			"80"
			}
		}

		"precache"
		{
			"particle"  "particles/items2_fx/pipe_of_insight.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_HERO.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Iron Rose
	//=================================================================================================================
	"item_recipe_iron_rose"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7028"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"950"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_iron_rose"
		"ItemRequirements"
		{
			"01"						"item_ogre_club;item_staff_of_magi;item_crown_of_thorns;item_strange_trinket;item_mithril_armor"
		}
	}
	"item_iron_rose"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7029"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_AURA"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_iron_rose"
		"AbilityTextureName"			"item_lotus_orb"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"mana;int;str"
		"ItemQuality"					"epic"
		"ItemAliases"					"lotus orb"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"12"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"15"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"500"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"reflect"				"20"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}
	}
}"DOTAAbilities"
{
	"item_recipe_jar_of_souls"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7032"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1150"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_jar_of_souls"
		"ItemRequirements"
		{
			"01"						"item_ring_of_mana"
		}
	}
	"item_jar_of_souls"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3257"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_jar_of_souls"
		"AbilityTextureName"			"item_urn_of_shadows"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1800"
		"ItemShopTags"					"heal"
		"ItemQuality"					"component"
		"ItemAliases"					"urn of shadows;jar_of_souls"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"15"
		"AbilityCastRange"				"750"
		"AbilityManaCost"				"25"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_heal"			"25"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"8"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"disables_healing"		"0"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_all"				"8"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana_regen"		"3"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_keshas_booze_barrel"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7079"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"300"
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_keshas_booze_barrel"
		"ItemRequirements"
		{
			"01"						"item_valiant_locket;item_breeze_amulet;item_power_core"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_keshas_booze_barrel"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7080"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_keshas_booze_barrel"
		"AbilityTextureName"			"custom/keshas_booze_barrel"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"evasion;hp;disarm"
		"ItemQuality"					"epic"
		"ItemAliases"					"heavens halberd;hurricane blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/medallion_of_courage_friend.vpcf"
			"particle"					"particles/items2_fx/medallion_of_courage.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"10"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"30"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"block_chance"			"60"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_hp_regen"		"10"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all"				"15"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_evasion"			"25"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_heal_amp"		"20"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"disarm_duration"		"10.0"
			}
		}
	}
}"DOTAAbilities" 
{
	"item_kitteh_amulet"
	{
		"ID"							"131313"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_kitteh_amulet"
		"AbilityTextureName"			"custom/longclaws_amulet"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		"ItemPurchasable"				"0"
		
		"ItemCost"						"131313"
		"ItemShopTags"					"blink;tp;move_speed;mana_pool;boost_mana;cdr"
		"ItemQuality"					"epic"
		"ItemAliases"					"octarine amulet;god core;kitteh lil shineh amulet"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		"AbilityCooldown"				"5"
		
		"particle"
		{
			"particle"	"particles/econ/events/ti6/blink_dagger_start_ti6_lvl2.vpcf"
			"particle"	"particles/econ/events/ti6/blink_dagger_end_ti6_lvl2.vpcf"
			"particle"	"particles/items3_fx/octarine_core_lifesteal.vpcf"
		}
		


		// Special	
		

		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_lance_of_longinus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6275"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"3050"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_lance_of_longinus"
		"ItemRequirements"
		{
			"01"						"item_soldiers_pike;item_iron_rod"
		}
	}
	"item_lance_of_longinus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3276"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_lance_of_longinus"
		"AbilityTextureName"			"custom/lance_of_longinus"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;attack range"
		"ItemQuality"					"epic"
		"ItemAliases"					"dragon lance;lance of longinus"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"pierce_chance"			"40"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"pierce_damage"			"80"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_attack_range"	"150"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_lazarus_rags"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3267"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1150"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_lazarus_rags"
		"ItemRequirements"
		{
			"01"						"item_archmages_orb;item_angelic_guard"
		}
	}
	"item_lazarus_rags"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3268"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_lazarus_rags"
		"AbilityTextureName"			"custom/lazarus_rags"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"heal;mana"
		"ItemQuality"					"epic"
		"ItemAliases"					"guardian greaves;lazarus_rags"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"15"
		"AbilityManaCost"				"60"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_restore"			"16"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"heal"					"16"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_regen"			"3.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"spell_amp"				"30"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"800"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"18"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"block_chance"			"65"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_block"			"40"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health_regen"	"5"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"11"
			{
				"var_type"				"FIELD_INTEGER"
				"min_restore"			"275"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_leechblade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3265"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"2650"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_leechblade"
		"ItemRequirements"
		{
			"01"						"item_sanguine_mask;item_broadsword;item_broadsword"
		}
	}
	"item_leechblade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3266"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_leechblade"
		"AbilityTextureName"			"custom/leechblade"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"lifesteal"
		"ItemQuality"					"epic"
		"ItemAliases"					"satanic;leechblade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"25"
		"AbilityManaCost"				"75"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"active_lifesteal"		"100"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3.5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"70"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_legionnaires_dualswords"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6621"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"740"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_legionnaires_dualswords"
		"ItemRequirements"
		{
			"01"						"item_orb_of_haste;item_ogre_club;item_cursed_amulet"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_legionnaires_dualswords"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6622"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_legionnaires_dualswords"
		"AbilityTextureName"			"item_sange_and_yasha"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"blink;tp"
		"ItemQuality"					"epic"
		"ItemAliases"					"blink;tricksters blade;manta"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/sange_maim.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"32"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"20"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_movespeed"		"16"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_slow"			"-64"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"disable_duration"		"3.5"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"disable_chance"		"33"
			}

		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_lifeweavers_clockwork"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7075"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_lifeweavers_clockwork"
		"ItemRequirements"
		{
			"01"						"item_arcane_accelerator;item_soul_vessel"
		}
	}
	"item_lifeweavers_clockwork"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7076"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_lifeweavers_clockwork"
		"AbilityTextureName"			"custom/lifeweavers_clockwork"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"cooldown;reduction"
		"ItemQuality"					"epic"
		"ItemAliases"					"octarine core;lifeweavers_clockwork"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"status_amp"			"20"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_spell_amp"		"20"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"20"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"650"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"lifesteal"				"12"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"mob_lifesteal"			"3"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Lighting Bottle
	//=================================================================================================================
	"item_recipe_lightningbottle"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7030"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"965"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_lightningbottle"
		"ItemRequirements"
		{
			"01"						"item_runed_artifact;item_lightningrod;item_orb_of_renewal"
		}
	}
	"item_lightningbottle"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7031"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_lightningbottle.lua"
		"AbilityTextureName"			"bottle_doubledamage"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1765"
		"ItemShopTags"					"magic"
		"ItemQuality"					"component"
		"ItemAliases"					"bottle;lightningbottle;lightning"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"35"
		"AbilityManaCost"				"150"
		"AbilityCastRange"				"625"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/units/heroes/hero_zuus/zuus_lightning_bolt.vpcf"
			"particle"  				"particles/items2_fx/mjollnir_shield.vpcf"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"primary_to_damage"		"200"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"35"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_regen"			"2.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"625"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_chance"			"15"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_damage"			"125"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_bounces"		"4"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_restore"			"30" //percent
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_restore"			"10" //percent
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_restore_lightning""10" //percent
			}
			"11"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_restore_lightning""5" //percent
			}
			"12"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_restore_shield"	"15" //percent
			}
			"13"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_restore_shield"	"8" //percent
			}
			"14"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"15"
			}
			"15"
			{
				"var_type"				"FIELD_FLOAT"
				"status_amp"			"15"
			}
			"16"
			{
				"var_type"				"FIELD_FLOAT"
				"paralyze_duration"		"0.25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_lightningrod"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4132"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"350"
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_lightningrod"
		"ItemRequirements"
		{
			"01"						"item_broadsword;item_ruby_ring;item_iron_rod"
		}
	}
	"item_lightningrod"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3219"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitTargetFlags" 		"DOTA_UNIT_TARGET_FLAG_NONE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_lightningrod"
		"AbilityTextureName"			"item_maelstrom"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1765"
		"ItemShopTags"					"magic"
		"ItemQuality"					"component"
		"ItemAliases"					"maelstrom;lightningrod"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"18"
		"AbilityManaCost"				"150"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
			"particle"					"particles/units/heroes/hero_zuus/zuus_lightning_bolt.vpcf"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"primary_to_damage"		"200"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"35"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_regen"			"2.5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"625"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_chance"			"15"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_damage"			"125"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_bounces"		"4"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"paralyze_duration"		"0.25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_lucifers_cage"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6277"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"400"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_lucifers_cage"
		"ItemRequirements"
		{
			"01"						"item_jar_of_souls;item_power_core;item_strange_trinket;item_cursed_amulet"
		}
	}
	"item_lucifers_cage"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3278"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_lucifers_cage"
		"AbilityTextureName"			"item_spirit_vessel"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"heal"
		"ItemQuality"					"artifact"
		"ItemAliases"					"spirit vessel;lucifers cage"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"15"
		"AbilityCastRange"				"750"
		"AbilityManaCost"				"25"


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_heal"			"50"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"8"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"disables_healing"		"1"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_amp"				"25"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_all"				"25"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana_regen"		"5"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana"			"750"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_lucys_ring"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7077"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"125"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_lucys_ring"
		"ItemRequirements"
		{
			"01"						"item_breeze_amulet;item_dark_wand;item_power_core"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_lucys_ring"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7078"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_lucys_ring"
		"AbilityTextureName"			"custom/lucys_ring"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"evasion;hp;disarm"
		"ItemQuality"					"epic"
		"ItemAliases"					"heavens halberd;hurricane blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/heavens_halberd_debuff_disarm.vpcf"
			"particle"					"particles/dagon_mystic.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"100"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"15"
			}
			"02"
			
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"15"
			}
			"03"
			
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"30"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_evasion"			"20"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"max_mana_cost"			"65"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"max_hp_damage"			"15"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"exhaust_duration"		"10"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"base_damage"			"20"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"int_damage"			"60"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_mantle_of_the_fallen"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3263"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_mantle_of_the_fallen"
		"ItemRequirements"
		{
			"01"						"item_sanguine_mask;item_mithril_armor;item_ring_of_mana"
		}
	}
	"item_mantle_of_the_fallen"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3264"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_mantle_of_the_fallen"
		"AbilityTextureName"			"custom/mantle_of_the_fallen"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"lifesteal"
		"ItemQuality"					"component"
		"ItemAliases"					"vladmir;mantle_of_the_fallen"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"10"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"15"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana_regen"		"2"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Arcane Rune
	//=================================================================================================================
	"item_meepo_rune_arcane"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7101"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_arcane"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemDroppable"					"1"
		"ItemPurchasable"				"0"
		"Model"							"models/props_gameplay/rune_arcane.vmdl"	

		"precache"
		{
			"particle"					"particles/generic_gameplay/rune_arcane.vpcf"
			"particle"					"particles/generic_gameplay/rune_arcane_owner.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"50"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"cdr"					"30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_reduc"			"30"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Bounty Rune
	//=================================================================================================================
	"item_meepo_rune_bounty"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7102"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_bounty"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemPurchasable"				"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/rune_goldxp.vmdl"	

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"gold_base"				"40"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Double Damage
	//=================================================================================================================
	"item_meepo_rune_dd"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7099"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_dd"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemPurchasable"				"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/rune_doubledamage01.vmdl"	

		"precache"
		{
			"particle"					"particles/generic_gameplay/rune_doubledamage.vpcf"
			"particle"					"particles/generic_gameplay/rune_doubledamage_owner.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"100"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"45"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Haste Rune
	//=================================================================================================================
	"item_meepo_rune_haste"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7103"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_haste"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemPurchasable"				"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/rune_haste01.vmdl"	

		"precache"
		{
			"particle"					"particles/generic_gameplay/rune_haste.vpcf"
			"particle"					"particles/generic_gameplay/rune_haste_owner.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"22"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"100"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_as"				"100"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Illusion Rune
	//=================================================================================================================
	"item_meepo_rune_illusion"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7104"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_illusion"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemPurchasable"				"0"
		"ItemSellable"					"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/rune_illusion01.vmdl"	

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"75"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"max_images"			"2"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"incoming"				"200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"outgoing"				"35"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Invis Rune
	//=================================================================================================================
	"item_meepo_rune_invis"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7105"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_invis"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemPurchasable"				"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/rune_invisibility01.vmdl"	

		"precache"
		{
			"particle"					"particles/generic_gameplay/rune_haste.vpcf"
			"particle"					"particles/generic_gameplay/rune_haste_owner.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"45"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Damage Reduction Rune
	//=================================================================================================================
	"item_meepo_rune_reduc"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7106"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_reduc"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemPurchasable"				"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/refresher_shard.vmdl"	

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_reduc"			"30"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Meepo Regen
	//=================================================================================================================
	"item_meepo_rune_regen"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7100"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_meepo_rune_regen"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemPurchasable"				"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/rune_regeneration01.vmdl"	

		"precache"
		{
			"particle"					"particles/generic_gameplay/rune_regeneration.vpcf"
			"particle"					"particles/generic_gameplay/rune_regen_owner.vpcf"
			
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_wisp.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"30"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"regen"					"6"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_memento"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6269"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"750"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_memento"
		"ItemRequirements"
		{
			"01"						"item_pages_buckler;item_ringing_rapier;item_breeze_amulet"
		}
	}
	"item_memento"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3270"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_memento"
		"AbilityTextureName"			"item_rapier"
		"AbilitySharedCooldown"			"reverb"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"echo sabre;memento"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/units/heroes/hero_faceless_void/faceless_void_backtrack.vpcf"
		}
		
		"AbilityCooldown"				"5"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"attack_delay"			"0.3"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"paralyze_duration"		"1"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"dodge_chance"			"17"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health_regen"	"1"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: War Drum
	//=================================================================================================================
	"item_recipe_mighty_timpani"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7040"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"250"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_mighty_timpani"
		"ItemRequirements"
		{
			"01"						"item_power_core;item_power_core;item_war_drum"
		}
	}
	//=================================================================================================================
	// War Drum
	//=================================================================================================================
	"item_mighty_timpani"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7041"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_mighty_timpani"
		"AbilityTextureName"			"custom/mighty_timpani"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1615"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"drum of endurance;drum"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"30"
		"AbilityManaCost"				"0"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"30"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"30"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mregen"			"3"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_as"				"35"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_aura"			"35" //flat
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_dmg"				"20" //percent
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_buff"			"13" //percent
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}

		"precache"
		{
			"particle"  "particles/items_fx/drum_of_endurance_buff.vpcf"
			"soundfile" "soundevents/game_sounds_items.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_mirrors_edge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6619"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"240"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_mirrors_edge"
		"ItemRequirements"
		{
			"01"						"item_blade_of_agility;item_gauntlet_of_alacrity"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_mirrors_edge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6620"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_mirrors_edge"
		"AbilityTextureName"			"item_manta"
		"AbilitySharedCooldown"			"manta"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"blink;tp"
		"ItemQuality"					"epic"
		"ItemAliases"					"blink;tricksters blade;manta"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}
		
		"AbilityCooldown"				"32"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"16"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"25"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"illusion_count"		"1"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"illu_outgoing_damage"	"20"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"illu_incoming_damage"	"200"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"16"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_mithril_armor"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3291"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_mithril_armor"
		"AbilityTextureName"			"item_chainmail"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"560"
		"ItemShopTags"					"armor"
		"ItemQuality"					"component"
		"ItemAliases"					"chainmail;mithril armor"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_ogre_club"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"1568"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ogre_club"
		"AbilityTextureName"			"item_ogre_axe"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"900"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"ogre club;ogre axe"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_ogre_seal_totem"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7033"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"750"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_ogre_seal_totem"
		"ItemRequirements"
		{
			"01"						"item_orb_of_vitality;item_strange_trinket"
		}
	}
	//=================================================================================================================
	// Ogre Seal Totem
	//=================================================================================================================
	"item_ogre_seal_totem"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7027"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ogre_seal_totem"
		"AbilityTextureName"			"custom/ogre_seal_totem"

		"Model"							"models/props_gameplay/treasure_chest001.vmdl"
		"Effect"						"particles/generic_gameplay/dropped_aegis.vpcf"

		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCooldown"				"40.0"
	    "AbilityManaCost"               "75"

		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"3000"
		"ItemShopTags"					""
		"ItemQuality"					"epic"
		"ItemAliases"					"ogre seal club"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_strength"			"15"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_hp"					"600"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"hp_per_str"				"0"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"bonus_hp_regen"			"3.5"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_mana"				"400"
			}
	        "06"
	        {
	            "var_type"                  "FIELD_INTEGER"
	            "radius"                    "275"
	        }
	        "07"
	        {
	            "var_type"                  "FIELD_INTEGER"
	            "damage"                    "250"
	        }
	        "08"
	        {
	            "var_type"                  "FIELD_FLOAT"
	            "stun_duration"             "1"
	        }
	    }

	    "precache"
	    {
	    	"particle"  "particles/units/heroes/hero_phantom_assassin/phantom_assassin_crit_impact.vpcf"
	    	//"soundfile" "soundevents/game_sounds_heroes/game_sounds_HERO.vsndevts"
	    }
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_orb_of_essence"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6627"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"350"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_orb_of_essence"
		"ItemRequirements"
		{
			"01"						"item_staff_of_magi;item_ring_of_mana"
		}
	}
	"item_orb_of_essence"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6628"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_orb_of_essence"
		"AbilityTextureName"			"item_energy_booster"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"intelligence;mana regen"
		"ItemQuality"					"epic"
		"ItemAliases"					"energy booster;orb of essence"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"15"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana_regen"		"2"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_orb_of_haste"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6631"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"500"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_orb_of_haste"
		"ItemRequirements"
		{
			"01"						"item_gauntlet_of_alacrity;item_blade_of_agility"
		}
	}
	"item_orb_of_haste"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6632"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_orb_of_haste"
		"AbilityTextureName"			"custom/orb_of_haste"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"agility;movespeed;attackspeed"
		"ItemQuality"					"epic"
		"ItemAliases"					"haste booster;orb of haste"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"30"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"10"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_movespeed"		"10"
			}
		}
	}
}"DOTAAbilities"
{
	"item_orb_of_renewal"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"946"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_orb_of_renewal"
		"AbilityTextureName"			"item_soul_booster"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"cooldown;reduction"
		"ItemCost"						"1200"
		"ItemQuality"					"epic"
		"ItemAliases"					"octarine core;orb of renewal"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"heal_restore"			"30" //percent
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_restore"			"10" //percent
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_orb_of_shadows"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3292"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_orb_of_shadows"
		"AbilityTextureName"			"custom/orb_of_shadows"
		"AbilitySharedCooldown"			"invis"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"480"
		"ItemShopTags"					"invis"
		"ItemQuality"					"component"
		"ItemAliases"					"shadow amulet;orb of shadows"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"30"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"8"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_orb_of_vitality"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6629"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"350"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_orb_of_vitality"
		"ItemRequirements"
		{
			"01"						"item_ogre_club;item_crystal_of_life;item_ruby_ring"
		}
	}
	"item_orb_of_vitality"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6630"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_orb_of_vitality"
		"AbilityTextureName"			"item_vitality_booster"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"strength;health;health regen"
		"ItemQuality"					"epic"
		"ItemAliases"					"vitality booster;orb of vitality"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"10"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"500"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_hp_regen"		"1.75"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_per_str"			"0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_pages_buckler"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3231"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_pages_buckler"
		"AbilityTextureName"			"item_poor_mans_shield"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"425"
		"ItemShopTags"					"defense;block"
		"ItemQuality"					"component"
		"ItemAliases"					"poor mans shield;pages buckler"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"15"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"block_chance"			"50"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_block"			"20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_health_regen"	"1"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_penitent_mail"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3237"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"750"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_penitent_mail"
		"ItemRequirements"
		{
			"01"						"item_crown_of_thorns;item_amulet_of_aggression;item_mithril_armor"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_penitent_mail"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3238"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_penitent_mail"
		"AbilityTextureName"			"item_blade_mail"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"400"
		"ItemShopTags"					"taunt;aggro;threat"
		"ItemQuality"					"epic"
		"ItemAliases"					"blade mail;penitent mail"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"15"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"reflect"				"30"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"active_reflect"		"100"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_threat"			"50"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_gain"			"5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_gain_ult"		"20"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"8"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"3"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: Shadow Blade
	//=================================================================================================================
	"item_recipe_penumbra"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7055"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_penumbra"
		"ItemRequirements"
		{
			"01"						"item_shadow_blade;item_power_core;item_cursed_amulet"
		}
	}
	//=================================================================================================================
	// Shadow Blade
	//=================================================================================================================
	"item_penumbra"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7056"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_penumbra"
		"AbilityTextureName"			"item_silver_edge"
		"AbilitySharedCooldown"			"invis"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"480"
		"ItemShopTags"					"invis"
		"ItemQuality"					"component"
		"ItemAliases"					"shadow blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"75"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_speed"			"50"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_damage"			"50"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all"				"15"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"325"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"15"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"move_speed"			"30"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"fade_time"				"0.3"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"break_duration"		"6"
			}
		}

		"precache"
		{
			"particle"  "particles/generic_hero_status/status_invisibility_start.vpcf"
		}
	}
}"DOTAAbilities"
{	
	"item_phantom_staff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7015"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"AbilitySharedCooldown"			"ghost"
		"ScriptFile"					"items/item_phantom_staff"
		"AbilityTextureName"			"item_ghost"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"425"	
		"ItemShopTags"					"ghost scepter"
		"ItemQuality"					"epic"
		"ItemAliases"					"ghost scepter"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/units/heroes/hero_pugna/pugna_decrepify.vpcf"
			"particle"					"particles/status_fx/status_effect_necrolyte_spirit.vpcf"
		}
		
		"AbilityCooldown"				"40"
		"AbilitySharedCooldown"			"ghost;ethereal"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"1.5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_plate_of_the_unbreakable"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3235"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_plate_of_the_unbreakable"
		"ItemRequirements"
		{
			"01"						"item_purging_stone;item_mithril_armor"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_plate_of_the_unbreakable"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3236"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_IGNORE_PSEUDO_QUEUE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_plate_of_the_unbreakable"
		"AbilityTextureName"			"blade_mail_axe_pw"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"400"
		"ItemShopTags"					"heal;purge;dispel;armor"
		"ItemQuality"					"epic"
		"ItemAliases"					"plate of the unbreakable;unbreakable"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/generic_gameplay/generic_purge.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"25"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"armor"					"5"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"heal"					"275"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"armor_aura"			"5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_potion_of_essence"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4501"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_potion_of_essence"
		"AbilityTextureName"			"item_clarity"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/clarity.vmdl"	
		
		"ItemCost"						"60"
		"ItemShopTags"					"mana"
		"ItemQuality"					"consumable"
		"ItemAliases"					"clarity"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		"ItemStackable"					"1"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE"
		"ItemPermanent"					"0"
		"ItemInitialCharges"			"1"
		"ItemDisplayCharges"			"1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"regen"					"6"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_potion_of_recovery"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"4500"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_potion_of_recovery"
		"AbilityTextureName"			"item_flask"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/salve.vmdl"
		
		"ItemCost"						"60"
		"ItemShopTags"					"heal"
		"ItemQuality"					"consumable"
		"ItemAliases"					"salve"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		"ItemStackable"					"1"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE"
		"ItemPermanent"					"0"
		"ItemInitialCharges"			"1"
		"ItemDisplayCharges"			"1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"regen"					"6"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_power_core"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6659"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"0"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_power_core"
		"ItemRequirements"
		{
			"01"						"item_ogre_club;item_blade_of_agility;item_staff_of_magi"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_power_core"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6660"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_power_core"
		"AbilityTextureName"			"custom/power_core"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"heal;purge;dispel;armor;aura"
		"ItemQuality"					"epic"
		"ItemAliases"					"gauntlet of might"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}


		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all"				"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_presence_booster"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7073"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"250"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_presence_booster"
		"ItemRequirements"
		{
			"01"						"item_dagger_of_escape;item_anvil;item_amulet_of_aggression"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_presence_booster"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7074"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_presence_booster"
		"AbilityTextureName"			"item_abyssal_blade"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		"ItemStackable"					"1"
		"ItemPermanent"					"1"
		
		"ItemShopTags"					"blink;mobility;stun;tank"
		"ItemQuality"					"epic"
		"ItemAliases"					"blink dagger;stun"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"15"
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
			"particle"					"particles/econ/items/axe/axe_helm_shoutmask/axe_beserkers_call_owner_shoutmask.vpcf"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"blink_range"			"1200"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"25"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"25"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bash_duration"			"1"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_threat"			"50"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_threat"			"50"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_consume"		"5"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_consume_ult"	"20"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"active_radius"			"600"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_protection_sphere"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7085"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"250"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_protection_sphere"
		"ItemRequirements"
		{
			"01"						"item_archmages_orb;item_power_core"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_protection_sphere"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7086"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_protection_sphere"
		"AbilityTextureName"			"item_sphere"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"400"
		"ItemShopTags"					"mana;spell amp;mr;mana regen"
		"ItemQuality"					"epic"
		"ItemAliases"					"protection sphere;linken's sphere;linkens"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items3_fx/warmage_recipient.vpcf"
			"particle"					"particles/units/heroes/hero_nyx_assassin/nyx_assassin_mana_burn.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"15"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_regen"			"3.5"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"spell_amp"				"25"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"600"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_restore"			"20"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"16"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all"				"10"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"min_restore"			"350"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"internal_cooldown"		"12"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_purging_stone"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3230"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_purging_stone"
		"AbilityTextureName"			"item_infused_raindrop"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"425"
		"ItemShopTags"					"heal;dispel"
		"ItemQuality"					"component"
		"ItemAliases"					"purging stone"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"25"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"heal"					"150"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_rapture"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7053"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"300"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_rapture"
		"ItemRequirements"
		{
			"01"						"item_hurricane_blade;item_valiant_locket"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_rapture"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7054"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_rapture"
		"AbilityTextureName"			"custom/rapture"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"evasion;hp;disarm"
		"ItemQuality"					"epic"
		"ItemAliases"					"heavens halberd;hurricane blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/heavens_halberd_debuff_disarm.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"15"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"30"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"block_chance"			"60"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"20"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_evasion"			"25"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_hp_regen"		"5"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_heal_amp"		"25"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"disarm_duration"		"5.0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_reaping_scythe"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3254"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1255"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_reaping_scythe"
		"ItemRequirements"
		{
			"01"						"item_gem_of_corruption;item_broadsword"
		}
	}
	"item_reaping_scythe"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3255"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_reaping_scythe"
		"AbilityTextureName"			"item_desolator"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"325"
		"ItemShopTags"					"armor;corruption"
		"ItemQuality"					"component"
		"ItemAliases"					"desolator;reaping scythe"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"armor_reduction"		"-6"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"15.0"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"35"
			}
		}
	}
}"DOTAAbilities"
{
	"item_ringing_rapier"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3253"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ringing_rapier"
		"AbilityTextureName"			"item_echo_sabre"
		"AbilitySharedCooldown"			"reverb"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"AbilityCooldown"				"5"
		
		"ItemCost"						"1200"
		"ItemShopTags"					"range"
		"ItemQuality"					"component"
		"ItemAliases"					"echo sabre;ringing rapier"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"attack_delay"			"0.3"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"paralyze_duration"		"0.5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_ring_of_mana"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3224"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ring_of_mana"
		"AbilityTextureName"			"item_ring_of_basilius"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"200"
		"ItemShopTags"					"mana;regen"
		"ItemQuality"					"component"
		"ItemAliases"					"basilius;ring of mana"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mana_regen"		"1.5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: Rising Salt
	//=================================================================================================================
	"item_recipe_rising_salt"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7024"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"275"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_rising_salt"
		"ItemRequirements"
		{
			"01"						"item_strange_trinket;item_warlocks_reliquary;item_power_core"
		}
	}
	//=================================================================================================================
	// Rising Salt
	//=================================================================================================================
	"item_rising_salt"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7025"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_rising_salt"
		"AbilityTextureName"			"item_iron_talon"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1200"
		"ItemShopTags"					""
		"ItemQuality"					"component"
		"ItemAliases"					"sheen"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"2"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"200"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"cooldown"				"2"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"400"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all"				"10"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_spell_amp"		"25"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_cost_reduction"	"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_royal_guardian"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7057"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"425"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_royal_guardian"
		"ItemRequirements"
		{
			"01"						"item_fortress_shield;item_mithril_armor;item_crystal_of_life;item_strange_trinket"
		}
	}
	"item_royal_guardian"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7058"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_royal_guardian"
		"AbilityTextureName"			"item_vanguard"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage block;blind;tank;survivability;armor"
		"ItemQuality"					"epic"
		"ItemAliases"					"vanguard;royal guardian"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"12"
		"AbilityManaCost"				"100"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
			"particle"					"particles/econ/items/centaur/centaur_ti6_gold/centaur_ti6_warstomp_gold.vpcf"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"90"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"block_chance"			"50"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health_regen"	"5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"500"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"500"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"blind"					"40"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"slam_radius"			"250"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"slam_distance"			"400"
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"slam_duration"			"5"
			}
			"11"
			{
				"var_type"				"FIELD_FLOAT"
				"armor_damage"			"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Ruby Ring
	//=================================================================================================================
	"item_ruby_ring"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7018"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ruby_ring"
		"AbilityTextureName"			"ring_of_regen"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"250"
		"ItemShopTags"					"regen"
		"ItemQuality"					"component"
		"ItemAliases"					"ring of regen"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"hp_regen"				"1.5"
			}
		}
	}
}"DOTAAbilities"
{
	"item_runed_artifact"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3259"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_runed_artifact"
		"AbilityTextureName"			"custom/runed_artifact"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1480"
		"ItemShopTags"					"cooldown;reduction"
		"ItemQuality"					"component"
		"ItemAliases"					"octarine core;runed_artifact"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"status_amp"			"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_sanguine_mask"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3225"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_sanguine_mask"
		"AbilityTextureName"			"item_lifesteal"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"350"
		"ItemShopTags"					"lifesteal"
		"ItemQuality"					"component"
		"ItemAliases"					"morbid mask;sanguine mask"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"ranged_lifesteal"		"10"
			}
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_lifesteal"		"15"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: Shadow Blade
	//=================================================================================================================
	"item_recipe_shadow_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7000"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1680"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_shadow_blade"
		"ItemRequirements"
		{
			"01"						"item_orb_of_shadows;item_broadsword;item_gauntlet_of_alacrity"
		}
	}
	//=================================================================================================================
	// Shadow Blade
	//=================================================================================================================
	"item_shadow_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7001"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_shadow_blade"
		"AbilityTextureName"			"item_invis_sword"
		"AbilitySharedCooldown"			"invis"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"480"
		"ItemShopTags"					"invis"
		"ItemQuality"					"component"
		"ItemAliases"					"shadow blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"28"
		"AbilityManaCost"				"75"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_speed"			"30"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_damage"			"40"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"250"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"14"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"move_speed"			"20"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"fade_time"				"0.3"
			}
		}

		"precache"
		{
			"particle"  "particles/generic_hero_status/status_invisibility_start.vpcf"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_siegebreaker"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3251"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"975"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_siegebreaker"
		"ItemRequirements"
		{
			"01"						"item_soldiers_pike;item_soldiers_pike"
		}
	}
	"item_siegebreaker"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3252"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_siegebreaker"
		"AbilityTextureName"			"item_hurricane_pike"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"325"
		"ItemShopTags"					"range"
		"ItemQuality"					"component"
		"ItemAliases"					"javelin;soldiers pike"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"pierce_chance"			"50"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_range"			"350"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_soldiers_pike"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3234"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_soldiers_pike"
		"AbilityTextureName"			"item_dragon_lance"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"325"
		"ItemShopTags"					"range"
		"ItemQuality"					"component"
		"ItemAliases"					"dragon lance;soldiers pike"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_range"			"150"
			}
		}
	}
}	"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_soothslayer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6667"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"950"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_soothslayer"
		"ItemRequirements"
		{
			"01"						"item_anvil;item_memento"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_soothslayer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6668"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_soothslayer"
		"AbilityTextureName"			"custom/soothslayer"
		"AbilitySharedCooldown"			"reverb"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"heal;purge;dispel;armor;aura"
		"ItemQuality"					"epic"
		"ItemAliases"					"gauntlet of might"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"5"

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"attack_delay"			"0.3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"dodge_chance"			"17"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health_regen"	"3"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"30"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"40"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"bash_duration"			"1"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_sorcerers_staff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3222"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_sorcerers_staff"
		"AbilityTextureName"			"item_kaya"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"320"
		"ItemShopTags"					"spell;magic"
		"ItemQuality"					"component"
		"ItemAliases"					"kaya;sorcerers staff"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_spell_amp"		"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_soul_vessel"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3095"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_soul_vessel"
		"ItemRequirements"
		{
			"01"						"item_sanguine_mask"
		}
	}
	"item_soul_vessel"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3258"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_soul_vessel"
		"AbilityTextureName"			"custom/soul_vessel"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1800"
		"ItemShopTags"					"heal;spellvamp;lifesteal"
		"ItemQuality"					"component"
		"ItemAliases"					"octarine core;soul_vessel"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"lifesteal"				"10"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"mob_lifesteal"			"2.5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_spellslayers_dirk"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7097"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1050"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_spellslayers_dirk"
		"ItemRequirements"
		{
			"01"						"item_purging_stone;item_blade_of_agility;item_blade_of_agility;item_staff_of_magi"
		}
	}
	"item_spellslayers_dirk"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7098"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_spellslayers_dirk"
		"AbilityTextureName"			"item_diffusal_blade"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"int;agi;purge;heal"
		"ItemQuality"					"epic"
		"ItemAliases"					"diffusal;dirk;spellslayer"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCooldown"				"20"
		"AbilityManaCost"				"75"
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"15"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_agility"			"25"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"active_healdamage"		"200"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"onhit_damage"			"20"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"onhit_damage_illu"		"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_spell_refinery"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3589"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_spell_refinery"
		"AbilityTextureName"			"custom/spell_refinery"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"485"
		"ItemShopTags"					"cast range"
		"ItemQuality"					"component"
		"ItemAliases"					"aether lens;spell refinery"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_cast_range"		"250"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_staff_of_magi"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6616"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_staff_of_magi"
		"AbilityTextureName"			"item_staff_of_wizardry"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"900"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"staff of magi;staff of wizardry"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Strange Trinket
	//=================================================================================================================
	"item_strange_trinket"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7026"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_strange_trinket"
		"AbilityTextureName"			"custom/strange_trinket"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"450"
		"ItemShopTags"					"mana"
		"ItemQuality"					"component"
		"ItemAliases"					"calming skull"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"400"
			}
		}
	}
}//=================================================================================================================
//Tempest Staff (Euls)
//Components:
//Hurricane Blade (2175)
//Wings of Icarus (2210)
//Staff of Magi (900)
//Total: 5285
//Stats:
//+20 Str
//+20 Int
//+50% Ms
//+25% Evasion
//Active: Howling Wind - 
//When cast on allies or self, 
//grants flying movement, bonus attack speed, and movement speed for 5 seconds, 
//When cast on enemies, 
//Disarm+Root them for 5 seconds. 
//CD:15s, 
//Manacost:125

"DOTAAbilities"
{
	//=================================================================================================================
	//Recipie
	//=================================================================================================================
	"item_recipe_tempest_staff"
	{
		"ID"							"7107"														
		// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"Itemrecipe" 					"1"
		"ItemResult"					"item_tempest_staff"
		"ItemRequirements"
		{
			"01"						"item_wings_of_icarus;item_hurricane_blade;item_staff_of_magi"
		}
	}
	//=================================================================================================================
	//Tempest Staff
	//=================================================================================================================
	"item_tempest_staff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7108"														
		// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_tempest_staff"
		"AbilityTextureName"			"item_cyclone"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"5285"
		"ItemShopTags"					"evasion;hp;mp;movement"
		"ItemQuality"					"epic"
		"ItemAliases"					"euls;tempest staff"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/econ/events/ti6/phase_boots_ti6.vpcf"
			"particle"					"particles/rahx/rahx_tornado.vpcf"
		}
		
		"AbilityCooldown"				"15"
		"AbilityCastRange"				"900"
		"AbilityManaCost"				"125"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"20"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_evasion"			"25"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"20"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_movespeed"		"50"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"active_movespeed"		"800"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"active_attackspeed"	"100"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"active_duration"		"5.0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_thanatos"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6663"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1800"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_thanatos"
		"ItemRequirements"
		{
			"01"						"item_reaping_scythe;item_broadsword"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_thanatos"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6664"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_thanatos"
		"AbilityTextureName"			"custom/thanatos"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"heal;purge;dispel;armor;aura"
		"ItemQuality"					"epic"
		"ItemAliases"					"gauntlet of might"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"15"

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"base_armor_reduction"	"-8"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"base_duration"			"15.0"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"stack_armor_reduction"	"-1"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"stack_duration"		"3.5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"65"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_titan_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6645"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"500"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_titan_blade"
		"ItemRequirements"
		{
			"01"						"item_ogre_club"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_titan_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6646"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_titan_blade"
		"AbilityTextureName"			"item_claymore"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"strength;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"titan blade;claymore"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_strength"		"10"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"10"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_tome_of_immense_knowledge"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"9998"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_tome_of_immense_knowledge"
		"AbilityTextureName"			"item_tome_of_knowledge"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/clarity.vmdl"	
		
		"ItemCost"						"10000"
		"ItemShopTags"					"xp;experience"
		"ItemQuality"					"consumable"
		"ItemAliases"					"tome of knowledge;creed of knowledge"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE"
		"ItemPermanent"					"0"
		"ItemStackable"					"1"
		"ItemInitialCharges"			"1"
		"ItemDisplayCharges"			"1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_xp"				"15000"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_trebuchet"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6665"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"250"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_trebuchet"
		"ItemRequirements"
		{
			"01"						"item_siegebreaker;item_force_boots;item_power_core"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_trebuchet"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6666"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_trebuchet"
		"AbilityTextureName"			"custom/trebuchet"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"heal;purge;dispel;armor;aura"
		"ItemQuality"					"epic"
		"ItemAliases"					"gauntlet of might"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"15"
		"AbilityManaCost"				"50"

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"pierce_chance"			"80"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_range"			"500"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_movement_speed"  "18"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"20"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"20"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"20"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"30"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"push_distance"			"-900"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"active_duration"		"3"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_tricksters_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3247"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"240"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_tricksters_blade"
		"ItemRequirements"
		{
			"01"						"item_dagger_of_escape;item_mirrors_edge"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_tricksters_blade"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3248"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_tricksters_blade"
		"AbilityTextureName"			"custom/tricksters_blade"
		"AbilitySharedCooldown"			"manta"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"blink;tp"
		"ItemQuality"					"epic"
		"ItemAliases"					"blink;tricksters blade;manta"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}
		"AbilityCooldown"				"8"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agility"			"25"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attackspeed"		"35"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"blink_range"			"1200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"illu_outgoing_damage"	"20"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"illu_incoming_damage"	"200"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"4"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_trinity"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7089"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"600"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_trinity"
		"ItemRequirements"
		{
			"01"						"item_crystalline_staff;item_cultists_veil;item_lightningrod"
		}
	}
	"item_trinity"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7090"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IMMEDIATE |DOTA_ABILITY_BEHAVIOR_AOE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_trinity"
		"AbilityTextureName"			"item_bloodthorn"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;int;dps"
		"ItemQuality"					"epic"
		"ItemAliases"					"bloodthorn;trinity;mjollnir"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		"AbilityCastRange"				"750"
		"AbilityCooldown"				"21"
		"AbilityManaCost"				"200"		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"40"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage"			"50"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_armor"			"5"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_regen"			"4"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_cast_range"		"500"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_spell_amp"		"40"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_cost_reduction"	"25"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage_taken"	"50"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"proc_chance"			"17"
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"proc_bounces"			"5"
			}
			"11"
			{
				"var_type"				"FIELD_FLOAT"
				"proc_damage"			"150"
			}
			"12"
			{
				"var_type"				"FIELD_FLOAT"
				"proc_radius"			"500"
			}
			"13"
			{
				"var_type"				"FIELD_FLOAT"
				"paralyze_duration"		"0.4"
			}
			"14"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_mr"				"-30"
			}
			"15"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_int_dmg"		"250"
			}
			"16"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_duration"		"5"
			}
			"17"
			{
				"var_type"				"FIELD_FLOAT"
				"debuff_tick_rate"		"0.5"
			}
			"18"
			{
				"var_type"				"FIELD_INTEGER"
				"debuff_radius"			"650"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_valiant_locket"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7063"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"650"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_valiant_locket"
		"ItemRequirements"
		{
			"01"						"item_pages_buckler;item_cursed_amulet;item_mithril_armor"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_valiant_locket"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7064"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_BOTH"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_valiant_locket"
		"AbilityTextureName"			"item_medallion_of_courage"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"evasion;hp;disarm"
		"ItemQuality"					"epic"
		"ItemAliases"					"heavens halberd;hurricane blade"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/medallion_of_courage_friend.vpcf"
			"particle"					"particles/items2_fx/medallion_of_courage.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
		
		"AbilityCooldown"				"10"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"25"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"block_chance"			"60"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_hp_regen"		"5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_heal_amp"		"15"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"disarm_duration"		"10.0"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_vaudevilles_mystery_box"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"9997"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_vaudevilles_mystery_box"
		"AbilityTextureName"			"custom/treasure_box"
		"ItemKillable"					"1"
		"ItemSellable"					"0"
		"ItemDroppable"					"1"
		"Model"							"models/props_gameplay/clarity.vmdl"	
		
		"ItemCost"						"20000"
		"ItemShopTags"					"xp;experience"
		"ItemQuality"					"consumable"
		"ItemAliases"					"tome of knowledge;creed of knowledge"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE"
		"ItemPermanent"					"0"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_xp"				"15000"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_visionarys_cutlass"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7036"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1400"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_visionarys_cutlass"
		"ItemRequirements"
		{
			"01"						"item_broadsword;item_iron_rod;item_gauntlet_of_alacrity"
		}
	}
	//=================================================================================================================
	// Barrier Leaves
	//=================================================================================================================
	"item_visionarys_cutlass"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7037"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_visionarys_cutlass"
		"AbilityTextureName"			"custom/visionarys_cutlass"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"525"
		"ItemShopTags"					"damage;mkb"
		"ItemQuality"					"epic"
		"ItemAliases"					"visionarys cutlass"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_damage"			"55"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"20"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"pierce_chance"			"65"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"pierce_damage"			"80"
			}
		}

		"precache"
		{
			"particle"  "particles/items2_fx/pipe_of_insight.vpcf"
			"soundfile" "soundevents/game_sounds_heroes/game_sounds_HERO.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_voltas_greathammer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6273"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1775"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_voltas_greathammer"
		"ItemRequirements"
		{
			"01"						"item_lightningrod;item_broadsword;item_soldiers_pike"
		}
	}
	"item_voltas_greathammer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3274"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_voltas_greathammer"
		"AbilityTextureName"			"item_mjollnir"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"lightning;aoe"
		"ItemQuality"					"epic"
		"ItemAliases"					"mjollnir;voltas_greathammer"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds_heroes/game_sounds_zuus.vsndevts"
			"particle"					"particles/units/heroes/hero_zuus/zuus_lightning_bolt.vpcf"
		}
		
		"AbilityCooldown"				"14"
		"AbilityManaCost"				"150"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"primary_to_damage"		"350"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_range"	"150"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"melee_attack_range"	"75"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_regen"			"4"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_damage"			"90"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"625"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_chance"			"25"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_damage"			"175"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"strike_bounces"		"8"
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"paralyze_duration"		"1"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_ward_of_life"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7087"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"350"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_ward_of_life"
		"ItemRequirements"
		{
			"01"						"item_angelic_guard;item_power_core;item_orb_of_vitality"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_ward_of_life"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7088"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_ward_of_life"
		"AbilityTextureName"			"item_aeon_disk"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1650"
		"ItemShopTags"					"heal;health;hp;regen"
		"ItemQuality"					"epic"
		"ItemAliases"					"aeon disk;ward of life"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items2_fx/mekanism_recipient.vpcf"
			"particle"					"particles/items2_fx/mekanism.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"30"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health_regen"	"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_hp"				"600"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"25"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"10"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"10"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"heal"					"20"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"block_chance"			"50"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_block"			"50"
			}
			"10"
			{
				"var_type"				"FIELD_INTEGER"
				"min_heal"				"350"
			}
			"11"
			{
				"var_type"				"FIELD_INTEGER"
				"max_hp_trigger"		"20"
			}
			"12"
			{
				"var_type"				"FIELD_FLOAT"
				"buff_duration"			"3.5"
			}
			"13"
			{
				"var_type"				"FIELD_FLOAT"
				"internal_cooldown"		"20"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_warlocks_reliquary"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6283"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"850"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_warlocks_reliquary"
		"ItemRequirements"
		{
			"01"						"item_calming_skull;item_sorcerers_staff"
		}
	}
	"item_warlocks_reliquary"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3284"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_warlocks_reliquary"
		"AbilityTextureName"			"custom/warlocks_reliquary"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"spell amp;mana"
		"ItemQuality"					"epic"
		"ItemAliases"					"warlocks reliquary"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}


		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_spell_amp"		"25"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"mana_cost_reduction"	"25"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_warm_fire"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3451"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_TOGGLE | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_warm_fire"
		"AbilityTextureName"			"custom/warm_fire"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"825"
		"ItemShopTags"					"aura;damage"
		"ItemQuality"					"component"
		"ItemAliases"					"radiance;warm fire"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"precache"
		{
			"particle"					"particles/units/heroes/hero_invoker/invoker_chaos_meteor_burn_debuff.vpcf"
		}
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"20"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"min_radius"			"150"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"350"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"radius_change"			"50"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_warp_staff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6651"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_warp_staff"
		"ItemRequirements"
		{
			"01"						"item_dagger_of_escape;item_orb_of_essence"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_warp_staff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6652"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_warp_staff"
		"AbilityTextureName"			"custom/warp_staff"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		"ItemStackable"					"1"
		"ItemPermanent"					"0"
		"ItemInitialCharges"			"3"
		
		"ItemShopTags"					"blink;mobility"
		"ItemQuality"					"epic"
		"ItemAliases"					"blink dagger;warp staff"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blink_dagger_start.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"blink_range"			"1200"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"blink_charges"			"3"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"charge_restore_time"	"15"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_intellect"		"15"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana_regen"		"5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: War Drum
	//=================================================================================================================
	"item_recipe_war_drum"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7013"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"425"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_war_drum"
		"ItemRequirements"
		{
			"01"						"item_elven_boots;item_ring_of_mana"
		}
	}
	//=================================================================================================================
	// War Drum
	//=================================================================================================================
	"item_war_drum"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7014"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_war_drum"
		"AbilityTextureName"			"item_ancient_janggo"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1615"
		"ItemShopTags"					"stats"
		"ItemQuality"					"component"
		"ItemAliases"					"drum of endurance;drum"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"

		"AbilityCooldown"				"30"
		"AbilityManaCost"				"0"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"6"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"7"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_mregen"			"3"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_as"				"35"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_aura"			"20" //flat
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms_buff"			"13" //percent
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
		}

		"precache"
		{
			"particle"  "particles/items_fx/drum_of_endurance_buff.vpcf"
			"soundfile" "soundevents/game_sounds_items.vsndevts"
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_wings_of_icarus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3666"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe_assault"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1850"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_wings_of_icarus"
		"ItemRequirements"
		{
			"01"						"item_elven_boots"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_wings_of_icarus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3667"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_wings_of_icarus"
		"AbilityTextureName"			"item_travel_boots"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemCost"						"1450"
		"ItemShopTags"					"boots;tp"
		"ItemQuality"					"epic"
		"ItemAliases"					"travels;wings of icarus;tp boots"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/econ/events/ti6/phase_boots_ti6.vpcf"
			"particle"					"particles/items_fx/blink_dagger_end.vpcf"
		}
		"AbilityCooldown"				"12"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_ms"				"50"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"active_ms"				"750"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4.5"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_winters_breath"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7047"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"600"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_winters_breath"
		"ItemRequirements"
		{
			"01"						"item_ice_fang;item_power_core;item_power_core"
		}
	}
	"item_winters_breath"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7048"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_winters_breath"
		"AbilityTextureName"			"item_skadi"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"damage;slow"
		"ItemQuality"					"epic"
		"ItemAliases"					"skadi;winters breath"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_over_time"		"0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"base_damage"			"100"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"slow"					"-35"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"bonus_all"				"25"
			}
		}
	}
}"DOTAAbilities"
{
	"item_worn_cloak"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"948"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_worn_cloak"
		"AbilityTextureName"			"item_cloak"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"magic resistance"
		"ItemCost"						"350"
		"ItemQuality"					"epic"
		"ItemAliases"					"cloak;worn cloak"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"precache"
		{
			"precache"					"soundevents/game_sounds_items.vsndevts"
		}

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_magic_resist"	"12"
			}
		}
	}
}"DOTAAbilities"
{
	//=================================================================================================================
	// Recipe: TITAN Armor
	//=================================================================================================================
	"item_recipe_wrathbearers_robes"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6655"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"900"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_wrathbearers_robes"
		"ItemRequirements"
		{
			"01"						"item_penitent_mail;item_incandescance;item_worn_cloak"
		}
	}
	//=================================================================================================================
	// TITAN Armor
	//=================================================================================================================
	"item_wrathbearers_robes"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"6656"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"BaseClass"						"item_lua"
		"ScriptFile"					"items/item_wrathbearers_robes"
		"AbilityTextureName"			"custom/wrathbearers_robes"
		"ItemKillable"					"1"
		"ItemSellable"					"1"
		"ItemDroppable"					"1"
		
		"ItemShopTags"					"taunt;aggro;threat;damage"
		"ItemQuality"					"epic"
		"ItemAliases"					"blade mail;wrathbearers_robes;radiance"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		
		
		"particle"
		{
			"particle"					"particles/items_fx/blademail.vpcf"
			"soundfile"					"soundevents/game_sounds_items.vsndevts"
		}
	
		"AbilityCooldown"				"15"

		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"reflect"				"35"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"active_reflect"		"100"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_threat"			"100"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_gain"			"5"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"threat_gain_ult"		"20"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"8"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_armor"			"5"
			}
			"09"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_magic_resist"	"20"
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"damage"				"100"
			}
			"11"
			{
				"var_type"				"FIELD_FLOAT"
				"blind"					"25"
			}
			"12"
			{
				"var_type"				"FIELD_FLOAT"
				"min_radius"			"150"
			}
			"13"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"500"
			}
			"14"
			{
				"var_type"				"FIELD_FLOAT"
				"radius_change"			"70"
			}
		}
	}
}// Dota Heroes File
"DOTAAbilities"
{
	//=================================================================================================================
	// Observer Wards
	//=================================================================================================================
	"item_ward_observer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"42"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
		"Model"							"models/props_gameplay/observer_ward_bundle.vmdl"
		
		
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"500"
		"AbilityCastPoint"				"0.0"
		"AbilityCooldown"				"1.0"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"10"
		"ItemShopTags"					"consumable"
		"ItemQuality"					"consumable"
		"ItemAliases"					"observer ward"
		"ItemStackable"					"1"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE_STACKING"
		"ItemPermanent"					"0"
		"ItemInitialCharges"			"1"
		"ItemStockMax"					"4"
		"ItemStockInitial"				"2"
		"ItemStockTime"					"150.0"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES"
		"ItemSupport"					"1"
		"IsTempestDoubleClonable"		"0"
		"ShouldBeInitiallySuggested"	"1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"lifetime"				"360"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_range"			"1600"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"health"				"200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"duration_minutes_tooltip"				"6"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"tooltip_range"			"500"
			}
		}
	}
	//=================================================================================================================
	// Recipe: Scepter
	//=================================================================================================================
	"item_recipe_ultimate_scepter"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"107"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1500"	
		"ItemShopTags"					""
		"ItemRecipe"					"1"
		
		"ItemResult"					"item_ultimate_scepter"
		"ItemRequirements"
		{
			"01"						"item_power_core"
		}
	}
	//=================================================================================================================
	// Scepter
	//=================================================================================================================
	"item_ultimate_scepter"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"108"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
		"ItemCost"						"2400"
		"AbilityCastRange"				"600"
		

		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"4200"
		"ItemShopTags"					"int;str;agi;mana_pool;health_pool;hard_to_tag"
		"ItemQuality"					"rare"
		"ItemAliases"					"ags;ultimate;aghanim's scepter;ags"
		//"ItemDisassembleRule"			"DOTA_ITEM_DISASSEMBLE_NEVER"		// heroes for whom this is a problem solve it in their code - ogre magi, meepo
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES | DECLARE_PURCHASES_IN_SPEECH | DECLARE_PURCHASES_TO_SPECTATORS"
		"ShouldBeSuggested"				"1"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_all_stats"		"15"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_health"			"175"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_mana"			"175"
			}
		}
	}

}#base "bosses/boss1a.txt"
#base "bosses/boss1b.txt"
#base "bosses/boss3.txt"
#base "bosses/boss4.txt"
#base "bosses/boss14.txt"
#base "bosses/boss15.txt"
#base "bosses/boss16.txt"
#base "bosses/boss18a.txt"
#base "bosses/boss18b.txt"
#base "bosses/boss19.txt"
#base "bosses/boss33.txt"
#base "bosses/boss14.txt"
#base "bosses/boss_aether.txt"
#base "bosses/boss_evil_core.txt"
#base "bosses/boss_evil_guardian.txt"
#base "bosses/boss_broodmother.txt"
#base "bosses/boss_doom.txt"
#base "bosses/boss_ogres.txt"
#base "bosses/boss_golem.txt"
#base "bosses/boss_necro.txt"
#base "bosses/boss_green_dragon.txt"
#base "bosses/boss_warlock.txt"
#base "bosses/boss_troll_warlord.txt"
#base "bosses/boss_wk.txt"
#base "bosses/boss_aeon.txt"
#base "bosses/boss_sloth_demon.txt"
#base "bosses/boss_wolves.txt"
#base "bosses/boss_genesis.txt"
#base "bosses/boss_greymane.txt"
#base "bosses/boss_phantom.txt"
#base "bosses/boss_flesh_behemoth.txt"
#base "bosses/boss_vile_archmage.txt"
#base "bosses/boss_satyrs.txt"
#base "bosses/boss_archangel.txt"
#base "bosses/boss_fallen_one.txt"
#base "bosses/boss_apotheosis.txt"
#base "bosses/boss_valgraduth.txt"
#base "bosses/boss_arthromos.txt"
#base "bosses/boss_durva.txt"
#base "bosses/boss_ammetot.txt"
#base "bosses/boss_leshrac.txt"
#base "bosses/boss_clockwerk.txt"

#base "elites/elite_accurate.txt"
#base "elites/elite_assassin.txt"
#base "elites/elite_freezing.txt"
#base "elites/elite_burning.txt"
#base "elites/elite_breaking.txt"
#base "elites/elite_temporal.txt"
#base "elites/elite_plagued.txt"
#base "elites/elite_frenzied.txt"
#base "elites/elite_vampiric.txt"
#base "elites/elite_unstable.txt"
#base "elites/elite_blinking.txt"
#base "elites/elite_nimble.txt"
#base "elites/elite_piercing.txt"
#base "elites/elite_massive.txt"
#base "elites/elite_sweeping.txt"
#base "elites/elite_parrying.txt"
#base "elites/elite_fortified.txt"
#base "elites/elite_elusive.txt"
#base "elites/elite_hasted.txt"
#base "elites/elite_pulsar.txt"
#base "elites/elite_overgrown.txt"
#base "elites/elite_unbreakable.txt"
#base "elites/elite_graverobber.txt"
#base "elites/elite_tiny.txt"

#base "heroes/hero_chen.txt"
#base "heroes/hero_shadow_shaman.txt"
#base "heroes/hero_winter_wyvern.txt"
#base "heroes/hero_gyrocopter.txt"
#base "heroes/hero_abaddon.txt"
#base "heroes/hero_beastmaster.txt"
#base "heroes/hero_alchemist.txt"
#base "heroes/hero_axe.txt"
#base "heroes/hero_brewmaster.txt"
#base "heroes/hero_bristleback.txt"
#base "heroes/hero_centaur.txt"
#base "heroes/hero_chaos_knight.txt"
#base "heroes/hero_clockwerk.txt"
#base "heroes/hero_doom.txt"
#base "heroes/hero_dragon_knight.txt"
#base "heroes/hero_earth_spirit.txt"
#base "heroes/hero_earthshaker.txt"
#base "heroes/hero_elder_titan.txt"
#base "heroes/hero_furion.txt"
#base "heroes/hero_huskar.txt"
#base "heroes/hero_lion.txt"
#base "heroes/hero_mirana.txt"
#base "heroes/hero_phantom_assassin.txt"
#base "heroes/hero_riki.txt"
#base "heroes/hero_sandking.txt"
#base "heroes/hero_techies.txt"
#base "heroes/hero_templar_assassin.txt"
#base "heroes/hero_tidehunter.txt"
#base "heroes/hero_venomancer.txt"
#base "heroes/hero_puck.txt"
#base "heroes/hero_magnus.txt"
#base "heroes/hero_outworld_devourer.txt"
#base "heroes/hero_kotl.txt"
#base "heroes/hero_lina.txt"
#base "heroes/hero_legion_commander.txt"
#base "heroes/hero_phoenix.txt"
#base "heroes/hero_tinker.txt"
#base "heroes/hero_timbersaw.txt"
#base "heroes/hero_vengeful.txt"
#base "heroes/hero_tusk.txt"
#base "heroes/hero_ancient_apparition.txt"
#base "heroes/hero_drow_ranger.txt"
#base "heroes/hero_bane.txt"
#base "heroes/hero_slark.txt"
#base "heroes/hero_pudge.txt"
#base "heroes/hero_juggernaut.txt"
#base "heroes/hero_shadow_fiend.txt"
#base "heroes/hero_skywrath.txt"
#base "heroes/hero_zeus.txt"
#base "heroes/hero_omniknight.txt"
#base "heroes/hero_pango.txt"
#base "heroes/hero_night_stalker.txt"
#base "heroes/hero_nyx.txt"
#base "heroes/hero_sniper.txt"
#base "heroes/hero_faceless_void.txt"
#base "heroes/hero_tiny.txt"
#base "heroes/hero_broodmother.txt"
#base "heroes/hero_kunkka.txt"
#base "heroes/hero_lifestealer.txt"
#base "heroes/hero_razor.txt"
#base "heroes/hero_ogre_magi.txt"
#base "heroes/hero_arc_warden.txt"
#base "heroes/hero_windrunner.txt"
#base "heroes/hero_warlock.txt"
#base "heroes/hero_lycan.txt"
#base "heroes/hero_undying.txt"
#base "heroes/hero_naga_siren.txt"
#base "heroes/hero_luna.txt"
#base "heroes/hero_antimage.txt"
#base "heroes/hero_sven.txt"
#base "heroes/hero_enigma.txt"
#base "heroes/hero_treant_protector.txt"
#base "heroes/hero_pugna.txt"
#base "heroes/hero_witch_doctor.txt"
#base "heroes/hero_crystal_maiden.txt"
#base "heroes/hero_terrorblade.txt"
#base "heroes/hero_troll_warlord.txt"
#base "heroes/hero_spectre.txt"
#base "heroes/hero_necrophos.txt"
#base "heroes/hero_disruptor.txt"
#base "heroes/hero_death_prophet.txt"
#base "heroes/hero_jakiro.txt"
#base "heroes/hero_shadow_demon.txt"
#base "heroes/hero_bloodseeker.txt"
#base "heroes/hero_ursa.txt"
#base "heroes/hero_queenofpain.txt"
#base "heroes/hero_bounty_hunter.txt"
#base "heroes/hero_slardar.txt"
#base "heroes/hero_abyssal_underlord.txt"
#base "heroes/hero_spirit_breaker.txt"
#base "heroes/hero_wraith_king.txt"
#base "heroes/hero_silencer.txt"
#base "heroes/hero_lich.txt"
#base "heroes/hero_viper.txt"
#base "heroes/hero_leshrac.txt"
#base "heroes/hero_clinkz.txt"
#base "heroes/hero_ember_spirit.txt"
#base "heroes/hero_medusa.txt"
#base "heroes/hero_monkey_king.txt"
#base "heroes/hero_dazzle.txt"
#base "heroes/hero_morphling.txt"
#base "heroes/hero_visage.txt"
#base "heroes/hero_dark_seer.txt"
#base "heroes/hero_weaver.txt"
#base "heroes/hero_batrider.txt"
#base "heroes/hero_dark_willow.txt"
#base "heroes/hero_enchantress.txt"
#base "heroes/hero_oracle.txt"
#base "heroes/hero_rubick.txt"
#base "heroes/hero_storm_spirit.txt"
#base "heroes/hero_grimstroke.txt"
#base "heroes/hero_lone_druid.txt"
#base "heroes/hero_wisp.txt"
#base "heroes/hero_meepo.txt"
#base "heroes/hero_phantom_lancer.txt"
#base "heroes/hero_invoker.txt"
#base "heroes/hero_mars.txt"

"DOTAAbilities"
{
	"generic_hp_limiter"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"				"ability_lua"
		"ScriptFile"			"generic/generic_hp_limiter"
		"AbilityBehavior"		"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"	"modifier_magicimmune"
		"MaxLevel"				"1"
	}
	"generic_gold_dropper"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"				"ability_lua"
		"ScriptFile"			"generic/generic_gold_dropper"
		"AbilityBehavior"		"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"AbilityTextureName"	"modifier_magicimmune"
		"MaxLevel"				"1"
	}
	//=================================================================================================================
	// Queen of Pain: Blink
	//=================================================================================================================
	"boss_blink"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"					"queenofpain_blink"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"LevelsBetweenUpgrades"			"5"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.33 0.33 0.33 0.33"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12.0 9.0 8.0 7.0"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"60 60 60 60"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"blink_range"			"1000"
			}
			
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"min_blink_range"		"200"
			}
		}
	}
	"boss_call_reinforcements"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_datadriven"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"MaxLevel"						"4"
		"AbilityCastAnimation"			"ACT_DOTA_TELEPORT"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"90 75 60 55"
		"AbilityChannelTime"			"2"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"OnSpellStart"
		{
			
			
			"FireSound"
			{
				"EffectName"			"Ability.SummonUndead"
				"Target"				"CASTER"
			}
		}
		
		"OnChannelSucceeded"
		{
			"SpawnUnit"
			{
				"UnitName"			"npc_dota_boss5b"
				"UnitCount"			"%number_of_zombies"
				"UnitLimit"			"9"
				"SpawnRadius"		"750"
				"Target"			"CASTER"
				"OnSpawn"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/econ/generic/generic_aoe_explosion_sphere_1/generic_aoe_explosion_sphere_1.vpcf"
						"EffectAttachType"	"follow_origin"
						"Target"			"UNIT"
						
						"ControlPoints"
						{
							"00"		"0 0 0"
							"01"		"50 100 0"
							"02"		"4 10 .5"
							"03"		"20 200 0"
							"04"		"0 0 0"
							"05"		"0 0 0"
						}
					}
					
					"FireSound"
					{
						"EffectName"		"Ability.SummonUndeadSuccess"
						"Target"			"CASTER"
					}
				}
			}
		}
		
		"OnChannelFinish"
		{
			"RemoveModifier"
			{
				"Target"				"CASTER"
				"ModifierName"			"channel_started"
			}
		}
		
		// Modifiers
		//-------------------------------------------------------------------------------------------------------------	
		"Modifiers"
		{
			"channel_started"
			{
				"OnCreated"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/generic_aoe_persistent_circle_1/death_time_head_timer.vpcf"
						"EffectAttachType"	"follow_overhead"
						"Target"			"CASTER"
					}
				}
			}
			
			"summoned_units"
			{				
				"AttachEffect"
				{
					"EffectName"		"particles/units/heroes/hero_leshrac/leshrac_split_earth.vpcf"
					"EffectAttachType"	"follow_origin"
					"Target"			"TARGET"
					
					"ControlPoints"
					{
						"00"		"0 0 0"
						"01"		"200 0 0"
						"02"		"0 0 0"
					}
				}
			}
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"number_of_zombies"		"3"
			}
		}
	}
	"boss_lifesteal"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"skeleton_king_vampiric_aura"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"MaxLevel"						"1"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityTextureName"			"custom/boss_lifesteal"
		
		"precache"
		{
			"particle"					"particles/econ/courier/courier_onibi/courier_onibi_yellow_ambient_smoke_lvl21.vpcf"
			"particle"					"particles/status_fx/status_effect_repel.vpcf"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"vampiric_aura_radius"	"150"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"vampiric_aura"			"50"
			}
			
		}
	}
	"boss_living_armor"
	{
		// General
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_POINT"
		"BaseClass"						"treant_living_armor"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC | DOTA_UNIT_TARGET_BUILDING"					
		"SpellImmunityType"				"SPELL_IMMUNITY_ALLIES_YES"
		
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.5 0.5 0.5 0.5"
		"FightRecapLevel"				"1"
		"MaxLevel"						"2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 18"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"50"
	
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"			"FIELD_INTEGER"
				"damage_count"		"2 3"
			}
			"02"
			{
				"var_type"			"FIELD_INTEGER"
				"health_regen"		"10"
			}
			"03"
			{
				"var_type"			"FIELD_INTEGER"
				"damage_block"		"40"
			}
			"04"
			{
				"var_type"			"FIELD_FLOAT"
				"duration"			"10.0"
			}
		}
	}
	"boss_march"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"tinker_march_of_the_machines"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"300"
		"AbilityCastPoint"				"1.5"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"35.0 35.0 35.0 35.0"
	
		// Damage.
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDamage"					"40	60"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"35"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"900"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"collision_radius"		"50 50 50 50"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"splash_radius"			"150 150 150 150"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"20"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"400 400 400 400"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"machines_per_sec"		"10"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"distance"				"1800"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"distance_scepter"		"1800"
			}
		}
	}
	"boss_moment_of_courage"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"							"legion_commander_moment_of_courage"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"MaxLevel"						"4"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"2 1.8 1.6 1.4"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"trigger_chance"			"40"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"buff_duration"				"1.0"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"hp_leech_percent"			"65"
			}
		}
	}
	"boss_hail_of_arrows"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_lua"
		"ScriptFile"					"bosses/boss5/boss_hail_of_arrows"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"AbilityTextureName"			"legion_commander_overwhelming_odds"
		
		"precache"
		{
			"particle" "particles/units/heroes/hero_legion_commander/legion_commander_odds.vpcf"
			"particle" "particles/units/heroes/hero_legion_commander/legion_commander_odds_buff.vpcf"
			"particle" "particles/units/heroes/hero_legion_commander/legion_commander_odds_cast.vpcf"
			"soundfile"	"game_sounds_heroes/game_sounds_legion_commander.vsndevts"
		}
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6.0"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"1.5"
		"AnimationPlaybackRate"			"0.4"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120"
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"300"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"200 225 250 275"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_unit"		"60 75"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_speed"			"15"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"bonus_armor"					"4 6"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"4.0"
			}
		}
	}
	"boss_press_the_attack"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"legion_commander_press_the_attack"												// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_NOT_MAGIC_IMMUNE_ALLIES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ALLIES_NO"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"24 23 22 21.0"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"75"
	
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"3.0"	// Value much higher than cost.
	
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"10.0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_speed"			"150 175 200 250"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"hp_regen"				"5 10 15 20"
			}
		}
	}
	"boss_proximity"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"techies_land_mines"  
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_1"
		"MaxLevel"						"2"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"100"
		"AbilityCastPoint"				"0.5"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"120"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"400"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"proximity_threshold"		"1.6 1.4"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"600 800"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"burn_duration"				"5"
			}	
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"building_damage_pct"		"25"
			}	
			"06"
			{
				"var_type"					"FIELD_INTEGER"
				"activation_delay"			"1 0.5"
			}
		}
	}
	//=================================================================================================================
	// Lifestealer: Rage
	//=================================================================================================================
	"boss_ragebuff"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"life_stealer_rage"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"MaxLevel"						"2"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0"
		"AbilityCastRange"				"0"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"15"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
		"AbilityDuration"				"3.0"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"attack_speed_bonus"	"200 400"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3.0"
			}
		}
	}
	"boss_rearm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"tinker_rearm"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.53 0.53 0.53 0.53"
		"AbilityChannelTime"			"4.0 3.0"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"25"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"channel_tooltip"		"4.0 3.0"
			}
		}
	}
	"boss_rockets"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"tinker_heat_seeking_missile"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE | DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"MaxLevel"						"2"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0 0 0 0"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"25.0 25.0 25.0 25.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"25"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{ 
			"01"
			{
				"var_type"			"FIELD_INTEGER"
				"damage"			"110 170"
			}
			"02"
			{
				"var_type"			"FIELD_INTEGER"
				"radius"			"1200"
			}
			"03"
			{
				"var_type"			"FIELD_INTEGER"
				"targets"			"2"
			}
			"04"
			{
				"var_type"			"FIELD_INTEGER"
				"speed"				"450"
			}
			"05"
			{
				"var_type"			"FIELD_INTEGER"
				"targets_scepter"	"4 4 4 4"
			}
		}
	}
	//=================================================================================================================
	// Queen of Pain: Scream of Pain
	//=================================================================================================================
	"boss_scream_of_pain"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"					"queenofpain_scream_of_pain"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.0 0.0 0.0 0.0"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"12.0"
	
		// Damage.
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDamage"					"70 80 90 120"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110 120 130 140"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"area_of_effect"		"450"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"projectile_speed"		"900"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"70 80 90 120"
			}
		}
	}
	//=================================================================================================================
	// Queen of Pain: Shadow Strike
	//=================================================================================================================
	"boss_shadow_strike"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"					"queenofpain_shadow_strike"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"MaxLevel"						"4"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"625"
		"AbilityCastPoint"				"0.452 0.452 0.452 0.452"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"16.0 14.0 12.0 11.0"
		"AbilityDuration"				"15.0 15.0 15.0 15.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"110"
	
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"strike_damage"			"50 80"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"duration_damage"		"20 30"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"movement_slow"			"-35"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"projectile_speed"		"900"
			}			
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range_tooltip"		"625"
			}	
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"duration_tooltip"		"15"
			}			
		}
	}
	"boss_spawn_techies"
	{
		"BaseClass"						"ability_datadriven"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityTextureName"			"techies_focused_detonate"
		"AbilityChannelTime"			"5 4.5 4 3.5"
		"AbilityCooldown"				"5"
		
		"precache"
		{
			"particle"					"particles/econ/generic/generic_aoe_explosion_sphere_1/generic_aoe_explosion_sphere_1.vpcf"
			"soundfile"					"soundevents/game_sounds/ability_summon_undead.vsndevts"
		}
		
		"OnChannelSucceeded"
		{
			"SpawnUnit"
			{
				"UnitName"			"npc_dota_boss8c"
				"UnitCount"			"1"
				"UnitLimit"			"20"
				"SpawnRadius"		"200"
				"Target"			"CASTER"
				"OnSpawn"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/econ/generic/generic_aoe_explosion_sphere_1/generic_aoe_explosion_sphere_1.vpcf"
						"EffectAttachType"	"follow_origin"
						"Target"			"TARGET"
						
						"ControlPoints"
						{
							"00"		"0 0 0"
							"01"		"50 100 0"
							"02"		"4 10 .5"
							"03"		"20 200 0"
							"04"		"0 0 0"
							"05"		"0 0 0"
						}
					}
					
					"FireSound"
					{
						"EffectName"		"Ability.SummonUndeadSuccess"
						"Target"			"CASTER"
					}
				}
			}
		}
	}
	"boss_suicide"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"techies_suicide"			
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_ALL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_3"
		"MaxLevel"						"2"
	
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"400 600"
		"AbilityCastPoint"				"1.5 1.0"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0 0 0 0"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"250 300"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"damage"					"600 800"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"silence_duration"			"6"
			} 
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"hp_cost"					"100"
			} 
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"0.8 0.75"
			}
		}
	}
	"boss_wounds"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"life_stealer_open_wounds"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_ALL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"1"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"1"
		"AbilityCastRange"				"400"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"32 28"
		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDuration"				"8"
		
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"slow_steps"			"-90 -70 -50 -40 -30 -20 -15 -10"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"heal_percent"			"100"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"slow_tooltip"			"90"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"duration"				"10"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"tooltip_range"			"400"
			}
		}
	}
	//=================================================================================================================
	// Creature: Fire Breath
	//=================================================================================================================
	"creature_fire_breath"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"AbilityName"					"creature_fire_breath"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_POINT"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityTextureName"			"ogre_magi_fireblast"
		"MaxLevel"						"2"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10.0"
		"AbilityChannelTime"			"2.3"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"900"
		"AbilityCastPoint"				"1.3"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"radius"				"200.0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"speed"					"1000"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"70 90"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"rotation_angle"		"90"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"projectile_count"		"12"
			}
		}
	}
	//=================================================================================================================
	// Creature: Lightning Storm
	//=================================================================================================================
	"creature_lightning_storm"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5243"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"					    "leshrac_lightning_storm"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_ALL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"LevelsBetweenUpgrades"			"5"
		"MaxLevel"						"7"
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"800"
		"AbilityCastPoint"				"0.5"
		
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"3"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"90 100 110 120"
		
		// Damage.
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDamage"					"70 90"
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"jump_count"			"5"
			}
			
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"200"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"jump_delay"			"0.9"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"slow_movement_speed"	"-100"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"slow_duration"			"0.35"
			}
		}
	}
	//=================================================================================================================
	// Lesser Nightcrawler: Pounce
	//=================================================================================================================
	"creature_rupture"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"bloodseeker_rupture"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_ALL"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"	
	
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.6"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"25"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"		
		
		// Cast Range
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700"
			
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.0"	// Only does damage
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"							"FIELD_FLOAT"
				"duration"							"12.0"
			}
			"02"
			{
				"var_type"							"FIELD_INTEGER"
				"movement_damage_pct"				"20 40"
			}
			"03"
			{
				"var_type"							"FIELD_INTEGER"
				"damage_cap_amount"					"200"
			}
			"04"
			{
				"var_type"							"FIELD_INTEGER"
				"cast_range_tooltip"				"700 800 900"
			}
			"05"
			{
				"var_type"							"FIELD_INTEGER"
				"max_charges_scepter"				"2"
			}
			"06"
			{
				"var_type"							"FIELD_INTEGER"
				"charge_restore_time_scepter"		"40"
			}
		}
	}
	//=================================================================================================================
	// Creature: Area Stun
	//=================================================================================================================
	"creature_slithereen_crush"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"slardar_slithereen_crush"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PHYSICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES_STRONG"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Slardar.Slithereen_Crush"
        "HasScepterUpgrade"				"1"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.35 0.35 0.35 0.35"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"8"

		// Damage.
		//-------------------------------------------------------------------------------------------------------------
		"AbilityDamage"					"175 250"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"115"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.5"	// Applies multiple modifiers

		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"crush_radius"					"350"
			}
			"02"
			{
				"var_type"						"FIELD_INTEGER"
				"crush_extra_slow"				"-20 -25 -30 -35"
			}
			"03"
			{
				"var_type"						"FIELD_INTEGER"
				"crush_attack_slow_tooltip"		"-20 -25 -30 -35"
			}
			"04"
			{
				"var_type"						"FIELD_FLOAT"
				"crush_extra_slow_duration"		"3 4 5 6"
			}
			"05"
			{
				"var_type"						"FIELD_FLOAT"
				"stun_duration"					"1"
				"LinkedSpecialBonus"			"special_bonus_unique_slardar"
			}
			"06"
			{
				"var_type"						"FIELD_FLOAT"
				"puddle_duration"				"25"
			}
			"07"
			{
				"var_type"						"FIELD_INTEGER"
				"puddle_radius"					"550"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Ability: Summon Undead
	//=================================================================================================================
	"creature_summon_slither"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_datadriven"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
		"AbilityTextureName" 			"undying_soul_rip"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds/ability_summon_undead.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0"
		"AbilityChannelTime"			"2.2 2.1 2.0 1.9"
		"AbilityCastAnimation"			"ACT_DOTA_VICTORY"
	
		// Time
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"10.0 10.0 10.0 10.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 100 100 100"
	
		"OnSpellStart"
		{
			
			
			"FireSound"
			{
				"EffectName"			"Ability.SummonUndead"
				"Target"				"CASTER"
			}
		}
		
		"OnChannelSucceeded"
		{
			"SpawnUnit"
			{
				"UnitName"			"npc_dota_mini_slither"
				"UnitCount"			"%number_of_zombies"
				"UnitLimit"			"20"
				"SpawnRadius"		"750"
				"Target"			"CASTER"
				"OnSpawn"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/econ/generic/generic_aoe_explosion_sphere_1/generic_aoe_explosion_sphere_1.vpcf"
						"EffectAttachType"	"follow_origin"
						"Target"			"TARGET"
						
						"ControlPoints"
						{
							"00"		"0 0 0"
							"01"		"50 100 0"
							"02"		"4 10 .5"
							"03"		"20 200 0"
							"04"		"0 0 0"
							"05"		"0 0 0"
						}
					}
					
					"FireSound"
					{
						"EffectName"		"Ability.SummonUndeadSuccess"
						"Target"			"CASTER"
					}
				}
			}
		}
		
		"OnChannelFinish"
		{
			"RemoveModifier"
			{
				"Target"				"CASTER"
				"ModifierName"			"channel_started"
			}
		}
		
		// Modifiers
		//-------------------------------------------------------------------------------------------------------------	
		"Modifiers"
		{
			"channel_started"
			{
				"OnCreated"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/generic_aoe_persistent_circle_1/death_time_head_timer.vpcf"
						"EffectAttachType"	"follow_overhead"
						"Target"			"CASTER"
					}
				}
			}
			
			"summoned_units"
			{				
				"AttachEffect"
				{
					"EffectName"		"particles/units/heroes/hero_leshrac/leshrac_split_earth.vpcf"
					"EffectAttachType"	"follow_origin"
					"Target"			"TARGET"
					
					"ControlPoints"
					{
						"00"		"0 0 0"
						"01"		"200 0 0"
						"02"		"0 0 0"
					}
				}
			}
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"number_of_zombies"		"10"
			}
		}
	}
	//=================================================================================================================
	// Ability: Summon Tree1
	//=================================================================================================================
	"creature_summon_tree"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_datadriven"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
		"AbilityTextureName" 			"furion_force_of_nature"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds/ability_summon_undead.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0"
		"AbilityChannelTime"			"2.2 2.1 2.0 1.9"
		"AbilityCastAnimation"			"ACT_DOTA_VICTORY"
	
		// Time
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"50.0 40.0 30.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 100 100 100"
	
		"OnSpellStart"
		{
			"FireSound"
			{
				"EffectName"			"Ability.SummonUndead"
				"Target"				"CASTER"
			}
		}
		
		"OnChannelSucceeded"
		{
			"SpawnUnit"
			{
				"UnitName"			"npc_dota_mini_tree"
				"UnitCount"			"%number_of_zombies"
				"UnitLimit"			"20"
				"SpawnRadius"		"750"
				"Target"			"CASTER"
				"OnSpawn"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/econ/generic/generic_aoe_explosion_sphere_1/generic_aoe_explosion_sphere_1.vpcf"
						"EffectAttachType"	"follow_origin"
						"Target"			"TARGET"
						
						"ControlPoints"
						{
							"00"		"0 0 0"
							"01"		"50 100 0"
							"02"		"4 10 .5"
							"03"		"20 200 0"
							"04"		"0 0 0"
							"05"		"0 0 0"
						}
					}
					"FireSound"
					{
						"EffectName"		"Ability.SummonUndeadSuccess"
						"Target"			"CASTER"
					}
				}
			}
		}
		
		"OnChannelFinish"
		{
			"RemoveModifier"
			{
				"Target"				"CASTER"
				"ModifierName"			"channel_started"
			}
		}
		
		// Modifiers
		//-------------------------------------------------------------------------------------------------------------	
		"Modifiers"
		{
			"channel_started"
			{
				"OnCreated"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/generic_aoe_persistent_circle_1/death_time_head_timer.vpcf"
						"EffectAttachType"	"follow_overhead"
						"Target"			"CASTER"
					}
				}
			}
			
			"summoned_units"
			{				
				"AttachEffect"
				{
					"EffectName"		"particles/units/heroes/hero_leshrac/leshrac_split_earth.vpcf"
					"EffectAttachType"	"follow_origin"
					"Target"			"TARGET"
					
					"ControlPoints"
					{
						"00"		"0 0 0"
						"01"		"200 0 0"
						"02"		"0 0 0"
					}
				}
			}
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"number_of_zombies"		"5"
			}
		}
	}
	//=================================================================================================================
	// Ability: Summon Tree2
	//=================================================================================================================
	"creature_summon_tree2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_datadriven"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
		"AbilityTextureName" 			"furion_force_of_nature"
		
		"precache"
		{
			"soundfile"					"soundevents/game_sounds/ability_summon_undead.vsndevts"
		}
		
		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0"
		"AbilityChannelTime"			"0.1"
		"AbilityCastAnimation"			"ACT_DOTA_VICTORY"
	
		// Time
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 90 80 70"
	
		"OnSpellStart"
		{
			
			
			"FireSound"
			{
				"EffectName"			"Ability.SummonUndead"
				"Target"				"CASTER"
			}
		}
		
		"OnChannelSucceeded"
		{
			"SpawnUnit"
			{
				"UnitName"			"npc_dota_mini_tree2"
				"UnitCount"			"%number_of_zombies"
				"UnitLimit"			"6"
				"SpawnRadius"		"1250"
				"Target"			"CASTER"
				"OnSpawn"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/econ/generic/generic_aoe_explosion_sphere_1/generic_aoe_explosion_sphere_1.vpcf"
						"EffectAttachType"	"follow_origin"
						"Target"			"TARGET"
						
						"ControlPoints"
						{
							"00"		"0 0 0"
							"01"		"50 100 0"
							"02"		"4 10 .5"
							"03"		"20 200 0"
							"04"		"0 0 0"
							"05"		"0 0 0"
						}
					}
					
					"FireSound"
					{
						"EffectName"		"Ability.SummonUndeadSuccess"
						"Target"			"CASTER"
					}
				}
			}
		}
		
		"OnChannelFinish"
		{
			"RemoveModifier"
			{
				"Target"				"CASTER"
				"ModifierName"			"channel_started"
			}
		}
		
		// Modifiers
		//-------------------------------------------------------------------------------------------------------------	
		"Modifiers"
		{
			"channel_started"
			{
				"OnCreated"
				{
					"AttachEffect"
					{
						"EffectName"		"particles/generic_aoe_persistent_circle_1/death_time_head_timer.vpcf"
						"EffectAttachType"	"follow_overhead"
						"Target"			"CASTER"
					}
				}
			}
			
			"summoned_units"
			{				
				"AttachEffect"
				{
					"EffectName"		"particles/units/heroes/hero_leshrac/leshrac_split_earth.vpcf"
					"EffectAttachType"	"follow_origin"
					"Target"			"TARGET"
					
					"ControlPoints"
					{
						"00"		"0 0 0"
						"01"		"200 0 0"
						"02"		"0 0 0"
					}
				}
			}
		}
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"number_of_zombies"		"3"
			}
		}
	}
	//-------------------
	// Dummy stuff
	//-------------------
	"dummy_unit"
	{
		"AbilityBehavior"     "DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"BaseClass"           "ability_datadriven"
		"AbilityTextureName"            "rubick_empty1"
		"MaxLevel"                      "1"

		"Modifiers"
		{
		  "dummy_unit"
		  {
			  "Passive"                        "1"
			  "IsHidden"                        "1"    
			  "States"
			  {
				  "MODIFIER_STATE_UNSELECTABLE" "MODIFIER_STATE_VALUE_ENABLED"
			  	  "MODIFIER_STATE_INVULNERABLE"    "MODIFIER_STATE_VALUE_ENABLED"
				  "MODIFIER_STATE_NOT_ON_MINIMAP" "MODIFIER_STATE_VALUE_ENABLED"
				  "MODIFIER_STATE_NO_HEALTH_BAR"  "MODIFIER_STATE_VALUE_ENABLED"
			  }
		  }
		}
	}
	"invincibility"
	{
		"BaseClass"             		"ability_datadriven"
		"MaxLevel" 						"1"
	
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"Modifiers"
		{
			"modifier_hidden"
			{
				"Passive"			"1"
				"Attributes"		"MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE"	
				"States"
				{
			
					"MODIFIER_STATE_ATTACK_IMMUNE"	"MODIFIER_STATE_VALUE_ENABLED"
					"MODIFIER_STATE_INVULNERABLE"	"MODIFIER_STATE_VALUE_ENABLED"
					//"MODIFIER_STATE_OUT_OF_GAME"	"MODIFIER_STATE_VALUE_ENABLED"
				}
			}
		}		
	}
	"lesser_nightcrawler_pounce"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"slark_pounce"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_ROOT_DISABLES"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Slark.Pounce.Cast"
		"AbilityTextureName"			"slark_pounce"
	
		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6.0"
	
		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"
		
		"precache"
		{
			"particle_folder"				"particles/units/heroes/hero_slark"
		}
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"pounce_distance"		"700"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"pounce_speed"			"933.33"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"pounce_acceleration"	"7000.0"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"pounce_radius"			"95"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"pounce_damage"			"50 75 100 125"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"leash_duration"		"0"
				"LinkedSpecialBonus"	"special_bonus_unique_slark"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"leash_radius"			"325"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	"nightcrawler_shadowdance"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"slark_shadow_dance"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_NO_TARGET"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"HasScepterUpgrade"				"1"
		"AbilitySound"					"Hero_Slark.ShadowDance"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_4"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"80 70 60"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"			
	
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"3"
				"LinkedSpecialBonus"		"special_bonus_unique_slark_3"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"fade_time"					"0.0 0.0 0.0"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_movement_speed"		"20 35 50"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_regen_pct"			"3 5 7"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"activation_delay"			"0.5 0.5 0.5"
			}
			"06"
			{
				"var_type"					"FIELD_FLOAT"
				"neutral_disable"			"2.0 2.0 2.0"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"scepter_aoe"				"325"
			}
			"08"
			{
				"var_type"					"FIELD_INTEGER"
				"cooldown_scepter"			"30"
			}
		}
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_reincarnation_120"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"special_bonus_reincarnation_200"										// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"				"120"
			}
		}
	}
}
// Dota Heroes File
"DOTAAbilities"
{
	"Version"		"1"
	//=================================================================================================================
	// Keeper of the Light: Illuminate
	//=================================================================================================================
	"keeper_of_the_light_illuminate"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5471"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_CHANNELLED"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"	
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_KeeperOfTheLight.Illuminate.Discharge"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1800"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"11"
		"AbilityChannelTime"			"2.0 3.0 4.0 5.0 6.0 7.0 8.0"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"150 160 170 180"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_per_second"		"100 117 137 160 183 207 231"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"max_channel_time"		"2.0 3.0 4.0 5.0 6.0 7.0 8.0"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"375"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"range"					"1550"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"speed"					"1050.0"
			}			
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_radius"			"800 800 800 800"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"vision_duration"		"3.34 3.34 3.34 3.34"
			}
			"08"
			{	
				"var_type"				"FIELD_INTEGER"
				"channel_vision_radius"	"375"
			}
			"09"
			{	
				"var_type"					"FIELD_FLOAT"
				"channel_vision_interval"	"0.5"
			}
			"10"
			{
				"var_type"					"FIELD_FLOAT"
				"channel_vision_duration"	"10.34"
			}
			"11"
			{
				"var_type"					"FIELD_INTEGER"
				"channel_vision_step"		"150"
			}
			"12"
			{
				"var_type"					"FIELD_INTEGER"
				"total_damage"				"200 350 550 800 1100 1450 1850"
				"LinkedSpecialBonus"		"special_bonus_unique_keeper_of_the_light"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	//=================================================================================================================
	// Keeper of the Light: Blinding Light
	//=================================================================================================================
	"keeper_of_the_light_blinding_light"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5476"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_POINT"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"Hero_KeeperOfTheLight.BlindingLight"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"550 600 650 700 750 800 850"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"
 		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30 25 20 15"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"100 125 150 175"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"1.0"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"miss_rate"				"70"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3 4 5 6 7 8 9"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius"				"600"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"knockback_duration"	"0.4"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"knockback_distance"	"350"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"damage"				"50 100 150 200 250 300 350"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"cast_range_tooltip"	"550 600 650 700 750 800 850"
			}
		}
	}
	//=================================================================================================================
	// Keeper of the Light: Chakra Magic
	//=================================================================================================================
	"keeper_of_the_light_chakra_magic"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5473"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"SpellImmunityType"				"SPELL_IMMUNITY_ALLIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilitySound"					"Hero_KeeperOfTheLight.ChakraMagic.Target"
		"MaxLevel"						"7"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"900 900 900 900"
		"AbilityCastPoint"				"0.3 0.3 0.3 0.3"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"20 18 16 14 12 10 8"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"0"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"3.0"	// Value much higher than cost.


		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_restore"			"80 160 240 320 400 480 560"
				"LinkedSpecialBonus"	"special_bonus_unique_keeper_of_the_light_2"
			}			
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"cooldown_reduction"	"6"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_3"
	}
	//=================================================================================================================
	// Keeper of the Light: Will-O-Wisp
	//=================================================================================================================
	"keeper_of_the_light_will_o_wisp"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"7316"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"AbilitySound"					"Hero_KeeperOfTheLight.ManaLeak.Cast"
		"MaxLevel"						"6"

		// Casting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastPoint"				"0.1"

		// Time		
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"120"

		// Cost
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"250 350 450 550 650 750"		

		// Cast Range
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"900"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"on_count"					"3 4 5 6 7 8"
				"LinkedSpecialBonus"		"special_bonus_unique_keeper_of_the_light_3"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"radius"					"650"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"hit_count"					"4 5 6 7 8 9"
			}
			"04"
			{
				"var_type"					"FIELD_FLOAT"
				"off_duration"				"1.75"
			}
			"05"
			{
				"var_type"					"FIELD_FLOAT"
				"on_duration"				"1.3"
			}
			"06"
			{
				"var_type"					"FIELD_FLOAT"
				"off_duration_initial"		"1.0"
			}
			"07"
			{
				"var_type"					"FIELD_INTEGER"
				"fixed_movement_speed"		"25"
			}
			"08"
			{
				"var_type"					"FIELD_INTEGER"
				"bounty"					"0"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Invoker: Quas
	//=================================================================================================================
	"invoker_quas"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5370"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"7"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"0"
		"AbilityManaCost"				"0"
		"AbilityCastAnimation"			"ACT_INVALID"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"health_regen_per_instance"	"2 4 6 8 10 12 14"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Wex
	//=================================================================================================================
	"invoker_wex"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5371"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"7"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"0"
		"AbilityManaCost"				"0"
		"AbilityCastAnimation"			"ACT_INVALID"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"attack_speed_per_instance"	"5 10 15 20 25 30 35"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"move_speed_per_instance"	"1 2 3 4 5 6 7"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Exort
	//=================================================================================================================
	"invoker_exort"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5372"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"7"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"0"
		"AbilityManaCost"				"0"
		"AbilityCastAnimation"			"ACT_INVALID"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage_per_instance"	"4 8 12 16 20 24 28"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Empty 1
	//=================================================================================================================
	"invoker_empty1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5373"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"MaxLevel"						"0"
		"AbilityCastAnimation"			"ACT_INVALID"
	}

	//=================================================================================================================
	// Invoker: Empty 2
	//=================================================================================================================
	"invoker_empty2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5374"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"MaxLevel"						"0"
		"AbilityCastAnimation"			"ACT_INVALID"
	}

	//=================================================================================================================
	// Invoker: Invoke
	//=================================================================================================================
	"invoker_invoke"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5375"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"AbilityType"					"DOTA_ABILITY_TYPE_ULTIMATE"
		"MaxLevel"						"1"
		"RequiredLevel"					"1"
		"AbilitySound"					"Hero_Invoker.Invoke"
		"InnateAbility"					"1"
		"HasScepterUpgrade"				"1"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"6"
		"AbilityManaCost"				"60"
		"AbilityCastAnimation"			"ACT_INVALID"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"max_invoked_spells"		"2"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"cooldown_scepter"			"2"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"mana_cost_scepter"			"0"
			}
		}
	}
	
	//=================================================================================================================
	// Ability: Attribute Bonus
	//=================================================================================================================
	"invoker_attribute_bonus"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"5690"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"MaxLevel"						"1"
		"LevelsBetweenUpgrades"					"1"
		"RequiredLevel"						"25"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"						"FIELD_INTEGER"
				"attribute_bonus_per_level"		"6"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Cold Snap
	//=================================================================================================================
	"invoker_cold_snap"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5376"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"MaxLevel"						"1"
		"HotKeyOverride"				"Y"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Invoker.ColdSnap"
		
		// Unit Targeting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_ENEMY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_BASIC"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"

		"AbilityCooldown"				"20"
		"AbilityManaCost"				"100"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.15"	// Applies multiple modifiers
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"6.5"
				"levelkey"				"quaslevel"	
				"LinkedSpecialBonus"	"special_bonus_unique_invoker_7"
			}
			"02"
			{
				"var_type"				"FIELD_FLOAT"
				"freeze_duration"		"0.4"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"freeze_cooldown"		"0.77 0.74 0.71 0.69 0.66 0.63 0.60 0.57"
				"levelkey"				"quaslevel"	
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"freeze_damage"			"10 18 26 34 42 50 58 66"
				"levelkey"				"quaslevel"	
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_trigger"		"10.0"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Ghost Walk
	//=================================================================================================================
	"invoker_ghost_walk"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5381"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_IGNORE_CHANNEL | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"1"
		"HotKeyOverride"				"V"
		"AbilitySound"					"Hero_Invoker.GhostWalk"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"45"
		"AbilityManaCost"				"200"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"100.0"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"area_of_effect"		"400"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"enemy_slow"			"-20 -25 -30 -35 -40 -45 -50 -55"
				"levelkey"				"quaslevel"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"self_slow"				"-30 -20 -10 0 10 20 30 40"
				"levelkey"				"wexlevel"
			}			
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"aura_fade_time"		"2.0"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Tornado
	//=================================================================================================================
	"invoker_tornado"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5382"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"MaxLevel"						"1"
		"HotKeyOverride"				"X"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilitySound"					"Hero_Invoker.Tornado"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"2000"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"

		"AbilityCooldown"				"30"
		"AbilityManaCost"				"150"
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"travel_distance"		"800 1200 1600 2000 2400 2800 3200 3600"
				"levelkey"				"wexlevel"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"travel_speed"			"1000"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"area_of_effect"		"200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_distance"		"200"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"end_vision_duration"	"1.75"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"lift_duration"			"1.2"
				"LinkedSpecialBonus"	"special_bonus_unique_invoker_8"
				"levelkey"				"quaslevel"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"base_damage"			"70"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"quas_damage"			"0 0 0 0 0 0 0"
				"levelkey"				"quaslevel"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"wex_damage"			"50 100 150 200 250 300 350 400"
				"levelkey"				"wexlevel"
			}
		}
	}

	//=================================================================================================================
	// Invoker: EMP
	//=================================================================================================================
	"invoker_emp"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5383"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"1"
		"HotKeyOverride"				"C"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"AbilitySound"					"Hero_Invoker.EMP.Charge"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"950"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"

		"AbilityCooldown"				"30"
		"AbilityManaCost"				"125"
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"delay"					"2.9"
				"levelkey"				"wexlevel"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"area_of_effect"		"675"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"mana_burned"			"100 175 250 325 400 475 550 625"
				"levelkey"				"wexlevel"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"damage_per_mana_pct"	"100"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Alacrity
	//=================================================================================================================
	"invoker_alacrity"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5384"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_UNIT_TARGET | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"MaxLevel"						"1"
		"HotKeyOverride"				"Z"
		"AbilitySound"					"Hero_Invoker.Alacrity"

		// Unit Targeting
		//-------------------------------------------------------------------------------------------------------------
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO | DOTA_UNIT_TARGET_CREEP"
		"SpellImmunityType"				"SPELL_IMMUNITY_ALLIES_YES"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"650"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"

		"AbilityCooldown"				"17"
		"AbilityManaCost"				"60"
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_attack_speed"		"10 25 40 55 70 85 100 115"
				"levelkey"					"wexlevel"
				"LinkedSpecialBonus"		"special_bonus_unique_invoker_5"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"bonus_damage"				"10 25 40 55 70 85 100 115"
				"levelkey"					"exortlevel"
				"LinkedSpecialBonus"		"special_bonus_unique_invoker_5"
			}
			"03"
			{
				"var_type"					"FIELD_FLOAT"
				"duration"					"9"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Chaos Meteor
	//=================================================================================================================
	"invoker_chaos_meteor"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5385"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"MaxLevel"						"1"
		"HotKeyOverride"				"D"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Invoker.ChaosMeteor.Impact"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"700"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"

		"AbilityCooldown"				"55"
		"AbilityManaCost"				"200"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityModifierSupportValue"	"0.0"	// Mainly about damage
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"land_time"				"1.3"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"area_of_effect"		"275"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"travel_distance"		"465 615 780 930 1095 1245 1410 1575"
				"levelkey"				"wexlevel"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"travel_speed"			"300"
			}			
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_interval"		"0.5"
				"CalculateSpellDamageTooltip"	"0"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_distance"		"500"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"end_vision_duration"	"3.0"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"main_damage"			"60 100 140 180 220 260 300 360"
				"LinkedSpecialBonus"		"special_bonus_unique_invoker_6"
				"levelkey"				"exortlevel"
			}
			"09"
			{
				"var_type"				"FIELD_FLOAT"
				"burn_duration"			"3.0"
			}
			"10"
			{
				"var_type"				"FIELD_FLOAT"
				"burn_dps"				"10 15 20 25 30 35 40 45"
				"levelkey"				"exortlevel"
				"CalculateSpellDamageTooltip"	"1"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Sun Strike
	//=================================================================================================================
	"invoker_sun_strike"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5386"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"MaxLevel"						"1"
		"HotKeyOverride"				"T"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_PURE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_YES"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Invoker.SunStrike.Charge"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"0"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"

		"AbilityCooldown"				"25"
		"AbilityManaCost"				"175"
			
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"delay"					"1.7"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"area_of_effect"		"175"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"damage"				"100 200 300 400 500 600 700 800"
				"levelkey"				"exortlevel"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_distance"		"400"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"vision_duration"		"4.0"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Forge Spirit
	//=================================================================================================================
	"invoker_forge_spirit"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5387"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"MaxLevel"						"1"
		"HotKeyOverride"				"F"
		"AbilitySound"					"Hero_Invoker.ForgeSpirit"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"30"
		"AbilityManaCost"				"75"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"spirit_damage"			"22 32 42 52 62 72 82 92"
				"levelkey"				"exortlevel"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"spirit_mana"			"100 150 200 250 300 350 400 450"
				"levelkey"				"exortlevel"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"spirit_armor"			"7"
				"levelkey"				"exortlevel"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"spirit_attack_range"	"300 365 430 495 560 625 690 755"
				"levelkey"				"quaslevel"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"spirit_hp"				"300 400 500 600 700 800 900 1000"
				"levelkey"				"quaslevel"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"spirit_duration"		"20 30 40 50 60 70 80 90"
				"levelkey"				"quaslevel"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Forged Spirit: Melting Strike
	//=================================================================================================================
	"forged_spirit_melting_strike"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5388"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"1"
		
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityManaCost"				"40"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"armor_removed"			"1"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"max_armor_removed"		"10"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"5"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}

	//=================================================================================================================
	// Invoker: Ice Wall
	//=================================================================================================================
	"invoker_ice_wall"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5389"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"1"
		"HotKeyOverride"				"G"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Invoker.IceWall.Cast"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCooldown"				"25"
		"AbilityManaCost"				"175"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_FLOAT"
				"duration"				"3.0 4.5 6.0 7.5 9.0 10.5 12.0 13.5"
				"levelkey"				"quaslevel"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"slow"					"-20 -40 -60 -80 -100 -120 -140 -160"
				"levelkey"				"quaslevel"
			}
			"03"
			{
				"var_type"				"FIELD_FLOAT"
				"slow_duration"			"2.0"
			}
			"04"
			{
				"var_type"				"FIELD_FLOAT"
				"damage_per_second"		"7 14 21 28 35 42 49 56"
				"levelkey"				"exortlevel"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"wall_place_distance"	"200"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"num_wall_elements"		"15"
			}
			"07"
			{
				"var_type"				"FIELD_INTEGER"
				"wall_element_spacing"	"80"
			}
			"08"
			{
				"var_type"				"FIELD_INTEGER"
				"wall_element_radius"	"105"
			}
		}
	}

	//=================================================================================================================
	// Invoker: Deafening Blast
	//=================================================================================================================
	"invoker_deafening_blast"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5390"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE | DOTA_ABILITY_BEHAVIOR_IGNORE_BACKSWING | DOTA_ABILITY_BEHAVIOR_SHOW_IN_GUIDES"
		"SpellImmunityType"				"SPELL_IMMUNITY_ENEMIES_NO"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"
		"MaxLevel"						"1"
		"HotKeyOverride"				"B"
		"AbilityUnitDamageType"			"DAMAGE_TYPE_MAGICAL"
		"FightRecapLevel"				"1"
		"AbilitySound"					"Hero_Invoker.DeafeningBlast"

		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"1000"
		"AbilityCastPoint"				"0.05"
		"AbilityCastAnimation"			"ACT_INVALID"

		"AbilityCooldown"				"40"
		"AbilityManaCost"				"300"
		"AbilityModifierSupportValue"	"0.5"	// Applies 2 modifiers

		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"travel_distance"		"1000"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"travel_speed"			"1100"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"radius_start"			"175"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"radius_end"			"225"
			}
			"05"
			{
				"var_type"				"FIELD_FLOAT"
				"end_vision_duration"	"1.75"
			}
			"06"
			{
				"var_type"				"FIELD_FLOAT"
				"damage"				"80 140 200 260 320 380 440 500"
				"levelkey"				"exortlevel"
			}
			"07"
			{
				"var_type"				"FIELD_FLOAT"
				"knockback_duration"	"0.25 0.5 0.75 1.0 1.25 1.5 1.75 2.0"
				"levelkey"				"quaslevel"
			}
			"08"
			{
				"var_type"				"FIELD_FLOAT"
				"disarm_duration"		"1.25 2.0 2.75 3.5 4.25 5.0 5.75 6.5"
				"levelkey"				"wexlevel"
			}
		}
	}
	//=================================================================================================================
	// Lycan: Summon Wolves Critical Strike
	//=================================================================================================================
	"lycan_summon_wolves_critical_strike"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5399"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"MaxLevel"						"1"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_YES"
		"MaxLevel"						"6"
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"maim_chance"				"20 20 20 20 20 20"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"maim_duration"				"4.0"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"maim_movement_speed"		"0"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"maim_attack_speed"			"30 30 60 60 120 120"
			}
			"05"
			{
				"var_type"					"FIELD_INTEGER"
				"maim_damage"				"8 12 16 20 24 28"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_1"
	}
	//=================================================================================================================
	// Lycan Summon Wolves: Permanent Invisibility
	//=================================================================================================================
	"lycan_summon_wolves_invisibility"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"5500"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		"SpellDispellableType"			"SPELL_DISPELLABLE_NO"

		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"fade_time"					"0.0 0.0 0.0"
			}
			"02"
			{
				"var_type"					"FIELD_FLOAT"
				"fade_delay"				"1.7"
			}
		}
		"AbilityCastAnimation"		"ACT_DOTA_CAST_ABILITY_2"
	}
	//=================================================================================================================
	// Rubick: Empty 1
	//=================================================================================================================
	"rubick_empty1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5453"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"MaxLevel"						"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_5"
	}

	//=================================================================================================================
	// Rubick: Empty 2
	//=================================================================================================================
	"rubick_empty2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5454"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"MaxLevel"						"0"
		"AbilityCastAnimation"			"ACT_DOTA_CAST_ABILITY_6"
	}

	//=================================================================================================================
	// Rubick: Hidden 1 
	//=================================================================================================================
	"rubick_hidden1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5455"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"MaxLevel"						"0"
		"AbilityCastAnimation"			"ACT_INVALID"
	}

	//=================================================================================================================
	// Rubick: Hidden 2
	//=================================================================================================================
	"rubick_hidden2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5456"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"MaxLevel"						"0"
		"AbilityCastAnimation"			"ACT_INVALID"
	}

	//=================================================================================================================
	// Rubick: Hidden 3
	//=================================================================================================================
	"rubick_hidden3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"5457"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_HIDDEN | DOTA_ABILITY_BEHAVIOR_NOT_LEARNABLE"
		"MaxLevel"						"0"
		"AbilityCastAnimation"			"ACT_INVALID"
	}
	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_1"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"6097"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"				"2"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_2"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"6098"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"				"0"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_3"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"6099"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"				"16"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_4"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"6656"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"				"2"
			}
			"02"
			{
				"var_type"					"FIELD_INTEGER"
				"cooldown"				"90"
			}
			"03"
			{
				"var_type"					"FIELD_INTEGER"
				"min_range"				"160"
			}
			"04"
			{
				"var_type"					"FIELD_INTEGER"
				"max_range"				"220"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_5"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"6657"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"				"35"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_6"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"6811"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_INTEGER"
				"value"				"30"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_7"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"7016"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"				"2.5"
			}
		}
	}

	//=================================================================================================================
	// Ability: Special Bonus
	//=================================================================================================================
	"special_bonus_unique_invoker_8"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"					"7017"														// unique ID number for this ability.  Do not change this once established or it will invalidate collected stats.
		"AbilityType"					"DOTA_ABILITY_TYPE_ATTRIBUTES"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_PASSIVE"
		
		// Special
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"					"FIELD_FLOAT"
				"value"				"0.5"
			}
		}
	}
}"DOTAHeroes"
{
	"npc_dota_hero_abaddon_ebf"
	{
		"override_hero"			"npc_dota_hero_abaddon"
		"Ability1"				"abaddon_death_coil_ebf"
		"Ability2"				"abaddon_aphotic_barrier"
		"Ability3"				"abaddon_brume_weaver"
		"Ability4"				"abaddon_curse_ebf"
		"Ability6"				"abaddon_borrowed_time_ebf"
		
		"Ability10"				"special_bonus_unique_abaddon_death_coil_1"
		"Ability11"				"special_bonus_unique_abaddon_death_coil_2"
		"Ability12"				"special_bonus_unique_abaddon_aphotic_barrier_1"
		"Ability13"				"special_bonus_unique_abaddon_aphotic_barrier_2"
		"Ability14"				"special_bonus_unique_abaddon_brume_weaver_1"
		"Ability15"				"special_bonus_unique_abaddon_brume_weaver_2"
		"Ability16"				"special_bonus_unique_abaddon_borrowed_time_1"
		"Ability17"				"special_bonus_unique_abaddon_borrowed_time_2"
			
	}
	//=================================================================================================================
	// HERO: Underlord
	//=================================================================================================================
	"npc_dota_hero_abyssal_underlord_ebf"
	{
		"override_hero"				"npc_dota_hero_abyssal_underlord"
		"AbilityLayout"				"4"
		"Ability1"					"abyssal_underlord_firestorm_bh"
		"Ability2"					"abyssal_underlord_pit_of_malice_bh"	
		"Ability3"					"abyssal_underlord_atrophy_aura_bh"					// Ability 4
		"Ability6"					"abyssal_underlord_abyssal_expulsion"
		
		"Ability10"					"special_bonus_unique_abyssal_underlord_firestorm_1"
		"Ability11"					"special_bonus_unique_abyssal_underlord_firestorm_2"
		"Ability12"					"special_bonus_unique_abyssal_underlord_pit_of_malice_1"
		"Ability13"					"special_bonus_unique_abyssal_underlord_pit_of_malice_2"
		"Ability14"					"special_bonus_unique_abyssal_underlord_atrophy_aura_1"
		"Ability15"					"special_bonus_unique_abyssal_underlord_atrophy_aura_2"
		"Ability16"					"special_bonus_unique_abyssal_underlord_abyssal_expulsion_1"
		"Ability17"					"special_bonus_unique_abyssal_underlord_abyssal_expulsion_2"
	}
	//=================================================================================================================
	// HERO: Alchemist
	//=================================================================================================================
	"npc_dota_hero_alchemist_ebf"
	{
		"override_hero"			"npc_dota_hero_alchemist"
		"Ability1"				"alchemist_acid_spray_ebf"
		"Ability2"				"alchemist_midas_knuckle"	
		"Ability3"				"alchemist_alchemists_greed"					// Ability 4
		"Ability6"				"alchemist_chemical_rage_ebf"
		
		"Ability10"				"special_bonus_unique_alchemist_midas_knuckle_1"
		"Ability11"				"special_bonus_unique_alchemist_midas_knuckle_2"
		"Ability12"				"special_bonus_unique_alchemist_acid_spray_1"
		"Ability13"				"special_bonus_unique_alchemist_acid_spray_2"
		"Ability14"				"special_bonus_unique_alchemist_alchemists_greed_1"
		"Ability15"				"special_bonus_unique_alchemist_alchemists_greed_2"
		"Ability16"				"special_bonus_unique_alchemist_chemical_rage_1"
		"Ability17"				"special_bonus_unique_alchemist_chemical_rage_2"
	}
	"npc_dota_hero_ancient_apparition_ebf"
	{
		"override_hero"				"npc_dota_hero_ancient_apparition"
		"Ability1"					"aa_cold_feet"
		"Ability2"					"aa_ice_vortex"
		"Ability3"					"aa_chilling_touch"
		"Ability6"					"aa_ice_blast"
		
		"Ability10"		"special_bonus_unique_aa_cold_feet_1"
		"Ability11"		"special_bonus_unique_aa_cold_feet_2"
		"Ability12"		"special_bonus_unique_aa_ice_vortex_1"
		"Ability13"		"special_bonus_unique_aa_ice_vortex_2"
		"Ability14"		"special_bonus_unique_aa_chilling_touch_1"
		"Ability15"		"special_bonus_unique_aa_chilling_touch_2"
		"Ability16"		"special_bonus_unique_aa_ice_blast_1"
		"Ability17"		"special_bonus_unique_aa_ice_blast_2"
	}
	//=================================================================================================================
	// HERO: Anti-Mage
	//=================================================================================================================
	"npc_dota_hero_antimage_ebf"
	{
		"override_hero"					"npc_dota_hero_antimage"
		"Ability1"						"antimage_magus_breaker"					// Ability 4
		"Ability2"						"antimage_blink_bh"
		"Ability3"						"antimage_hex_guard"
		"Ability4"						"antimage_ender_of_magic"
		"Ability6"						"antimage_void_of_hatred"					// Ability 4
		
		"Ability10"						"special_bonus_unique_antimage_magus_breaker_1"
		"Ability11"						"special_bonus_unique_antimage_magus_breaker_2"
		"Ability12"						"special_bonus_unique_antimage_blink_1"
		"Ability13"						"special_bonus_unique_antimage_blink_2"
		"Ability14"						"special_bonus_unique_antimage_hex_guard_1"
		"Ability15"						"special_bonus_unique_antimage_hex_guard_2"
		"Ability16"						"special_bonus_unique_antimage_void_of_hatred_1"
		"Ability17"						"special_bonus_unique_antimage_void_of_hatred_2"
		
	}
	//=================================================================================================================
	// HERO: Arc Warden
	//=================================================================================================================
	"npc_dota_hero_arc_warden"
	{
		"Ability1"        "arc_warden_flux_bh"
	    "Ability2"        "arc_warden_magnetic_field_bh" 
	    "Ability3"        "arc_warden_spark_wrath_bh"
	    "Ability4"        "arc_warden_tempest_mirage"
	    "Ability6"        "arc_warden_primordial_current"

	    "Ability10"       "special_bonus_unique_arc_warden_flux_bh_1"
	    "Ability11"       "special_bonus_unique_arc_warden_flux_bh_2"
	    "Ability12"       "special_bonus_unique_arc_warden_magnetic_field_bh_1"
	    "Ability13"       "special_bonus_unique_arc_warden_magnetic_field_bh_2"
	    "Ability14"       "special_bonus_unique_arc_warden_spark_wrath_bh_1"
	    "Ability15"       "special_bonus_unique_arc_warden_spark_wrath_bh_2"
	    "Ability16"       "special_bonus_unique_arc_warden_primordial_current_1"
	    "Ability17"       "special_bonus_unique_arc_warden_primordial_current_2"

	    // Attributes
		//-------------------------------------------------------------------------------------------------------------
		"AttributePrimary"		"DOTA_ATTRIBUTE_INTELLECT"
	}
	"npc_dota_hero_axe_ebf"
	{
	    "override_hero"   "npc_dota_hero_axe"
	
	    "Ability1"        "axe_forced_shout"
	    "Ability2"        "axe_blood_hunger" 
	    "Ability3"        "axe_cleave_strike"
	    "Ability4"        "axe_steeled_temper"
	    "Ability5"        "generic_hidden" 
	    "Ability6"        "axe_ground_pound"
	
	    "Ability10"       "special_bonus_unique_axe_forced_shout_2"
	    "Ability11"       "special_bonus_unique_axe_forced_shout_1"
	    "Ability12"       "special_bonus_unique_axe_blood_hunger_1"
	    "Ability13"       "special_bonus_unique_axe_blood_hunger_2"
	    "Ability14"       "special_bonus_unique_axe_cleave_strike_1"
	    "Ability15"       "special_bonus_unique_axe_cleave_strike_2"
	    "Ability16"       "special_bonus_unique_axe_ground_pound_1"
	    "Ability17"       "special_bonus_unique_axe_ground_pound_2"
	}
	"npc_dota_hero_bane"
	{
		"override_hero"			"npc_dota_hero_bane"
		"Ability1"				"bane_enfeeble_ebf"
		"Ability2"				"bane_brain_feast"
		"Ability3"				"bane_nightmare_prison"
		"Ability4"				"bane_terrorize"
		"Ability6"				"bane_fiends_grip_ebf"
		
		"Ability10"				"special_bonus_unique_bane_enfeeble_ebf_1"
		"Ability11"				"special_bonus_unique_bane_enfeeble_ebf_2"
		"Ability12"				"special_bonus_unique_bane_brain_feast_1"
		"Ability13"				"special_bonus_unique_bane_brain_feast_2"
		"Ability14"				"special_bonus_unique_bane_nightmare_prison_1"
		"Ability15"				"special_bonus_unique_bane_nightmare_prison_2"
		"Ability16"				"special_bonus_unique_bane_fiends_grip_ebf_1"
		"Ability17"				"special_bonus_unique_bane_fiends_grip_ebf_2"
	}
	"npc_dota_hero_batrider_ebf"
	{
		"override_hero"			"npc_dota_hero_batrider"
		"Ability1"				"batrider_napalm"
		"Ability2"				"batrider_flamebreak_bh"
		"Ability3"				"batrider_fly"
		"Ability4"				"batrider_concoction"
		"Ability6"				"batrider_lasso"
		
		"Ability10"				"special_bonus_unique_batrider_napalm_1"
		"Ability11"				"special_bonus_unique_batrider_napalm_2"
		"Ability12"				"special_bonus_unique_batrider_flamebreak_bh_1"
		"Ability13"				"special_bonus_unique_batrider_flamebreak_bh_2"
		"Ability14"				"special_bonus_unique_batrider_fly_1"
		"Ability15"				"special_bonus_unique_batrider_fly_2"
		"Ability16"				"special_bonus_unique_batrider_lasso_1"
		"Ability17"				"special_bonus_unique_batrider_lasso_2"
		
		"MovementSpeed"			"310"
	}
	"npc_dota_hero_beastmaster_ebf"
	{
		"override_hero"			"npc_dota_hero_beastmaster"
		"Ability1"				"beast_wild_axes"
		// "Ability2"				"beast_boar_spirit"
		"Ability2"				"beast_cotw_boar"
		// "Ability3"				"beast_hawk_spirit"
		"Ability3"				"beast_cotw_hawk"
		"Ability4"				"beast_beast_mode"
		"Ability6"				"beast_roar"
		
		"Ability10"				"special_bonus_unique_beast_wild_axes_1"
		"Ability11"				"special_bonus_unique_beast_wild_axes_2"
		"Ability12"				"special_bonus_unique_beast_cotw_hawk_1"
		"Ability13"				"special_bonus_unique_beast_cotw_boar_1"
		"Ability14"				"special_bonus_unique_beast_beast_mode_1"
		"Ability15"				"special_bonus_unique_beast_beast_mode_2"
		"Ability16"				"special_bonus_unique_beast_roar_1"
		"Ability17"				"special_bonus_unique_beast_roar_2"
	}

	//=================================================================================================================
	// HERO: Bloodseeker
	//=================================================================================================================
	"npc_dota_hero_bloodseeker_ebf"
	{
		"override_hero"			"npc_dota_hero_bloodseeker"
		"Ability1"				"bs_bloodrage"
		"Ability2"				"bs_blood_rite"
		"Ability3"				"bs_devils_blood"
		"Ability4"				"bs_thirst"
		"Ability6"				"bs_rupture"

		"Ability10"				"special_bonus_unique_bs_bloodrage_1"
		"Ability11"				"special_bonus_unique_bs_bloodrage_2"
		"Ability12"				"special_bonus_unique_bs_blood_rite_1"
		"Ability13"				"special_bonus_unique_bs_blood_rite_2"
		"Ability14"				"special_bonus_unique_bs_devils_blood_1"
		"Ability15"				"special_bonus_unique_bs_devils_blood_2"
		"Ability16"				"special_bonus_unique_bs_rupture_1"
		"Ability17"				"special_bonus_unique_bs_rupture_2"
		
	}
	"npc_dota_hero_bounty_hunter_ebf"
	{
		"override_hero"			"npc_dota_hero_bounty_hunter"
		"Ability1"				"bh_shuriken"
		"Ability2"				"bh_tree_hook"
		"Ability3"				"bh_shadow_walk"
		"Ability4"				"bh_jinada"
		"Ability6"				"bh_track"
	
		"Ability10"				"special_bonus_unique_bh_shuriken_1"
		"Ability11"				"special_bonus_unique_bh_shuriken_2"
		"Ability12"				"special_bonus_unique_bh_jinada_1"
		"Ability13"				"special_bonus_unique_bh_tree_hook_1"
		"Ability14"				"special_bonus_unique_bh_shadow_walk_1"
		"Ability15"				"special_bonus_unique_bh_shadow_walk_2"
		"Ability16"				"special_bonus_unique_bh_track_1"
		"Ability17"				"special_bonus_unique_bh_track_2"
	}
	//=================================================================================================================
	// HERO: Brewmaster
	//=================================================================================================================
	"npc_dota_hero_brewmaster_bh"
	{
		"override_hero"					"npc_dota_hero_brewmaster"
		"Ability1"						"brewmaster_thunder_clap_bh"
		"Ability2"						"brewmaster_drunken_haze_bh"
		"Ability3"						"brewmaster_tipsy_sway"
		"Ability4"						"brewmaster_drunken_brawler_bh"
		"Ability6"						"brewmaster_primal_avatar"					// Ability 4
		
		"Ability10"						"special_bonus_unique_brewmaster_thunder_clap_1"
		"Ability11"						"special_bonus_unique_brewmaster_thunder_clap_2"
		"Ability12"						"special_bonus_unique_brewmaster_drunken_haze_1"
		"Ability13"						"special_bonus_unique_brewmaster_drunken_haze_2"
		"Ability14"						"special_bonus_unique_brewmaster_tipsy_sway_1"
		"Ability15"						"special_bonus_unique_brewmaster_tipsy_sway_2"
		"Ability16"						"special_bonus_unique_brewmaster_primal_avatar_1"
		"Ability17"						"special_bonus_unique_brewmaster_primal_avatar_2"
		
		"ArmorPhysical"					"-3.000000"
		
		"AttributeBaseStrength"			"23"
		"AttributeStrengthGain"			"3.700000"
		"AttributeBaseAgility"			"22"
		"AttributeAgilityGain"			"2.0000"
		"AttributeBaseIntelligence"		"14"
		"AttributeIntelligenceGain"		"1.60000"
	}
	//=================================================================================================================
	// HERO: Bristleback
	//=================================================================================================================
	"npc_dota_hero_bristleback_ebf"
	{
		"override_hero"					"npc_dota_hero_bristleback"
		"Ability1"						"bristleback_snot"
		"Ability2"						"bristleback_quills"
		"Ability3"						"bristleback_yer_mum"
		"Ability4"						"bristleback_spiky_shell"
		"Ability6"						"bristleback_worked_up"
	
		"Ability10"						"special_bonus_unique_bristleback_snot_1"
	    "Ability11"						"special_bonus_unique_bristleback_snot_2"
	    "Ability12"						"special_bonus_unique_bristleback_quills_1"
	    "Ability13"						"special_bonus_unique_bristleback_quills_2"
	    "Ability14"						"special_bonus_unique_bristleback_yer_mum_1"
	    "Ability15"						"special_bonus_unique_bristleback_yer_mum_2"
	    "Ability16"						"special_bonus_unique_bristleback_work_up_1"
	    "Ability17"						"special_bonus_unique_bristleback_work_up_2"
	}
	"npc_dota_hero_broodmother_ebf"
	{
		"override_hero"					"npc_dota_hero_broodmother"
		"Ability1"						"broodmother_spawn_spiderlings_bh"
		"Ability2"						"broodmother_web"
		"Ability3"						"broodmother_spiderite"
		"Ability4"						"broodmother_bite"
		"Ability6"						"broodmother_hunger"
	
		"Ability10"						"special_bonus_unique_broodmother_spawn_spiderlings_bh_1"
	    "Ability11"						"special_bonus_unique_broodmother_spawn_spiderlings_bh_2"
	    "Ability12"						"special_bonus_unique_broodmother_web_1"
	    "Ability13"						"special_bonus_unique_broodmother_web_2"
	    "Ability14"						"special_bonus_unique_broodmother_spiderite_1"
	    "Ability15"						"special_bonus_unique_broodmother_spiderite_2"
	    "Ability16"						"special_bonus_unique_broodmother_hunger_1"
	    "Ability17"						"special_bonus_unique_broodmother_hunger_2"
	}
	"npc_dota_hero_centaur_ebf"
	{
		"override_hero"					"npc_dota_hero_centaur"
		"Ability1"						"centaur_hoof_stomp_ebf"
		"Ability2"						"centaur_great_edge"
		"Ability3"						"centaur_champions_presence"
		"Ability4"						"centaur_warchiefs_aegis"
		"Ability6"						"centaur_stampede_ebf"
		
		"Ability10"						"special_bonus_unique_centaur_champions_presence_1"
		"Ability11"						"special_bonus_unique_centaur_stampede_1"
		"Ability12"						"special_bonus_unique_centaur_great_edge_1"
		"Ability13"						"special_bonus_unique_centaur_great_edge_2"
		"Ability14"						"special_bonus_unique_centaur_hoof_stomp_1"
		"Ability15"						"special_bonus_unique_centaur_hoof_stomp_2"
		"Ability16"						"special_bonus_unique_centaur_warchiefs_aegis_1"
		"Ability17"						"special_bonus_unique_centaur_warchiefs_aegis_2"
		
		"AttributePrimary"				"DOTA_ATTRIBUTE_STRENGTH"
		"AttributeBaseStrength"			"23"
		"AttributeStrengthGain"			"3.9"
		"AttributeBaseIntelligence"		"15"
		"AttributeIntelligenceGain"		"1.6"
		"AttributeBaseAgility"			"25"
		"AttributeAgilityGain"			"3.2"
	}
	"npc_dota_hero_chaos_knight_ebf"
	{
		"override_hero"					"npc_dota_hero_chaos_knight"
		"Ability1"						"chaos_knight_chaos_bolt_ebf"
		"Ability2"						"chaos_knight_reality_rift_ebf"
		"Ability3"						"chaos_knight_chaos_strike_ebf"
		"Ability6"						"chaos_knight_phantasm_ebf"
		
		"Ability10"						"special_bonus_unique_chaos_knight_chaos_strike_1"
		"Ability11"						"special_bonus_unique_chaos_knight_chaos_strike_2"
		"Ability12"						"special_bonus_unique_chaos_knight_reality_rift_1"
		"Ability13"						"special_bonus_unique_chaos_knight_reality_rift_2"
		"Ability14"						"special_bonus_unique_chaos_knight_chaos_bolt_1"
		"Ability15"						"special_bonus_unique_chaos_knight_chaos_bolt_2"
		"Ability16"						"special_bonus_unique_chaos_knight_phantasm_1"
		"Ability17"						"special_bonus_unique_chaos_knight_phantasm_2"
	}
	//=================================================================================================================
	// HERO: Chen
	//=================================================================================================================
	"npc_dota_hero_chen_ebf"
	{
		"override_hero"					"npc_dota_hero_chen"
		"AbilityLayout"					"5"
		"Ability1"						"chen_penitence_bh"
		"Ability2"						"chen_holy_persuasion_bh"
		"Ability3"						"chen_divine_favor_bh"
		"Ability4"						"chen_test_of_faith_bh"
		"Ability6"						"chen_god_hand"
		
		"Ability10"						"special_bonus_unique_chen_penitence_1"
		"Ability11"						"special_bonus_unique_chen_penitence_2"
		"Ability12"						"special_bonus_unique_chen_holy_persuasion_1"
		"Ability13"						"special_bonus_unique_chen_holy_persuasion_2"
		"Ability14"						"special_bonus_unique_chen_divine_favor_1"
		"Ability15"						"special_bonus_unique_chen_divine_favor_2"
		"Ability16"						"special_bonus_unique_chen_god_hand_1"
		"Ability17"						"special_bonus_unique_chen_god_hand_2"
	}
	//=================================================================================================================
	// HERO: Clinkz
	//=================================================================================================================
	"npc_dota_hero_clinkz_ebf"
	{
		"override_hero"					"npc_dota_hero_clinkz"
		"Ability1"						"clinkz_strafe_bh"
		"Ability2"						"clinkz_arrows"
		"Ability3"						"clinkz_walk"
		"Ability4"						"clinkz_shot"
		"Ability6"						"clinkz_burning_army_bh"
		
		"Ability10"						"special_bonus_unique_clinkz_strafe_bh_1"
		"Ability11"						"special_bonus_unique_clinkz_strafe_bh_2"
		"Ability12"						"special_bonus_unique_clinkz_arrows_1"
		"Ability13"						"special_bonus_unique_clinkz_arrows_2"
		"Ability14"						"special_bonus_unique_clinkz_walk_1"
		"Ability15"						"special_bonus_unique_clinkz_walk_2"
		"Ability16"						"special_bonus_unique_clinkz_burning_army_1"
		"Ability17"						"special_bonus_unique_clinkz_burning_army_2"
	}
	"npc_dota_hero_crystal_maiden_ebf"
	{
		"override_hero"					"npc_dota_hero_crystal_maiden"
		"Ability1"						"crystal_maiden_crystal_nova_bh"
		"Ability2"						"crystal_maiden_frostbite_bh"
		"Ability3"						"crystal_maiden_crystalline_aura"
		"Ability4"						"crystal_maiden_icy_veins"
		"Ability6"						"crystal_maiden_arcane_blizzard"
		
		"Ability10"						"special_bonus_unique_crystal_maiden_crystal_nova_1"
		"Ability11"						"special_bonus_unique_crystal_maiden_crystal_nova_2"
		"Ability12"						"special_bonus_unique_crystal_maiden_frostbite_1"
		"Ability13"						"special_bonus_unique_crystal_maiden_frostbite_2"
		"Ability14"						"special_bonus_unique_crystal_maiden_crystalline_aura_1"
		"Ability15"						"special_bonus_unique_crystal_maiden_crystalline_aura_2"
		"Ability16"						"special_bonus_unique_crystal_maiden_arcane_blizzard_1"
		"Ability17"						"special_bonus_unique_crystal_maiden_arcane_blizzard_2"
	}	
	//=================================================================================================================
	// HERO: Dark Seer
	//=================================================================================================================
	"npc_dota_hero_dark_seer_ebf"
	{
		"override_hero"					"npc_dota_hero_dark_seer"
		"Ability1"						"ds_vacuum"
		"Ability2"						"ds_shell"
		"Ability3"						"ds_surge"
		"Ability4"						"ds_command"
		"Ability6"						"ds_replica"

		"Ability10"						"special_bonus_unique_ds_vacuum_1"
		"Ability11"						"special_bonus_unique_ds_vacuum_2"
		"Ability12"						"special_bonus_unique_ds_shell_1"
		"Ability13"						"special_bonus_unique_ds_shell_2"
		"Ability14"						"special_bonus_unique_ds_surge_1"
		"Ability15"						"special_bonus_unique_ds_surge_2"
		"Ability16"						"special_bonus_unique_ds_replica_1"
		"Ability17"						"special_bonus_unique_ds_replica_2"
		
	}
	//=================================================================================================================
	// HERO: Dark Willow
	//=================================================================================================================
	"npc_dota_hero_dark_willow"
	{
		"override_hero"					"npc_dota_hero_dark_willow"
		"Ability1"						"dw_bramble"
		"Ability2"						"dw_shadow"
		"Ability3"						"dw_crown"
		"Ability4"						"dw_bedlam"
		"Ability6"						"dw_terrorize"
		
		"Ability10"						"special_bonus_unique_dw_bramble_1"
		"Ability11"						"special_bonus_unique_dw_bramble_2"
		"Ability12"						"special_bonus_unique_dw_shadow_1"
		"Ability13"						"special_bonus_unique_dw_shadow_2"
		"Ability14"						"special_bonus_unique_dw_crown_1"
		"Ability15"						"special_bonus_unique_dw_crown_2"
		"Ability16"						"special_bonus_unique_dw_terrorize_1"
		"Ability17"						"special_bonus_unique_dw_terrorize_2"
	}
	"npc_dota_hero_dazzle" // Mystic -> need to do it like this for mergetables
	{
		"override_hero"					"npc_dota_hero_dazzle"
		"Ability1"						"dazzle_poison_touch_bh"
		"Ability2"						"dazzle_weave_bh"
		"Ability3"						"dazzle_shadow_wave_bh"					// Ability 3
		"Ability6"						"dazzle_shallow_grave_bh"
		
		"Ability10"						"special_bonus_unique_dazzle_poison_touch_1"
		"Ability11"						"special_bonus_unique_dazzle_poison_touch_2"
		"Ability12"						"special_bonus_unique_dazzle_weave_1"
		"Ability13"						"special_bonus_unique_dazzle_weave_2"
		"Ability14"						"special_bonus_unique_dazzle_shadow_wave_1"
		"Ability15"						"special_bonus_unique_dazzle_shadow_wave_2"
		"Ability16"						"special_bonus_unique_dazzle_shallow_grave_1"
		"Ability17"						"special_bonus_unique_dazzle_shallow_grave_2"
	}
	//=================================================================================================================
	// HERO: Death Prophet
	//=================================================================================================================
	"npc_dota_hero_death_prophet_ebf"
	{
		"override_hero"					"npc_dota_hero_death_prophet"
		"Ability1"						"death_prophet_crypt_swarm_bh"
		"Ability2"						"death_prophet_ghastly_haunting"
		"Ability3"						"death_prophet_spirit_siphon_bh"
		"Ability4"						"death_prophet_occultism"
		"Ability6"						"death_prophet_exorcism_bh"
		
		"Ability10"						"special_bonus_unique_death_prophet_crypt_swarm_1"
		"Ability11"						"special_bonus_unique_death_prophet_crypt_swarm_2"
		"Ability12"						"special_bonus_unique_death_prophet_ghastly_haunting_1"
		"Ability13"						"special_bonus_unique_death_prophet_ghastly_haunting_2"
		"Ability14"						"special_bonus_unique_death_prophet_spirit_siphon_1"
		"Ability15"						"special_bonus_unique_death_prophet_spirit_siphon_2"
		"Ability16"						"special_bonus_unique_death_prophet_exorcism_1"
		"Ability17"						"special_bonus_unique_death_prophet_exorcism_2"
	}
	//=================================================================================================================
	// HERO: Disraptor
	//=================================================================================================================
	"npc_dota_hero_disruptor_ebf"
	{
		"override_hero"					"npc_dota_hero_disruptor"
		"Ability1"						"disruptor_thunder_strike_bh"
		"Ability2"						"disruptor_kinetic_charge"
		"Ability3"						"disruptor_tesla_field"					// Ability 3
		"Ability6"						"disruptor_static_storm_bh"
		
		"Ability10"						"special_bonus_unique_disruptor_thunder_strike_1"
		"Ability11"						"special_bonus_unique_disruptor_thunder_strike_2"
		"Ability12"						"special_bonus_unique_disruptor_kinetic_charge_1"
		"Ability13"						"special_bonus_unique_disruptor_kinetic_charge_2"
		"Ability14"						"special_bonus_unique_disruptor_tesla_field_1"
		"Ability15"						"special_bonus_unique_disruptor_tesla_field_2"
		"Ability16"						"special_bonus_unique_disruptor_static_storm_1"
		"Ability17"						"special_bonus_unique_disruptor_static_storm_2"
		
	}
	// =================================================================================================================
	// HERO: Doom
	//=================================================================================================================
	"npc_dota_hero_doom_bringer_ebf"
	{
		"override_hero"					"npc_dota_hero_doom_bringer"
		"AbilityLayout"					"4"
		"Ability1"						"doom_demons_bargain"					// Ability 2
		"Ability2"						"doom_scorched_earth_ebf"
		"Ability3"						"doom_infernal_blade_ebf"
		"Ability5"						"generic_hidden"
		"Ability4"						"generic_hidden"
		"Ability6"						"doom_apocalypse"
		
		"Ability10"						"special_bonus_unique_doom_scorched_earth_ebf_1"
		"Ability11"						"special_bonus_unique_doom_scorched_earth_ebf_2"
		"Ability12"						"special_bonus_unique_doom_demons_bargain_1"
		"Ability13"						"special_bonus_unique_doom_demons_bargain_2"
		"Ability14"						"special_bonus_unique_doom_infernal_blade_ebf_1"
		"Ability15"						"special_bonus_unique_doom_infernal_blade_ebf_2"
		"Ability16"						"special_bonus_unique_doom_apocalypse_1"
		"Ability17"						"special_bonus_unique_doom_apocalypse_2"
		
		"AttackDamageMin"				"34"
		"AttackDamageMax"				"43"
		"AttackRate"					"1.80000"
		"AttackAnimationPoint"			"0.500000"
		"AttackAcquisitionRange"		"600"
		"AttackRange"					"175"
		"AttributePrimary"				"DOTA_ATTRIBUTE_STRENGTH"
		"AttributeBaseStrength"			"32"
		"AttributeStrengthGain"			"3.500000"
		"AttributeBaseAgility"			"11"
		"AttributeAgilityGain"			"0.900000"
		"AttributeBaseIntelligence"		"15"
		"AttributeIntelligenceGain"		"2.100000"
	}
	"npc_dota_hero_earthshaker_ebf"
	{
		"override_hero"			"npc_dota_hero_earthshaker"
		"AbilityLayout"			"4"
		"Ability1"				"earthshaker_fissure_ebf"
		"Ability2"				"earthshaker_enchant_totem_ebf"
		"Ability3"				"earthshaker_crater_impact"
		"Ability4"				"earthshaker_aftershock_ebf"
		"Ability5"				"generic_hidden"
		"Ability6"				"earthshaker_echo_slam_ebf"
		
		"Ability10"				"special_bonus_unique_earthshaker_crater_impact_1"
		"Ability11"				"special_bonus_unique_earthshaker_crater_impact_2"
		"Ability12"				"special_bonus_unique_earthshaker_enchant_totem_ebf_1"
		"Ability13"				"special_bonus_unique_earthshaker_enchant_totem_ebf_2"
		"Ability14"				"special_bonus_unique_earthshaker_echo_slam_ebf_1"
		"Ability15"				"special_bonus_unique_earthshaker_echo_slam_ebf_2"
		"Ability16"				"special_bonus_unique_earthshaker_fissure_ebf_1"
		"Ability17"				"special_bonus_unique_earthshaker_fissure_ebf_2"
	}
	//=================================================================================================================
	// HERO: es
	//==t===============================================================================================================
	"npc_dota_hero_earth_spirit_ebf"
	{
		"override_hero"					"npc_dota_hero_earth_spirit"
		"Ability1"						"espirit_rock_punch"
		"Ability2"						"espirit_boulder"
		"Ability3"						"espirit_rock_pull"
		"Ability4"						"espirit_rock"
		"Ability5"						"espirit_stone_rip"
		"Ability6"						"espirit_magnetize"

		"Ability10"						"special_bonus_unique_espirit_rock_punch_2"
		"Ability11"  				    "special_bonus_unique_espirit_rock_3"
		"Ability12"   					"special_bonus_unique_espirit_boulder_1"
		"Ability13"						"special_bonus_unique_espirit_boulder_2"
		"Ability14"						"special_bonus_unique_espirit_rock_pull_1"
		"Ability15"						"special_bonus_unique_espirit_rock_punch_1"
		"Ability16"						"special_bonus_unique_espirit_rock_1"
		"Ability17"						"special_bonus_unique_espirit_magnetize_1"
	}
	//=================================================================================================================
	// HERO: DK
	//=================================================================================================================
	"npc_dota_hero_dragon_knight_ebf"
	{
		"override_hero"					"npc_dota_hero_dragon_knight"
		"Ability1"						"dragon_knight_dragonbreath"
		"Ability2"						"dragon_knight_intervene"
		"Ability3"						"dragon_knight_dragons_blood_ebf"
		"Ability6"						"dragon_knight_elder_dragon_berserker"					// Ability 4
			
		"Ability10"						"special_bonus_unique_dragon_knight_dragonbreath_1"
	    "Ability11"						"special_bonus_unique_dragon_knight_dragonbreath_2"
	    "Ability12"						"special_bonus_unique_dragon_knight_intervene_1"
	    "Ability13"						"special_bonus_unique_dragon_knight_intervene_2"
	    "Ability14"						"special_bonus_unique_dragon_knight_dragons_blood_ebf_1"
	    "Ability15"						"special_bonus_unique_dragon_knight_dragons_blood_ebf_2"
	    "Ability16"						"special_bonus_unique_dragon_knight_elder_dragon_berserker_1"
	    "Ability17"						"special_bonus_unique_dragon_knight_elder_dragon_berserker_2"
		
	}
	//=================================================================================================================
	// HERO: Darowu Rangeru
	//=================================================================================================================
	"npc_dota_hero_drow_ranger_ebf"
	{
		"override_hero"					"npc_dota_hero_drow_ranger"
		"AbilityLayout"					"5"
		"Ability1"						"drow_ranger_bullseye"
		"Ability2"						"drow_ranger_leapshot"
		"Ability3"						"drow_ranger_drows_teachings"
		"Ability5"						"drow_ranger_glacier_arrows"
		"Ability6"						"drow_ranger_marksmanship_bh"
		
		"Ability10"						"special_bonus_unique_drow_ranger_bullseye_1"
		"Ability11"						"special_bonus_unique_drow_ranger_bullseye_2"
		"Ability12"						"special_bonus_unique_drow_ranger_leapshot_1"
		"Ability13"						"special_bonus_unique_drow_ranger_leapshot_2"
		"Ability14"						"special_bonus_unique_drow_ranger_drows_teachings_1"
		"Ability15"						"special_bonus_unique_drow_ranger_drows_teachings_2"
		"Ability16"						"special_bonus_unique_drow_ranger_marksmanship_1"
		"Ability17"						"special_bonus_unique_drow_ranger_marksmanship_2"
		
	}
	//=================================================================================================================
	// HERO: et
	//================================================================================================================
	"npc_dota_hero_elder_titan_ebf"
	{
		"override_hero"					"npc_dota_hero_elder_titan"
		"Ability1"						"et_echo_stomp"
		"Ability2"						"et_elder_spirit"
		"Ability3"						"et_earthbreaker"
		"Ability4"						"et_natural_order"
		"Ability6"						"et_earth_splitter"

		"Ability10"						"special_bonus_unique_et_echo_stomp_1"
		"Ability11"						"special_bonus_unique_et_echo_stomp_2"
		"Ability12"						"special_bonus_unique_et_elder_spirit_1"
		"Ability13"						"special_bonus_unique_et_elder_spirit_2"
		"Ability14"						"special_bonus_unique_et_earthbreaker_1"
		"Ability15"						"special_bonus_unique_et_earthbreaker_2"
		"Ability16"						"special_bonus_unique_et_earth_splitter_1"
		"Ability17"						"special_bonus_unique_et_earth_splitter_2"
	}
	"npc_dota_hero_ember_spirit_ebf"
	{
		"override_hero"					"npc_dota_hero_ember_spirit"
		
		"Ability1"						"ember_chains"
		"Ability2"						"ember_fist"
		"Ability3"						"ember_shield"
		"Ability4"						"ember_remnant"
		"Ability6"						"ember_remnant_jump"
		
		"Ability10"						"special_bonus_unique_ember_chains_1"
		"Ability11"						"special_bonus_unique_ember_chains_2"
		"Ability12"						"special_bonus_unique_ember_fist_1"
		"Ability13"						"special_bonus_unique_ember_fist_2"
		"Ability14"						"special_bonus_unique_ember_shield_1"
		"Ability15"						"special_bonus_unique_ember_shield_2"
		"Ability16"						"special_bonus_unique_ember_remnant_jump_1"
		"Ability17"						"special_bonus_unique_ember_remnant_1"
	}
	"npc_dota_hero_enchantress_ebf"
	{
		"override_hero"					"npc_dota_hero_enchantress"
		"Ability1"						"enchantress_untouchable_bh"
		"Ability2"						"enchantress_enchant_bh"
		"Ability3"						"enchantress_attendants"
		"Ability4"						"enchantress_take_root"
		"Ability6"						"enchantress_impetus_bh"
		
		"Ability10"						"special_bonus_unique_enchantress_untouchable_bh_1"
		"Ability11"						"special_bonus_unique_enchantress_untouchable_bh_2"
		"Ability12"						"special_bonus_unique_enchantress_enchant_bh_1"
		"Ability13"						"special_bonus_unique_enchantress_enchant_bh_2"
		"Ability14"						"special_bonus_unique_enchantress_attendants_1"
		"Ability15"						"special_bonus_unique_enchantress_attendants_2"
		"Ability16"						"special_bonus_unique_enchantress_impetus_bh_1"
		"Ability17"						"special_bonus_unique_enchantress_impetus_bh_2"
		
	}
	"npc_dota_hero_enigma_ebf"
	{
		"override_hero"					"npc_dota_hero_enigma"
		
		"Ability1"						"enigma_malefice_bh"
		"Ability2"						"enigma_white_hole"
		"Ability3"						"enigma_midnight_pulse_bh"
		"Ability4"						"enigma_shattered_mass"
		"Ability6"						"enigma_black_hole_bh"
		
		"Ability10"						"special_bonus_unique_enigma_malefice_1"
		"Ability11"						"special_bonus_unique_enigma_malefice_2"
		"Ability12"						"special_bonus_unique_enigma_white_hole_1"
		"Ability13"						"special_bonus_unique_enigma_white_hole_2"
		"Ability14"						"special_bonus_unique_enigma_midnight_pulse_1"
		"Ability15"						"special_bonus_unique_enigma_midnight_pulse_2"
		"Ability16"						"special_bonus_unique_enigma_black_hole_1"
		"Ability17"						"special_bonus_unique_enigma_black_hole_2"
	}
	"npc_dota_hero_faceless_void_ebf"
	{
		"override_hero"					"npc_dota_hero_faceless_void"
		"Ability1"						"faceless_time_walk"
		"Ability2"						"faceless_clock_stopper"
		"Ability3"						"faceless_chrono_trigger"
		"Ability6"						"faceless_chrono"
		
		"Ability10"						"special_bonus_unique_faceless_time_walk_1"
		"Ability11"						"special_bonus_unique_faceless_time_walk_2"
		"Ability12"						"special_bonus_unique_faceless_clock_stopper_1"
		"Ability13"						"special_bonus_unique_faceless_clock_stopper_2"
		"Ability14"						"special_bonus_unique_faceless_chrono_trigger_1"
		"Ability15"						"special_bonus_unique_faceless_chrono_trigger_2"
		"Ability16"						"special_bonus_unique_faceless_chrono_1"
		"Ability17"						"special_bonus_unique_faceless_chrono_2"
	}
	"npc_dota_hero_furion_ebf"
	{
		"override_hero"					"npc_dota_hero_furion"
		"Ability1"						"furion_tree_jail"
		"Ability2"						"furion_sprout_tp"
		"Ability3"						"furion_tree_ant"
		"Ability4"						"furion_entangle"
		"Ability6"						"furion_natures_wrath"
	
		"Ability10"						"special_bonus_unique_furion_tree_jail_2"
		"Ability11"						"special_bonus_unique_furion_tree_jail_1"
		"Ability12"						"special_bonus_unique_furion_sprout_tp_1"
		"Ability13"						"special_bonus_unique_furion_sprout_tp_2"
		"Ability14"						"special_bonus_unique_furion_tree_ant_1"
		"Ability15"						"special_bonus_unique_furion_tree_ant_2"
		"Ability16"						"special_bonus_unique_furion_entangle_1"
		"Ability17"						"special_bonus_unique_furion_natures_wrath_2"
	}
	//=================================================================================================================
	// HERO: Grimstroke
	//=================================================================================================================
	"npc_dota_hero_grimstroke_ebf"
	{
		"override_hero"					"npc_dota_hero_grimstroke"
		"Ability1"						"grimstroke_stroke"
		"Ability2"						"grimstroke_phantom"
		"Ability3"						"grimstroke_ink"
		"Ability4"						"grimstroke_blood"
		"Ability6"						"grimstroke_soul"
	
		"Ability10"						"special_bonus_unique_grimstroke_stroke_1"
		"Ability11"						"special_bonus_unique_grimstroke_stroke_2"
		"Ability12"						"special_bonus_unique_grimstroke_phantom_1"
		"Ability13"						"special_bonus_unique_grimstroke_phantom_2"
		"Ability14"						"special_bonus_unique_grimstroke_ink_1"
		"Ability15"						"special_bonus_unique_grimstroke_ink_2"
		"Ability16"						"special_bonus_unique_grimstroke_soul_1"
		"Ability17"						"special_bonus_unique_grimstroke_soul_2"
	}
	//=================================================================================================================
	// HERO: Gyrochopter
	//=================================================================================================================
	"npc_dota_hero_gyrocopter"
	{
		"override_hero"					"npc_dota_hero_gyrocopter"
		"AbilityLayout"					"4"
		"Ability1"						"gyro_rocket_salvo"
		"Ability2"						"gyro_bombing_run"
		"Ability3"						"gyrocopter_flak_cannon_ebf"
		"Ability4"						"gyro_homing_missile"
		"Ability5"						"generic_hidden"
		"Ability6"        				"gyro_calldown"
	
		"Ability10"						"special_bonus_unique_gyro_rocket_salvo_1"
	    "Ability11"						"special_bonus_unique_gyro_rocket_salvo_2"
	    "Ability12"						"special_bonus_unique_gyro_bombing_run_2"
	    "Ability13"						"special_bonus_unique_gyro_bombing_run_1"
	    "Ability14"						"special_bonus_unique_gyrocopter_flak_cannon_ebf_1"
	    "Ability15"						"special_bonus_unique_gyro_homing_missile_1"
	    "Ability16"						"special_bonus_unique_gyrocopter_calldown_1"
	    "Ability17"						"special_bonus_unique_gyrocopter_calldown_2"
		
		"AttributePrimary"				"DOTA_ATTRIBUTE_AGILITY"
		"AttributeBaseStrength"			"18"
		"AttributeStrengthGain"			"1.8"
		"AttributeBaseAgility"			"24"
		"AttributeAgilityGain"			"2.8"
		"AttributeBaseIntelligence"		"19"
		"AttributeIntelligenceGain"		"2.1"

	}
	//=================================================================================================================
	// HERO: Huskar
	//=================================================================================================================
	"npc_dota_hero_huskar"
	{
		"override_hero"					"npc_dota_hero_huskar"
		"Ability1"						"huskar_fire_within"
		"Ability2"						"huskar_ignited_spears"
		"Ability3"						"huskar_raging_berserker"
		"Ability4"						"huskar_sacred_inferno"
		"Ability6"						"huskar_sunder_life"
		
		"Ability10"						"special_bonus_unique_huskar_fire_within_1"
	    "Ability11"						"special_bonus_unique_huskar_fire_within_2"
	    "Ability12"						"special_bonus_unique_huskar_ignited_spears_1"
	    "Ability13"						"special_bonus_unique_huskar_ignited_spears_2"
	    "Ability14"						"special_bonus_unique_huskar_raging_berserker_1"
	    "Ability15"						"special_bonus_unique_huskar_raging_berserker_2"
	    "Ability16"						"special_bonus_unique_huskar_sunder_life_1"
	    "Ability17"						"special_bonus_unique_huskar_sunder_life_2"
	}
	//=================================================================================================================
	// HERO: Invoker
	//=================================================================================================================
	"npc_dota_hero_invoker_ebf"
	{
		"override_hero"			"npc_dota_hero_invoker"
		// "Ability1"		"invoker_q"
		// "Ability2"		"invoker_w"
		// "Ability3"		"invoker_e"
		// "Ability4"		"invoker_empty1"
		// "Ability5"		"invoker_empty2"
		// "Ability6"		"invoker_invoke_bh"
		// "Ability7"		"invoker_cold_snap_bh"
		// "Ability8"		"invoker_ghost_walk_bh"
		// "Ability9"		"invoker_tornado_bh"
		// "Ability10"		"invoker_emp_bh"
		// "Ability11"		"invoker_alacrity"
		// "Ability12"		"invoker_chaos_meteor"
		// "Ability13"		"invoker_sun_strike"
		// "Ability14"		"invoker_forge_spirit"
		// "Ability15"		"invoker_ice_wall"
		// "Ability16"		"invoker_deafening_blast"		
		
		// "Ability17"		"special_bonus_unique_invoker_cold_snap_bh_1"
		// "Ability18"		"special_bonus_unique_invoker_ghost_walk_bh_1"
		// "Ability19"		"special_bonus_unique_jakiro_dual_breath_bh_1"
		// "Ability20"		"special_bonus_unique_jakiro_dual_breath_bh_1"
		// "Ability21"		"special_bonus_unique_jakiro_dual_breath_bh_1"
		// "Ability22"		"special_bonus_unique_jakiro_dual_breath_bh_1"
		// "Ability23"		"special_bonus_unique_jakiro_dual_breath_bh_1"
		// "Ability24"		"special_bonus_unique_jakiro_dual_breath_bh_1"
	}

	//=================================================================================================================
	// HERO: Jakiro
	//=================================================================================================================
	"npc_dota_hero_jakiro"
	{
		"override_hero"			"npc_dota_hero_jakiro"
		
		"Ability1"		"jakiro_dual_breath_bh"
		"Ability2"		"jakiro_ice_path_bh"
		"Ability3"		"jakiro_liquid_fire_bh"
		"Ability6"		"jakiro_macropyre_bh"

		"Ability10"		"special_bonus_unique_jakiro_dual_breath_bh_1"
		"Ability11"		"special_bonus_unique_jakiro_dual_breath_bh_2"
		"Ability12"		"special_bonus_unique_jakiro_ice_path_bh_1"
		"Ability13"		"special_bonus_unique_jakiro_ice_path_bh_2"
		"Ability14"		"special_bonus_unique_jakiro_liquid_fire_bh_1"
		"Ability15"		"special_bonus_unique_jakiro_liquid_fire_bh_2"
		"Ability16"		"special_bonus_unique_jakiro_macropyre_bh_1"
		"Ability17"		"special_bonus_unique_jakiro_macropyre_bh_2"
	}

	"npc_dota_hero_juggernaut_ebf"
	{
		"override_hero"			"npc_dota_hero_juggernaut"
		"Ability1"				"juggernaut_ronins_wind"
		"Ability2"				"juggernaut_mirror_blades"
		"Ability3"				"juggernaut_quickparry"
		"Ability4"				"juggernaut_momentum_strike"
		"Ability6"				"juggernaut_dance_of_blades"
		
		"Ability10"				"special_bonus_unique_juggernaut_ronins_wind_1"
		"Ability11"				"special_bonus_unique_juggernaut_ronins_wind_2"
		"Ability12"				"special_bonus_unique_juggernaut_mirror_blades_1"
		"Ability13"				"special_bonus_unique_juggernaut_mirror_blades_2"
		"Ability14"				"special_bonus_unique_juggernaut_quickparry_1"
		"Ability15"				"special_bonus_unique_juggernaut_quickparry_2"
		"Ability16"				"special_bonus_unique_juggernaut_dance_of_blades_1"
		"Ability17"				"special_bonus_unique_juggernaut_momentum_strike_1"
	}
	"npc_dota_hero_keeper_of_the_light_ebf"
	{
		"override_hero"				"npc_dota_hero_keeper_of_the_light"
		 "Ability1"					"kotl_illuminate"
		 "Ability2"					"kotl_blind"
		 "Ability3"					"kotl_chakra_magic"
		 "Ability4"					"kotl_spirit"
		 "Ability6"					"kotl_wisp"

		 "Ability10"				"special_bonus_unique_kotl_illuminate_1"
		 "Ability11"				"special_bonus_unique_kotl_illuminate_2"
		 "Ability12"				"special_bonus_unique_kotl_blind_1"
		 "Ability13"				"special_bonus_unique_kotl_blind_2"
		 "Ability14"				"special_bonus_unique_kotl_chakra_magic_1"
		 "Ability15"				"special_bonus_unique_kotl_chakra_magic_2"
		 "Ability16"				"special_bonus_unique_kotl_wisp_1"
		 "Ability17"				"special_bonus_unique_kotl_wisp_2"
		
	}
	//=================================================================================================================
	// HERO: Kunkka
	//=================================================================================================================
	"npc_dota_hero_kunkka_ebf"
	{
		"override_hero"					"npc_dota_hero_kunkka"
		"AbilityLayout"					"5"
		"Ability1"						"kunkka_torrent_bh"
		"Ability2"						"kunkka_tidebringer_bh"
		"Ability3"						"kunkka_captains_rum"
		"Ability4"						"kunkka_xmarks_bh"
		"Ability6"						"kunkka_ghost_ship_bh"

		"Ability10"				   		"special_bonus_unique_kunkka_torrent_bh_1"
		"Ability11"				   		"special_bonus_unique_kunkka_torrent_bh_2"
		"Ability12"				   		"special_bonus_unique_kunkka_tidebringer_bh_1"
		"Ability13"				   		"special_bonus_unique_kunkka_tidebringer_bh_2"
		"Ability14"				   		"special_bonus_unique_kunkka_captains_rum_1"
		"Ability15"				   		"special_bonus_unique_kunkka_captains_rum_2"
		"Ability16"				   		"special_bonus_unique_kunkka_ghost_ship_bh_1"
		"Ability17"				   		"special_bonus_unique_kunkka_ghost_ship_bh_2"		
	}
	//=================================================================================================================
	// HERO: Legion comander
	//=================================================================================================================
	"npc_dota_hero_legion_commander"
	{
		"override_hero"			   		"npc_dota_hero_legion_commander"
		"Ability1"				   		"legion_commander_victorious_advance"
		"Ability2"				   		"legion_commander_unbreakable_morale"
		"Ability3"			   			"legion_commander_fearless_assault"
		"Ability4"			   			"generic_hidden"
		"Ability5"				   		"generic_hidden"
		"Ability6"				   		"legion_commander_war_fury"
		   	
		"Ability10"				   		"special_bonus_unique_legion_commander_victorious_advance_1"
		"Ability11"				   		"special_bonus_unique_legion_commander_victorious_advance_2"
		"Ability12"				   		"special_bonus_unique_legion_commander_unbreakable_morale_1"
		"Ability13"				   		"special_bonus_unique_legion_commander_unbreakable_morale_2"
		"Ability14"				   		"special_bonus_unique_legion_commander_fearless_assault_1"
		"Ability15"				   		"special_bonus_unique_legion_commander_fearless_assault_2"
		"Ability16"				   		"special_bonus_unique_legion_commander_war_fury_1"
		"Ability17"				   		"special_bonus_unique_legion_commander_war_fury_2"
	}
	//=================================================================================================================
	// HERO: Storm
	//=================================================================================================================
	"npc_dota_hero_leshrac_ebf"
	{
		"override_hero"					"npc_dota_hero_leshrac"
		"AbilityLayout"					"5"
		"Ability1"						"leshrac_split_earth_bh"
		"Ability2"						"leshrac_diabolic_edict_bh"
		"Ability3"						"leshrac_lightning_storm_bh"
		"Ability4"						"generic_hidden"
		"Ability6"						"leshrac_pulse_nova_bh"
		
		"Ability10"						"special_bonus_unique_leshrac_split_earth_1"
		"Ability11"						"special_bonus_unique_leshrac_split_earth_2"
		"Ability12"						"special_bonus_unique_leshrac_diabolic_edict_1"
		"Ability13"						"special_bonus_unique_leshrac_diabolic_edict_2"
		"Ability14"						"special_bonus_unique_leshrac_lightning_storm_1"
		"Ability15"						"special_bonus_unique_leshrac_lightning_storm_2"
		"Ability16"						"special_bonus_unique_leshrac_pulse_nova_1"
		"Ability17"						"special_bonus_unique_leshrac_pulse_nova_2"
	}
	//=================================================================================================================
	// HERO: Gyrochopter
	//=================================================================================================================
	"npc_dota_hero_lich"
	{
		"override_hero"					"npc_dota_hero_lich"
		"Ability1"						"lich_frost_nova_bh"
		"Ability2"						"lich_frost_armor_bh"
		"Ability3"						"lich_chain_frost_bh"
		"Ability4"						"lich_cold_front"
		"Ability6"						"lich_dark_sacrifice"
		
		"Ability10"						"special_bonus_unique_lich_frost_nova_1"
		"Ability11"						"special_bonus_unique_lich_frost_nova_2"
		"Ability12"						"special_bonus_unique_lich_frost_armor_1"
		"Ability13"						"special_bonus_unique_lich_frost_armor_2"
		"Ability14"						"special_bonus_unique_lich_chain_frost_3"
		"Ability15"						"special_bonus_unique_lich_chain_frost_2"
		"Ability16"						"special_bonus_unique_lich_dark_sacrifice_1"
		"Ability17"						"special_bonus_unique_lich_dark_sacrifice_2"
	}
	"npc_dota_hero_life_stealer_ebf"
	{
		"override_hero"					"npc_dota_hero_life_stealer"
		"Ability1"						"lifestealer_rage_bh"
		"Ability2"						"lifestealer_hunger"
		"Ability3"						"lifestealer_flesh_wounds"
		"Ability4"						"lifestealer_infest_bh"
		"Ability5"						"lifestealer_assimilate_bh"
		"Ability6"						"lifestealer_rend"

		"Ability10"						"special_bonus_unique_lifestealer_rage_bh_1"
		"Ability11"						"special_bonus_unique_lifestealer_rage_bh_2"
		"Ability12"						"special_bonus_unique_lifestealer_hunger_1"
		"Ability13"						"special_bonus_unique_lifestealer_hunger_2"
		"Ability14"						"special_bonus_unique_lifestealer_flesh_wounds_1"
		"Ability15"						"special_bonus_unique_lifestealer_flesh_wounds_2"
		"Ability16"						"special_bonus_unique_lifestealer_rend_1"
		"Ability17"						"special_bonus_unique_lifestealer_rend_2"
		
	}
	"npc_dota_hero_lina_ebf" // Ifrit
	{
		"override_hero"					"npc_dota_hero_lina"
		"Ability1"						"lina_dragon"
		"Ability2"						"lina_lsa"
		"Ability3"						"lina_fireball"
		"Ability4"						"lina_fire_soul"
		"Ability6"						"lina_laguna"

		"Ability10"						"special_bonus_unique_lina_dragon_1"
		"Ability11"						"special_bonus_unique_lina_dragon_2"
		"Ability12"						"special_bonus_unique_lina_lsa_1"
		"Ability13"						"special_bonus_unique_lina_lsa_2"
		"Ability14"						"special_bonus_unique_lina_fireball_1"
		"Ability15"						"special_bonus_unique_lina_fireball_2"
		"Ability16"						"special_bonus_unique_lina_laguna_1"
		"Ability17"						"special_bonus_unique_lina_laguna_2"
	}
	"npc_dota_hero_lion_ebf"
	{
		"override_hero"					"npc_dota_hero_lion"
		"Ability1"						"lion_earth_spike"
		"Ability2"						"lion_frogger"
		"Ability3"						"lion_meteor"
		"Ability4"						"lion_mana_aura"
		// "Ability5"						"lion_refined_fireblast"
		"Ability6"						"lion_death_finger"
		
		"Ability10"						"special_bonus_unique_lion_earth_spike_1"
		"Ability11"						"special_bonus_unique_lion_earth_spike_2"
		"Ability12"						"special_bonus_unique_lion_frogger_1"
		"Ability13"						"special_bonus_unique_lion_frogger_2"
		"Ability14"						"special_bonus_unique_lion_meteor_1"
		"Ability15"						"special_bonus_unique_lion_meteor_2"
		"Ability16"						"special_bonus_unique_lion_death_finger_1"
		"Ability17"						"special_bonus_unique_lion_death_finger_2"
	}
	"npc_dota_hero_luna_ebf"
	{
		"override_hero"					"npc_dota_hero_luna"
		"Ability1"						"luna_lucent_beam_bh"
		"Ability2"						"luna_nightsilver_resolve"
		"Ability3"						"luna_lunar_blessing_bh"
		"Ability4"						"luna_moon_glaive_bh"
		"Ability6"						"luna_eclipse_bh"
		"VisionDaytimeRange"			"1800"
		"VisionNighttimeRange"			"1800"
		
		"Ability10"						"special_bonus_unique_luna_lucent_beam_1"
		"Ability11"						"special_bonus_unique_luna_lucent_beam_2"
		"Ability12"						"special_bonus_unique_luna_nightsilver_resolve_1"
		"Ability13"						"special_bonus_unique_luna_nightsilver_resolve_2"
		"Ability14"						"special_bonus_unique_luna_lunar_blessing_1"
		"Ability15"						"special_bonus_unique_luna_lunar_blessing_2"
		"Ability16"						"special_bonus_unique_luna_eclipse_1"
		"Ability17"						"special_bonus_unique_luna_eclipse_2"
		
		"ArmorPhysical"					"0"
		"AttackCapabilities"			"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"				"28"
		"AttackDamageMax"				"32"
		"AttackRate"					"1.700000"
		"AttackAnimationPoint"			"0.460000"
		"AttackAcquisitionRange"		"800"
		"AttackRange"					"330"
		"ProjectileModel"				"particles/units/heroes/hero_luna/luna_base_attack.vpcf"
		"ProjectileSpeed"				"900"
		"AttributePrimary"				"DOTA_ATTRIBUTE_AGILITY"
		"AttributeBaseStrength"			"24"
		"AttributeStrengthGain"			"2.5"
		"AttributeBaseAgility"			"18"
		"AttributeAgilityGain"			"3.300000"
		"AttributeBaseIntelligence"		"16"
		"AttributeIntelligenceGain"		"1.850000"
		"MovementSpeed"					"330"
		"MovementTurnRate"				"0.600000"
	}
	//=================================================================================================================
	// HERO: skywrath
	//=================================================================================================================
	"npc_dota_hero_lycan_ebf"
	{
		"override_hero"					"npc_dota_hero_lycan"
		"Ability1"						"lycan_summon_wolves_bh"					// Ability 4
		"Ability2"						"lycan_howl_bh"
		"Ability3"						"lycan_feral_impulse_bh"
		"Ability4"						"lycan_apex_predator"
		"Ability6"						"lycan_shapeshift_bh"
		
		"Ability10"						"special_bonus_unique_lycan_summon_wolves_1"
		"Ability11"						"special_bonus_unique_lycan_summon_wolves_2"
		"Ability12"						"special_bonus_unique_lycan_howl_1"
		"Ability13"						"special_bonus_unique_lycan_howl_2"
		"Ability14"						"special_bonus_unique_lycan_feral_impulse_1"
		"Ability15"						"special_bonus_unique_lycan_feral_impulse_2"
		"Ability16"						"special_bonus_unique_lycan_shapeshift_1"
		"Ability17"						"special_bonus_unique_lycan_shapeshift_2"
	}
	//=================================================================================================================
	// HERO: Magnus
	//=================================================================================================================
	"npc_dota_hero_magnataur_ebf"
	{
		"override_hero"					"npc_dota_hero_magnataur"
		"Ability1"						"mag_shockwave"
		"Ability2"						"mag_magnet"					
		"Ability3"						"mag_charge"
		"Ability4"						"mag_empower"	
		"Ability5"						"mag_polarity_2"					
		"Ability6"						"mag_polarity"
		
		"Ability10"						"special_bonus_unique_mag_shockwave_1"
		"Ability11"						"special_bonus_unique_mag_shockwave_2"
		"Ability12"						"special_bonus_unique_mag_magnet_1"
		"Ability13"						"special_bonus_unique_mag_magnet_2"
		"Ability14"						"special_bonus_unique_mag_charge_1"
		"Ability15"						"special_bonus_unique_mag_charge_2"
		"Ability16"						"special_bonus_unique_mag_polarity_1"
		"Ability17"						"special_bonus_unique_mag_polarity_2"
		
		"AttributeBaseStrength"			"32"
		"AttributeStrengthGain"			"4"
		"AttributeBaseIntelligence"		"19"
		"AttributeIntelligenceGain"		"1.650000"
		"AttributeBaseAgility"			"15"
		"AttributeAgilityGain"			"2.500000"
	}
	//=================================================================================================================
	// HERO: Medusa
	//=================================================================================================================
	"npc_dota_hero_medusa_ebf"
	{
		"override_hero"					"npc_dota_hero_medusa"
		"Ability1"						"medusa_split"
		"Ability2"						"medusa_snake"					
		"Ability3"						"medusa_viper"
		"Ability4"						"medusa_shield"						
		"Ability6"						"medusa_gaze"
		
		"Ability10"						"special_bonus_unique_medusa_split_1"
		"Ability11"						"special_bonus_unique_medusa_split_2"
		"Ability12"						"special_bonus_unique_medusa_snake_1"
		"Ability13"						"special_bonus_unique_medusa_snake_2"
		"Ability14"						"special_bonus_unique_medusa_viper_1"
		"Ability15"						"special_bonus_unique_medusa_viper_2"
		"Ability16"						"special_bonus_unique_medusa_gaze_1"
		"Ability17"						"special_bonus_unique_medusa_gaze_2"
	}
	//=================================================================================================================
	// HERO: Meepo
	//=================================================================================================================
	"npc_dota_hero_meepo_ebf"
	{
		"override_hero"					"npc_dota_hero_meepo"
		"Ability1"						"meepo_earthbind_bh"
		"Ability2"						"meepo_poof_bh"					
		"Ability3"						"meepo_ransack_bh"
		"Ability4"						"meepo_divided"						
		"Ability6"						"meepo_dig"
		
		"Ability10"						"special_bonus_unique_meepo_earthbind_bh_1"
		"Ability11"						"special_bonus_unique_meepo_earthbind_bh_2"
		"Ability12"						"special_bonus_unique_meepo_poof_bh_1"
		"Ability13"						"special_bonus_unique_meepo_poof_bh_2"
		"Ability14"						"special_bonus_unique_meepo_ransack_bh_1"
		"Ability15"						"special_bonus_unique_meepo_ransack_bh_2"
		"Ability16"						"special_bonus_unique_meepo_dig_1"
		"Ability17"						"special_bonus_unique_meepo_dig_2"
	}
	//=================================================================================================================
	// HERO: Mirana
	//=================================================================================================================
	"npc_dota_hero_mirana_ebf"
	{
		"override_hero"					"npc_dota_hero_mirana"
		"Ability1"						"mirana_starcall"
		"Ability2"						"mirana_astral_arrow"					
		"Ability3"						"mirana_celestial_jump"
		"Ability4"						"mirana_mooneye"					
		"Ability6"						"mirana_stardust_reflection"
		
		"Ability10"						"special_bonus_unique_mirana_starcall_1"
		"Ability11"						"special_bonus_unique_mirana_starcall_2"
		"Ability12"						"special_bonus_unique_mirana_astral_arrow_1"
		"Ability13"						"special_bonus_unique_mirana_astral_arrow_2"
		"Ability14"						"special_bonus_unique_mirana_celestial_jump_1"
		"Ability15"						"special_bonus_unique_mirana_celestial_jump_2"
		"Ability16"						"special_bonus_unique_mirana_stardust_reflection_1"
		"Ability17"						"special_bonus_unique_mirana_stardust_reflection_2"
	}
	"npc_dota_hero_monkey_king"
	{
		"override_hero"					"npc_dota_hero_monkey_king"
		"Ability1"						"mk_boundless"
		"Ability2"						"mk_spring"
		"Ability3"						"mk_mastery"
		"Ability4"						"mk_mischief"
		"Ability5"						"mk_tree"
		"Ability6"						"mk_command"
			
		"Ability10"						"special_bonus_unique_mk_boundless_1"
		"Ability11"						"special_bonus_unique_mk_boundless_2"
		"Ability12"						"special_bonus_unique_mk_spring_1"
		"Ability13"						"special_bonus_unique_mk_spring_2"
		"Ability14"						"special_bonus_unique_mk_mastery_1"
		"Ability15"						"special_bonus_unique_mk_mastery_2"
		"Ability16"						"special_bonus_unique_mk_command_1"
		"Ability17"						"special_bonus_unique_mk_command_2"
	}
	"npc_dota_hero_morphling_ebf"
	{
		"override_hero"					"npc_dota_hero_morphling"
		"Ability1"						"morph_wave"
		"Ability2"						"morph_agi_strike"
		"Ability3"						"morph_str_strike"
		"Ability4"						"morph_agi_morph"
		"Ability5"						"morph_str_morph"
		"Ability6"						"morph_morph"
		"Ability7"						""
		"Ability8"						""
		"Ability10"						"special_bonus_unique_morph_wave_1"
		"Ability11"						"special_bonus_unique_morph_wave_2"
		"Ability12"						"special_bonus_unique_morph_agi_strike_1"
		"Ability13"						"special_bonus_unique_morph_agi_strike_2"
		"Ability14"						"special_bonus_unique_morph_str_strike_1"
		"Ability15"						"special_bonus_unique_morph_str_strike_2"
		"Ability16"						"special_bonus_unique_morph_morph_1"
		"Ability17"						"special_bonus_unique_morph_morph_2"
		"Ability18"						""
		"Ability19"						""
		"Ability20"						""
		"Ability21"						""
		"Ability22"						""
	}
	"npc_dota_hero_naga_siren_ebf"
	{
		"override_hero"					"npc_dota_hero_naga_siren"
		"AbilityLayout"					"5"
		"Ability1"						"naga_siren_liquid_form"	
		"Ability2"						"naga_siren_water_snare"	
		"Ability3"						"naga_siren_tidal_waves"
		"Ability4"						"naga_siren_ebb_and_flow"
		"Ability5"						"generic_hidden"
		"Ability6"						"naga_siren_song_of_the_siren_bh"
		"Ability7"						""
		
		"Ability10"						"special_bonus_unique_naga_siren_liquid_form_1"
		"Ability11"						"special_bonus_unique_naga_siren_liquid_form_2"
		"Ability12"						"special_bonus_unique_naga_siren_water_snare_1"
		"Ability13"						"special_bonus_unique_naga_siren_water_snare_2"
		"Ability14"						"special_bonus_unique_naga_siren_tidal_waves_1"
		"Ability15"						"special_bonus_unique_naga_siren_tidal_waves_2"
		"Ability16"						"special_bonus_unique_naga_siren_song_of_the_siren_1"
		"Ability17"						"special_bonus_unique_naga_siren_song_of_the_siren_2"
	}
	"npc_dota_hero_necrolyte"
	{
		"override_hero"					"npc_dota_hero_necrolyte"
		"Ability1"						"necrophos_death_pulse_bh"	
		"Ability2"						"necrophos_ghost_shroud_bh"	
		"Ability3"						"necrophos_heartstopper_aura_bh"
		"Ability4"						"necrophos_sadist_bh"
		"Ability5"						"generic_hidden"
		"Ability6"						"necrophos_reapers_scythe_bh"
		"Ability7"						""
		
		"Ability10"						"special_bonus_unique_necrophos_death_pulse_1"
		"Ability11"						"special_bonus_unique_necrophos_death_pulse_2"
		"Ability12"						"special_bonus_unique_necrophos_ghost_shroud_1"
		"Ability13"						"special_bonus_unique_necrophos_ghost_shroud_2"
		"Ability14"						"special_bonus_unique_necrophos_heartstopper_aura_1"
		"Ability15"						"special_bonus_unique_necrophos_heartstopper_aura_2"
		"Ability16"						"special_bonus_unique_necrophos_reapers_scythe_1"
		"Ability17"						"special_bonus_unique_necrophos_reapers_scythe_2"
	}
	//=================================================================================================================
	// HERO: Shadow Fiend
	//=================================================================================================================
	"npc_dota_hero_nevermore_ebf"
	{
		"override_hero"					"npc_dota_hero_nevermore"
		"Ability1"						"shadow_fiend_shadowraze1"
		"Ability2"						"shadow_fiend_shadowraze2"
		"Ability3"						"shadow_fiend_shadowraze3"
		"Ability4"						"shadow_fiend_dark_lord"
		"Ability5"						"shadow_fiend_necro"
		"Ability6"						"shadow_fiend_requiem"
		
		"Ability10"						"special_bonus_unique_shadow_fiend_shadowraze_1"
		"Ability11"						"special_bonus_unique_shadow_fiend_shadowraze_2"
		"Ability12"						"special_bonus_unique_shadow_fiend_dark_lord_1"
		"Ability13"						"special_bonus_unique_shadow_fiend_dark_lord_2"
		"Ability14"						"special_bonus_unique_shadow_fiend_necro_1"
		"Ability15"						"special_bonus_unique_shadow_fiend_necro_2"
		"Ability16"						"special_bonus_unique_shadow_fiend_requiem_1"
		"Ability17"						"special_bonus_unique_shadow_fiend_requiem_2"
		
	}
	//=================================================================================================================
	// HERO: Night Stalker
	//=================================================================================================================
	"npc_dota_hero_night_stalker_ebf"
	{
		"override_hero"					"npc_dota_hero_night_stalker"
		"Ability1"						"night_stalker_void_bh"
		"Ability2"						"night_stalker_crippling_fear_bh"
		"Ability3"						"night_stalker_hunter_in_the_night_bh"
		"Ability4"						"night_stalker_stalkers_eyes"
		"Ability6"						"night_stalker_dark_ascension_bh"
		
		"Ability10"						"special_bonus_unique_night_stalker_void_1"
		"Ability11"						"special_bonus_unique_night_stalker_void_2"
		"Ability12"						"special_bonus_unique_night_stalker_crippling_fear_1"
		"Ability13"						"special_bonus_unique_night_stalker_crippling_fear_2"
		"Ability14"						"special_bonus_unique_night_stalker_hunter_in_the_night_1"
		"Ability15"						"special_bonus_unique_night_stalker_hunter_in_the_night_2"
		"Ability16"						"special_bonus_unique_night_stalker_dark_ascension_1"
		"Ability17"						"special_bonus_unique_night_stalker_dark_ascension_2"
	}
	"npc_dota_hero_nyx_assassin_ebf"
	{
		"override_hero"					"npc_dota_hero_nyx_assassin"
		"Ability1"						"nyx_impale"
		"Ability2"						"nyx_int_burn"
		"Ability3"						"nyx_harden_carapace"
		"Ability4"						"nyx_burrow"
		"Ability6"						"nyx_vendetta"
	
		"Ability10"						"special_bonus_unique_nyx_impale_1"
		"Ability11"						"special_bonus_unique_nyx_impale_2"
		"Ability12"						"special_bonus_unique_nyx_int_burn_1"
		"Ability13"						"special_bonus_unique_nyx_int_burn_2"
		"Ability14"						"special_bonus_unique_nyx_harden_carapace_1"
		"Ability15"						"special_bonus_unique_nyx_harden_carapace_2"
		"Ability16"						"special_bonus_unique_nyx_vendetta_1"
		"Ability17"						"special_bonus_unique_nyx_vendetta_2"

		"AttributePrimary"				"DOTA_ATTRIBUTE_INTELLECT"
		"AttributeBaseStrength"			"18"
		"AttributeStrengthGain"			"1.8"
		"AttributeBaseAgility"			"19"
		"AttributeAgilityGain"			"2.1"
		"AttributeBaseIntelligence"		"24"
		"AttributeIntelligenceGain"		"2.8"
	}
	//=================================================================================================================
	// HERO: outworld
	//=================================================================================================================
	"npc_dota_hero_obsidian_destroyer_ebf"
	{
		"override_hero"					"npc_dota_hero_obsidian_destroyer"
		"Ability1"						"obsidian_destroyer_arcane_missile"
		"Ability2"						"obsidian_destroyer_astral_isolation"
		"Ability3"						"obsidian_destroyer_avatar_of_power"
		"Ability6"						"obsidian_destroyer_celestial_obliteration"					// Ability 2
		
		"Ability10"						"special_bonus_unique_obsidian_destroyer_arcane_missile_1"
		"Ability11"						"special_bonus_unique_obsidian_destroyer_arcane_missile_2"
		"Ability12"						"special_bonus_unique_obsidian_destroyer_astral_isolation_1"
		"Ability13"						"special_bonus_unique_obsidian_destroyer_astral_isolation_2"
		"Ability14"						"special_bonus_unique_obsidian_destroyer_avatar_of_power_1"
		"Ability15"						"special_bonus_unique_obsidian_destroyer_avatar_of_power_2"
		"Ability16"						"special_bonus_unique_obsidian_destroyer_celestial_obliteration_1"
		"Ability17"						"special_bonus_unique_obsidian_destroyer_celestial_obliteration_2"
		
		"AttackRate"					"2.1"
		
	}
	"npc_dota_hero_mars"
	{
		"override_hero"					"npc_dota_hero_mars"
		"Ability1"						"mars_spear_lua"
		"Ability2"						"mars_gods_rebuke_lua"
		"Ability3"						"mars_bulwark_lua"
		"Ability4"						"mars_innate"
		//"Ability5"						"ogre_magi_unrefined_fireblast_bh"
		//"Ability6"						"mars_arena_of_blood_lua"
		"Ability6"						"mars_ultimate"
		
		"Ability10"						"special_bonus_unique_mars_spear_lua_1"
		"Ability11"						"special_bonus_unique_mars_spear_lua_2"
		"Ability12"						"special_bonus_unique_mars_gods_rebuke_lua_1"
		"Ability13"						"special_bonus_unique_mars_gods_rebuke_lua_2"
		"Ability14"						"special_bonus_unique_mars_bulwark_lua_1"
		"Ability15"						"special_bonus_unique_mars_bulwark_lua_2"
		"Ability16"						"special_bonus_unique_mars_ultimate_1"
		"Ability17"						"special_bonus_unique_mars_ultimate_2"
	}
		"npc_dota_hero_ogre_magi"
	{
		"override_hero"					"npc_dota_hero_ogre_magi"
		"Ability1"						"ogre_magi_fireblast_bh"
		"Ability2"						"ogre_magi_ignite_bh"
		"Ability3"						"ogre_magi_bloodlust_bh"
		"Ability4"						"ogre_magi_multicast_bh"
		"Ability5"						"ogre_magi_unrefined_fireblast_bh"
		"Ability6"						"ogre_magi_immolate"					// Ability 2
		
		"Ability10"						"special_bonus_unique_ogre_magi_fireblast_bh_1"
		"Ability11"						"special_bonus_unique_ogre_magi_fireblast_bh_2"
		"Ability12"						"special_bonus_unique_ogre_magi_ignite_bh_1"
		"Ability13"						"special_bonus_unique_ogre_magi_ignite_bh_2"
		"Ability14"						"special_bonus_unique_ogre_magi_bloodlust_bh_1"
		"Ability15"						"special_bonus_unique_ogre_magi_bloodlust_bh_2"
		"Ability16"						"special_bonus_unique_ogre_magi_immolate_1"
		"Ability17"						"special_bonus_unique_ogre_magi_immolate_2"
		
		"AttributePrimary"				"DOTA_ATTRIBUTE_STRENGTH"
	}
	"npc_dota_hero_omniknight" // Justicar
	{
		"override_hero"					"npc_dota_hero_omniknight"
		"Ability1"						"omniknight_purification_bh"
		"Ability2"						"omniknight_heavenly_grace_bh"
		"Ability3"						"omniknight_seven_blessings"
		"Ability4"						"omniknight_stalwart_defender"
		"Ability6"						"omniknight_guardian_angel_bh"
	
		"Ability10"						"special_bonus_unique_omniknight_purification_1"
		"Ability11"						"special_bonus_unique_omniknight_purification_2"
		"Ability12"						"special_bonus_unique_omniknight_heavenly_grace_1"
		"Ability13"						"special_bonus_unique_omniknight_heavenly_grace_2"
		"Ability14"      	 			"special_bonus_unique_omniknight_seven_blessings_1"
	    "Ability15"      	 			"special_bonus_unique_omniknight_seven_blessings_2"
	    "Ability16"    		   			"special_bonus_unique_omniknight_guardian_angel_1"
	    "Ability17"  	     			"special_bonus_unique_omniknight_guardian_angel_2"
	}
	"npc_dota_hero_oracle_ebf"
	{
		"override_hero"			   		"npc_dota_hero_oracle"
		"Ability1"				   		"oracle_fortunes"
		"Ability2"				   		"oracle_fates"
		"Ability3"				   		"oracle_flames"
		"Ability4"			   			"oracle_innate"
		"Ability6"			   			"oracle_promise"
		
		"Ability10"				   		"special_bonus_unique_oracle_fortunes_1"
		"Ability11"			   			"special_bonus_unique_oracle_fortunes_2"
		"Ability12"				   		"special_bonus_unique_oracle_fates_1"
		"Ability13"			   			"special_bonus_unique_oracle_fates_2"
		"Ability14"      	   		 	"special_bonus_unique_oracle_flames_1"
	    "Ability15"      	   		 	"special_bonus_unique_oracle_flames_2"
	    "Ability16"    		   		   	"special_bonus_unique_oracle_promise_1"
	    "Ability17"  	  			   	"special_bonus_unique_oracle_promise_2"
	}

	//=================================================================================================================
	// HERO: Pangolier
	//=================================================================================================================
	"npc_dota_hero_pango_ebf"
	{
		"override_hero"					"npc_dota_hero_pangolier"
		"Ability1"						"pango_swashbuckler"
		"Ability2"						"pango_shield"
		"Ability3"						"pango_swift_dash"
		"Ability4"						"pango_heart"
		"Ability6"						"pango_ball"
		
		"Ability10"						"special_bonus_unique_pango_swashbuckler_1"
		"Ability11"						"special_bonus_unique_pango_swashbuckler_2"
		"Ability12"						"special_bonus_unique_pango_shield_1"
		"Ability13"						"special_bonus_unique_pango_shield_2"
		"Ability14"						"special_bonus_unique_pango_swift_dash_1"
		"Ability15"						"special_bonus_unique_pango_swift_dash_2"
		"Ability16"						"special_bonus_unique_pango_ball_1"
		"Ability17"						"special_bonus_unique_pango_ball_2"
	}

	//=================================================================================================================
	// HERO: PA
	//=================================================================================================================
	"npc_dota_hero_phantom_assassin"
	{
		"override_hero"					"npc_dota_hero_phantom_assassin"
	
		"Ability1"						"pa_kunai_toss"
		"Ability2"						"pa_flash_step"
		"Ability3"						"phantom_assassin_blur_ebf"
		"Ability6"						"phantom_assassin_coup_de_grace_ebf"
	
		"Ability10"						"special_bonus_unique_pa_kunai_toss_1"
		"Ability11"						"special_bonus_unique_pa_kunai_toss_2"
		"Ability12"						"special_bonus_unique_pa_flash_step_1"
		"Ability13"						"special_bonus_unique_pa_flash_step_2"
		"Ability14"      	 			"special_bonus_unique_pa_blur_1"
	    "Ability15"      	 			"special_bonus_unique_pa_blur_2"
	    "Ability16"    		 	  		"special_bonus_unique_phantom_assassin_coup_de_grace_2"
	    "Ability17"  	     			"special_bonus_unique_phantom_assassin_coup_de_grace_1"
		
		"AttackRate"					"2"
		"AttributeBaseStrength"			"21"
		"AttributeStrengthGain"			"2.150000"
		"AttributeBaseAgility"			"35"
		"AttributeAgilityGain"			"3.8"
		"AttributeBaseIntelligence"		"15"
		"AttributeIntelligenceGain"		"1.400000"
	}
	//=================================================================================================================
	// HERO: Phantom Lancer
	//=================================================================================================================
	"npc_dota_hero_phantom_lancer"
	{
		"override_hero"					"npc_dota_hero_phantom_lancer"
	
		"Ability1"						"pl_spirit_lance"
		"Ability2"						"pl_doppelganger"
		"Ability3"						"pl_false_edge"
		"Ability4"						"pl_phantom_rush"
		"Ability6"						"pl_juxtapose"
	
		"Ability10"						"special_bonus_unique_pl_spirit_lance_1"
		"Ability11"						"special_bonus_unique_pl_spirit_lance_2"
		"Ability12"						"special_bonus_unique_pl_doppelganger_1"
		"Ability13"						"special_bonus_unique_pl_doppelganger_2"
		"Ability14"      	 			"special_bonus_unique_pl_false_edge_1"
	    "Ability15"      	 			"special_bonus_unique_pl_false_edge_2"
	    "Ability16"    		 	  		"special_bonus_unique_pl_juxtapose_2"
	    "Ability17"  	     			"special_bonus_unique_pl_juxtapose_1"
	}
	"npc_dota_hero_phoenix" // Justicar
	{
		"override_hero"					"npc_dota_hero_phoenix"
		"Ability1"						"phenx_dive"
		"Ability2"						"phenx_spirits"
		"Ability3"						"phenx_ray"
		"Ability4"						"phenx_heart"
		"Ability6"						"phenx_egg"
	
		"Ability10"						"special_bonus_unique_phenx_dive_1"
		"Ability11"						"special_bonus_unique_phenx_dive_2"
		"Ability12"						"special_bonus_unique_phenx_spirits_1"
		"Ability13"						"special_bonus_unique_phenx_spirits_2"
		"Ability14"						"special_bonus_unique_phenx_ray_1"
		"Ability15"						"special_bonus_unique_phenx_ray_2"
		"Ability16"						"special_bonus_unique_phenx_egg_1"
		"Ability17"						"special_bonus_unique_phenx_egg_2"
	}
	"npc_dota_hero_puck_ebf"
	{
		"override_hero"					"npc_dota_hero_puck"
		"Ability1"						"puck_illusory_orb_ebf"
		"Ability2"						"puck_waning_rift_ebf"
		"Ability3"						"puck_phase_shift_ebf"
		"Ability4"						"puck_ethereal_jaunt_ebf"
		"Ability6"						"puck_reverie_snap"
		
		"Ability10"						"special_bonus_unique_puck_illusory_orb_1"
		"Ability11"						"special_bonus_unique_puck_illusory_orb_2"
		"Ability12"						"special_bonus_unique_puck_waning_rift_1"
		"Ability13"						"special_bonus_unique_puck_waning_rift_2"
		"Ability14"						"special_bonus_unique_puck_phase_shift_1"
		"Ability15"						"special_bonus_unique_puck_phase_shift_2"
		"Ability16"						"special_bonus_unique_puck_reverie_snap_1"
		"Ability17"						"special_bonus_unique_puck_reverie_snap_2"
	}
	//=================================================================================================================
	// HERO: Pudge
	//=================================================================================================================
	"npc_dota_hero_pudge_ebf"
	{
		"override_hero"					"npc_dota_hero_pudge"
		"Ability1"						"pudge_hook_lua"
		"Ability2"						"pudge_rot_lua"	
		"Ability3"						"pudge_chain_storm"
		"Ability4"						"pudge_flesh_heap_lua"
		"Ability6"						"pudge_dismember_lua"
	
		"Ability10"						"special_bonus_unique_pudge_hook_lua_1"
		"Ability11"						"special_bonus_unique_pudge_hook_lua_2"
		"Ability12"						"special_bonus_unique_pudge_rot_lua_1"
		"Ability13"						"special_bonus_unique_pudge_rot_lua_2"
		"Ability14"						"special_bonus_unique_pudge_chain_storm_1"
		"Ability15"						"special_bonus_unique_pudge_chain_storm_2"
		"Ability16"						"special_bonus_unique_pudge_dismember_lua_1"
		"Ability17"						"special_bonus_unique_pudge_dismember_lua_2"
	}
	"npc_dota_hero_pugna_ebf"
	{
		"override_hero"					"npc_dota_hero_pugna"
		"Ability1"						"pugna_nether_blast_bh"
		"Ability2"						"pugna_decrepify_bh"
		"Ability3"						"pugna_nether_turret"
		"Ability4"						"pugna_power_vacuum"
		"Ability6"						"pugna_lifedrain_bh"
		
		"Ability10"						"special_bonus_unique_pugna_nether_blast_1"
		"Ability11"						"special_bonus_unique_pugna_nether_blast_2"
		"Ability12"						"special_bonus_unique_pugna_decrepify_1"
		"Ability13"						"special_bonus_unique_pugna_decrepify_2"
		"Ability14"						"special_bonus_unique_pugna_nether_turret_1"
		"Ability15"						"special_bonus_unique_pugna_nether_turret_2"
		"Ability16"						"special_bonus_unique_pugna_lifedrain_1"
		"Ability17"						"special_bonus_unique_pugna_lifedrain_2"
	}
	//=================================================================================================================
	// HERO: Storm
	//=================================================================================================================
	"npc_dota_hero_queenofpain"
	{
		"override_hero"					"npc_dota_hero_queenofpain"
		"AbilityLayout"					"5"
		"Ability1"						"queenofpain_shadow_strike_bh"
		"Ability2"						"queenofpain_blink_bh"
		"Ability3"						"queenofpain_scream_of_pain_bh"
		"Ability4"						"queenofpain_sadomasochism"
		"Ability6"						"queenofpain_sonic_wave_bh"
		
		"Ability10"						"special_bonus_unique_queenofpain_shadow_strike_1"
		"Ability11"						"special_bonus_unique_queenofpain_shadow_strike_2"
		"Ability12"						"special_bonus_unique_queenofpain_blink_1"
		"Ability13"						"special_bonus_unique_queenofpain_blink_2"
		"Ability14"						"special_bonus_unique_queenofpain_scream_of_pain_1"
		"Ability15"						"special_bonus_unique_queenofpain_scream_of_pain_2"
		"Ability16"						"special_bonus_unique_queenofpain_sonic_wave_1"
		"Ability17"						"special_bonus_unique_queenofpain_sonic_wave_2"
	}
	//=================================================================================================================
	// HERO: Cockwerk
	//=================================================================================================================
	"npc_dota_hero_rattletrap_ebf"
	{
		"override_hero"					"npc_dota_hero_rattletrap"

		"Ability1"						"rattletrap_battery_assault_ebf"
		"Ability2"						"rattletrap_aegis_deflector"
		"Ability3"						"rattletrap_rocket_flare_ebf"
		"Ability4"						"rattletrap_hookshot_bh"
		"Ability5"						"rattletrap_reactive_shielding"
		"Ability6"						"rattletrap_automated_artillery"
		
		"Ability10"						"special_bonus_unique_rattletrap_aegis_deflector_2"
		"Ability11"						"special_bonus_unique_rattletrap_aegis_deflector_1"
		"Ability12"						"special_bonus_unique_rattletrap_rocket_flare_ebf_1"
		"Ability13"						"special_bonus_unique_rattletrap_rocket_flare_ebf_2"
		"Ability14"						"special_bonus_unique_rattletrap_battery_assault_1"
		"Ability15"						"special_bonus_unique_rattletrap_battery_assault_2"
		"Ability16"						"special_bonus_unique_rattletrap_reactive_shielding_1"
		"Ability17"						"special_bonus_unique_rattletrap_automated_artillery_1"
	}
	//=================================================================================================================
	// HERO: Razor
	//=================================================================================================================
	"npc_dota_hero_razor_ebf"
	{
		"override_hero"					"npc_dota_hero_razor"
		"Ability1"						"razor_plasma_field_bh"					// Ability 2
		"Ability2"						"razor_static_link_bh"					// Ability 2
		"Ability3"						"razor_unstable_current_bh"					// Ability 3
		"Ability4"						"razor_static_shock"					// Ability 3
		"Ability6"						"razor_eye_of_the_storm_bh"					// Ability 3

		"Ability10"						"special_bonus_unique_razor_plasma_field_bh_1"
		"Ability11"						"special_bonus_unique_razor_plasma_field_bh_2"
		"Ability12"						"special_bonus_unique_razor_static_link_bh_1"
		"Ability13"						"special_bonus_unique_razor_static_link_bh_2"
		"Ability14"						"special_bonus_unique_razor_unstable_current_bh_1"
		"Ability15"						"special_bonus_unique_razor_unstable_current_bh_2"
		"Ability16"						"special_bonus_unique_razor_eye_of_the_storm_bh_1"
		"Ability17"						"special_bonus_unique_razor_eye_of_the_storm_bh_2"
		
	}
	//=================================================================================================================
	// HERO: Riki
	//=================================================================================================================
	"npc_dota_hero_riki_ebf"
	{
		"override_hero"			 		"npc_dota_hero_riki"
		"Ability1"					 	"riki_smoke_bomb"
		"Ability2"				 		"riki_dance"
		"Ability3"				 		"riki_dagger"
		"Ability4"				 		"riki_cloak"
		"Ability6"				 		"riki_traded_tricks"
	
		"Ability10"     		 	  	"special_bonus_unique_riki_smoke_bomb_1"
	    "Ability11"     		 	  	"special_bonus_unique_riki_smoke_bomb_2"
	    "Ability12"    			 	   	"special_bonus_unique_riki_dance_1"
	    "Ability13"    			 	   	"special_bonus_unique_riki_dance_2"
	    "Ability14"   		 	    	"special_bonus_unique_riki_dagger_1"
	    "Ability15"   		 	    	"special_bonus_unique_riki_dagger_2"
	    "Ability16"      			 	"special_bonus_unique_riki_traded_tricks_1"
	    "Ability17"      			 	"special_bonus_unique_riki_traded_tricks_2"
		
	}
	//=================================================================================================================
	// HERO: Rubick
	//=================================================================================================================
	"npc_dota_hero_rubick_ebf"
	{
		"override_hero"					"npc_dota_hero_rubick"
		"Ability1"						"rubick_lift"
		"Ability2"						"rubick_bolt"
		"Ability3"						"rubick_arcane"
		"Ability5"						"rubick_echo"
		"Ability6"						"rubick_steal"
		
		"Ability11"						"special_bonus_unique_rubick_lift_1"
		"Ability12"						"special_bonus_unique_rubick_lift_2"
		"Ability13"						"special_bonus_unique_rubick_bolt_1"
		"Ability14"						"special_bonus_unique_rubick_bolt_2"
		"Ability15"						"special_bonus_unique_rubick_arcane_1"
		"Ability16"						"special_bonus_unique_rubick_arcane_2"
		"Ability17"						"special_bonus_unique_rubick_steal_1"
		"Ability18"						"special_bonus_unique_rubick_steal_2"
	}
	//=================================================================================================================
	// HERO: Darude
	//=================================================================================================================
	"npc_dota_hero_sand_king"
	{
		"override_hero"					"npc_dota_hero_sand_king"
		"AbilityLayout"					"5"
		"Ability1"						"sand_burrow"
		"Ability2"						"sand_sandstorm"
		"Ability3"						"sand_claw_impact"
		"Ability4"						"sand_caustics"
		"Ability6"						"sand_tremors"
		
		"Ability10"						"special_bonus_unique_sand_burrow_1"
		"Ability11"						"special_bonus_unique_sand_burrow_2"
		"Ability12"						"special_bonus_unique_sand_sandstorm_1"
		"Ability13"						"special_bonus_unique_sand_sandstorm_2"
		"Ability14"						"special_bonus_unique_sand_claw_impact_1"
		"Ability15"						"special_bonus_unique_sand_claw_impact_2"
		"Ability16"						"special_bonus_unique_sand_tremors_1"
		"Ability17"						"special_bonus_unique_sand_tremors_2"
	}

	//=================================================================================================================
	// HERO: Shadow Demon
	//=================================================================================================================
	"npc_dota_hero_shadow_demon_ebf"
	{
		"override_hero"					"npc_dota_hero_shadow_demon"
		"Ability1"						"sd_disruption"
		"Ability2"						"sd_soul_catcher"
		"Ability3"						"sd_shadow_poison"
		"Ability4"						"sd_void_release"
		"Ability6"						"sd_demonic_purge"

		"Ability10"						"special_bonus_unique_sd_disruption_1"
		"Ability11"						"special_bonus_unique_sd_disruption_2"
		"Ability12"						"special_bonus_unique_sd_soul_catcher_1"
		"Ability13"						"special_bonus_unique_sd_soul_catcher_2"
		"Ability14"						"special_bonus_unique_sd_shadow_poison_1"
		"Ability15"						"special_bonus_unique_sd_shadow_poison_2"
		"Ability16"						"special_bonus_unique_sd_demonic_purge_1"
		"Ability17"						"special_bonus_unique_sd_demonic_purge_2"
	}

	//=================================================================================================================
	// HERO: Rhastafarian
	//=================================================================================================================
	"npc_dota_hero_shadow_shaman_ebf"
	{
		"override_hero"					"npc_dota_hero_shadow_shaman"
		"Ability1"						"shadow_shaman_ether_lightning"
		"Ability2"						"shadow_shaman_ignited_voodoo"
		"Ability3"						"shadow_shaman_binding_shackle"
		"Ability6"						"shadow_shaman_snake_totem"
		
		"Ability10"						"special_bonus_unique_shadow_shaman_ether_lightning_1"
		"Ability11"						"special_bonus_unique_shadow_shaman_ether_lightning_2"
		"Ability12"						"special_bonus_unique_shadow_shaman_ignited_voodoo_1"
		"Ability13"						"special_bonus_unique_shadow_shaman_ignited_voodoo_2"
		"Ability14"						"special_bonus_unique_shadow_shaman_binding_shackle_1"
		"Ability15"						"special_bonus_unique_shadow_shaman_binding_shackle_2"
		"Ability16"						"special_bonus_unique_shadow_shaman_snake_totem_1"
		"Ability17"						"special_bonus_unique_shadow_shaman_snake_totem_2"
	}
	"npc_dota_hero_shredder"
	{
		"override_hero"					"npc_dota_hero_shredder"
		"Ability1"						"timbersaw_bonesplitter"
		"Ability2"						"timbersaw_claw"
		"Ability3"						"timbersaw_reactive"
		"Ability4"						"timbersaw_hylophobia"
		"Ability5"						"timbersaw_chak2"
		"Ability6"						"timbersaw_chak"
	
		"Ability10"						"special_bonus_unique_timbersaw_bonesplitter_1"
		"Ability11"						"special_bonus_unique_timbersaw_bonesplitter_2"
		"Ability12"						"special_bonus_unique_timbersaw_claw_1"
		"Ability13"						"special_bonus_unique_timbersaw_claw_2"
		"Ability14"						"special_bonus_unique_timbersaw_reactive_1"
		"Ability15"						"special_bonus_unique_timbersaw_reactive_2"
		"Ability16"						"special_bonus_unique_timbersaw_chak_1"
		"Ability17"						"special_bonus_unique_timbersaw_chak_2"
	}
	//=================================================================================================================
	// HERO: Rhastafarian
	//=================================================================================================================
	"npc_dota_hero_silencer"
	{
		"override_hero"					"npc_dota_hero_silencer"
		"Ability1"						"silencer_arcane_curse_bh"
		"Ability2"						"silencer_glaives_of_wisdom_bh"
		"Ability3"						"silencer_last_word_bh"
		"Ability4"						"silencer_feed_the_mind"
		"Ability6"						"silencer_global_silence_bh"
	
		"Ability10"						"special_bonus_unique_silencer_arcane_curse_1"
		"Ability11"						"special_bonus_unique_silencer_arcane_curse_2"
		"Ability12"						"special_bonus_unique_silencer_glaives_of_wisdom_1"
		"Ability13"						"special_bonus_unique_silencer_glaives_of_wisdom_2"
		"Ability14"						"special_bonus_unique_silencer_last_word_1"
		"Ability15"						"special_bonus_unique_silencer_last_word_2"
		"Ability16"						"special_bonus_unique_silencer_global_silence_1"
		"Ability17"						"special_bonus_unique_silencer_global_silence_2"
	}
	"npc_dota_hero_skeleton_king" // Wraith
	{
		"override_hero"					"npc_dota_hero_skeleton_king"
		"Ability1"						"wk_blast"
		"Ability2"						"wk_vamp"
		"Ability3"						"wk_skeletons"
		"Ability4"						"wk_crit"
		"Ability6"						"wk_reincarnation"
	
		"Ability10"						"special_bonus_unique_wk_blast_1"
		"Ability11"						"special_bonus_unique_wk_blast_2"
		"Ability12"						"special_bonus_unique_wk_vamp_1"
		"Ability13"						"special_bonus_unique_wk_vamp_2"
		"Ability14"						"special_bonus_unique_wk_skeletons_1"
		"Ability15"						"special_bonus_unique_wk_skeletons_2"
		"Ability16"						"special_bonus_unique_wk_reincarnation_1"
		"Ability17"						"special_bonus_unique_wk_reincarnation_2"
	}
	"npc_dota_hero_lone_druid_ebf"
	{
		"override_hero"					"npc_dota_hero_lone_druid"
		"Ability1"						"druid_battle_cry"
		"Ability2"						"druid_spirit_link"
		"Ability3"						"druid_savage_roar"
		"Ability4"						"druid_bear"
		"Ability6"						"druid_transform"
		//"Ability7"						"druid_daynight"

		"Ability10"						"special_bonus_unique_druid_battle_cry_1"
		"Ability11"						"special_bonus_unique_druid_battle_cry_2"
		"Ability12"						"special_bonus_unique_druid_spirit_link_1"
		"Ability13"						"special_bonus_unique_druid_spirit_link_2"
		"Ability14"						"special_bonus_unique_druid_savage_roar_1"
		"Ability15"						"special_bonus_unique_druid_savage_roar_2"
		"Ability16"						"special_bonus_unique_druid_transform_1"
		"Ability17"						"special_bonus_unique_druid_transform_2"
	}
	//=================================================================================================================
	// HERO: skywrath
	//=================================================================================================================
	"npc_dota_hero_skywrath_mage_ebf"
	{
		"override_hero"					"npc_dota_hero_skywrath_mage"
		"Ability1"						"skywrath_arcane"
		"Ability2"						"skywrath_concussive"
		"Ability3"						"skywrath_seal"
		"Ability4"						"skywrath_int"
		"Ability6"						"skywrath_flare"
		
		"Ability10"						"special_bonus_unique_skywrath_arcane_1"
		"Ability11"						"special_bonus_unique_skywrath_arcane_2"
		"Ability12"						"special_bonus_unique_skywrath_concussive_1"
		"Ability13"						"special_bonus_unique_skywrath_concussive_2"
		"Ability14"						"special_bonus_unique_skywrath_seal_1"
		"Ability15"						"special_bonus_unique_skywrath_seal_2"
		"Ability16"						"special_bonus_unique_skywrath_flare_1"
		"Ability17"						"special_bonus_unique_skywrath_flare_2"
		
		"AttributeBaseStrength"			"18"
		"AttributeStrengthGain"			"1.200000"
		"AttributeBaseAgility"			"13"
		"AttributeAgilityGain"			"0.800000"
		"AttributeBaseIntelligence"		"25"
		"AttributeIntelligenceGain"		"3.600000"
	}
	"npc_dota_hero_slardar_ebf"
	{
		"override_hero"					"npc_dota_hero_slardar"
		"Ability1"						"slardar_sprint_bh"
		"Ability2"						"slardar_slithereen_crush_bh"
		"Ability3"						"slardar_oathbreaker"
		"Ability4"						"slardar_oathkeeper"
		"Ability6"						"slardar_amplify_damage_bh"
		
		"Ability10"						"special_bonus_unique_slardar_sprint_1"
		"Ability11"						"special_bonus_unique_slardar_sprint_2"
		"Ability12"						"special_bonus_unique_slardar_slithereen_crush_1"
		"Ability13"						"special_bonus_unique_slardar_slithereen_crush_2"
		"Ability14"						"special_bonus_unique_slardar_oathbreaker_1"
		"Ability15"						"special_bonus_unique_slardar_oathkeeper_1"
		"Ability16"						"special_bonus_unique_slardar_amplify_damage_1"
		"Ability17"						"special_bonus_unique_slardar_amplify_damage_2"
	}
	//=================================================================================================================
	// HERO: slark
	//=================================================================================================================
	"npc_dota_hero_slark_ebf"
	{
		"override_hero"			"npc_dota_hero_slark"
		"Ability1"		"slark_dark_pact_ebf"
		"Ability2"		"slark_pounce_ebf"
		"Ability3"		"slark_essence_shift_ebf"
		"Ability4"		"slark_acrobatics"
		"Ability5"		"generic_hidden"
		"Ability6"		"slark_shadow_dance_ebf"
		
		"Ability10"		"special_bonus_unique_slark_dark_pact_1"
		"Ability11"		"special_bonus_unique_slark_dark_pact_2"
		"Ability12"		"special_bonus_unique_slark_pounce_1"
		"Ability13"		"special_bonus_unique_slark_pounce_2"
		"Ability14"		"special_bonus_unique_slark_essence_shift_1"
		"Ability15"		"special_bonus_unique_slark_essence_shift_2"
		"Ability16"		"special_bonus_unique_slark_shadow_dance_1"
		"Ability17"		"special_bonus_unique_slark_shadow_dance_2"
	}
	//=================================================================================================================
	// HERO: sniper
	//=================================================================================================================
	"npc_dota_hero_sniper_ebf"
	{
		"override_hero"			"npc_dota_hero_sniper"
		"Ability1"				"sniper_shrapnel_bh"
		"Ability2"				"sniper_headshot_bh"
		"Ability3"				"sniper_rapid_fire"
		"Ability4"				"sniper_take_aim_bh"
		"Ability6"				"sniper_assassinate_bh"

		"Ability10"		"special_bonus_unique_sniper_shrapnel_bh_1"
		"Ability11"		"special_bonus_unique_sniper_shrapnel_bh_2"
		"Ability12"		"special_bonus_unique_sniper_headshot_bh_1"
		"Ability13"		"special_bonus_unique_sniper_headshot_bh_2"
		"Ability14"		"special_bonus_unique_sniper_rapid_fire_1"
		"Ability15"		"special_bonus_unique_sniper_take_aim_bh_1"
		"Ability16"		"special_bonus_unique_sniper_assassinate_bh_1"
		"Ability17"		"special_bonus_unique_sniper_assassinate_bh_2"
		
	}
	//=================================================================================================================
	// HERO: Spectre
	//=================================================================================================================
	"npc_dota_hero_spectre_ebf"
	{
		"override_hero"			"npc_dota_hero_spectre"
		"AbilityLayout"				"4"
		"Ability1"					"spectre_spectral_dagger_bh"					// Ability 1
		"Ability2"					"spectre_echo_scream"	
		"Ability3"					"spectre_desolate_bh"		// Ability 2
		"Ability4"					"spectre_dimensional_interjection"
		"Ability5"					"generic_hidden"
		"Ability6"					"spectre_dispersion_bh"						// Ability 3
		
		"Ability10"					"special_bonus_unique_spectre_spectral_dagger_1"
		"Ability11"					"special_bonus_unique_spectre_spectral_dagger_2"
		"Ability12"					"special_bonus_unique_spectre_echo_scream_1"
		"Ability13"					"special_bonus_unique_spectre_echo_scream_2"
		"Ability14"					"special_bonus_unique_spectre_desolate_1"
		"Ability15"					"special_bonus_unique_spectre_desolate_2"
		"Ability16"					"special_bonus_unique_spectre_dispersion_1"
		"Ability17"					"special_bonus_unique_spectre_dispersion_2"
		
		
	}
	"npc_dota_hero_spirit_breaker"
	{
		"override_hero"			"npc_dota_hero_spirit_breaker"
		"Ability1"				"sb_charge"
		"Ability2"				"sb_haste"
		"Ability3"				"sb_bash"
		"Ability4"				"sb_armor"
		"Ability6"				"sb_nether_strike"
	
		"Ability10"				"special_bonus_unique_sb_charge_1"
		"Ability11"				"special_bonus_unique_sb_charge_2"
		"Ability12"				"special_bonus_unique_sb_haste_1"
		"Ability13"				"special_bonus_unique_sb_haste_2"
		"Ability14"				"special_bonus_unique_sb_bash_1"
		"Ability15"				"special_bonus_unique_sb_bash_2"
		"Ability16"				"special_bonus_unique_sb_nether_strike_1"
		"Ability17"				"special_bonus_unique_sb_nether_strike_2"
		
		"AttackRate"			"1.700000"
		"MovementTurnRate"		"0.700000"
	}
	//=================================================================================================================
	// HERO: Storm
	//=================================================================================================================
	"npc_dota_hero_storm_spirit_ebf"
	{
		"override_hero"			"npc_dota_hero_storm_spirit"
		"Ability1"				"ss_static_remnant"
		"Ability2"				"ss_electric_vortex"
		"Ability3"				"ss_thunder_punch"
		"Ability4"				"ss_overload"
		"Ability6"				"ss_ball_lightning"
		
		"Ability10"				"special_bonus_unique_ss_static_remnant_1"
		"Ability11"				"special_bonus_unique_ss_static_remnant_2"
		"Ability12"				"special_bonus_unique_ss_electric_vortex_1"
		"Ability13"				"special_bonus_unique_ss_electric_vortex_2"
		"Ability14"				"special_bonus_unique_ss_thunder_punch_1"
		"Ability15"				"special_bonus_unique_ss_thunder_punch_2"
		"Ability16"				"special_bonus_unique_ss_ball_lightning_1"
		"Ability17"				"special_bonus_unique_ss_ball_lightning_2"
	}
	"npc_dota_hero_sven" // Guardian
	{
		"override_hero"				"npc_dota_hero_sven"
		"Ability1"					"sven_storm_bolt_bh"
		"Ability2"					"sven_valiant_charge"
		"Ability3"					"sven_warcry_bh"
		"Ability4"					"sven_great_cleave_bh"
		"Ability6"					"sven_gods_strength_bh"
		
		"Ability10"					"special_bonus_unique_sven_storm_bolt_1"
		"Ability11"					"special_bonus_unique_sven_storm_bolt_2"
		"Ability12"					"special_bonus_unique_sven_valiant_charge_1"
		"Ability13"					"special_bonus_unique_sven_valiant_charge_2"
		"Ability14"					"special_bonus_unique_sven_warcry_1"
		"Ability15"					"special_bonus_unique_sven_warcry_2"
		"Ability16"					"special_bonus_unique_sven_gods_strength_1"
		"Ability17"					"special_bonus_unique_sven_gods_strength_2"
	}
	//=================================================================================================================
	// HERO: Techies
	//=================================================================================================================
	"npc_dota_hero_techies_ebf"
	{
		"override_hero"				"npc_dota_hero_techies"
		"ability1"					"tech_mine"
		"ability2"					"tech_stasis_mine"
		"ability3"					"tech_robo_mine"
		"ability4"					"tech_blasting_off"
		"ability5"					"tech_suicide"
		"ability6"					"tech_drastic"
		
		"Ability10"					"special_bonus_unique_tech_mine_1"
		"Ability11"					"special_bonus_unique_tech_mine_2"
		"Ability12"					"special_bonus_unique_tech_stasis_mine_1"
		"Ability13"					"special_bonus_unique_tech_stasis_mine_2"
		"Ability14"					"special_bonus_unique_tech_robo_mine_1"
		"Ability15"					"special_bonus_unique_tech_robo_mine_2"
		"Ability16"					"special_bonus_cooldown_reduction_15"
		"Ability17"					"special_bonus_reincarnation_120"
		
	}
	"npc_dota_hero_templar_assassin_ebf"
	{
		"override_hero"				"npc_dota_hero_templar_assassin"
		"Ability1"					"ta_refract"
		"Ability2"					"ta_meld"
		"Ability3"					"ta_psi_blades"
		"Ability4"					"ta_trap_tp"
		"Ability5"					"ta_trap_spring"
		"Ability6"					"ta_trap"

		"Ability10"					"special_bonus_unique_ta_refract_1"
		"Ability11"					"special_bonus_unique_ta_refract_2"
		"Ability12"					"special_bonus_unique_ta_meld_1"
		"Ability13"					"special_bonus_unique_ta_meld_2"
		"Ability14"					"special_bonus_unique_ta_psi_blades_1"
		"Ability15"					"special_bonus_unique_ta_psi_blades_2"
		"Ability16"					"special_bonus_unique_ta_trap_1"
		"Ability17"					"special_bonus_unique_ta_trap_2"	
	}
	//=================================================================================================================
	// HERO: Terrorblyat
	//=================================================================================================================
	"npc_dota_hero_terrorblade_ebf"
	{
		"override_hero"					"npc_dota_hero_terrorblade"
		"Ability1"						"terrorblade_reflection_bh"
		"Ability2"						"terrorblade_conjure_image_bh"
		"Ability3"						"terrorblade_zeal"
		"Ability6"						"terrorblade_metamorphosis_bh"	
		
		"Ability10"						"special_bonus_unique_terrorblade_reflection_1"
		"Ability11"						"special_bonus_unique_terrorblade_reflection_2"
		"Ability12"						"special_bonus_unique_terrorblade_conjure_image_1"
		"Ability13"						"special_bonus_unique_terrorblade_conjure_image_2"
		"Ability14"						"special_bonus_unique_terrorblade_zeal_1"
		"Ability15"						"special_bonus_unique_terrorblade_zeal_2"
		"Ability16"						"special_bonus_unique_terrorblade_metamorphosis_1"
		"Ability17"						"special_bonus_unique_terrorblade_metamorphosis_2"	
	}
	"npc_dota_hero_tidehunter_ebf"
	{
		"override_hero"					"npc_dota_hero_tidehunter"
		"Ability1"						"tide_hydro_cannon"
		"Ability2"						"tide_tongue_whip"
		"Ability3"						"tide_anchor"
		"Ability4"						"tide_turtle_shell"
		"Ability6"						"tide_the_kraken"
		
		"Ability10"       				"special_bonus_unique_tide_hydro_cannon_1"
	    "Ability11"       				"special_bonus_unique_tide_hydro_cannon_2"
	    "Ability12"						"special_bonus_unique_tide_tongue_whip_1"
	    "Ability13"						"special_bonus_unique_tide_tongue_whip_2"
	    "Ability14"						"special_bonus_unique_tide_anchor_1"
	    "Ability15"						"special_bonus_unique_tide_anchor_2"
	    "Ability16"						"special_bonus_unique_tide_the_kraken_1"
	    "Ability17"						"special_bonus_unique_tide_the_kraken_2"
	}
	"npc_dota_hero_tinker_ebf"
	{
		"override_hero"					"npc_dota_hero_tinker"
		"Ability1"						"tinker_laser_ebf"
		"Ability2"						"tinker_missile_ebf"
		"Ability3"						"tinker_march"
		"Ability4"						"tinker_turret"
		"Ability6"						"tinker_rearm_ebf"

		"Ability10"      		 		"special_bonus_unique_tinker_laser_ebf_1"
	    "Ability11"      		 		"special_bonus_unique_tinker_laser_ebf_2"
	    "Ability12"						"special_bonus_unique_tinker_missile_ebf_1"
	    "Ability13"						"special_bonus_unique_tinker_missile_ebf_2"
	    "Ability14"						"special_bonus_unique_tinker_march_1"
	    "Ability15"						"special_bonus_unique_tinker_march_2"
	    "Ability16"						"special_bonus_unique_tinker_rearm_ebf_1"
	    "Ability17"						"special_bonus_unique_tinker_rearm_ebf_2"
	}
	"npc_dota_hero_tiny"
	{
		"override_hero"					"npc_dota_hero_tiny"
		"Ability1"						"tiny_avalanche_bh"
		"Ability2"						"tiny_toss_bh"
		"Ability3"						"tiny_tree_bh"
		"Ability4"						"tiny_craggy_exterior_bh"
		"Ability6"						"tiny_grow_bh"
		"Ability7"						"generic_hidden"

		"Ability10"						"special_bonus_unique_tiny_avalanche_bh_1"
		"Ability11"						"special_bonus_unique_tiny_avalanche_bh_2"
		"Ability12"						"special_bonus_unique_tiny_toss_bh_1"
		"Ability13"						"special_bonus_unique_tiny_toss_bh_2"
		"Ability14"						"special_bonus_unique_tiny_tree_bh_1"
		"Ability15"						"special_bonus_unique_tiny_tree_bh_2"
		"Ability16"						"special_bonus_unique_tiny_grow_bh_1"
		"Ability17"						"special_bonus_unique_tiny_grow_bh_2"

		"AttributeBaseAgility"			"18"
		"AttributeAgilityGain"			"1.2"
		
	}
	"npc_dota_hero_treant" // Forest
	{
		"override_hero"					"npc_dota_hero_treant"
		
		"Ability1"						"treant_little_tree"
		"Ability2"						"treant_overgrowth_bh"
		"Ability3"						"treant_living_armor_bh"
		"Ability4"						"treant_leech_seed_bh"
		"Ability6"						"treant_great_protector"
	
		"Ability10"						"special_bonus_unique_treant_little_tree_1"
		"Ability11"						"special_bonus_unique_treant_little_tree_2"
		"Ability12"						"special_bonus_unique_treant_overgrowth_1"
		"Ability13"						"special_bonus_unique_treant_overgrowth_2"
		"Ability14"						"special_bonus_unique_treant_living_armor_1"
		"Ability15"						"special_bonus_unique_treant_living_armor_2"
		"Ability16"						"special_bonus_unique_treant_great_protector_1"
		"Ability17"						"special_bonus_unique_treant_great_protector_2"
	}
	//=================================================================================================================
	// HERO: Troll Warlord
	//=================================================================================================================
	"npc_dota_hero_troll_warlord_ebf"
	{
		"override_hero"					"npc_dota_hero_troll_warlord"
		"Ability1"						"troll_warlord_focus"
		"Ability2"						"troll_warlord_axe_throw"
		"Ability3"						"troll_warlord_whirling_axes"
		"Ability4"						"troll_warlord_fervor_bh"
		"Ability5"						"troll_warlord_berserkers_rage_bh"
		"Ability6"						"troll_warlord_battle_trance_bh"
		"Ability7"						"troll_warlord_inflame"
		
		"Ability10"						"special_bonus_unique_troll_warlord_inflame_1"
		"Ability11"						"special_bonus_unique_troll_warlord_focus_1"
		"Ability12"						"special_bonus_unique_troll_warlord_whirling_axes_1"
		"Ability13"						"special_bonus_unique_troll_warlord_whirling_axes_2"
		"Ability14"						"special_bonus_unique_troll_warlord_fervor_1"
		"Ability15"						"special_bonus_unique_troll_warlord_fervor_2"
		"Ability16"						"special_bonus_unique_troll_warlord_battle_trance_1"
		"Ability17"						"special_bonus_unique_troll_warlord_battle_trance_2"
	}
	"npc_dota_hero_tusk_ebf"
	{
		"override_hero"					"npc_dota_hero_tusk"
		"Ability1"						"tusk_ice"
		"Ability2"						"tusk_snow"
		"Ability3"						"tusk_frozen_wasteland"
		"Ability4"						"tusk_kick"
		"Ability6"						"tusk_punch"
	
		"Ability10"						"special_bonus_unique_tusk_ice_1"
		"Ability11"						"special_bonus_unique_tusk_ice_2"
		"Ability12"						"special_bonus_unique_tusk_snow_1"
		"Ability13"						"special_bonus_unique_tusk_snow_2"
		"Ability14"						"special_bonus_unique_tusk_frozen_wasteland_1"
		"Ability15"						"special_bonus_unique_tusk_frozen_wasteland_2"
		"Ability16"						"special_bonus_unique_tusk_punch_1"
		"Ability17"						"special_bonus_unique_tusk_punch_2"
	}
	//=================================================================================================================
	// HERO: undying
	//=================================================================================================================
	"npc_dota_hero_undying_ebf"
	{	
		"override_hero"					"npc_dota_hero_undying"
		"Ability1"						"undying_decay_bh"					// Ability 4
		"Ability2"						"undying_soul_rip_bh"				// Ability 4
		"Ability3"						"undying_summon_zombies"					// Ability 4
		"Ability4"						"undying_the_undying"
		"ability6"						"undying_flesh_golem_bh"
		
		"Ability10"						"special_bonus_unique_undying_decay_1"
		"Ability11"						"special_bonus_unique_undying_decay_2"
		"Ability12"						"special_bonus_unique_undying_soul_rip_1"
		"Ability13"						"special_bonus_unique_undying_soul_rip_2"
		"Ability14"						"special_bonus_unique_undying_summon_zombies_1"
		"Ability15"						"special_bonus_unique_undying_summon_zombies_2"
		"Ability16"						"special_bonus_unique_undying_flesh_golem_1"
		"Ability17"						"special_bonus_unique_undying_flesh_golem_2"
	}
	//=================================================================================================================
	// HERO: ursa
	//=================================================================================================================
	"npc_dota_hero_ursa_ebf"
	{
		"override_hero"					"npc_dota_hero_ursa"
		"Ability1"						"ursa_earthshock_bh"
		"Ability2"						"ursa_overpower_bh"
		"Ability3"						"ursa_lunge"
		"Ability4"						"ursa_fury_swipes_bh"
		"Ability6"						"ursa_enrage_bh"
		
		"Ability10"						"special_bonus_unique_ursa_earthshock_bh_1"
		"Ability11"						"special_bonus_unique_ursa_earthshock_bh_2"  
		"Ability12"						"special_bonus_unique_ursa_overpower_bh_1"
		"Ability13"						"special_bonus_unique_ursa_overpower_bh_2"
		"Ability14"						"special_bonus_unique_ursa_lunge_1"
		"Ability15"						"special_bonus_unique_ursa_lunge_2"
		"Ability16"						"special_bonus_unique_ursa_enrage_bh_1"
		"Ability17"						"special_bonus_unique_ursa_enrage_bh_2"
	}
	"npc_dota_hero_vengefulspirit_ebf"
	{
		"override_hero"					"npc_dota_hero_vengefulspirit"
		"Ability1"						"vengefulspirit_magic_missile_ebf"
		"Ability2"						"vengefulspirit_wave"
		"Ability3"						"vengefulspirit_haunt"
		"Ability4"						"vengefulspirit_aura"
		"Ability6"						"vengefulspirit_swap"
		
		"Ability10"						"special_bonus_unique_vengefulspirit_magic_missile_ebf_1"
		"Ability11"						"special_bonus_unique_vengefulspirit_magic_missile_ebf_2"  
		"Ability12"						"special_bonus_unique_vengefulspirit_wave_1"
		"Ability13"						"special_bonus_unique_vengefulspirit_wave_2"
		"Ability14"						"special_bonus_unique_vengefulspirit_haunt_1"
		"Ability15"						"special_bonus_unique_vengefulspirit_haunt_2"
		"Ability16"						"special_bonus_unique_vengefulspirit_swap_1"
		"Ability17"						"special_bonus_unique_vengefulspirit_swap_2"
	}
	"npc_dota_hero_venomancer_ebf"
	{
		"override_hero"					"npc_dota_hero_venomancer"
		"Ability1"						"venomancer_venomous_gale_ebf"
		"Ability2"						"venomancer_poison_sting_ebf"
		"Ability3"						"venomancer_plague_ward_ebf"
		"Ability6"						"venomancer_poison_nova_ebf"
		
		"Ability10"						"special_bonus_unique_venomancer_venomous_gale_1"
		"Ability11"						"special_bonus_unique_venomancer_venomous_gale_2"
		"Ability12"						"special_bonus_unique_venomancer_poison_sting_1"
		"Ability13"						"special_bonus_unique_venomancer_poison_sting_2"
		"Ability14"						"special_bonus_unique_venomancer_plague_ward_1"
		"Ability15"						"special_bonus_unique_venomancer_plague_ward_2"
		"Ability16"						"special_bonus_unique_venomancer_poison_nova_1"
		"Ability17"						"special_bonus_unique_venomancer_poison_nova_2"
		
	}
	"npc_dota_hero_viper_ebf"
	{
		"override_hero"					"npc_dota_hero_viper"
		"Ability1"						"viper_poison_attack_bh"
		"Ability2"						"viper_nethertoxin_bh"
		"Ability3"						"viper_corrosive_skin_bh"
		"Ability4"						"viper_venombringer"
		"Ability6"						"viper_viper_strike_bh"
		
		"Ability10"						"special_bonus_unique_viper_poison_attack_1"
		"Ability11"						"special_bonus_unique_viper_poison_attack_2"
		"Ability12"						"special_bonus_unique_viper_nethertoxin_1"
		"Ability13"						"special_bonus_unique_viper_nethertoxin_2"
		"Ability14"						"special_bonus_unique_viper_corrosive_skin_1"
		"Ability15"						"special_bonus_unique_viper_corrosive_skin_2"
		"Ability16"						"special_bonus_unique_viper_viper_strike_1"
		"Ability17"						"special_bonus_unique_viper_viper_strike_2"
	}
	"npc_dota_hero_visage_ebf"
	{
		"override_hero"					"npc_dota_hero_visage"
		"Ability1"						"visage_chill"
		"Ability2"						"visage_soul"
		"Ability3"						"visage_cloak"
		"Ability4"						"visage_familiars"
		"Ability6"						"visage_stone"
		
		"Ability10"						"special_bonus_unique_visage_chill_1"
		"Ability11"						"special_bonus_unique_visage_chill_2"
		"Ability12"						"special_bonus_unique_visage_soul_1"
		"Ability13"						"special_bonus_unique_visage_soul_2"
		"Ability14"						"special_bonus_unique_visage_cloak_1"
		"Ability15"						"special_bonus_unique_visage_cloak_2"
		"Ability16"						"special_bonus_unique_visage_stone_1"
		"Ability17"						"special_bonus_unique_visage_stone_2"
	}
	"npc_dota_hero_warlock_ebf"
	{
		"override_hero"					"npc_dota_hero_warlock"
		"Ability1"						"warlock_chaos_bolt"
		"Ability2"						"warlock_corruption_curse"
		"Ability3"						"warlock_sacrifice"
		"Ability4"						"warlock_summon_imp"
		"Ability6"						"warlock_demonic_summons"
		
		"Ability10"						"special_bonus_unique_warlock_chaos_bolt_1"
		"Ability11"						"special_bonus_unique_warlock_chaos_bolt_2"
		"Ability12"						"special_bonus_unique_warlock_corruption_curse_1"
		"Ability13"						"special_bonus_unique_warlock_corruption_curse_2"
		"Ability14"						"special_bonus_unique_warlock_sacrifice_1"
		"Ability15"						"special_bonus_unique_warlock_sacrifice_2"
		"Ability16"						"special_bonus_unique_warlock_demonic_summons_1"
		"Ability17"						"special_bonus_unique_warlock_demonic_summons_2"
	}
	"npc_dota_hero_weaver_ebf"
	{
		"override_hero"					"npc_dota_hero_weaver"
		"Ability1"						"weaver_swarm"
		"Ability2"						"weaver_shukuchi_bh"
		"Ability3"						"weaver_fabric_tear"
		"Ability4"						"weaver_geminate"
		"Ability6"						"weaver_time"
		
		"Ability10"						"special_bonus_unique_weaver_swarm_1"
		"Ability11"						"special_bonus_unique_weaver_swarm_2"
		"Ability12"						"special_bonus_unique_weaver_shukuchi_bh_1"
		"Ability13"						"special_bonus_unique_weaver_shukuchi_bh_2"
		"Ability14"						"special_bonus_unique_weaver_fabric_tear_1"
		"Ability15"						"special_bonus_unique_weaver_geminate_1"
		"Ability16"						"special_bonus_unique_weaver_time_1"
		"Ability17"						"special_bonus_unique_weaver_time_2"
	}
	"npc_dota_hero_windrunner" // Windranger WindRunner
	{
		"override_hero"					"npc_dota_hero_windrunner"
		
		"Ability1"						"windrunner_bolas"
		"Ability2"						"windrunner_powershot_bh"
		"Ability3"						"windrunner_windrun_bh"
		"Ability4"						"windrunner_skillshot"
		"Ability6"						"windrunner_focusfire_bh"
		
		"Ability10"						"special_bonus_unique_windrunner_bolas_1"
		"Ability11"						"special_bonus_unique_windrunner_bolas_2"
		"Ability12"						"special_bonus_unique_windrunner_powershot_bh_1"
		"Ability13"						"special_bonus_unique_windrunner_powershot_bh_2"
		"Ability14"						"special_bonus_unique_windrunner_windrun_bh_1"
		"Ability15"						"special_bonus_unique_windrunner_windrun_bh_2"
		"Ability16"						"special_bonus_unique_windrunner_focusfire_bh_1"
		"Ability17"						"special_bonus_unique_windrunner_focusfire_bh_2"

		"AttributePrimary"				"DOTA_ATTRIBUTE_AGILITY"
		"AttributeBaseStrength"			"17"
		"AttributeStrengthGain"			"2.8"
		"AttributeBaseIntelligence"		"17"
		"AttributeIntelligenceGain"		"1.4"
		"AttributeBaseAgility"			"18"
		"AttributeAgilityGain"			"2.6"
	}
	"npc_dota_hero_winter_wyvern_ebf"
	{
		"override_hero"					"npc_dota_hero_winter_wyvern"
		"Ability1"						"winterw_arctic_sting"
		"Ability2"						"winterw_frozen_splinter"
		"Ability3"						"winterw_ice_shell"
		"Ability6"						"winterw_winters_kiss"
	
		"Ability10"						"special_bonus_unique_winterw_arctic_sting_1"
		"Ability11"						"special_bonus_unique_winterw_arctic_sting_2"
		"Ability12"						"special_bonus_unique_winterw_frozen_splinter_1"
		"Ability13"						"special_bonus_unique_winterw_frozen_splinter_2"
		"Ability14"						"special_bonus_unique_winterw_frozen_ice_shell_2"
		"Ability15"						"special_bonus_unique_winterw_frozen_ice_shell_1"
		"Ability16"						"special_bonus_unique_winterw_winters_kiss_2"
		"Ability17" 					"special_bonus_unique_winterw_winters_kiss_1"
	
			
	}
	"npc_dota_hero_wisp_ebf"
	{
		"override_hero"					"npc_dota_hero_wisp"
		"Ability1"						"wisp_tether_bh"
		"Ability2"						"wisp_spirits_bh"
		"Ability3"						"wisp_overcharge_bh"
		"Ability4"						"wisp_spirit_inout"
		"Ability5"						"wisp_transfer"
		"Ability6"						"wisp_worm_hole"
		// "Ability7"						""
		
		"Ability10"						"special_bonus_unique_wisp_tether_bh_1"
		"Ability11"						"special_bonus_unique_wisp_tether_bh_2"
		"Ability12"						"special_bonus_unique_wisp_spirits_bh_1"
		"Ability13"						"special_bonus_unique_wisp_spirits_bh_2"
		"Ability14"						"special_bonus_unique_wisp_overcharge_bh_1"
		"Ability15"						"special_bonus_unique_wisp_overcharge_bh_2"
		"Ability16"						"special_bonus_unique_wisp_worm_hole_1"
		"Ability17" 					"special_bonus_unique_wisp_worm_hole_2"
		
	}
	"npc_dota_hero_witch_doctor_ebf"
	{
		"override_hero"			"npc_dota_hero_witch_doctor"
		"Ability1"				"witch_doctor_paralyzing_cask_bh"
		"Ability2"				"witch_doctor_voodoo_restoration_bh"
		"Ability3"				"witch_doctor_maledict_bh"
		"Ability6"				"witch_doctor_death_ward_bh"
		
		"Ability10"				"special_bonus_unique_witch_doctor_paralyzing_cask_1"
		"Ability11"				"special_bonus_unique_witch_doctor_paralyzing_cask_2"
		"Ability12"				"special_bonus_unique_witch_doctor_voodoo_restoration_1"
		"Ability13"				"special_bonus_unique_witch_doctor_voodoo_restoration_2"
		"Ability14"				"special_bonus_unique_witch_doctor_maledict_1"
		"Ability15"				"special_bonus_unique_witch_doctor_maledict_2"
		"Ability16"				"special_bonus_unique_witch_doctor_death_ward_1"
		"Ability17"				"special_bonus_unique_witch_doctor_death_ward_2"
	}
	"npc_dota_hero_zuus_ebf"
	{
		"override_hero"			"npc_dota_hero_zuus"
		"Ability1"				"zeus_chain_lightning"
		"Ability2"				"zeus_thunder_bolt"
		"Ability3"				"zeus_nimbus_storm"
		"Ability4"				"zeus_static_field"	
		"Ability6"				"zeus_olympus_calls"
		
		"Ability10"		"special_bonus_unique_zeus_chain_lightning_1"
		"Ability11"		"special_bonus_unique_zeus_chain_lightning_2"
		"Ability12"		"special_bonus_unique_zeus_thunder_bolt_1"
		"Ability13"		"special_bonus_unique_zeus_thunder_bolt_2"
		"Ability14"		"special_bonus_unique_zeus_nimbus_storm_1"
		"Ability15"		"special_bonus_unique_zeus_nimbus_storm_2"
		"Ability16"		"special_bonus_unique_zeus_olympus_calls_1"
		"Ability17"		"special_bonus_unique_zeus_olympus_calls_2"
	}
}
#base "items/item_crystal_of_life.txt"
#base "items/item_crown_of_thorns.txt"
#base "items/item_sorcerers_staff.txt"
#base "items/item_dagger_of_escape.txt"
#base "items/item_ring_of_mana.txt"
#base "items/item_sanguine_mask.txt"
#base "items/item_amulet_of_aggression.txt"
#base "items/item_hunters_hatchet.txt"
#base "items/item_elven_boots.txt"
#base "items/item_purging_stone.txt"
#base "items/item_gem_of_corruption.txt"
#base "items/item_pages_buckler.txt"
#base "items/item_cursed_amulet.txt"
#base "items/item_soldiers_pike.txt"
#base "items/item_spell_refinery.txt"
#base "items/item_calming_skull.txt"
#base "items/item_breeze_amulet.txt"
#base "items/item_mithril_armor.txt"
#base "items/item_orb_of_shadows.txt"
#base "items/item_gauntlet_of_alacrity.txt"
#base "items/item_warm_fire.txt"
#base "items/item_ice_fang.txt"
#base "items/item_worn_cloak.txt"
#base "items/item_broadsword.txt"
// #base "items/item_aeon_shard.txt"
#base "items/item_power_core.txt"
#base "items/item_strange_trinket.txt"

#base "items/item_plate_of_the_unbreakable.txt"
#base "items/item_penitent_mail.txt"
#base "items/item_archmages_orb.txt"
#base "items/item_culling_greataxe.txt"
#base "items/item_angelic_guard.txt"
#base "items/item_wings_of_icarus.txt"
#base "items/item_siegebreaker.txt"
#base "items/item_ringing_rapier.txt"
#base "items/item_reaping_scythe.txt"
#base "items/item_cultists_veil.txt"
#base "items/item_lightningrod.txt"
#base "items/item_jar_of_souls.txt"
#base "items/item_soul_vessel.txt"
#base "items/item_runed_artifact.txt"
#base "items/item_crystalline_staff.txt"
#base "items/item_everbright_shield.txt"
#base "items/item_warlocks_reliquary.txt"
#base "items/item_dark_ones_blessing.txt"
#base "items/item_gem_of_inner_power.txt"
#base "items/item_incandescance.txt"
// #base "items/item_frostbite.txt"
#base "items/item_glacier_boots.txt"
#base "items/item_blade_of_agility.txt"
#base "items/item_ogre_club.txt"
#base "items/item_staff_of_magi.txt"
#base "items/item_legionnaires_dualswords.txt"
#base "items/item_hurricane_blade.txt"
#base "items/item_orb_of_essence.txt"
#base "items/item_orb_of_vitality.txt"
#base "items/item_orb_of_haste.txt"
#base "items/item_orb_of_renewal.txt"
#base "items/item_titan_blade.txt"
#base "items/item_anvil.txt"
#base "items/item_headchopper.txt"
#base "items/item_conquerors_helm.txt"
#base "items/item_soothslayer.txt"
#base "items/item_gauntlet_of_might.txt"
#base "items/item_wrathbearers_robes.txt"

#base "items/item_arcane_accelerator.txt"
#base "items/item_leechblade.txt"
#base "items/item_lazarus_rags.txt"
#base "items/item_memento.txt"
#base "items/item_mantle_of_the_fallen.txt"
#base "items/item_behemoths_heart.txt"
#base "items/item_voltas_greathammer.txt"
#base "items/item_lucifers_cage.txt"
#base "items/item_executioners_blade.txt"
#base "items/item_lance_of_longinus.txt"
#base "items/item_focused_lens.txt"
#base "items/item_fortress_shield.txt"
#base "items/item_blood_gods_mask.txt"
#base "items/item_berserkers_cape.txt"
#base "items/item_blade_of_storm.txt"
#base "items/item_guillotine.txt"
#base "items/item_arcane_reaver.txt"
#base "items/item_flashback.txt"
#base "items/item_gauntlet_of_the_void.txt"
#base "items/item_warp_staff.txt"
// #base "items/item_emission.txt"
#base "items/item_thanatos.txt"
#base "items/item_trebuchet.txt"

#base "items/item_potion_of_recovery.txt"
#base "items/item_potion_of_essence.txt"
#base "items/item_dust_of_stasis.txt"
#base "items/item_creed_of_knowledge.txt"
#base "items/item_tome_of_immense_knowledge.txt"
#base "items/item_vaudevilles_mystery_box.txt"

#base "items/item_shadow_blade.txt"
#base "items/item_dark_wand.txt"
#base "items/item_war_drum.txt"
#base "items/item_phantom_staff.txt"
#base "items/item_ghost_saber.txt"
//#base "items/item_wabbajack.txt"
#base "items/item_ruby_ring.txt"
#base "items/item_barrier_leaves.txt"
#base "items/item_father_pipe.txt"
#base "items/item_galactic_hammer.txt"
#base "items/item_rising_salt.txt"
#base "items/item_ogre_seal_totem.txt"
#base "items/item_iron_rose.txt"
#base "items/item_kitteh_amulet.txt"
#base "items/item_lightningbottle.txt"
// #base "items/item_hawks_feather.txt"
#base "items/item_iron_rod.txt"
#base "items/item_visionarys_cutlass.txt"

#base "items/item_echoing_tambourine.txt"
#base "items/item_mighty_timpani.txt"
#base "items/item_inspiring_bongos.txt"

#base "items/item_frostfire_brand.txt"
#base "items/item_cloak_of_the_hunter.txt"
#base "items/item_winters_breath.txt"
#base "items/item_blade_of_dominion.txt"

#base "items/item_essence_piercer.txt"
#base "items/item_penumbra.txt"
#base "items/item_royal_guardian.txt"
#base "items/item_valiant_locket.txt"
#base "items/item_rapture.txt"
#base "items/item_antique_battlestaff.txt"

#base "items/item_keshas_booze_barrel.txt"
#base "items/item_presence_booster.txt"
#base "items/item_lifeweavers_clockwork.txt"
#base "items/item_lucys_ring.txt"
#base "items/item_boomstick.txt"
#base "items/item_ferrum_ascensus.txt"

#base "items/item_illusionists_charm.txt"
#base "items/item_tricksters_blade.txt"
#base "items/item_mirrors_edge.txt"

#base "items/item_protection_sphere.txt"
#base "items/item_ward_of_life.txt"

#base "items/item_spellslayers_dirk.txt"
#base "items/item_borealis_cloak.txt"
#base "items/item_armor_of_invasion.txt"
#base "items/item_trinity.txt"
#base "items/item_death_sentence.txt"

//Meepo Runes for ult
#base "items/item_meepo_rune_dd.txt"
#base "items/item_meepo_rune_regen.txt"
#base "items/item_meepo_rune_arcane.txt"
#base "items/item_meepo_rune_bounty.txt"
#base "items/item_meepo_rune_invis.txt"
#base "items/item_meepo_rune_illusion.txt"
#base "items/item_meepo_rune_haste.txt"
#base "items/item_meepo_rune_reduc.txt"

#base "items/item_tempest_staff.txt"

// Next ID is 7110

"DOTAAbilities"
{
	//=================================================================================================================
	// Holdout Tombstone
	//=================================================================================================================
	"item_tombstone"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"AbilityName"					"item_tombstone"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_NO_TARGET | DOTA_ABILITY_BEHAVIOR_CHANNELLED | DOTA_ABILITY_BEHAVIOR_DONT_RESUME_ATTACK"
		"Model"							"models/props_gameplay/tombstoneb01.vmdl"
		"PingOverrideText"				"DOTA_Chat_Tombstone_Pinged"
		"precache"
		{
			"particle_folder" "particles/units/heroes/hero_morphling"
		}

		
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"150"
		"AbilityCastPoint"				"0.0"
		"AbilityChannelTime"			"7.0"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"99999"
		"ItemPurchasable"				"0"
		"ItemShopTags"					"consumable"
		"ItemQuality"					"consumable"
		"ItemStackable"					"1"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE"
		"ItemPermanent"					"0"
		"ItemInitialCharges"			"1"
		"ItemCastOnPickup"				"1"
		"ItemKillable"					"0"

	}
	"item_recipe_force_boots"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3012"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"BaseClass"						"item_recipe_arcane_boots"
		"Model"							"models/props_gameplay/recipe.mdl"
		"AbilityTextureName"			"item_recipe"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"1200"	
		"ItemShopTags"					""
		
		// Recipe
		//-------------------------------------------------------------------------------------------------------------
		"ItemRecipe"					"1"
		"ItemResult"					"item_force_boots"
		"ItemRequirements"
		{
			"01"						"item_elven_boots;item_gauntlet_of_alacrity"
		}
	}
	//=================================================================================================================
	// Force Boots
	//=================================================================================================================
	"item_force_boots"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"3013"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_NO_TARGET"
	
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"730"
		"ItemShopTags"					"attack_speed;move_speed;int;agi;str;hard_to_tag"
		"ItemQuality"					"common"
		
		"ItemAliases"					"force boots"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_SPECTATORS"
		"ItemPurchasable"				"1"
		"AbilityCooldown"				"7.0"
		"AbilityTextureName"			"item_phase_boots"
		
		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_movement_speed"  "18"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_str"				"10"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_agi"				"10"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_int"				"10"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"bonus_attack_speed"	"30"
			}
			"06"
			{
				"var_type"				"FIELD_INTEGER"
				"push_length"			"800"
			}
		}
	}
	//=================================================================================================================
	// Force Boots
	//=================================================================================================================
	"item_relic_handler"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"						"ability_datadriven"
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_IMMEDIATE | DOTA_ABILITY_BEHAVIOR_NO_TARGET"
	
		"ItemPurchasable"				"0"
		"AbilityCooldown"				"7.0"
		"AbilityTextureName"			"custom/relic"
	}
	//=================================================================================================================
	// Observer Wards
	//=================================================================================================================
	"item_ward_observer"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"ID"							"42"														// unique ID number for this item.  Do not change this once established or it will invalidate collected stats.
		"AbilityBehavior"				"DOTA_ABILITY_BEHAVIOR_POINT | DOTA_ABILITY_BEHAVIOR_AOE | DOTA_ABILITY_BEHAVIOR_OPTIONAL_UNIT_TARGET"
		"AbilityUnitTargetTeam"			"DOTA_UNIT_TARGET_TEAM_FRIENDLY"
		"AbilityUnitTargetType"			"DOTA_UNIT_TARGET_HERO"
		"AbilityUnitTargetFlags"		"DOTA_UNIT_TARGET_FLAG_NOT_CREEP_HERO"
		"Model"							"models/props_gameplay/observer_ward_bundle.vmdl"
		
		
		// Stats
		//-------------------------------------------------------------------------------------------------------------
		"AbilityCastRange"				"500"
		"AbilityCastPoint"				"0.0"
		"AbilityCooldown"				"1.0"
		
		// Item Info
		//-------------------------------------------------------------------------------------------------------------
		"ItemCost"						"80"
		"ItemShopTags"					"consumable"
		"ItemQuality"					"consumable"
		"ItemAliases"					"observer ward"
		"ItemStackable"					"1"
		"ItemShareability"				"ITEM_FULLY_SHAREABLE_STACKING"
		"ItemPermanent"					"0"
		"ItemInitialCharges"			"1"
		"ItemStockMax"					"4"
		"ItemStockInitial"				"2"
		"ItemStockTime"					"150.0"
		"ItemDeclarations"				"DECLARE_PURCHASES_TO_TEAMMATES"
		"ItemSupport"					"1"
		"IsTempestDoubleClonable"		"0"
		"ShouldBeInitiallySuggested"	"1"

		// Special	
		//-------------------------------------------------------------------------------------------------------------
		"AbilitySpecial"
		{
			"01"
			{
				"var_type"				"FIELD_INTEGER"
				"lifetime"				"360"
			}
			"02"
			{
				"var_type"				"FIELD_INTEGER"
				"vision_range"			"1600"
			}
			"03"
			{
				"var_type"				"FIELD_INTEGER"
				"health"				"200"
			}
			"04"
			{
				"var_type"				"FIELD_INTEGER"
				"duration_minutes_tooltip"				"6"
			}
			"05"
			{
				"var_type"				"FIELD_INTEGER"
				"tooltip_range"			"500"
			}
		}
	}
}"Relics"
{
	// COMMON RELICS
	"relic_banshee_tear"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_beast_fang"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_blood_crystal"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_dead_mans_blood"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_giants_toenail"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_hammerhead"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_pure_heart"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_seraphims_feather"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_silver_arrow"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_time_shard"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_unicorn_horn"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_breath_of_life"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_tanned_hide"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_arcane_threads"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_fog_lace"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_worn_spear"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_broken_mirror"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_mystic_gauntlet"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_power_glove"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_dragon_scales"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_ifrit_tear"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_scythegeist"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_stone_fist"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_tiger_blood"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_rich_essence"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_ethereal_gown"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_ectoplasm"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_bowl_of_chi"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_stone_calendar"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_drop_of_all"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_scrap_of_paper"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_dry_quill"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_battle_brew"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_pale_blood"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_paupers_finger"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_bloody_silk"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_mimic_chest"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_grey_fox_tunic"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_icon_of_envy"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_icon_of_wrath"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_icon_of_gluttony"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_mask_of_janus"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_false_idol"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_eye_of_the_oligarch"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"1"
	}
	"relic_slayers_skinner"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_perpetuum_mobile"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_vampire_eye"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_hawks_eye"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	"relic_greased_wheel"
	{
		"Rarity"			"RARITY_COMMON"
		"Cursed"			"0"
	}
	//"relic_ring_of_kin"
	//{
	//	"Rarity"			"RARITY_COMMON"
	//	"Cursed"			"0"
	//}
	
	
	/////////////////////////////////////////////////////////
	// UNCOMMON RELICS
	/////////////////////////////////////////////////////////
	"relic_angelic_water"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_horn_of_bannermen"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_helm_of_justice"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_crown_of_power"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_spinning_top"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_barbedbell"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_katana"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_champions_spearhead"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_old_sickle"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_draculine_tooth"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_haste_stone"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_amplifier"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}	
	"relic_heavy_rock"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_leather_buckler"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_weighted_gloves"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_feathered_boots"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_dull_razor"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_torn_muscle"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_pickled_brain"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_ornate_timepiece"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_molten_crystal"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_frozen_crystal"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_nautical_scale"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_mystical_coral"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_prismarine_blade"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_cold_heart"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_ofuda"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_rex_dominatur"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_sharp_machete"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_gazaer_tirdh"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_chainsword"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_silent_cloak"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_plasma_ball"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_hestias_hearth"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	"relic_icon_of_sloth"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_icon_of_lust"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_hungry_blade"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_hushpuppy"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_first_sin"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_unstoppable_force"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_delirious_cowl"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_whale_heart"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_demon_wings"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"1"
	}
	"relic_lunar_needle"
	{
		"Rarity"			"RARITY_UNCOMMON"
		"Cursed"			"0"
	}
	/////////////////////////////////////////////////////////
	// RARE RELICS
	/////////////////////////////////////////////////////////
	"relic_stick"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_aghanims_amulet"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_limit_breaker"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_mysterious_hourglass"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_rage_enhancer"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_rapid_totem"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_rolling_boulder"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_rusty_dumbbell"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_sacrificial_dagger"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_oath_of_purity"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_grain_of_sand"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_memory_alloy"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_a_nickel"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_galactic_synapse"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_champions_belt"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_soldiers_banner"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_longbow"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_pocket_sand"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_eldritch_rune"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_eagles_beak"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_deathrow"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_hylophage"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_chlorophyl_cloak"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_anaerobic_ring"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_spirit_painting"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_kashas_wheelbarrow"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_shopkeepers_heart"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_antique_pouch"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_silver_knife"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_reinforced_bar"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_drycicle"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_red_pill"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"0"
	}
	"relic_adamantium_ingot"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_boiling_blood"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_cursed_dice"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_glass_flower"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_loaded_coin"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_mysterious_stone"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_phoenix_down"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_symbiote"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_the_pact"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_titans_jawbone"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_giants_cudgel"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_crystal_skull"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_unchanging_globe"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_immaculate_staff"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_icon_of_pride"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_icon_of_greed"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_heavy_tome"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_thorned_bandages"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_archmages_reliquary"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_crimson_gauntlet"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	"relic_torn_prayer_card"
	{
		"Rarity"			"RARITY_RARE"
		"Cursed"			"1"
	}
	/////////////////////////////////////////////////////////
	// LEGENDARY RELICS
	/////////////////////////////////////////////////////////
	"relic_red_key"
	{
		"Rarity"			"RARITY_LEGENDARY"
		"Cursed"			"1"
	}
	"relic_forbidden_contract"
	{
		"Rarity"			"RARITY_LEGENDARY"
		"Cursed"			"1"
	}
	"relic_inversion_stone"
	{
		"Rarity"			"RARITY_LEGENDARY"
		"Cursed"			"0"
	}
	"relic_charons_obol"
	{
		"Rarity"			"RARITY_LEGENDARY"
		"Cursed"			"0"
	}
	"relic_rotting_flesh"
	{
		"Rarity"			"RARITY_LEGENDARY"
		"Cursed"			"0"
	}
	"relic_unbridled_power"
	{
		"Rarity"			"RARITY_LEGENDARY"
		"Cursed"			"1"
	}
	//"relic_vertex_shard"
	//{
	//	"Rarity"			"RARITY_LEGENDARY"
	//	"Cursed"			"0"
	//}
	//"relic_crystallized_though"
	//{
	//	"Rarity"			"RARITY_LEGENDARY"
	//	"Cursed"			"0"
	//}
	/////////////////////////////////////////////////////////
	// EVENT RELICS
	/////////////////////////////////////////////////////////
	"relic_ritual_candle"
	{
		"Rarity"			"RARITY_EVENT"
		"Cursed"			"0"
	}
}"DOTAUnits"
{
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss1"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_kobold/kobold_c/n_creep_kobold_frost.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.2"
		"IsAncient"					"0"
		"IsUndead"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss1.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/creeps/neutral_creeps/n_creep_kobold/kobold_c/n_creep_kobold_frost.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss1a_vanish"			// Ability 1
		"Ability2"					"boss1a_blink_strike"			// Ability 2
		"Ability3"					"boss1a_rushdown"			// Ability 3
		"Ability4"					""			// Ability 4
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.	
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"270"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
		}
	}
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss_satyr_champion"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_satyr_a/n_creep_satyr_a.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.2"
		"IsAncient"					"0"
		"IsDemon"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_satyr_champion.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/creeps/neutral_creeps/n_creep_satyr_a/n_creep_satyr_a.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"satyr_champion_shockwave"
		"Ability2"					"satyr_champion_mana_combustion"
		"Ability3"					"satyr_champion_occult_aura"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.	
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"225"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2250"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
		}
	}
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss_satyr_mage"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_satyr_b/n_creep_satyr_b.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.2"
		"IsAncient"					"0"
		"IsDemon"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_satyr_mage.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/creeps/neutral_creeps/n_creep_satyr_b/n_creep_satyr_b.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"satyr_mage_lightning"
		"Ability2"					"satyr_mage_revitalize"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.	
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"180"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1250"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"200"		// Base mana.
		"StatusManaRegen"			"1.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
		}
	}
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss_satyr_follower"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_satyr_c/n_creep_satyr_c.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.2"
		"IsAncient"					"0"
		"IsDemon"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_generic.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/creeps/neutral_creeps/n_creep_satyr_c/n_creep_satyr_c.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.	
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"225"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"800"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
		}
	}
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss_archangel"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/skywrath_mage/skywrath_mage.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1"
		"IsAncient"					"0"
		"IsCelestial"				"1"
		"vscripts"					"ai/ai_archangel.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/heroes/skywrath_mage/skywrath_mage.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"archangel_imperium_vici"
		"Ability2"					"archangel_fraternitas"
		"Ability3"					"archangel_smite_the_earth"
		"Ability4"					"archangel_holy_bolt"
		"Ability5"					"archangel_divine_judgement"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"40"
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"20"		// Damage range min.
		"AttackDamageMax"			"35"		// Damage range max.	
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"900"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_skywrath_mage/skywrath_mage_base_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"600"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"225"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1500"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			
			"AttachWearables" // Default npc_dota_hero_omniknight
			{
				"1" { "ItemDef" "5832" } 
				"2" { "ItemDef" "5859" } 
				"3" { "ItemDef" "5870" } 
				"4" { "ItemDef" "5871" } 
				"5" { "ItemDef" "6128" } //FX
				"5" { "ItemDef" "4673" } //FX
			}
		}
	}
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss_fallen_one"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/vengeful/vengeful.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.2"
		"IsAncient"					"0"
		"IsDemon"					"1"
		"IsCelestial"				"1"
		"vscripts"					"ai/ai_fallen_one.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/heroes/vengeful/vengeful.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"fallen_one_aura_of_war"
		"Ability2"					"fallen_one_sinister_bolt"
		"Ability3"					"fallen_one_debilitate"
		"Ability4"					"fallen_one_fade_out"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"15"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.	
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"225"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1800"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			
			"AttachWearables" // Default npc_dota_hero_omniknight
			{
				"1" { "ItemDef" "7799" } 
				"2" { "ItemDef" "5344" } 
				"3" { "ItemDef" "8617" } 
				"4" { "ItemDef" "8619" } 
			}
		}
	}
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss_wolf"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_worg_small/n_creep_worg_small.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.2"
		"IsAncient"					"0"
		"IsUndead"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_wolf.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/creeps/neutral_creeps/n_creep_worg_small/n_creep_worg_small.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_wolves_critical"			// Ability 1
		"Ability2"					"boss_wolves_leap"			// Ability 2
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.	
		"AttackRate"				"4.5"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"250"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1500"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"200"			// Base mana.
		"StatusManaRegen"			"5"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
		}
	}
	//=================================================================================
	// Creature: Boss 1
	//=================================================================================
	"npc_dota_boss_alpha_wolf"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_worg_large/n_creep_worg_large.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.35"
		"IsAncient"					"0"
		"IsWild"					"1"
		"vscripts"					"ai/ai_alpha_wolf.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/creeps/neutral_creeps/n_creep_worg_large/n_creep_worg_large.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_wolves_critical"			// Ability 1
		"Ability2"					"boss_wolves_leap"			// Ability 2
		"Ability3"					"boss_alpha_wolf_howl"
		"Ability4"					"boss_alpha_wolf_aura"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"3"			// Physical protection.
		"MagicalResistance"			"20"
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"100"		// Damage range max.	
		"AttackRate"				"4.5"		// Speed of attack.
		"AttackAnimationPoint"		"0.38"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"250"		// Speed.
		"MovementTurnRate"			"0.25"
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"300"			// Base mana.
		"StatusManaRegen"			"5"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
		}
	}
	//=================================================================================
	// Creature: "Mini" Roshan
	//=================================================================================
	"npc_dota_boss10"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/creeps/roshan/roshan.vmdl"	// Model.
		"SoundSet"					"Roshan"					// Name of sound set.
		"ModelScale"				"1"
		"Level"						"10"
		"IsAncient"					"0"
		"IsDemon"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss10.lua"
		
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"creature_fire_breath"	// Ability 1.
		"Ability2"					"roshan_spell_block"			// Ability 2.
		"Ability3"					"creature_slithereen_crush"			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"10"		// Magical protection (percentage).
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"35"		// Damage range min.
		"AttackDamageMax"			"50"		// Damage range max.
		"AttackRate"				"2.7"			// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"256"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/base_attacks/ranged_goodguy.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"1000"		// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"60"
		"HealthBarOffset"			"600"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"270"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"150"		// Health regeneration rate.
		"StatusMana"				"300"		// Base mana.
		"StatusManaRegen"			"5"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			"DefaultState"				"Invade"
	
			"HPGain"					"14000"
			"DamageGain"				"200"
			"ArmorGain"					"5"
			"MagicResistGain"			"1"
			"MoveSpeedGain"				"10"
			"BountyGain"				"5000"
			"XPGain"					"5000"
		}
		"NOSTUNRESIST"			"90.0"
	}	
	//=================================================================================
	// Creature: Boss 11
	//=================================================================================
	"npc_dota_boss11"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/leshrac/leshrac.vmdl"	// Model.
		"ModelScale"				"1.5"
		"Level"						"11"
		"IsAncient"					"0"
		"IsDemon"					"1"
		"vscripts"					"ai/ai_boss11.lua"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_leshrac_erupt"			// Ability 1.
		"Ability2"					"creature_lightning_storm"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"50"		// Damage range min.
		"AttackDamageMax"			"60"		// Damage range max.
		"AttackRate"				"2.7"			// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_leshrac/leshrac_base_attack.vpcf"						// Particle system model for projectile.
		"ProjectileSpeed"			"800"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"60"
		"HealthBarOffset"			"570"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"	
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"180"		// Speed
		"MovementTurnRate"			"0.8"		// Turning rate.
	
		
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_leshrac.vsndevts"
		"VoiceFile"					"soundevents/voscripts/game_sounds_vo_leshrac.vsndevts"
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1500"		// Base health.
		"StatusHealthRegen"			"60"		// Health regeneration rate.
		"StatusMana"				"500"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			"DefaultState"				"Invade"
			
			"HPGain"					"15000"
			"DamageGain"				"250"
			"ArmorGain"					"5"
			"MagicResistGain"			"1"
			"MoveSpeedGain"				"10"
			"BountyGain"				"6000"
			"XPGain"					"6000"
	
			"NOSTUNRESIST"			"60.0"
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "8111" }
				"Wearable2" { "ItemDef" "8110" }
				"Wearable3" { "ItemDef" "7448" }
				"Wearable4" { "ItemDef" "4992" }
			}
		}
	}
	//=================================================================================
	// BOSS SPLITTER
	//=================================================================================
	"npc_dota_boss12_golem"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/creeps/neutral_creeps/n_creep_golem_a/neutral_creep_golem_a.vmdl"	// Model.
		"ModelScale"				"1.8"
		"Level"						"12"
		"IsAncient"					"0"
		"IsWild"					"1"
		"vscripts"					"ai/ai_golem.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_golem_golem_leap"			// Ability 1.
		"Ability2"					"boss_golem_golem_smash"			// Ability 1.
		"Ability3"					"boss_golem_golem_toss"			// Ability 1.
		"Ability4"					"boss_golem_split"			// Ability 1.
		"Ability5"					"boss_golem_cracked_mass"	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"			// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"90"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"3"	
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"120"
		"HealthBarOffset"			"350"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"	
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"120"		// Speed
		"MovementTurnRate"			"0.2"		// Turning rate.
	
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_life_stealer.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_life_stealer.vsndevts"
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1.0"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			"DisableClumpingBehavior"	"1"
			"NOSTUNRESIST"			"60.0"
		}
	}
	//=================================================================================
	// BOSS SPLITTER
	//=================================================================================
	"npc_dota_boss12_shardling"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/creeps/neutral_creeps/n_creep_golem_b/n_creep_golem_b.vmdl"	// Model.
		"ModelScale"				"0.8"
		"Level"						"12"
		"IsAncient"					"0"
		"IsWild"					"1"
		"vscripts"					"ai/ai_generic.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					""			// Ability 1.
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"20"		// Damage range min.
		"AttackDamageMax"			"30"		// Damage range max.
		"AttackRate"				"3"	
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"120"
		"HealthBarOffset"			"350"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"	
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"75"		// Speed
		"MovementTurnRate"			"0.2"		// Turning rate.
	
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_life_stealer.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_life_stealer.vsndevts"
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"300"		// Base health.
		"StatusHealthRegen"			"1.0"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			"DisableClumpingBehavior"	"1"
			"NOSTUNRESIST"			"60.0"
		}
	}
	//=================================================================================
	//=================================================================================
	// Creature: Melee Ogres
	//=================================================================================
	"npc_dota_boss13"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_ogre_med/n_creep_ogre_med.vmdl"
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"SoundSet"					"n_creep_Melee"
		"Level"						"5"
		"ModelScale" 				"1.5"
		"IsAncient"			"0"
		"IsWild"					"1"
		"vscripts"					"ai/ai_generic.lua"
	
		// Abilities
		//----------------------------------------------------------------
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"10"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"65"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.
		"AttackRate"				"2.7"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"80"
		"HealthBarOffset"			"600"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"245"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1200"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
	
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"15000"
			"DamageGain"				"500"
			"ArmorGain"					"12.5"
			"MagicResistGain"			"10"
			"MoveSpeedGain"				"10"
			"BountyGain"				"6500"
			"XPGain"					"6500"
			"NOSTUNRESIST"			"50.0"
		}
	}	
	//=================================================================================
	// Creature: Ogre Magi
	//=================================================================================
	"npc_dota_boss14"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/ogre_1/small_ogre.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"14"
		"ModelScale" 				"1.25"
		"IsAncient"					"0"
		"IsWild"					"1"
		"IsDemon"					"1"
		"vscripts"					"ai/ai_boss14.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_ogre_magi_bloodlust"	// Ability 1
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"10"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"50"		// Damage range min.
		"AttackDamageMax"			"60"		// Damage range max.	
		"AttackRate"				"6"			// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"100"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"80"
		"HealthBarOffset"			"600"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"43"		// Gold earned min.
		"BountyGoldMax"				"61"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"245"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"1.0"		// Health regeneration rate.
		"StatusMana"				"450"		// Base mana.
		"StatusManaRegen"			"6.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_ogre_magi.vsndevts"
		"VoiceFile"					"soundevents/voscripts/game_sounds_vo_ogre_magi.vsndevts"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"			"Invade"
			"States"
			{
				"Invade"
				{
					"Name"			"Invade"
					"Aggression"	"100.0"
					"Avoidance"		"0.0"
					"Support"		"65.0"
				}
			}
			
			//Level Up Parameters
			//-----------------------------------------------------------------
			"HPGain"					"75"
			"DamageGain"				"5"
			"ArmorGain"					"0.25"
			"MagicResistGain"			"0.1"
			"MoveSpeedGain"				"1"
			"BountyGain"				"3"
			"XPGain"					"13"

			"NOSTUNRESIST"			"60.0"
		}
	}
	//=================================================================================
	// Creature: Ogre Tank
	//=================================================================================
	"npc_dota_boss15"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/ogre_1/large_ogre.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.6"
		"IsAncient"					"0"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss15"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_ogre_smash"			// Ability 1
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"10"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"65"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.	
		"AttackRate"				"4.5"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"80"
		"HealthBarOffset"			"400"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"250"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2500"		// Base health.
		"StatusHealthRegen"			"8"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"800"
			"DamageGain"				"30"
			"ArmorGain"					"1"
			"MagicResistGain"			"5"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"20"
			
			"DefaultState"				"Invade"
			
			"NOSTUNRESIST"			"90.0"
		}
	}
	//=================================================================================
	// Creature: Ogre Tank
	//=================================================================================
	"npc_dota_boss15_ns"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/ogre_1/large_ogre.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.6"
		"IsAncient"					"0"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		
		"vscripts"					"ai/ai_generic"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					""			// Ability 1
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"4"			// Physical protection.
		"MagicalResistance"			"35"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"65"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.	
		"AttackRate"				"2.4"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"80"
		"HealthBarOffset"			"400"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"110"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"8"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"800"
			"DamageGain"				"30"
			"ArmorGain"					"1"
			"MagicResistGain"			"5"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"20"
			
			"DefaultState"				"Invade"
			
			"NOSTUNRESIST"			"80.0"
		}
	}
	//=================================================================================
	// Creature: Ogre King
	//=================================================================================
	"npc_dota_boss16"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/ogre_1/boss_ogre.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"2.2"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss16"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_ogre_smash_king"			// Ability 1
		"Ability2"					"creature_summon_ogres"			// Ability 3
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"8"			// Physical protection.
		"MagicalResistance"			"35"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"150"		// Damage range max.	
		"AttackRate"				"6.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"250"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"100"
		"HealthBarOffset"			"550"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"275"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"100"			// Base mana.
		"StatusManaRegen"			"1.5"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"70.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"800"
			"DamageGain"				"30"
			"ArmorGain"					"1"
			"MagicResistGain"			"5"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"20"
			
			"DefaultState"				"Invade"
			
			"NOSTUNRESIST"			"60.0"
		}
	}
	//=================================================================================
	// Creature: King Treant
	//=================================================================================
	"npc_dota_boss18"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/treant_protector/treant_protector.vmdl"	// Model.
		"SoundSet"					""					// Name of sound set.
		"ModelScale"				"1.8"
		"Level"						"4"
		"IsAncient"			"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_treant"
			"model"				"models/heroes/treant_protector/treant_protector.vmdl"
		}
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss18"
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_living_armor"	// Ability 1.
		"Ability2"					"creature_summon_tree"			// Ability 3.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection (percentage).
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"160"		// Damage range min.1
		"AttackDamageMax"			"240"		// Damage range max.	
		"AttackRate"				"6.0"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"300"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/base_attacks/ranged_goodguy.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"1000"		// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"120"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"500"		// Base mana.
		"StatusManaRegen"			"20"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_treant.vsndevts"
		"VoiceFile"					"soundevents/voscripts/game_sounds_vo_treant.vsndevts"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"75.0"
				}
			}
	
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"1" { "ItemDef" "7060" } 
				"2" { "ItemDef" "7301" } 
				"3" { "ItemDef" "8181" } 
				"4" { "ItemDef" "7300" } 
			}
			"NOSTUNRESIST"			"80.0"
		}
	}	
	//=================================================================================
	// Creature: Forest Fucker
	//=================================================================================
	"npc_dota_boss19"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/furion/furion.vmdl"	// Model.
		"Level"						"1"
		"ModelScale" 				"0.5"
		"IsAncient"			"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsWild"					"1"
		"IsCelestial"				"1"
		"vscripts"					"ai/ai_boss19"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"creature_summon_tree"			// Ability 1.
		"Ability2"					"creature_summon_tree2"		// Ability 2.
		"Ability3"					"boss_living_armor"			// Ability 3.
		"Ability4"					"furion_sprout"			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"35"			// Physical protection.
		"MagicalResistance"			"90"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"100"		// Damage range max.	
		"AttackRate"				"6.0"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"									// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"16000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_furion/furion_base_attack.vpcf"					// Particle system model for projectile.
		"ProjectileSpeed"			"1125"									// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"70"
		"HealthBarOffset"			"160"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"	
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"450"		// Speed
		"MovementTurnRate"			"0.18"		// Turning rate.
		
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_furion.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_furion.vsndevts"
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"250"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2500"		// Base mana.
		"StatusManaRegen"			"50.0"		// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Precache
		//-------------------------------------------------------------------------------------------------------------
		"precache"
		{
			"model"			"models/heroes/furion/treant.vmdl"
		}
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"DisableClumpingBehavior"	"1"
			
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"100.0"
					"Support"			"50.0"
					"RoamDistance" 		"1500.0"
				}
			}
	
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "29" }
				"Wearable2" { "ItemDef" "30" }
				"Wearable3" { "ItemDef" "31" }
				"Wearable4" { "ItemDef" "32" }
				"Wearable5" { "ItemDef" "33" }
			}
			"NOSTUNRESIST"			"80.0"
		}
	}
	//=================================================================================	
	// Creature: Boss 2
	//=================================================================================
	"npc_dota_boss2"	
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_gnoll/n_creep_gnoll_frost.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Ranged"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"2"
		"ModelScale" 				"1.3"
		"IsWild"					"1"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_boss2.lua"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_creeps.vsndevts"
			"model"	"models/creeps/neutral_creeps/n_creep_kobold/kobold_c/n_creep_kobold_frost.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss1b_leap"			// Ability 1
		"Ability2"					"boss1b_spear_pierce"			// Ability 2
		"Ability3"					"boss1b_spear_pin"			// Ability 3
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"5"		// Speed of attack.
		"AttackAnimationPoint"		"3"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"800"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/neutral_fx/gnoll_base_attack.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"1200"		// Speed of projectile.		     
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"270"		// Speed.			
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1500"		// Base health.
		"StatusHealthRegen"			"5"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"2400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
	
			//Level Up
			"HPGain"					"500"
			"DamageGain"				"50"
			"ArmorGain"					"1"
			"MagicResistGain"			"1"
			"MoveSpeedGain"				"1"
			"BountyGain"				"1000"
			"XPGain"					"1000"
			"NOSTUNRESIST"			"10.0"
		}
	}
	"npc_dota_boss21"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/axe/axe.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.4"
		"IsAncient"					"0"
		"IsWild"					"1"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"vscripts"				"ai/ai_boss21"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss14_bloodlust"			// Ability 1
		"Ability2"					"boss14_execute"			// Ability 2
		"Ability3"					"boss14_quake"			// Ability 3
		"Ability4"					"boss14_whirlwind"			// Ability 4
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"15"			// Physical protection.
		"MagicalResistance"			"35"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"125"	// Damage range min.
		"AttackDamageMax"			"150"		// Damage range max.
		"AttackRate"				"5"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"256"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"150"		// Speed.
		"MovementTurnRate"			"0.15"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"1000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "4432" }
				"Wearable2" { "ItemDef" "4526" }
				"Wearable3" { "ItemDef" "4162" }
				"Wearable4" { "ItemDef" "4494" }
				"Wearable5" { "ItemDef" "6395" }
			}
			
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss22"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/death_prophet/death_prophet.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"22"
		"ModelScale" 				"1.5"
		"IsAncient"			"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"IsCelestial"				"1"
		"vscripts"					"ai/ai_boss22.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss15_thread_of_life"	// Ability 1.
		"Ability2"					"boss15_peel_the_veil"
		"Ability3"					"boss15_exorcise"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"5"			// Physical protection.
		"MagicalResistance"			"15"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"100"	// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"1.8"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"1000"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_leshrac/leshrac_base_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"1600"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"100"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3750"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"AttachWearables"
				{
					"Wearable1" { "ItemDef" "9731" }
					"Wearable2" { "ItemDef" "6694" }
					"Wearable3" { "ItemDef" "6048" }
					"Wearable4" { "ItemDef" "7206" }
				}
			}
			"DefaultState"				"Invade"
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
	
			"NOSTUNRESIST"			"60.0"
			"AttachWearables"
			{
			"Wearable1" { "ItemDef" "7086" }
			"Wearable2" { "ItemDef" "5600" }
			"Wearable3" { "ItemDef" "5091" }
			"Wearable4" { "ItemDef" "4191" }
			}
		}
	}
	"npc_dota_boss22b"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_ghost_b/n_creep_ghost_frost.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"22"
		"ModelScale" 				"1"
		"IsAncient"			"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_generic.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss15_thread_of_life"	// Ability 1.
		"Ability2"					"boss15_peel_the_veil"
		"Ability3"					"boss15_exorcise"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"50"		// Damage range min.
		"AttackDamageMax"			"50"		// Damage range max.
		"AttackRate"				"2.8"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"256"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"1600"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
		"RingRadius"				"40"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"280"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"100"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
	
			"NOSTUNRESIST"			"0.0"
		}
	}
	"npc_dota_boss_phantom"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_ghost_a/n_creep_ghost_a.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"22"
		"ModelScale" 				"1"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_phantom.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_phantom_cold_touch"	// Ability 1.
		"Ability2"					"boss_phantom_banshee_wail"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"75"		// Damage range max.
		"AttackRate"				"2.8"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"1600"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
		"RingRadius"				"40"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"220"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1800"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
	
			"NOSTUNRESIST"			"0.0"
		}
	}
	"npc_dota_boss_flesh_behemoth"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/items/undying/flesh_golem/corrupted_scourge_corpse_hive/corrupted_scourge_corpse_hive.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"22"
		"ModelScale" 				"1.3"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_flesh_behemoth.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_flesh_behemoth_meat_pile"	// Ability 1.
		"Ability2"					"boss_flesh_behemoth_decay"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"150"		// Damage range max.
		"AttackRate"				"5"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"256"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"1600"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
		"RingRadius"				"40"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"280"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
	
			"NOSTUNRESIST"			"0.0"
		}
	}
	"npc_dota_boss_vile_archmage"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/pugna/pugna.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"22"
		"ModelScale" 				"1"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"IsDemon"					"1"
		"vscripts"					"ai/ai_vile_archmage.lua"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"vile_archmage_vile_archon"
		"Ability2"					"vile_archmage_unstable_wand"
		
		"Ability3"					"vile_archmage_vile_explosion"	
		"Ability4"					"vile_archmage_ethereal_blow"
		"Ability5"					"vile_archmage_runic_coil"	
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"			// Physical protection.
		"MagicalResistance"			"33"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.
		"AttackRate"				"3.2"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_pugna/pugna_base_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
		"RingRadius"				"40"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"280"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			"AttachWearables" // Default npc_dota_hero_omniknight
			{
				"1" { "ItemDef" "5916" } 
				"2" { "ItemDef" "5994" } 
				"3" { "ItemDef" "5914" } 
				"4" { "ItemDef" "6138" } 
				"5" { "ItemDef" "5912" } //FX
				"5" { "ItemDef" "6000" } //FX
			}
			"NOSTUNRESIST"			"0.0"
		}
	}
	"npc_dota_boss23"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_black_dragon/n_creep_black_dragon.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Ranged"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"22"
		"ModelScale" 				"1.8"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsWild"					"1"
		"vscripts"					"ai/ai_dragon"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss16_the_flock"			// Ability 1.
		"Ability2"					"boss16_conflagration"
		"Ability3"					"boss16_dragonfire"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"6"			// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"75"	// Damage range min.
		"AttackDamageMax"			"90"		// Damage range max.
		"AttackRate"				"7.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/neutral_fx/black_dragon_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"1400"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed"				"350"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"400"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss23_m"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_black_drake/n_creep_black_drake.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Ranged"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"23"
		"ModelScale" 				"1.4"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		
		"vscripts"					"ai/ai_drake"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss16m_heal_aura"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"16"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"90"	// Damage range min.
		"AttackDamageMax"			"100"		// Damage range max.
		"AttackRate"				"5"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"700"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/neutral_fx/black_dragon_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"65"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed"				"320"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1500"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"400"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"20000"
			"DamageGain"				"3000"
			"ArmorGain"					"30"
			"MagicResistGain"			"5"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss24_archer"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/clinkz/clinkz.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Ranged"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"24"
		"ModelScale" 				"1.35"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_boss24_archer"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_reaper_necrotic_hail"			// Ability 1.
		"Ability2"					"boss_reaper_reposition"
		"Ability3"					"boss_reaper_multi_shot"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"70"		// Damage range min.
		"AttackDamageMax"			"90"		// Damage range max.
		"AttackRate"				"2.1"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"750"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_clinkz/clinkz_searing_arrow.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"1400"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"80"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"180"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1200"		// Base health.
		"StatusHealthRegen"			"4"			// Health regeneration rate.
		"StatusMana"				"400"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"10.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "8294" }
				"Wearable2" { "ItemDef" "4973" }
				"Wearable3" { "ItemDef" "7135" }
				"Wearable4" { "ItemDef" "7348" }
				"Wearable5" { "ItemDef" "4758" }
				"Wearable6" { "ItemDef" "523" }
			}
		}
	}
	"npc_dota_boss24_stomper"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_troll_skeleton/n_creep_skeleton_melee.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"24"
		"ModelScale" 				"2.1"
		"IsAncient"			"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_boss24_stomper"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_vanguard_bone_wall"			// Ability 1.
		"Ability2"					"boss_vanguard_shin_shatter"
		"Ability3"					"boss_vanguard_back_breaker"
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"8"			// Physical protection.
		"MagicalResistance"			"16"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"50"		// Damage range min.
		"AttackDamageMax"			"75"		// Damage range max.
		"AttackRate"				"6"			// Speed of attack.
		"AttackAnimationPoint"		"1.5"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"256"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		  	   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"80"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"200"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"400"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_boss25"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/wraith_king/wraith_frost.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"30"
		"ModelScale" 				"1.5"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_boss25"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_wk_vampirism"				// Ability 1.
		"Ability2"					"boss_wk_mortal_strike"			// Ability 1.
		"Ability3"					"boss_wk_scourge_blast"			// Ability 1.
		"Ability4"					"boss_wk_culling_blow"			// Ability 1.
		"Ability5"					"boss_wk_reincarnation"
		"Ability6"					"boss_wk_hellfire_fury"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"125"		// Damage range max.
		"AttackRate"				"3.6"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"256"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.			
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"500"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"400"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2750"		// Base health.
		"StatusHealthRegen"			"8"			// Health regeneration rate.
		"StatusMana"				"1000"			// Base mana.
		"StatusManaRegen"			"15"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
			
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss26"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/ursa/ursa.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"40"
		"ModelScale" 				"1.2"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsWild"					"1"
		"vscripts"					"ai/ai_bear"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss26_smash"			// Ability 1.
		"Ability2"					"boss26_rend"			// Ability 1.
		"Ability3"					"boss26_ravage"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"4"			// Physical protection.
		"MagicalResistance"			"20"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"4"		// Speed of attack.
		"AttackAnimationPoint"		"1.6"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"220"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1200"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"5000"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "5665" }
				"Wearable2" { "ItemDef" "5666" }
				"Wearable3" { "ItemDef" "5667" }
				"Wearable4" { "ItemDef" "5668" }
			}
		
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss26_mini"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/ursa/ursa.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"38"
		"ModelScale" 				"0.8"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		
		"vscripts"					"ai/ai_minibear"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss26b_ankle_biter"			// Ability 1.
		"Ability2"					"boss26b_wound"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"75"		// Damage range min.
		"AttackDamageMax"			"100"		// Damage range max.
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"1.6"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"80"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"280"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"750"		// Base health.
		"StatusHealthRegen"			"8"			// Health regeneration rate.
		"StatusMana"				"5000"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "5665" }
				"Wearable2" { "ItemDef" "5666" }
			}
	
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss27"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/beastmaster/beastmaster.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"60"
		"ModelScale" 				"1.4"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss27"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss27_kill_them"			// Ability 1.
		"Ability2"					"boss27_destroy"			// Ability 1.
		"Ability3"					"boss27_protect_me"			// Ability 1.
		"Ability4"					"boss27_ursa_giant"			// Ability 1.
		"Ability5"					"boss27_ursa_warrior"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"16"			// Physical protection.
		"MagicalResistance"			"20"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"200"		// Damage range max.
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"1.8"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"320"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"8"			// Health regeneration rate.
		"StatusMana"				"5000"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"75.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"Wearable2" { "ItemDef" "4292" }
				"Wearable3" { "ItemDef" "4293" }
				"Wearable4" { "ItemDef" "4295" }
				"Wearable5" { "ItemDef" "5794" }
			}
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss28"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/drow/drow_base.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"65"
		"ModelScale" 				"2"
		"IsWild"					"1"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss28"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"             "6"
		"Ability1"					"boss18b_trample"			// Ability 1.
		"Ability2"					"boss18b_swipe"			// Ability 1.
		"Ability3"					"boss18b_frenzy"			// Ability 1.
		"Ability4"					"boss18b_elusive_huntress"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"-4"			// Physical protection.
		"MagicalResistance"			"33"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"133"		// Damage range max.
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"300"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"275"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"5000"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
					"RoamDistance" 		"1500.0"
				}
			}
	
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "5665" }
				"Wearable2" { "ItemDef" "6552" }
				"Wearable3" { "ItemDef" "6553" }
				"Wearable4" { "ItemDef" "6554" }
				"Wearable5" { "ItemDef" "5794" }
				"Wearable6" { "ItemDef" "6555" }
			}
		
			"NOSTUNRESIST"			"60.0"
		}
	}
	"npc_dota_boss30"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/nerubian_assassin/nerubian_assassin.mdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"70"
		"ModelScale" 				"1.5"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss30"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss19_burrow"			
		"Ability2"					"boss19_cracked_ground"
		"Ability3"					"boss19_chasm"
		"Ability4"					"boss19_the_swarm"
		"Ability5"					"boss19_shield"
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"			// Physical protection.
		"MagicalResistance"			"20"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"1.8"		// Speed of attack.
		"AttackAnimationPoint"		"3"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"200"		// Speed.
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"5000"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			"DefaultState"				"Invade"
			
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "8114" }
				"Wearable2" { "ItemDef" "8115" }
				"Wearable3" { "ItemDef" "8116" }
				"Wearable4" { "ItemDef" "8117" }
			}
		}
	}
	"npc_dota_boss_warlock_demon"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/items/warlock/golem/tevent_2_gatekeeper_golem/tevent_2_gatekeeper_golem.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"Hero_WarlockGolem"			// Name of sound set.
		"IdleSoundLoop"				"Hero_WarlockGolem.Spawn_Loop"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"80"
		"ModelScale" 				"1.8"
		"IsDemon"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_warlock"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_warlock_demon_lust"				// Ability 1.
		"Ability2"					"boss18b_corrupted_huntress"						// Ability 1.
		"Ability4"					"boss_warlock_inferno_spikes"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"15"			// Physical protection.
		"MagicalResistance"			"-100"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"70"		// Damage range max.
		"AttackRate"				"2.4"		// Speed of attack.
		"AttackAnimationPoint"		"2.4"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"350"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"280"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"500"			// Base mana.
		"StatusManaRegen"			"500"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
					"RoamDistance" 		"1500.0"
				}
			}
			
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_boss_warlock_true_form"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/items/warlock/golem/ahmhedoq/ahmhedoq.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"99"
		"ModelScale" 				"2.0"
		"IsDemon"					"1"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"350"
		"IsCore"					"1"
		"vscripts"					"ai/ai_warlock"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_warlock_demon_lust"			// Ability 1.
		"Ability2"					"boss_warlock_rain_of_fire"			// Ability 1.
		"Ability3"					"boss_warlock_inferno_spikes"		// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"14"			// Physical protection.
		"MagicalResistance"			"10"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"75"		// Damage range max.
		"AttackRate"				"1.5"		// Speed of attack.
		"AttackAnimationPoint"		"2.4"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"300"		// Range within a target can be attacked.
		"ProjectileModel"			""							// Particle system model for projectile.
		"ProjectileSpeed"			"0"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"380"		// Speed.
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"500"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_boss_warlock"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/warlock/warlock.mdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"51"
		"ModelScale" 				"2.0"
		"IsWild"					"1"
		"IsDemon"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"300"
		"IsCore"					"1"
		"vscripts"					"ai/ai_warlock"
	
		// Abilities
		//----------------------------------------------------------------
		"Ability1"					"boss_warlock_desecrate"			// Ability 1.
		"Ability2"					"boss_warlock_conflagration"			// Ability 1.
		"Ability3"					"boss_warlock_fatal_bonds"			// Ability 1.
		"Ability3"					"boss_warlock_unholy_summon"			// Ability 1.
		"Ability3"					"boss_warlock_ultimate_form"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"-10"			// Physical protection.
		"MagicalResistance"			"-50"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"200"		// Damage range min.
		"AttackDamageMax"			"250"		// Damage range max.
		"AttackRate"				"12.0"		// Speed of attack.
		"AttackAnimationPoint"		"2.4"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"700"		// Range within a target can be attacked.
		"ProjectileModel"			"warlock_base_attack"							// Particle system model for projectile.
		"ProjectileSpeed"			"1200"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"380"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2500"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"400"			// Base mana.
		"StatusManaRegen"			"400"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"97.0"
					"Avoidance"			"60.0"
					"Support"			"60.0"
					"RoamDistance"  "1000.0"
				}
			}
			
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_boss33_a"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/shadow_demon/shadow_demon.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"66"
		"ModelScale" 				"2.0"
		"IsAncient"					"0"
		"IsDemon"					"1"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"350"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss33_a"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss33a_devitalize"			// Ability 1.
		"Ability2"					"boss33a_dark_orb"			// Ability 1.
		"Ability3"					"boss33a_protective_ward"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"40"		// Damage range min.
		"AttackDamageMax"			"50"		// Damage range max.
		"AttackRate"				"3.0"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_shadow_demon/shadow_demon_base_attack.vpcf"							// Particle system model for projectile.
		"ProjectileSpeed"			"800"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"380"		// Speed.
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"500"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			
			"DefaultState"				"Invade"
			"AttachWearables" // Default npc_dota_hero_omniknight
			{
				"1" { "ItemDef" "7182" } 
				"2" { "ItemDef" "6717" } 
				"3" { "ItemDef" "7180" } 
				"4" { "ItemDef" "4377" } 
				"5" { "ItemDef" "545" } //FX
			}
		}
	}
	"npc_dota_boss33_b"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/shadow_fiend/shadow_fiend.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"66"
		"ModelScale" 				"2.0"
		"IsDemon"					"1"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"350"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss33_b"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss33b_shadowrazeN"			// Ability 1.
		"Ability2"					"boss33b_shadowrazeM"
		"Ability3"					"boss33b_shadowrazeF"
		"Ability4"					"boss33b_protective_shield"			// Ability 2.
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"30"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"165"		// Damage range max.
		"AttackRate"				"2.4"		// Speed of attack.
		"AttackAnimationPoint"		"0.8"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"400"		// Range within a target can be attacked.
		"ProjectileModel"			""							// Particle system model for projectile.
		"ProjectileSpeed"			"0"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"400"		// Speed.
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"500"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"Wearable1"
				{
					"ItemDef"			"6996"
				}
				"Wearable2"
				{
					"ItemDef"			"486"
				}
				"Wearable3"
				{
					"ItemDef"			"8259"
				}
			}
		}
	}
	"npc_dota_boss34"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/necrolyte/necrolyte.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"99"
		"ModelScale" 				"2.0"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"350"
		"IsDemon"					"1"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_boss34"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_necro_plague_wave"			// Ability 1.
		"Ability2"					"boss_necro_fear_the_reaper"			// Ability 2.
		"Ability3"					"boss_necro_swans_song"			// Ability 3.
		"Ability4"					"boss_necro_guillotine"			// Ability 3.
		"Ability5"					"boss_necro_weaken"			// Ability 3.
		"Ability6"					"boss_necro_vile_aura"			// Ability 3.
		"Ability7"					"boss_necro_deathbringer"			// Ability 3.
		"Ability8"					"boss_necro_take_the_weak"			// Ability 3.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"33"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"		// Damage range min.
		"AttackDamageMax"			"0"		// Damage range max.
		"AttackRate"				"9"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"3500"		// Range within a target can be acquired.
		"AttackRange"				"0"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/base_attacks/ranged_tower_bad.vpcf"							// Particle system model for projectile.
		"ProjectileSpeed"			"3600"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed"				"0"		// Speed.
		"MovementTurnRate"			"0.8"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"500"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"500000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
			
			"AttachWearables"
			{
				"Wearable1" { "ItemDef"            "8043" }
                "Wearable2" { "ItemDef"            "8044" }
                "Wearable3" { "ItemDef"            "8045" }
                "Wearable4" { "ItemDef"            "8046" }
                "Wearable5" { "ItemDef"            "9760" }
			}
		}
	}
	"npc_dota_boss35"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/doom/doom.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"665"
		"ModelScale" 				"1.675"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"66.6"
		"IsDemon"					"1"
		"vscripts"					"ai/ai_boss35"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_doom_ill_fated"		// Ability 1.
		"Ability2"					"boss_doom_infernal_wave"			// Ability 2.
		"Ability3"					"boss_doom_pillar_of_hell"	// Ability 2.
		"Ability4"					"boss_doom_hell_tempest"		// Ability 1.
		"Ability5"					"boss_doom_demonic_servants"	// Ability 2.
		"Ability6"					"boss_doom_blood_is_power"		// Ability 1.
		"Ability7"					"boss_doom_unstoppable"			// Ability 2.
		"Ability8"					"boss_doom_sacrificial_rite"	// Ability 2.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"15"			// Physical protection.
		"MagicalResistance"			"30"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"125"		// Damage range min.
		"AttackDamageMax"			"160"		// Damage range max.
		"AttackRate"				"3.0"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"3500"		// Range within a target can be acquired.
		"AttackRange"				"320"		// Range within a target can be attacked.
		"ProjectileModel"			""							// Particle system model for projectile.
		"ProjectileSpeed"			"30"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"300"		// Speed.
		"MovementTurnRate"			"66.6"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"666"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
	
			"AttachWearables"
			{
				"Wearable1" { "ItemDef"			"6273" }
				"Wearable2" { "ItemDef"			"6274" }
				"Wearable3" { "ItemDef"			"6275" }
				"Wearable4" { "ItemDef"			"6276" }
				"Wearable5" { "ItemDef"			"4905" }
				"Wearable6" { "ItemDef"			"6278" }
				"Wearable7" { "ItemDef"			"6279" }
			}
		}
	}
	"npc_dota_boss35b"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/items/courier/dc_demon/dc_demon_flying.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"665"
		"ModelScale" 				"1.675"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"20"
		"IsDemon"					"1"
		"vscripts"					"ai/ai_boss35b"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					""		// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""	// Ability 2.
		"Ability4"					""		// Ability 1.
		"Ability5"					""	// Ability 2.
		"Ability6"					""		// Ability 1.
		"Ability7"					""			// Ability 2.
		"Ability8"					""	// Ability 2.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"5"			// Physical protection.
		"MagicalResistance"			"15"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"30"		// Damage range min.
		"AttackDamageMax"			"40"		// Damage range max.
		"AttackRate"				"1.8"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"3500"		// Range within a target can be acquired.
		"AttackRange"				"320"		// Range within a target can be attacked.
		"ProjectileModel"			""							// Particle system model for projectile.
		"ProjectileSpeed"			"30"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed"				"250"		// Speed.
		"MovementTurnRate"			"66.6"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"100"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"666"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"666"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
		}
	}
	"npc_dota_boss36"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/props_structures/dire_ancient_base001.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"IsSpawner"					"1"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"665"
		"ModelScale" 				"0.5"
		"IsDemon"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"50"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_evil_core_passive"		// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"		// Damage range min.
		"AttackDamageMax"			"0"		// Damage range max.
		"AttackRate"				"0"		// Speed of attack.
		"AttackAnimationPoint"		"0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"		// Range within a target can be acquired.
		"AttackRange"				"0"		// Range within a target can be attacked.
		"ProjectileModel"			""							// Particle system model for projectile.
		"ProjectileSpeed"			"0"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"
		"MovementSpeed"				"0"		// Speed.
		"MovementTurnRate"			"0"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"60"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"1000"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"0"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"0"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_boss36_guardian"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/items/warlock/golem/hellsworn_golem/hellsworn_golem.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"666"
		"ModelScale" 				"1.5"
		"IsAncient"			"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"50"
		"IsDemon"					"1"
		"IsCelestial"				"1"
		"vscripts"					"ai/ai_boss36_guardian"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_evil_guardian_fire_shield"			// Ability 1.
		"Ability2"					"boss_evil_guardian_hell_on_earth"			// Ability 2.
		"Ability3"					"boss_evil_guardian_purge_their_sin"			// Ability 2.
		
		"Ability4"					"boss_evil_guardian_annihilation"
		"Ability5"					"boss_evil_guardian_destruction"
		"Ability6"					"boss_evil_guardian_apocalypse"
		"Ability7"					"boss_evil_guardian_end_of_days"
		"Ability8"					"boss_evil_guardian_rise_of_hell"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"15"			// Physical protection.
		"MagicalResistance"			"30"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"90"		// Damage range max.
		"AttackRate"				"1.5"		// Speed of attack.
		"AttackAnimationPoint"		"0.5"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"2500"		// Range within a target can be acquired.
		"AttackRange"				"350"		// Range within a target can be attacked.
		"ProjectileModel"			""							// Particle system model for projectile.
		"ProjectileSpeed"			"0"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"500"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed"				"300"		// Speed.
		"MovementTurnRate"			"0.35"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2550"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"1500"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1500"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1200"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_boss37"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/broodmother/broodmother.vmdl"	// Model.
		"SoundSet"					"Hero_Broodmother"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
		"ModelScale"				"2.0"								// old 1.0
		"Level"						"300"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"200"
		"UseNeutralCreepBehavior" 	"0"
		"IsCelestial"				"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss37"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_broodmother"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_broodmother_clipped_fate"					// Ability 1.
		"Ability2"					"boss_broodmother_parasitic_injection"	// Ability 2
		"Ability3"					"boss_broodmother_strength_of_the_brood"				// Ability 3.
		"Ability4"					"boss_broodmother_egg_sack"	// Ability 4.
		"Ability5"					"boss_broodmother_infest"		// Ability 5.
		"Ability6"					"boss_broodmother_arachnids_hunger"			// Ability 6 - Extra.
		"Ability7"					"boss_broodmother_fates_web"			// Ability 7 - Extra.
		"Ability8"					"boss_broodmother_web_shot"			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"		// Physical protection.
		"MagicalResistance"			"20"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"90"		// Damage range min.
		"AttackDamageMax"			"110"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"3.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.5"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"1800"		// Range within a target can be acquired.
		"AttackRange"				"300"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"350"		// Speed
		"MovementTurnRate"			"0.2"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3750"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			"DefaultState"				"Invade"
			
			"AttachWearables"
			{
				"Wearable1"
				{
					"ItemDef"			"7615"		
				}
				"Wearable2"
				{
					"ItemDef"			"7616"		
				}
				"Wearable3"
				{
					"ItemDef"			"7617"		
				}
			}
		}
	}
	"npc_dota_boss38"
	{
		// General
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/weaver/weaver.vmdl"	// Model.
		"SoundSet"					"Hero_Weaver"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_weaver.vsndevts"
		"ModelScale"				"1.4"								// old 1.0
		"Level"						"100"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"150"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss38"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_weaver"
			"model"				"models/heroes/weaver/weaver.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_aeon_time_acceleration"					// Ability 1.
		"Ability2"					"boss_aeon_distortion_field"	// Ability 2
		"Ability3"					"boss_aeon_flashback"				// Ability 3.
		"Ability4"					"boss_aeon_chronal_sphere"	// Ability 4.
		"Ability5"					"boss_aeon_sins_of_the_past"		// Ability 5.
		"Ability6"					"boss_aeon_rewind"			// Ability 6 - Extra.
		"Ability7"					"boss_aeon_fetal_syndrome"			// Ability 7 - Extra.
		"Ability8"					"boss_aeon_deteriorate"			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"		// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"100"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"0.1"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"256"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"			// Type of locomotion - ground, air
		"MovementSpeed"				"200"		// Speed
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
			
			"AttachWearables"
			{
				"Wearable1"{"ItemDef"			"4820"}
				"Wearable2"{"ItemDef"			"7578"}
				"Wearable3"{"ItemDef"			"7468"}
				"Wearable4"{"ItemDef"			"4636"}
				"Wearable4"{"ItemDef"			"6134"}
			}
		}
	}
	"npc_dota_boss39"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/items/invoker/forge_spirit/sempiternal_revelations_forged_spirits/sempiternal_revelations_forged_spirits.vmdl"	// Model.
		"SoundSet"					"Hero_Invoker"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_invoker.vsndevts"
		"ModelScale"				"2.6"								// old 1.0
		"Level"						"999"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"200"
		"vscripts"					"ai/ai_boss39"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/items/invoker/forge_spirit/sempiternal_revelations_forged_spirits/sempiternal_revelations_forged_spirits.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_aether_space_rift"					// Ability 1.
		"Ability2"					"boss_aether_meteor_shower"	// Ability 2
		"Ability3"					"boss_aether_mass_effect"				// Ability 3.
		"Ability4"					"boss_aether_event_horizon"	// Ability 4.
		"Ability5"					"boss_aether_entropy_pool"		// Ability 5.
		"Ability6"					"boss_aether_wormhole"			// Ability 6 - Extra.
		"Ability7"					"boss_aether_gravity_well"			// Ability 7 - Extra.
		"Ability8"					"boss_aether_phase_shift"			// Ability 8 - Extra.
		"Ability9"					"boss_aether_neutron_density"			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"15"		// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"30"		// Damage range min.
		"AttackDamageMax"			"50"		// Damage range max.
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.1"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"3000"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/base_attacks/fountain_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"2000"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"			// Type of locomotion - ground, air
		"MovementSpeed"				"200"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
			
			"AttachWearables"
			{
				"Wearable1"{"ItemDef"			"8326"}
				"Wearable2"{"ItemDef"			"548"}
				"Wearable2"{"ItemDef"			"549"}
				
			}
		}
	}
	"npc_dota_boss_genesis"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/creeps/omniknight_golem/omniknight_golem.vmdl"	// Model.
		"SoundSet"					"Hero_Invoker"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_invoker.vsndevts"
		"ModelScale"				"1.65"
		"Level"						"999"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"180"
		"vscripts"					"ai/ai_genesis"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/creeps/omniknight_golem/omniknight_golem.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_genesis_reconstruction"					// Ability 1.
		"Ability2"					"boss_genesis_deconstruction"	// Ability 2
		"Ability3"					"boss_genesis_pacifism"				// Ability 3.
		"Ability4"					"boss_genesis_crumple"	// Ability 4.
		"Ability5"					"boss_genesis_purify"		// Ability 5.
		"Ability6"					"boss_genesis_strengthen_resolve"			// Ability 6 - Extra.
		"Ability7"					"boss_genesis_return_to_life"			// Ability 7 - Extra.
		"Ability8"					"boss_genesis_sanctuary"			// Ability 8 - Extra.
		"Ability9"					"boss_genesis_dominion"			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"20"		// Physical protection.
		"MagicalResistance"			"33"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"9"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"300"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"200"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"4000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_boss_apotheosis"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/obsidian_destroyer/obsidian_destroyer.vmdl"	// Model.
		"SoundSet"					"Hero_Invoker"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_obsidian_destroyer.vsndevts"
		"ModelScale"				"1.2"
		"Level"						"200"
		"IsCelestial"				"1"
		"IsDemon"					"1"
		"IsWild"					"1"
		"IsUndead"					"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"180"
		"vscripts"					"ai/ai_apotheosis"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/heroes/obsidian_destroyer/obsidian_destroyer.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_apotheosis_the_end"
		"Ability2"					"boss_apotheosis_judge_the_cowards"
		"Ability3"					"boss_apotheosis_shield_of_valhalla"
		"Ability4"					"boss_apotheosis_ruthless_hunter"
		"Ability5"					"boss_apotheosis_decimate"
		"Ability6"					"boss_apotheosis_rampage"
		"Ability7"					"boss_apotheosis_focused_beam"
		"Ability8"					"boss_apotheosis_latent_potential"
		"Ability9"					"boss_apotheosis_purifier"
		"Ability10"					"boss_apotheosis_blessed_being"
		"Ability11"					"boss_apotheosis_impervious"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"35"		// Physical protection.
		"MagicalResistance"			"50"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"150"		// Damage range max.
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_obsidian_destroyer/obsidian_destroyer_arcane_orb.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"600"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"350"		// Speed
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"6000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"AttachWearables"
			{
				"Wearable1"{"ItemDef"			"9795"}
				"Wearable2"{"ItemDef"			"9369"}
				"Wearable3"{"ItemDef"			"9367"}
				"Wearable4"{"ItemDef"			"9370"}
				"Wearable4"{"ItemDef"			"533"}
			}
		}
	}
	"npc_dota_boss_valgraduth"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/furion/furion.vmdl"	// Model.
		"SoundSet"					"Hero_Invoker"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_furion.vsndevts"
		"ModelScale"				"1.2"
		"Level"						"10"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"120"
		"vscripts"					"ai/ai_valgraduth"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/heroes/obsidian_destroyer/obsidian_destroyer.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_valgraduth_breath_of_the_wild"
		"Ability2"					"boss_valgraduth_entangling_grip"
		
		"Ability4"					"boss_valgraduth_forests_protection"
		"Ability5"					"boss_valgraduth_roots_grip"
		"Ability6"					"boss_valgraduth_bomb_spores"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"9"		// Physical protection.
		"MagicalResistance"			"35"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"125"		// Damage range min.
		"AttackDamageMax"			"175"		// Damage range max.
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AnimationPlaybackRate"		"0.33"
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_furion/furion_base_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"300"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"350"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"4000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"AttachWearables"
			{
				"Wearable1"{"ItemDef"			"7278"}
				"Wearable2"{"ItemDef"			"6748"}
				"Wearable3"{"ItemDef"			"9000"}
				"Wearable4"{"ItemDef"			"9003"}
				"Wearable4"{"ItemDef"			"8999"}
				"Wearable4"{"ItemDef"			"6743"}
			}
		}
	}
	"npc_dota_boss_arthromos"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/viper/viper.vmdl"	// Model.
		"SoundSet"					"Hero_Viper"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_viper.vsndevts"
		"ModelScale"				"1.1"
		"Level"						"20"
		"IsUndead"					"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"120"
		"vscripts"					"ai/ai_arthromos"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/heroes/obsidian_destroyer/obsidian_destroyer.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_arthromos_touch_of_decay"
		"Ability2"					"boss_arthromos_hellraiser"
		"Ability3"					"boss_arthromos_plague_aura"
		
		"Ability4"					"boss_arthromos_virulent_swarm"
		"Ability5"					"boss_arthromos_pestilence"
		"Ability6"					"boss_arthromos_dessicate"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"12"		// Physical protection.
		"MagicalResistance"			"40"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"200"		// Damage range max.
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AnimationPlaybackRate"		"0.33"
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"750"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/econ/items/viper/viper_ti7_immortal/viper_poison_attack_ti7.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"300"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"350"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"4000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_viper.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_viper.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"AttachWearables"
			{
				"Wearable1"{"ItemDef"			"7811"}
				"Wearable2"{"ItemDef"			"9758"}
				"Wearable3"{"ItemDef"			"9233"}
			}
		}
	}
	"npc_dota_boss_durva"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/bane/bane.vmdl"	// Model.
		"SoundSet"					"Hero_Invoker"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_bane.vsndevts"
		"ModelScale"				"1.2"
		"Level"						"30"
		"IsDemon"					"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"120"
		"vscripts"					"ai/ai_durva"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/heroes/obsidian_destroyer/obsidian_destroyer.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_durva_gorged_core"
		"Ability2"					"boss_durva_soul_barrier"
		"Ability3"					"boss_durva_all_is_linked"
		
		"Ability4"					"boss_durva_consume_soul"
		"Ability5"					"boss_durva_feast_on_their_eyes"
		"Ability6"					"boss_durva_purgatory"
		"Ability7"					"boss_durva_filled_to_burst"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"18"		// Physical protection.
		"MagicalResistance"			"45"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"200"		// Damage range max.
		"AttackRate"				"2"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AnimationPlaybackRate"		"0.33"
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"450"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_bane/bane_projectile.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"300"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"275"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"4000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"AttachWearables"
			{
				"Wearable1"{"ItemDef"			"7941"}
				"Wearable2"{"ItemDef"			"7692"}
				"Wearable3"{"ItemDef"			"8549"}
				"Wearable4"{"ItemDef"			"8548"}
				"Wearable4"{"ItemDef"			"503"}
			}
		}
	}
	"npc_dota_boss_ammetot"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/visage/visage.vmdl"	// Model.
		"SoundSet"					"Hero_Visage"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_visage.vsndevts"
		"ModelScale"				"1.15"
		"Level"						"40"
		"IsCelestial"				"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"120"
		"vscripts"					"ai/ai_ammetot"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/heroes/obsidian_destroyer/obsidian_destroyer.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_ammetot_see_all"
		"Ability2"					"boss_ammetot_gatekeeper"
		"Ability3"					"boss_ammetot_unbound"
		"Ability4"					"boss_ammetot_fate_acceptance"
		
		"Ability5"					"boss_ammetot_restless_warden"
		"Ability6"					"boss_ammetot_illusion_of_inevitability"
		"Ability7"					"boss_ammetot_willing_prisoner"
		"Ability8"					"boss_ammetot_death_is_lonely"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"		// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"1"		// Damage range min.
		"AttackDamageMax"			"600"		// Damage range max.
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AnimationPlaybackRate"		"0.33"
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_visage/visage_base_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"900"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"300"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"350"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"4000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"AttachWearables"
			{
				"Wearable1"{"ItemDef"			"7997"}
				"Wearable2"{"ItemDef"			"9051"}
				"Wearable3"{"ItemDef"			"543"}
			}
		}
	}
	"npc_dota_boss_greymane"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/creeps/knoll_1/werewolf_boss.vmdl"	// Model.
		"SoundSet"					"Hero_Invoker"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_invoker.vsndevts"
		"ModelScale"				"1.6"
		"Level"						"20"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_roshancamp"
		"MinimapIconSize"			"180"
		"vscripts"					"ai/ai_greymane"
		
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_invoker/invoker_forge_spirit_ambient.vpcf"
			"model"				"models/creeps/knoll_1/werewolf_boss.vmdl"
		}
	
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					"boss_greymane_call_of_the_alpha"					// Ability 1.
		"Ability2"					"boss_greymane_leaders_inspiration"	// Ability 2
		"Ability3"					"boss_greymane_furious_swipe"				// Ability 3.
		"Ability4"					"boss_greymane_pounce"	// Ability 4.
		"Ability5"					"boss_greymane_battle_cry"		// Ability 5.
		"Ability6"					"boss_greymane_frenzied_blows"			// Ability 6 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"6"		// Physical protection.
		"MagicalResistance"			"33"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"110"		// Damage range max.
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"8000"		// Range within a target can be acquired.
		"AttackRange"				"175"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"11"		// Gold earned min.
		"BountyGoldMax"				"13"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"250"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3250"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"2000"			// Base mana.
		"StatusManaRegen"			"10"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
	
		"ShouldDoFlyHeightVisual" "0"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
		}
	}
	//=================================================================================
	// Creature: boss 3
	//=================================================================================
	"npc_dota_boss3a"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/undying/undying_minion.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
		"ModelScale"				"1.2"
		"Level"						"3"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_boss3a.lua"
				
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss3a_berserk"			// Ability 1
		"Ability2"					"boss3a_tombstone"			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.0
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"3"			// Physical protection.
		"MagicalResistance"			"15"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"70"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.
		"AttackRate"				"3.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"70"
		"HealthBarOffset"			"250"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"120"		// Speed
		"MovementTurnRate"			"0.15"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"8000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//-----------------------------------------------------------------
			"HPGain"					"750"
			"DamageGain"				"75"
			"ArmorGain"					"1"
			"MagicResistGain"			"1"
			"MoveSpeedGain"				"1"
			"BountyGain"				"1500"
			"XPGain"					"1500"
	
			//Ability Usage Parameters
			//-----------------------------------------------------------------
		}
	}
	"npc_dota_boss3a_b"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/undying/undying_minion_torso.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
		"ModelScale"				"1.2"
		"Level"						"3"
		"IsUndead"					"1"
		"IsCore"					"1"
		"vscripts"					"ai/ai_zombie.lua"
				
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss3a_berserk"			// Ability 1
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.0
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"5"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"70"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.
		"AttackRate"				"1.5"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"70"
		"HealthBarOffset"			"250"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"220"		// Speed
		"MovementTurnRate"			"0.2"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1000"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"8000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
		}
	}
	//=================================================================================
	// Creature: Boss4
	//=================================================================================
	"npc_dota_boss3b"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/undying/undying_minion.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
		"ModelScale"				"1.15"
		"Level"						"4"
		"IsUndead"					"1"
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss3b.lua"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss3b_acid_interior"			// Ability 1.
		"Ability2"					"boss3b_acid_spit"			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"15"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"90"		// Damage range max.
		"AttackRate"				"4.5"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"400"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_viper/viper_poison_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"600"			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"70"
		"HealthBarOffset"			"250"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"85"		// Speed
		"MovementTurnRate"			"0.2"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1250"		// Base health.
		"StatusHealthRegen"			"12"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"8000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{	
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//-----------------------------------------------------------------
			"HPGain"					"2000"
			"DamageGain"				"100"
			"ArmorGain"					"1"
			"MagicResistGain"			"1"
			"MoveSpeedGain"				"1"
			"BountyGain"				"2000"
			"XPGain"					"2000"
		}
	}
	//=================================================================================
	// Creature: Boss 5
	//=================================================================================
	"npc_dota_boss4"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/undying/undying.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
		"ModelScale"				"2"
		"Level"						"5"
		"IsUndead"					"1"
		"precache"
		{
			"particle_folder"		"particles/units/heroes/hero_undying"
		}
		"IsCore"					"1"
		"vscripts"					"ai/ai_boss4.lua"
		
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss4_summon_zombies"			// Ability 1.
		"Ability2"					"boss4_death_ball"			// Ability 2.
		"Ability3"					"boss4_sacrifice"			// Ability 2.
		"Ability4"					"boss4_tombstone"			// Ability 2.
	
	
		//----------------------------------------------------------------
		"ArmorPhysical"				"5"			// Physical protection.
		"MagicalResistance"			"20"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"175"		// Damage range max.
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"350"
		
		
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"125"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"5000"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"200"		// Base mana.
		"StatusManaRegen"			"5"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"25.0"
				}
			}
			
			"AttachWearables"
			{
				"Wearable1" { "ItemDef"			"7973" }
				"Wearable2" { "ItemDef"			"7960" }
				"Wearable3" { "ItemDef"			"7961" }
			}
		}
	}
	//=================================================================================
	// Creature: Boss 5
	//=================================================================================
	"npc_dota_boss4_tomb"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/items/undying/idol_of_ruination/idol_tower_sim.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
		"ModelScale"				"0.8"
		"Level"						"5"
		"IsUndead"					"1"
		"precache"
		{
			"particle_folder"		"particles/units/heroes/hero_undying"
		}
		
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					""			// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 2.
		"Ability4"					""			// Ability 2.
	
	
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"		// Damage range min.
		"AttackDamageMax"			"0"		// Damage range max.
		"AttackRate"				"3.75"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"	
		"HealthBarOffset"			"350"
		
		
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"			// Type of locomotion - ground, air
		"MovementSpeed"				"125"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"16"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"		// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"25.0"
				}
			}
			
			"AttachWearables"
			{
				"Wearable1" { "ItemDef"			"7973" }
				"Wearable2" { "ItemDef"			"7960" }
				"Wearable3" { "ItemDef"			"7961" }
			}
		}
	}
	"npc_dota_boss5b"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/queenofpain/queenofpain.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_legion_commander.vsndevts"
		"ModelScale"				"1.4"
		"Level"						"5"
		"IsDemon"					"1"
		"precache"
		{
			"particle_folder"		"particles/units/heroes/hero_legion_commander"
		}
		
		"vscripts"				"ai/ai_boss5b.lua"
		
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_blink"			// Ability 1.
		"Ability2"					"boss_shadow_strike"
		"Ability3"					"boss_scream_of_pain"
	
	
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"35"		// Damage range min.
		"AttackDamageMax"			"50"		// Damage range max.
		"AttackRate"				"6"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_queenofpain/queen_base_attack.vpcf"
		"ProjectileSpeed"			"1200"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"70"
		"HealthBarOffset"			"320"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"125"		// Speed
		"MovementTurnRate"			"0.15"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"80"		// Base health.
		"StatusHealthRegen"			"5"			// Health regeneration rate.
		"StatusMana"				"500"		// Base mana.
		"StatusManaRegen"			"1"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"25.0"
				}
			}
			
			"AttachWearables"
			{
				"Wearable1" { "ItemDef"			"4667" }
				"Wearable2" { "ItemDef"			"7528" }
				"Wearable3" { "ItemDef"			"7212" }
				"Wearable4" { "ItemDef"			"7529" }
			}
		}
	}
	"npc_dota_boss5"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/legion_commander/legion_commander.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_legion_commander.vsndevts"
		"ModelScale"				"1.75"
		"Level"						"5"
		"IsDemon"					"1"
		"precache"
		{
			"particle_folder"		"particles/units/heroes/hero_legion_commander"
		}
		"vscripts"					"ai/ai_boss5.lua"
		
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_moment_of_courage"			// Ability 1.
		"Ability2"					"boss_hail_of_arrows"
		"Ability3"					"boss_press_the_attack"
		"Ability4"					"boss_call_reinforcements"
	
	
		//----------------------------------------------------------------
		"ArmorPhysical"				"5"			// Physical protection.
		"MagicalResistance"			"15"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"90"		// Damage range max.
		"AttackRate"				"5"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"320"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"250"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3000"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"500"		// Base mana.
		"StatusManaRegen"			"5"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"25.0"
				}
			}
			
			"AttachWearables"
			{
				"Wearable1" { "ItemDef"			"5810" }
				"Wearable2" { "ItemDef"			"5887" }
				"Wearable3" { "ItemDef"			"6829" }
				"Wearable4" { "ItemDef"			"6240" }
				"Wearable5" { "ItemDef"			"5885" }
			}
		}
	}
	//=================================================================================
	// Creature: Smark Boss 6
	//=================================================================================
	"npc_dota_boss6"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/slark/slark.vmdl"	// Model.	
		"ModelScale"				"1.5"
		"Level"						"6"
		"IsDemon"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss6.lua"
		
		
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"lesser_nightcrawler_pounce"			// Ability 1.
		"Ability2"					"nightcrawler_shadowdance"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"3"			// Physical protection.
		"MagicalResistance"			"0"			// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"70"		// Damage range min.
		"AttackDamageMax"			"80"		// Damage range max.
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"0.467"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"200"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"2"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//-------------------------------------------------------------------------------------------------------------
		"VisionDaytimeRange"		"1800"									// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"									// Range of vision at night time.
		
		// Movement
		//-------------------------------------------------------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"300"									// Speed.
		"MovementTurnRate"			"0.25"									// Turning rate.
		
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"450"
	
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_slark.vsndevts"
		"VoiceFile" 				"soundevents/voscripts/game_sounds_vo_slark.vsndevts"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"00.0"
					"Support"			"50.0"
				}
			}
			
	
			//Level Up
			"HPGain"					"5000"
			"DamageGain"				"150"
			"ArmorGain"					"1"
			"HPRegenGain"				"1"
			"MagicResistGain"			"1"
			"MoveSpeedGain"				"3"
			"BountyGain"				"3000"
			"XPGain"					"3000"
	
			
			"AttachWearables"
			{
				"Wearable1"
				{
					"ItemDef"			"7714"		
				}
				"Wearable2"
				{
					"ItemDef"			"6421"		
				}
				"Wearable3"
				{
					"ItemDef"			"9537"		
				}
				"Wearable4"
				{
					"ItemDef"			"5101"		
				}
				"Wearable5"
				{
					"ItemDef"			"5262"		
				}
			}
		}
	}
	//=================================================================================
	// Creature: Stark Boss 6
	//=================================================================================
	"npc_dota_boss6_b"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/blood_seeker/blood_seeker.vmdl"	// Model.	
		"ModelScale"				"1.5"
		"Level"						"10"
		"IsDemon"					"1"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss6_b.lua"
		
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"lesser_nightcrawler_pounce"			// Ability 1.
		"Ability2"					"creature_rupture"
		"Ability3"					""
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"			// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"220"		// Damage range max.
		"AttackRate"				"12.0"			// Speed of attack.
		"AttackAnimationPoint"		"1.5"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"40"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1000"		// Base health.
		"StatusHealthRegen"			"2"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//-------------------------------------------------------------------------------------------------------------
		"VisionDaytimeRange"		"1800"									// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"									// Range of vision at night time.
		
		// Movement
		//-------------------------------------------------------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"280"									// Speed.
		"MovementTurnRate"			"0.25"									// Turning rate.
		
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"450"
	
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_blood_seeker.vsndevts"
		"VoiceFile" 				"soundevents/voscripts/game_sounds_vo_blood_seeker.vsndevts"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"00.0"
					"Support"			"00.0"
				}
			}
	
			"AttachWearables"
			{
				"Wearable1"
				{
					"ItemDef"			"336"		
				}
				"Wearable2"
				{
					"ItemDef"			"353"		
				}
				"Wearable3"
				{
					"ItemDef"			"354"		
				}
				"Wearable4"
				{
					"ItemDef"			"355"		
				}
				"Wearable5"
				{
					"ItemDef"			"356"		
				}
			}
		}
	}
	//=================================================================================
	// Creature: LifeSteal Boss 7
	//=================================================================================
	"npc_dota_boss7"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/life_stealer/life_stealer.vmdl"	// Model.
		"SoundSet"					"life_stealer"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_life_stealer.vsndevts"
		"ModelScale"				"2"
		"Level"						"7"
		"IsDemon"					"1"
		"IsUndead"					"1"
		"vscripts"					"ai/ai_boss7.lua"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_lifesteal"			// Ability 2.
		"Ability2"					"boss_ragebuff"			
		"Ability3"					"boss_wounds"			
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"-5"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"2.1"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"175"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"130"
		"HealthBarOffset"			"450"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"235"		// Speed
		"MovementTurnRate"			"0.1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2250"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
	
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"0.0"
					"Avoidance"			"0.0"
					"Support"			"70.0"
				}
			}
	
			//Level Up Parameters
			//-----------------------------------------------------------------
			"HPGain"					"6000"
			"DamageGain"				"100"
			"ArmorGain"					"5"
			"MagicResistGain"			"1"
			"MoveSpeedGain"				"10"
			"BountyGain"				"500"
			"XPGain"					"500"
	
			//Ability Usage Parameters
			//-----------------------------------------------------------------
			"NOSTUNRESIST"			"80.0"
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "6260" }
				"Wearable2" { "ItemDef" "6261" }
				"Wearable3" { "ItemDef" "7393" }
				"Wearable4" { "ItemDef" "6465" }
			}
		}
	}
	//=================================================================================================================
	// Creature: BOSS 8
	//=================================================================================================================
	"npc_dota_boss8a"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"					"npc_dota_creature"					// Class of entity of link to.
		"Model"						"models/heroes/rattletrap/rattletrap.vmdl"		// Model.
		"SoundSet"					"Hero_Rattletrap"													// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_rattletrap.vsndevts"
		"ModelScale" 				"1.85"
		"Level"						"8"
		"IsWild"					"1"
		"vscripts"				"ai/ai_boss8.lua"
	
		// Armor
		//-------------------------------------------------------------------------------------------------------------
		"ArmorPhysical"				"12"								// Physical protection.
	
		"AbilityLayout"				"6"
		"Ability1"					"boss_clockwerk_spear"			// Ability 1.
	
		// Attack
		//-------------------------------------------------------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"100"		// Damage range min.
		"AttackDamageMax"			"200"		// Damage range max.
		"AttackRate"				"6"									// Speed of attack.
		"AttackAnimationPoint"		"1.2"										// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"16000"									// Range within a target can be acquired.
		"AttackRange"				"128"									// Range within a target can be attacked.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"450"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"250"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"3000"		// Base mana.
		"StatusManaRegen"			"5.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		//Precache
		//---------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_rattletrap.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_rattletrap.vsndevts"
	
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
		"CanRespawn"				"0"
	
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "8779" }
				"Wearable2" { "ItemDef" "7018" }
				"Wearable3" { "ItemDef" "5090" }
				"Wearable4" { "ItemDef" "6484" }
			}
		}
	}
	"npc_dota_boss8b"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"					"npc_dota_creature"					// Class of entity of link to.
		"Model"						"models/heroes/tinker/tinker.vmdl"		// Model.
		"SoundSet"					"Hero_Tinker"													// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
		"ModelScale" 				"1.6"
		"Level"						"8"
		"CanBeDominated"			"0"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss8b.lua"
	
		// Armor
		//-------------------------------------------------------------------------------------------------------------
		"ArmorPhysical"				"0"								// Physical protection.
	
		"AbilityLayout"				"6"
		"Ability1"					"boss_march"			// Ability 1.
		"Ability2"					"boss_rockets"			// Ability 1.
		"Ability3"					"boss_rearm"			// Ability 1.
	
		// Attack
		//-------------------------------------------------------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"35"									// Damage range min.
		"AttackDamageMax"			"42"									// Damage range max.
		"AttackRate"				"3.6"									// Speed of attack.
		"AttackAnimationPoint"		"0.33"									// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"16000"									// Range within a target can be acquired.
		"AttackRange"		"500"
		"ProjectileModel"		"particles/units/heroes/hero_tinker/tinker_base_attack.vpcf"
		"ProjectileSpeed"		"900"
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"450"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"250"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1200"		// Base health.
		"StatusHealthRegen"			"2"			// Health regeneration rate.
		"StatusMana"				"500"		// Base mana.
		"StatusManaRegen"			"5.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		//Precache
		//---------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_tinker.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
	
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
		"CanRespawn"				"0"
	
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "7968" }
				"Wearable2" { "ItemDef" "7969" }
				"Wearable3" { "ItemDef" "7970" }
				"Wearable4" { "ItemDef" "7972" }
			}
		}
	}
	"npc_dota_boss8c"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"					"npc_dota_creature"					// Class of entity of link to.
		"Model"						"models/heroes/techies/techies.vmdl"		// Model.
		"SoundSet"					"Hero_Tinker"													// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
		"ModelScale" 				"0.8"
		"Level"						"8"
		"CanBeDominated"			"0"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss8c.lua"
	
		// Armor
		//-------------------------------------------------------------------------------------------------------------
		"ArmorPhysical"				"0"								// Physical protection.
	
		"AbilityLayout"				"6"
		"Ability1"					"boss_proximity"			// Ability 1.
		"Ability2"					"boss_suicide"			// Ability 1.
	
		// Attack
		//-------------------------------------------------------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"450"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"380"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"60"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"3000"		// Base mana.
		"StatusManaRegen"			"5.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		//Precache
		//---------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_tinker.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
	
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
		"CanRespawn"				"0"
	
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"AttachWearables"
			{
				"Wearable1" { "ItemDef" "394" }
				"Wearable2" { "ItemDef" "487" }
				"Wearable3" { "ItemDef" "489" }
				"Wearable4" { "ItemDef" "490" }
				"Wearable5" { "ItemDef" "491" }
				"Wearable6" { "ItemDef" "492" }
			}
		}
	}
	"npc_dota_boss8c_spawner"
	{
		// General
		//-------------------------------------------------------------------------------------------------------------
		"BaseClass"					"npc_dota_creature"					// Class of entity of link to.
		"Model"						"models/items/rattletrap/clockmaster_cog/clockmaster_cog.vmdl"		// Model.
		"SoundSet"					"Hero_Tinker"													// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
		"IsSpawner"					"1"
		"ModelScale" 				"1.6"
		"Level"						"8"
		"CanBeDominated"			"0"
		"IsWild"					"1"
		"IsSpawner"					"1"
		"vscripts"					"ai/ai_boss8c_spawner.lua"
	
		// Armor
		//-------------------------------------------------------------------------------------------------------------
		"ArmorPhysical"				"0"								// Physical protection.
	
		"AbilityLayout"				"6"
		"Ability1"					"boss_spawn_techies"			// Ability 1.
	
		// Attack
		//-------------------------------------------------------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"130"
		"HealthBarOffset"			"450"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"
		"MovementSpeed"				"0"		// Speed.
		"MovementTurnRate"			"0"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1500"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"3000"		// Base mana.
		"StatusManaRegen"			"5.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
		//Precache
		//---------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_tinker.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_tinker.vsndevts"
	
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
		"CanRespawn"				"0"
	
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
		}
	}
	//================================================================================================================================================================
	//=================================================================================
	// Creature: Slitherqueen
	//=================================================================================
	"npc_dota_boss9"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/slardar/slardar.vmdl"	// Model.
		"SoundSet"					"Hero_NagaSiren"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_naga_siren.vsndevts"
		"IdleSoundLoop"				"Hero_NagaSiren.IdleLoop"
		"ModelScale"				"2"
		"Level"						"9"
		"IsWild"					"1"
		"vscripts"					"ai/ai_boss9"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"creature_summon_slither"			// Ability 1.
		"Ability2"					"creature_slithereen_crush"			// Ability 2.
		"Ability3"					"slardar_bash"			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"4"			// Physical protection.
		"MagicalResistance"			"16"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.
		"AttackRate"				"4"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"450"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"315"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
		
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2750"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"250"			// Base mana.
		"StatusManaRegen"			"3"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
				}
			}
	
			"DefaultState"				"Invade"
	
	
			"AttachWearables"
			{
				"Wearable1"
				{
					"ItemDef"			"273"		
				}
				"Wearable2"
				{
					"ItemDef"			"274"		
				}
				"Wearable3"
				{
					"ItemDef"			"275"		
				}
				"Wearable4"
				{
					"ItemDef"			"276"		
				}
			}
			
			"NOSTUNRESIST"			"60.0"
		}
	}
	//=================================================================
	// Broodmother
	//=================================================================
	"npc_dota_creature_broodmother"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/broodmother/broodmother.vmdl"	// Model.
		"SoundSet"					"Hero_Broodmother"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
		"ModelScale"				"0.7"								// old 1.0
		"IsWild"					"1"
		"IsCelestial"				"1"
		"vscripts"					"ai/ai_broodling"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_broodling_spawn_spiderling"			// Ability 1.
		"Ability2"					"boss_broodmother_strength_of_the_brood"		// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"3"			// Physical protection.
		"MagicalResistance"			"40"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"50"		// Damage range min.
		"AttackDamageMax"			"75"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"2.7"		// Speed of attack.
		"AttackAnimationPoint"		"1.5"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"1500"		// Range within a target can be acquired.
		"AttackRange"				"100"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"140"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"300"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"650"		// Base health.
		"StatusHealthRegen"			"1.0"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"DisableClumpingBehavior"   "1"
			"CanRespawn"				"0"
			"AttachWearables"
			{
				"Wearable1"{ "ItemDef"			"101"}
				"Wearable2"{ "ItemDef"			"102"}
				"Wearable3"{ "ItemDef"			"103"}
			}
		}
	}
	//=================================================================
	// Broodmother
	//=================================================================
	"npc_dota_creature_broodmother_egg"
	{
		"BaseClass"					"npc_dota_creature"
		"Model"						"models/props_winter/egg.vmdl"
		"CanBeDominated"			"0"
	
		"AbilityLayout"				"6"
		"Ability1"					"boss_broodmother_hatch_broodling"
	
		"ArmorPhysical"				"0"
		"MagicalResistance"			"0"
	
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"140"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"			// Type of locomotion - ground, air
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"10"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.
	}
	//=================================================================
	// Small Spiderling
	//=================================================================
	"npc_dota_creature_spiderling"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/broodmother/spiderling.vmdl"	// Model.
		"SoundSet"					"0"					// Name of sound set.
		"ModelScale"				".3"								// old 1.0
		"Level"						"1"
		"IsSummoned"				"1"
		"CanBeDominated"			"0"
		"vscripts"					"ai/ai_generic"
		"IsWild"					"1"
		"IsCelestial"				"1"
		"SelectionGroup"			"Spiders"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_spiderling_spider_bite"			// Ability 1.
		"Ability2"					"boss_broodmother_strength_of_the_brood"		// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"60"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"40"		// Damage range min.
		"AttackDamageMax"			"50"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"100"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"140"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"200"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"125"		// Base health.
		"StatusHealthRegen"			"0.5"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		//Precache
		//------------------------------------------------------------------
		"VoiceFile"				"soundevents/voscripts/game_sounds_vo_broodmother.vsndevts"
		"GameSoundsFile"		"soundevents/game_sounds_heroes/game_sounds_broodmother.vsndevts"
		"Creature"
		{
			"DisableClumpingBehavior"   "1"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"			"Invade"
		}
	}
	//=================================================================================
	// Creature: mini boss 1
	//=================================================================================
	"npc_dota_mini_boss1"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/items/undying/idol_of_ruination/ruin_wight_minion.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
		"ModelScale"				"1.3"
		"Level"						"2"
		"IsUndead"					"1"
		
		"vscripts"					"ai/ai_generic.lua"
				
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"1"			// Physical protection.
		"MagicalResistance"			"75"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"70"		// Damage range min.
		"AttackDamageMax"			"85"		// Damage range max.
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"70"
		"HealthBarOffset"			"320"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"	
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"200"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"125"		// Base health.
		"StatusHealthRegen"			"2"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"8000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
		
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			
			//HERO AI State
			//-----------------------------------------------------------------
			"DefaultState"				"Invade"
			
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
		}
	}
	//=================================================================================
	// Creature: ogre minions
	//=================================================================================
	"npc_dota_mini_boss2"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_ogre_med/n_creep_ogre_med.vmdl"
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"SoundSet"					"n_creep_Melee"
		"Level"						"13"
		"ModelScale" 				"2.0"
		"IsWild"					"1"
		
		"vscripts"					"ai/ai_generic"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"5"			// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"30"		// Damage range min.
		"AttackDamageMax"			"40"		// Damage range max.
		"AttackRate"				"2.4"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"100"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"450"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"245"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"200"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
	
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"10000"
			"DamageGain"				"500"
			"ArmorGain"					"12.5"
			"MagicResistGain"			"10"
			"MoveSpeedGain"				"10"
			"BountyGain"				"6500"
			"XPGain"					"6500"
		}
	}	
	//=================================================================================
	// Creature: ogre minions
	//=================================================================================
	"npc_dota_mini_boss2_he"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/neutral_creeps/n_creep_ogre_med/n_creep_ogre_med.vmdl"
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"SoundSet"					"n_creep_Melee"
		"Level"						"13"
		"ModelScale" 				"2.0"
		"IsWild"					"1"
		
		"vscripts"					"ai/ai_generic"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"6"			// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"30"		// Damage range min.
		"AttackDamageMax"			"40"		// Damage range max.
		"AttackRate"				"2.4"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"100"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"70"
		"HealthBarOffset"			"450"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"245"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"250"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	
	
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"10000"
			"DamageGain"				"500"
			"ArmorGain"					"12.5"
			"MagicResistGain"			"10"
			"MoveSpeedGain"				"10"
			"BountyGain"				"6500"
			"XPGain"					"6500"
		}
	}	
	"npc_dota_mini_slither"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/slardar/slardar.vmdl"	// Model.
		"SoundSet"					"Hero_NagaSiren"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_naga_siren.vsndevts"
		"IdleSoundLoop"				"Hero_NagaSiren.IdleLoop"
		"ModelScale"				"0.7"
		"Level"						"7"
		"IsWild"					"1"
		
		"vscripts"					"ai/ai_generic"
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					""			// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"75"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"75"		// Damage range max.
		"AttackRate"				"1.8"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"200"
		"HealthBarOffset"			"520"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"	
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"340"		// Speed
		"MovementTurnRate"			"0.25"		// Turning rate.
		
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"140"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"205"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"98.0"
					"Avoidance"			"0.0"
				}
			}
	
			"DefaultState"				"Invade"
			
			"AttachWearables"
			{
				"Wearable1"
				{
					"ItemDef"			"273"		
				}
				"Wearable2"
				{
					"ItemDef"			"274"		
				}
				"Wearable3"
				{
					"ItemDef"			"275"		
				}
				"Wearable4"
				{
					"ItemDef"			"276"		
				}
			}
		}
	}
	//=================================================================================
	// Creature: Treant
	//=================================================================================
	"npc_dota_mini_tree"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/heroes/furion/treant.vmdl"	// Model.
		"SoundSet"					""					// Name of sound set.
		"ModelScale"				"1"
		"Level"						"4"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsWild"					"1"
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_treant"
		}
		
		"vscripts"					"ai/ai_tree"
		
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_living_armor"	// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"3"			// Physical protection.
		"MagicalResistance"			"15"		// Magical protection (percentage).
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"35"		// Damage range min.
		"AttackDamageMax"			"45"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"3.0"			// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/base_attacks/ranged_goodguy.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"1000"		// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"300"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"300"		// Speed
		"MovementTurnRate"			"0.4"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"300"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"500"		// Base mana.
		"StatusManaRegen"			"20"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_treant.vsndevts"
		"VoiceFile"					"soundevents/voscripts/game_sounds_vo_treant.vsndevts"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"75.0"
				}
			}
	
			"DefaultState"				"Invade"
		}
	}
	//=================================================================================
	// Creature: Treant
	//=================================================================================
	"npc_dota_mini_tree2"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/items/furion/treant_flower_1.vmdl"	// Model.
		"SoundSet"					""					// Name of sound set.
		"ModelScale"				"1.5"
		"Level"						"4"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsWild"					"1"
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_treant"
		}
		
		"vscripts"					"ai/ai_tree"
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_living_armor"	// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"2"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection (percentage).
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"60"		// Damage range min.
		"AttackDamageMax"			"70"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"1.2"			// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/base_attacks/ranged_goodguy.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"1000"		// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"300"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"300"		// Speed
		"MovementTurnRate"			"0.35"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"350"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"500"		// Base mana.
		"StatusManaRegen"			"20"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_treant.vsndevts"
		"VoiceFile"					"soundevents/voscripts/game_sounds_vo_treant.vsndevts"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"75.0"
				}
			}
	
			"DefaultState"				"Invade"
	
		}
	}
	//=================================================================================
	// Creature: Treant
	//=================================================================================
	"npc_dota_boss_sloth_demon"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/creeps/darkreef/blob/darkreef_blob_01.vmdl"	// Model.
		"SoundSet"					""					// Name of sound set.
		"ModelScale"				"1.5"
		"Level"						"4"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsDemon"					"1"
		"precache"
		{
			"particle_folder"	"particles/units/heroes/hero_treant"
			"model"				"models/creeps/darkreef/blob/darkreef_blob_01.vmdl"
		}
		
		"vscripts"					"ai/ai_sloth_demon"
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"6"
		"Ability1"					"boss_sloth_demon_slime_cocoon"	// Ability 1.
		"Ability2"					"boss_sloth_demon_slime_trail"			// Ability 2.
		"Ability3"					"boss_sloth_demon_slime_hide"			// Ability 3.
		"Ability4"					"boss_sloth_demon_slime_tendrils"			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"10"			// Physical protection.
		"MagicalResistance"			"25"		// Magical protection (percentage).
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"175"		// Damage range min.
		"AttackDamageMax"			"200"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"15"			// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/base_attacks/ranged_goodguy.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"1000"		// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"300"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"175"		// Speed
		"MovementTurnRate"			"0.35"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2000"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"500"		// Base mana.
		"StatusManaRegen"			"20"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1400"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"1400"		// Range of vision at night time.
	
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_treant.vsndevts"
		"VoiceFile"					"soundevents/voscripts/game_sounds_vo_treant.vsndevts"
	
		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"75.0"
				}
			}
	
			"DefaultState"				"Invade"
	
		}
	}
	"npc_dota_money_roshan"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/courier/baby_rosh/babyroshan_elemental_flying.vmdl"	// Model.
		"SoundSet"					"Furion_Treant"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_furion.vsndevts"
		"ModelScale"				"2"
		"Level"						"1"
		"IsDemon"					"1"
		"vscripts"					"ai/ai_avarice"
		
		"precache"
		{
			"soundfile"	"soundevents/game_sounds_heroes/game_sounds_furion.vsndevts"
			"model"	"models/courier/baby_rosh/babyroshan_elemental_flying.vmdl"
		}
	
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"generic_gold_dropper"			// Ability 1.
		"Ability2"					""			// Ability 2.
	
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"			// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"10"		// Damage range min.
		"AttackDamageMax"			"20"        // Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"3"		// Speed of attack.
		"AttackAnimationPoint"		"0.467"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"1"		// Gold earned min.
		"BountyGoldMax"				"1"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"170"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"550"		// Speed
		"MovementTurnRate"			"1"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"400"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"           "DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"12000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
		
		"Creature"
		{
			//"CanRespawn"				"0"
			
			"DisableClumpingBehavior"   "0"
			"CanRespawn"				"0"
			"DefaultState"				"Invade"
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"100.0"
					"Support"			"100.0"
				}
			}
		}
	}
	"npc_dota_treasure"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/courier/flopjaw/flopjaw.vmdl"	// Model.
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"ModelScale"				"2"
		"Level"						"999"
		"IsAncient"			"0"
	
		
		// Abilities
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"boss_treasure"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"			// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"		// Damage range min.
		"AttackDamageMax"			"0"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"2"		// Speed of attack.
		"AttackAnimationPoint"		"0.467"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"		// Range within a target can be acquired.
		"AttackRange"				"0"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"1"		// Gold earned min.
		"BountyGoldMax"				"1"		// Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"170"
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"550"		// Speed
		"MovementTurnRate"			"5"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"10"		// Base health.
		"StatusHealthRegen"			"0"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"           "DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"12000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
	}
	////////////////// HERO UNITS //////////////////
	"npc_dummy_blank"
	{
		// General
		//
		"BaseClass" "npc_dota_creature" // Class of entity of link to.
		"Model" "models/development/invisiblebox.vmdl" // Model.
		"SoundSet" "Creep_Good_Range" // Name of sound set.
		"Level" "0"
		"UnitLabel" "healing_ward"
		// Abilities
		//----------------------------------------------------------------
		"Ability1" "hide_hero" // Ability 1.
		"Ability2" "" // Ability 2.
		"Ability3" "" // Ability 3.
		"Ability4" "" // Ability 4.
		"Ability5" "" // Ability 5.
		"Ability6" "" // Ability 6 - Extra.
		"Ability7" "" // Ability 7 - Extra.
		"Ability8" "" // Ability 8 - Extra.
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical" "0" // Physical protection.
		"MagicalResistance" "0" // Magical protection.
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities" "DOTA_UNIT_CAP_NO_ATTACK" // Type of attack - melee, ranged, etc.
		"AttackDamageMin" "0" // Damage range min.
		"AttackDamageMax" "0" // Damage range max.
		"AttackDamageType" "DAMAGE_TYPE_ArmorPhysical"
		"AttackRate" "1" // Speed of attack.
		"AttackAnimationPoint" "0.5" // Normalized time in animation cycle to attack.
		"AttackAcquisitionRange" "800" // Range within a target can be acquired.
		"AttackRange" "500" // Range within a target can be attacked.
		"ProjectileModel" "" // Particle system model for projectile.
		"ProjectileSpeed" "900" // Speed of projectile.
		// Attributes
		//----------------------------------------------------------------
		"AttributePrimary" "DOTA_ATTRIBUTE_STRENGTH"
		"AttributeBaseStrength" "0" // Base strength
		"AttributeStrengthGain" "0" // Strength bonus per level.
		"AttributeBaseIntelligence" "0" // Base intelligence
		"AttributeIntelligenceGain" "0" // Intelligence bonus per level.
		"AttributeBaseAgility" "0" // Base agility
		"AttributeAgilityGain" "0" // Agility bonus per level.
		// Bounty
		//----------------------------------------------------------------
		"BountyXP" "0" // Experience earn.
		"BountyGoldMin" "0" // Gold earned min.
		"BountyGoldMax" "0" // Gold earned max.
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName" "DOTA_HULL_SIZE_SMALL" // Hull type used for navigation/locomotion.
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities" "DOTA_UNIT_CAP_MOVE_GROUND" // Type of locomotion - ground, air
		"MovementSpeed" "450" // Speed
		"MovementTurnRate" "10" // Turning rate.
		"FollowRange" "250" // Distance to keep when following
		// Status
		//----------------------------------------------------------------
		"StatusHealth" "1" // Base health.
		"StatusHealthRegen" "0" // Health regeneration rate.
		"StatusMana" "0" // Base mana.
		"StatusManaRegen" "0" // Mana regeneration rate.
		// Team
		//----------------------------------------------------------------
		"TeamName" "DOTA_TEAM_GOODGUYS" // Team name.
		"CombatClassAttack" "DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"           "DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass" "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange" "0" // Range of vision during day HERO.
		"VisionNighttimeRange" "0" // Range of vision at night time.
		// Bots
		//----------------------------------------------------------------
		"AttackDesire" "1.5" // How much bots want to attack them vs other non-hero things
	}
	"npc_dummy_unit"
	{
		// General
		//
		"BaseClass"         "npc_dota_creature"  // Class of entity of link to.
		"Model"           "models/props_items/mesh/monkey_king_destructible_bar_hitboxes.vmdl"  // Model.
		"SoundSet"          "Creep_Good_Range"          // Name of sound set.
		"Level"           "0"
		"UnitLabel"         "healing_ward"
		
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"          "dummy_unit"     // Ability 1.
		"Ability2"          ""      // Ability 2.
		"Ability3"          ""      // Ability 3.
		"Ability4"          ""      // Ability 4.
		"Ability5"          ""      // Ability 5.
		"Ability6"          ""      // Ability 6 - Extra.
		"Ability7"          ""      // Ability 7 - Extra.
		"Ability8"          ""      // Ability 8 - Extra.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"       "0"     // Physical protection.
		"MagicalResistance"       "0"     // Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"    "DOTA_UNIT_CAP_NO_ATTACK"     // Type of attack - melee, ranged, etc.
		"AttackDamageMin"     "0"     // Damage range min.
		"AttackDamageMax"     "0"     // Damage range max.
		"AttackDamageType"      "DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"        "1"     // Speed of attack.
		"AttackAnimationPoint"    "0.5"   // Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"  "800"   // Range within a target can be acquired.
		"AttackRange"       "500"   // Range within a target can be attacked.
		"ProjectileModel"     "" // Particle system model for projectile.
		"ProjectileSpeed"     "900"   // Speed of projectile.
	
		// Attributes
		//----------------------------------------------------------------
		"AttributePrimary"      "DOTA_ATTRIBUTE_STRENGTH"
		"AttributeBaseStrength"   "0"     // Base strength
		"AttributeStrengthGain"   "0"     // Strength bonus per level.
		"AttributeBaseIntelligence" "0"     // Base intelligence
		"AttributeIntelligenceGain" "0"     // Intelligence bonus per level.
		"AttributeBaseAgility"    "0"     // Base agility
		"AttributeAgilityGain"    "0"     // Agility bonus per level.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"          "0"     // Experience earn.
		"BountyGoldMin"       "0"     // Gold earned min.
		"BountyGoldMax"       "0"     // Gold earned max.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"      "DOTA_HULL_SIZE_SMALL"      // Hull type used for navigation/locomotion.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"    "DOTA_UNIT_CAP_MOVE_GROUND"     // Type of locomotion - ground, air
		"MovementSpeed"       "450"   // Speed
		"MovementTurnRate"      "1.0"   // Turning rate.
		"FollowRange"       "250"   // Distance to keep when following
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"        "99999"     // Base health.
		"StatusHealthRegen"     "0"     // Health regeneration rate.
		"StatusMana"        "99999"     // Base mana.
		"StatusManaRegen"     "0"     // Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"          "DOTA_TEAM_GOODGUYS"      // Team name.
		"CombatClassAttack"     "DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"     "DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"   "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"    "0"   // Range of vision during day HERO.
		"VisionNighttimeRange"    "0"   // Range of vision at night time.
	
		// Bots
		//----------------------------------------------------------------
		"AttackDesire"        "1.5"   // How much bots want to attack them vs other non-hero things
	} 
	"npc_dummy_vision"
	{
		// General
		//
		"BaseClass" "npc_dota_creature" // Class of entity of link to.
		"Model" "models/development/invisiblebox.vmdl" // Model.
		"SoundSet" "Creep_Good_Range" // Name of sound set.
		"Level" "0"
		"UnitLabel" "healing_ward"
		// Abilities
		//----------------------------------------------------------------
		"Ability1" "hide_hero" // Ability 1.
		"Ability2" "" // Ability 2.
		"Ability3" "" // Ability 3.
		"Ability4" "" // Ability 4.
		"Ability5" "" // Ability 5.
		"Ability6" "" // Ability 6 - Extra.
		"Ability7" "" // Ability 7 - Extra.
		"Ability8" "" // Ability 8 - Extra.
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical" "0" // Physical protection.
		"MagicalResistance" "0" // Magical protection.
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities" "DOTA_UNIT_CAP_NO_ATTACK" // Type of attack - melee, ranged, etc.
		"AttackDamageMin" "0" // Damage range min.
		"AttackDamageMax" "0" // Damage range max.
		"AttackDamageType" "DAMAGE_TYPE_ArmorPhysical"
		"AttackRate" "1" // Speed of attack.
		"AttackAnimationPoint" "0.5" // Normalized time in animation cycle to attack.
		"AttackAcquisitionRange" "800" // Range within a target can be acquired.
		"AttackRange" "500" // Range within a target can be attacked.
		"ProjectileModel" "" // Particle system model for projectile.
		"ProjectileSpeed" "900" // Speed of projectile.
		// Attributes
		//----------------------------------------------------------------
		"AttributePrimary" "DOTA_ATTRIBUTE_STRENGTH"
		"AttributeBaseStrength" "0" // Base strength
		"AttributeStrengthGain" "0" // Strength bonus per level.
		"AttributeBaseIntelligence" "0" // Base intelligence
		"AttributeIntelligenceGain" "0" // Intelligence bonus per level.
		"AttributeBaseAgility" "0" // Base agility
		"AttributeAgilityGain" "0" // Agility bonus per level.
		// Bounty
		//----------------------------------------------------------------
		"BountyXP" "0" // Experience earn.
		"BountyGoldMin" "0" // Gold earned min.
		"BountyGoldMax" "0" // Gold earned max.
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName" "DOTA_HULL_SIZE_SMALL" // Hull type used for navigation/locomotion.
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities" "DOTA_UNIT_CAP_MOVE_FLY" // Type of locomotion - ground, air
		"MovementSpeed" "450" // Speed
		"MovementTurnRate" "10" // Turning rate.
		"FollowRange" "250" // Distance to keep when following
		// Status
		//----------------------------------------------------------------
		"StatusHealth" "1" // Base health.
		"StatusHealthRegen" "0" // Health regeneration rate.
		"StatusMana" "0" // Base mana.
		"StatusManaRegen" "0" // Mana regeneration rate.
		// Team
		//----------------------------------------------------------------
		"TeamName" "DOTA_TEAM_GOODGUYS" // Team name.
		"CombatClassAttack" "DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"           "DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass" "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange" "6000" // Range of vision during day HERO.
		"VisionNighttimeRange" "6000" // Range of vision at night time.
		// Bots
		//----------------------------------------------------------------
		"AttackDesire" "1.5" // How much bots want to attack them vs other non-hero things
	}
	//Start of file npc_dummy_blank.txt
	// Made by BMD
	"npc_multicast"
	{
		"BaseClass" "npc_dota_creep_neutral"
		"SoundSet" "n_creep_Melee"
		"Level" "5"
		"IsAncient" "1"
		"ModelScale" "1"
		"IsNeutralUnitType" "1"
		"Ability1" "lod_dummy_unit"
		"AttackCapabilities"
		"DOTA_UNIT_CAP_NO_ATTACK"
		"MovementCapabilities" "DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed" "500"
		"StatusHealth" "800"
		"StatusHealthRegen" "0.5"
		"StatusMana" "5000"
		"StatusManaRegen" "50"
		"VisionDaytimeRange" "0"
		"VisionNighttimeRange" "0"
		"BoundsHullName" "DOTA_HULL_SIZE_SMALL"
		"RingRadius" "0"
		"HealthBarOffset" "10000"
	}
	"npc_target_practice"
	  {
	    // General
	    "BaseClass"         "npc_dota_creature"  // Class of entity of link to.
	    "Model"           "models/creeps/lane_creeps/creep_bad_melee_diretide/creep_bad_melee_diretide.vmdl"  // Model.
	    "SoundSet"          "Creep_Good_Range"          // Name of sound set.
	    "Level"           "0"
	    "UnitLabel"         "healing_ward"
	    
	    // Abilities
	    //----------------------------------------------------------------
	    
	    "Ability1"          ""     // Ability 1.
	    "Ability2"          ""      // Ability 2.
	    "Ability3"          ""      // Ability 3.
	    "Ability4"          ""      // Ability 4.
	    "Ability5"          ""      // Ability 5.
	    "Ability6"          ""      // Ability 6 - Extra.
	    "Ability7"          ""      // Ability 7 - Extra.
	    "Ability8"          ""      // Ability 8 - Extra.
	
	    // Armor
	    //----------------------------------------------------------------
	    "ArmorPhysical"       "0"     // Physical protection.
	    "MagicalResistance"       "0"     // Magical protection.
	
	    // Attack
	    //----------------------------------------------------------------
	    "AttackCapabilities"    "DOTA_UNIT_CAP_MELEE_ATTACK"     // Type of attack - melee, ranged, etc.
	    "AttackDamageMin"     "1"     // Damage range min.
	    "AttackDamageMax"     "5"     // Damage range max.
	    "AttackDamageType"      "DAMAGE_TYPE_ArmorPhysical"
	    "AttackRate"        "3"     // Speed of attack.
	    "AttackAnimationPoint"    "0.5"   // Normalized time in animation cycle to attack.
	    "AttackAcquisitionRange"  "250"   // Range within a target can be acquired.
	    "AttackRange"       "300"   // Range within a target can be attacked.
	    "ProjectileModel"     "" // Particle system model for projectile.
	    "ProjectileSpeed"     "900"   // Speed of projectile.
	
	    // Bounty
	    //----------------------------------------------------------------
	    "BountyXP"          "0"     // Experience earn.
	    "BountyGoldMin"       "0"     // Gold earned min.
	    "BountyGoldMax"       "0"     // Gold earned max.
	
	    // Bounds
	    //----------------------------------------------------------------
	    "BoundsHullName"      "DOTA_HULL_SIZE_SMALL"      // Hull type used for navigation/locomotion.
	
	    // Movement
	    //----------------------------------------------------------------
	    "MovementCapabilities"    "DOTA_UNIT_CAP_MOVE_GROUND"     // Type of locomotion - ground, air
	    "MovementSpeed"       "450"   // Speed
	    "MovementTurnRate"      "1.0"   // Turning rate.
	    "FollowRange"       "250"   // Distance to keep when following
	
	    // Status
	    //----------------------------------------------------------------
	    "StatusHealth"        "100000"     // Base health.
	    "StatusHealthRegen"     "0"     // Health regeneration rate.
	    "StatusMana"        "0"     // Base mana.
	    "StatusManaRegen"     "0"     // Mana regeneration rate.
	
	    // Team
	    //----------------------------------------------------------------
	    "TeamName"          "DOTA_TEAM_GOODGUYS"      // Team name.
	    "CombatClassAttack"     "DOTA_COMBAT_CLASS_ATTACK_PIERCE"
	    "CombatClassDefend"     "DOTA_COMBAT_CLASS_DEFEND_BASIC"
	    "UnitRelationshipClass"   "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	    
	    // Vision
	    //----------------------------------------------------------------
	    "VisionDaytimeRange"    "1000"   // Range of vision during day light.
	    "VisionNighttimeRange"    "1000"   // Range of vision at night time.
	
	    // Bots
	    //----------------------------------------------------------------
	    "AttackDesire"        "1.5"   // How much bots want to attack them vs other non-hero things
	  } 
	"witch_doctor_death_ward_ebf"
	{
		// General
		//----------------------------------------------------------------
		"BaseClass"             "npc_dota_creature"
		"Model"                 "models/heroes/witchdoctor/witchdoctor_ward.vmdl"
		"ModelScale"            "1.0"
		"Level"                 "1"
		"HasInventory"          "1"
	   
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"         "2"
		"MagicalResistance"     "0"
	   
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"    "DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageType"      "DAMAGE_TYPE_ArmorPhysical"
		"AttackDamageMin"       "0.0"
		"AttackDamageMax"       "0.0"
		"AttackRate"            "0.22"
		"AttackAnimationPoint"  "0.0"
		"AttackAcquisitionRange" "700"
		"AttackRange"           "700"
		"ProjectileModel"            "particles/units/heroes/hero_witchdoctor/witchdoctor_ward_attack.vpcf"
		"ProjectileSpeed"            "1000"
	   
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"        "DOTA_HULL_SIZE_HERO"
		"RingRadius"            "70"
	   
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"  "DOTA_UNIT_CAP_MOVE_NONE"
	   
		// Status
		//----------------------------------------------------------------
		"StatusHealth"          "10000"
		"StatusHealthRegen"     "5000"
		"StatusMana"            "0"
		"StatusManaRegen"       "0"
	   
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"    "1200"
		"VisionNighttimeRange"  "800"
	   
		// Team
		//----------------------------------------------------------------
		"CombatClassAttack"     "DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"     "DOTA_COMBAT_CLASS_DEFEND_STRONG"
		"UnitRelationShipClass" "DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
	}
	"npc_elder_spirit"
	{										
		// General
		//----------------------------------------------------------------
		//"Model"					"models/heroes/elder_titan/ancestral_spirit.vmdl"	// Model.
		"Model"						"models/heroes/elder_titan/elder_titan.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"0"			// Name of sound set.
		"Level"						"1"
		"ModelScale"				"1.0"
		"ConsideredHero"			"1"
		"IsAncient"					"1"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"			// Damage range min.
		"AttackDamageMax"			"0"			// Damage range max.	
		"AttackRate"				"1.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"			// Range within a target can be acquired.
		"AttackRange"				"0"			// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"1"			// Gold earned min.
		"BountyGoldMax"				"1"			// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"315"			// Speed
		"MovementTurnRate"			"0.5"		// Turning rate.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"100"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		"StatusMana"				"1000000"			// Base mana.
		"StatusManaRegen"			"1000000"		// Mana regeneration rate.	
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1000"		// Range of vision during day light.
		"VisionNighttimeRange"		"1000"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_SOFT"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"

		"Creature"
	    {
	    	"AttachWearables"
			{
			    "Wearable1" { "ItemDef" "427" }
			    "Wearable2" { "ItemDef" "428" }
			    "Wearable3" { "ItemDef" "430" }
			    "Wearable4" { "ItemDef" "429" }
			    "Wearable4" { "ItemDef" "426" }
			}
	    }
		
	}
	"wearable_dummy"
	{
		"BaseClass"     "npc_dota_creature"
	}
	"npc_illusion_template"
	{
		"BaseClass"     			"npc_dota_creature"
		"Model"						"models/heroes/brewmaster/brewmaster_earthspirit.vmdl"
		"IsSummoned"				"1"
		"ConsideredHero"			"1"
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"
		"HasInventory"				"1"
		"AttackRange"				"0"
		"AttackAnimationPoint"		"0.3"
		"AttackAcquisitionRange"	"9999"
		"ProjectileSpeed"			"0"
	}
	"npc_chen_creature_1"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/brewmaster/brewmaster_earthspirit.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"Brewmaster_Earth"			// Name of sound set.
		"IsSummoned"				"1"
		"IsAncient"					"1"
		"ModelScale"				"1.15"
		"UnitLabel"					"chen_creture_1"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					"chen_tank_shockwave"			// Ability 1
		"Ability2"					"chen_tank_slam"			// Ability 1

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"20"			// Physical protection.
		"MagicalResistance"			"80"		// Magical protection.  // this should be 33, switch it back once we implement Resistant Skin

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"150"		// Damage range max.	
		"AttackRate"				"1.25"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"600"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"HealthBarOffset"			"175"

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"150"		// Gold earned min.
		"BountyGoldMax"				"150"		// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"325"		// Speed.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1500"		// Base health.
		"StatusHealthRegen"			"1"		// Health regeneration rate.
		"StatusMana"				"400"			// Base mana.
		"StatusManaRegen"			"2"			// Mana regeneration rate.
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day light.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_LIGHT"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"

		//Inventory
		"HasInventory"				"0"
	}
	"npc_chen_creature_2"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/brewmaster/brewmaster_firespirit.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"Brewmaster_Fire"			// Name of sound set.
		"IdleSoundLoop"				"Brewmaster_Fire.Move_Loop"
		"IsSummoned"				"1"
		"IsAncient"					"1"
		"ModelScale"				"1"
		"UnitLabel"					"chen_creture_2"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					"chen_dps_strike"			// Ability 1
		"Ability2"					"chen_dps_crit"			// Ability 1

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.  // this should be 33, switch it back once we implement Resistant Skin

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"150"		// Damage range max.	
		"AttackRate"				"0.1"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"600"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_lina/lina_base_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"1200"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"HealthBarOffset"			"260"

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"150"		// Gold earned min.
		"BountyGoldMax"				"150"		// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"550"		// Speed.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1000"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"64000"			// Base mana.
		"StatusManaRegen"			"6400"			// Mana regeneration rate.
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day light.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_LIGHT"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"

		"VoiceFile" 				"scripts/voscripts/game_sounds_vo_warlock_golem.txt"
		//Inventory
		"HasInventory"				"0"
	}
	"npc_chen_creature_3"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/brewmaster/brewmaster_windspirit.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"Brewmaster_Storm"			// Name of sound set.
		"IdleSoundLoop"				"Brewmaster_Storm.Move_Loop"
		"IsSummoned"				"1"
		"IsAncient"					"1"
		"ModelScale"				"1"
		"UnitLabel"					"chen_creture_3"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					"chen_sup_silence"			// Ability 1
		"Ability2"					"chen_sup_mr"			// Ability 1

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.  // this should be 33, switch it back once we implement Resistant Skin

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"150"		// Damage range min.
		"AttackDamageMax"			"150"		// Damage range max.	
		"AttackRate"				"0.75"		// Speed of attack.
		"AttackAnimationPoint"		"1.2"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"600"		// Range within a target can be acquired.
		"AttackRange"				"600"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_brewmaster/brewmaster_storm_attack.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"1200"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"HealthBarOffset"			"160"

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"150"		// Gold earned min.
		"BountyGoldMax"				"150"		// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"325"		// Speed.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1000"		// Base health.
		"StatusHealthRegen"			"10"		// Health regeneration rate.
		"StatusMana"				"64000"			// Base mana.
		"StatusManaRegen"			"6400"			// Mana regeneration rate.
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day light.
		"VisionNighttimeRange"		"1800"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_LIGHT"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		//Inventory
		"HasInventory"				"0"
	}
	//=================================================================================
	// Magnus Magnet
	//=================================================================================
	"npc_magnus_magnet"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/props_structures/tower_upgrade/tower_upgrade.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"Level"						"1"
		"ModelScale" 				"0.75"
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"		// Damage range min.
		"AttackDamageMax"			"0"		// Damage range max.	
		"AttackRate"				"0"		// Speed of attack.
		"AttackAnimationPoint"		"0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"		// Range within a target can be acquired.
		"AttackRange"				"0"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
		"HealthBarOffset"			"200"
		"BoundsHullName"			"DOTA_HULL_SIZE_REGULAR"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"
		"MovementSpeed"				"0"		// Speed.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1"		// Base health.
		"StatusHealthRegen"			"0"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"8000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	}
	//=================================================================================
	// KOTL Spirit
	//=================================================================================
	"npc_kotl_spirit"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/keeper_of_the_light/keeper_of_the_light.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"0"			// Name of sound set.
		"Level"						"1"
		"ModelScale"				"1.0"
		"ConsideredHero"			"1"
		"IsAncient"					"1"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"			// Damage range min.
		"AttackDamageMax"			"0"			// Damage range max.	
		"AttackRate"				"1.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"			// Range within a target can be acquired.
		"AttackRange"				"0"			// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"1"			// Gold earned min.
		"BountyGoldMax"				"1"			// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"315"			// Speed
		"MovementTurnRate"			"0.5"		// Turning rate.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"100"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		"StatusMana"				"1000000"			// Base mana.
		"StatusManaRegen"			"1000000"		// Mana regeneration rate.	
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1000"		// Range of vision during day light.
		"VisionNighttimeRange"		"1000"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_SOFT"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"

		"Creature"
	    {
	    	"AttachWearables"
			{
			    "Wearable1" { "ItemDef" "252" }
			    "Wearable2" { "ItemDef" "253" }
			    "Wearable3" { "ItemDef" "254" }
			    "Wearable4" { "ItemDef" "255" }
			    "Wearable4" { "ItemDef" "256" }
			}
	    }
	}
	//=================================================================================
	// Tinker Turret
	//=================================================================================
	"npc_tinker_turret"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/items/rattletrap/cog_tesla/cog_tesla.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"0"			// Name of sound set.
		"Level"						"1"
		"ModelScale"				"2.0"
		"ConsideredHero"			"0"
		"IsAncient"					"1"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"			// Damage range min.
		"AttackDamageMax"			"0"			// Damage range max.	
		"AttackRate"				"1.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"			// Range within a target can be acquired.
		"AttackRange"				"0"			// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"1"			// Gold earned min.
		"BountyGoldMax"				"1"			// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"			// Type of locomotion - ground, air
		"MovementSpeed"				"0"			// Speed
		"MovementTurnRate"			"5"		// Turning rate.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"100"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"		// Mana regeneration rate.	
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1000"		// Range of vision during day light.
		"VisionNighttimeRange"		"1000"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_SOFT"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	}

	//=================================================================================
	// Creature: Spider Sack
	// Zones: darkforest_pass
	//=================================================================================
	"npc_dota_spider_sack"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/spiders/spidersack.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"0"			// Name of sound set.
		"Level"						"1"
		"ModelScale"				"0.5"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"			// Damage range min.
		"AttackDamageMax"			"0"			// Damage range max.	
		"AttackRate"				"1.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"			// Range within a target can be acquired.
		"AttackRange"				"0"			// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.

		// Bounty
		//----------------------------------------------------------------

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"
		"MovementSpeed"				"0"			// Speed.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"0"		// Range of vision during day light.
		"VisionNighttimeRange"		"0"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	}
	//=================================================================================
	// Creature: Boss 5
	//=================================================================================
	"npc_dota_event_totem"
	{
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/props_structures/tower_good.vmdl"	// Model.
		"SoundSet"					"Undying_Zombie"					// Name of sound set.
		"GameSoundsFile"			"soundevents/game_sounds_heroes/game_sounds_undying.vsndevts"
		"ModelScale"				"1"
		"Level"						"5"
		"IsAncient"					"0"
		"precache"
		{
			"particle_folder"		"particles/units/heroes/hero_undying"
		}
		
		//----------------------------------------------------------------
		
		"AbilityLayout"				"6"
		"Ability1"					"generic_hp_limiter"			// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 2.
		"Ability4"					""			// Ability 2.
	
	
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
	
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"		// Damage range min.
		"AttackDamageMax"			"0"		// Damage range max.
		"AttackRate"				"3.75"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"128"		// Range within a target can be attacked.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"	
		"HealthBarOffset"			"350"
		
		
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"			// Type of locomotion - ground, air
		"MovementSpeed"				"125"		// Speed
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"50"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"		// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"2000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"2000"		// Range of vision at night time.
	}

	"npc_dota_techies_remote_mine"
	{
		"BaseClass"					"npc_dota_creature"
		
		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"0"		// Speed.
		"MovementTurnRate"			"1"		// Turning rate.
	}

	//=================================================================================
	// Green Dragon Boss
	//=================================================================================
	"npc_dota_green_dragon"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/dragon_knight/dragon_knight_dragon.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Ranged"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"22"
		"ModelScale" 				"1.5"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_dragon_green"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"3"
		"Ability1"					"green_dragon_toxic_pool"			// Ability 1.
		"Ability2"					"green_dragon_etheral_armor"
		"Ability3"					"green_dragon_rot"
		"Ability4"					"green_dragon_volatile_rot"
		"Ability5"					""
		"Ability6"					""
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"6"			// Physical protection.
		"MagicalResistance"			"25"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"75"	// Damage range min.
		"AttackDamageMax"			"90"		// Damage range max.
		"AttackRate"				"7.0"		// Speed of attack.
		"AttackAnimationPoint"		"1"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"400"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_dragon_knight/dragon_knight_elder_dragon_corrosive.vpcf"			// Particle system model for projectile.
		"ProjectileSpeed"			"1000"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"350"		// Speed.
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2500"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"100"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
	
			//Level Up Parameters
			//------------------------------------------------------------
			"HPGain"					"8000"
			"DamageGain"				"300"
			"ArmorGain"					"10"
			"MagicResistGain"			"50"
			"MoveSpeedGain"				"0"
			"BountyGain"				"0"
			"XPGain"					"200"
			
			"NOSTUNRESIST"			"60.0"
		}
	}

	//=================================================================================
	// Green Dragon Boss Bug
	//=================================================================================
	"npc_dota_green_dragon_bug"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/items/broodmother/spiderling/lycosidae_spiderling/lycosidae_spiderling.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Ranged"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"0.5"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"50"
		"IsCore"					"0"
		"vscripts"					"ai/ai_generic"
	
		// Abilities
		//----------------------------------------------------------------
		"AbilityLayout"				"1"
		"Ability1"					"green_dragon_bug_explode"			// Ability 1.
	
		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"6"			// Physical protection.
		"MagicalResistance"			"60"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"	// Damage range min.
		"AttackDamageMax"			"0"		// Damage range max.
		"AttackRate"				"0"		// Speed of attack.
		"AttackAnimationPoint"		"0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"0"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"100"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"350"		// Speed.
		"MovementTurnRate"			"0.25"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"100"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"8000"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"8000"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{	
			"CanRespawn"				"0"
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"100.0"
					"Avoidance"			"0.0"
					"Support"			"0.0"
				}
			}
			"DefaultState"				"Invade"
		}
	}
	"npc_dota_warlock_imp"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/creeps/lane_creeps/creep_bad_ranged/lane_dire_ranged.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1"
		"IsAncient"					"0"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"300"
		"IsCore"					"0"
		"vscripts"					"ai/ai_warlock_imp"
	
		// Abilities
		//----------------------------------------------------------------
		"Ability1"					"warlock_imp_bolt"			// Ability 1.
		"Ability2"					""
		"Ability3"					""
		"Ability4"					""
		"Ability5"					""

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"200"		// Damage range min.
		"AttackDamageMax"			"100"		// Damage range max.
		"AttackRate"				"1.25"
		"AttackAnimationPoint"		"0.3"
		"AttackAcquisitionRange"	"15000"		// Range within a target can be acquired.
		"AttackRange"				"15000"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_warlock/warlock_base_attack.vpcf"							// Particle system model for projectile.
		"ProjectileSpeed"			"1200"									// Speed of projectile.
	
		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"RingRadius"				"120"
		"HealthBarOffset"			"320"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"		// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"380"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"500"		// Base health.
		"StatusHealthRegen"			"0"			// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			//HERO AI State
			//------------------------------------------------------------
			"States"
			{
				"Invade"
				{
					"Name"				"Invade"
					"Aggression"		"97.0"
					"Avoidance"			"60.0"
					"Support"			"60.0"
					"RoamDistance"  	"500"
				}
			}
			
			"DefaultState"				"Invade"
		}
	}

	"npc_dota_boss_troll_warlord"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/troll_warlord/troll_warlord.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1.3"
		"IsWild"					"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"275"
		"IsCore"					"1"
		"vscripts"					"ai/ai_troll_warlord"
	
		// Abilities----------------------
		"Ability1"					"boss_troll_warlord_axe_fury"
		"Ability2"					"boss_troll_warlord_ensare"
		"Ability3"					"boss_troll_warlord_mystic_axes"
		"Ability4"					"boss_troll_warlord_enrage"
		"Ability6"					"boss_troll_warlord_savage_leap"

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"6"			// Physical protection.
		"MagicalResistance"			"36"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"80"		// Damage range min.
		"AttackDamageMax"			"120"		// Damage range max.	
		"AttackRate"				"3.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.9"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"150"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"80"
		"HealthBarOffset"			"320"
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"220"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"3500"		// Base health.
		"StatusHealthRegen"			"8"			// Health regeneration rate.
		"StatusMana"				"500"			// Base mana.
		"StatusManaRegen"			"50"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
			"AttachWearables"
			{
				"1" { "ItemDef" "411" } 
				"2" { "ItemDef" "373" } 
				"3" { "ItemDef" "410" } 
				"4" { "ItemDef" "9596" } 
			}
		}
	}

	"npc_dota_boss_troll_warlord_mystic_axe"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/development/invisiblebox.vmdl"
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Melee"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1"
		"MinimapIcon"				"minimap_enemyicon"
		"MinimapIconSize"			"1"
		"IsCore"					"0"
		"vscripts"					"ai/ai_troll_warlord_mystic_axes"
	
		// Abilities----------------------
		"Ability1"					"boss_troll_warlord_mystic_axes_charge"

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"1"			// Physical protection.
		"MagicalResistance"			"1"		// Magical protection.
		
		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"1"		// Damage range min.
		"AttackDamageMax"			"1"		// Damage range max.	
		"AttackRate"				"1"		// Speed of attack.
		"AttackAnimationPoint"		"1"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"18000"		// Range within a target can be acquired.
		"AttackRange"				"1"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   
	
		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"0"
		"HealthBarOffset"			"0"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"			// Gold earned min.
		"BountyGoldMax"				"0"			// Gold earned max.
	
		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed"				"550"		// Speed.
		"MovementTurnRate"			"0.3"		// Turning rate.
	
		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"2"		// Base health.
		"StatusHealthRegen"			"1"			// Health regeneration rate.
		"StatusMana"				"1"			// Base mana.
		"StatusManaRegen"			"1"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"600"		// Range of vision during day HERO.
		"VisionNighttimeRange"		"600"		// Range of vision at night time.
	
		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_BADGUYS"
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_HERO"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Creature Data
		//----------------------------------------------------------------
		"Creature"
		{
		}
	}
	//=================================================================================
	// Lycan Wolves
	//=================================================================================
	"npc_dota_lycan_wolf1"
	{										
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/lycan/summon_wolves.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"Lycan_Wolf"
		"Level"						"1"
		"ConsideredHero"			"1"
		"ModelScale" 				"0.9"
		"UnitLabel"					"lycan_wolf"
  		"UseNeutralCreepBehavior"	"0"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"1"			// Physical protection.
		"MagicalResistance"				"80"		// Magical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"24"		// Damage range min.
		"AttackDamageMax"			"28"		// Damage range max.	
		"AttackRate"				"1.2"		// Speed of attack.
		"AttackAnimationPoint"		"0.33"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"500"		// Range within a target can be acquired.
		"AttackRange"				"90"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"70"
		"HealthBarOffset"			"160"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"20"		// Experience earn.
		"BountyGoldMin"				"21"		// Gold earned min.
		"BountyGoldMax"				"21"		// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"
		"MovementSpeed"				"400"		// Speed.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"230"		// Base health.
		"StatusHealthRegen"			"0.5"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1200"		// Range of vision during day light.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
	}

	//=================================================================================
	// Wraith King Skeleton Knight
	//=================================================================================
	"npc_dota_skeleton_knight"
	{										
		// General
		//
		"BaseClass"					"npc_dota_creature"	// Class of entity of link to.
		"Model"						"models/skeleton_king_reference.vmdl"	// Model.
		"SoundSet"					"Creep_Good_Melee"					// Name of sound set.
		"ModelScale"				"1.3"
		"Level"						"1"
		"IsSummoned"				"1"
				
		// Abilities
		//----------------------------------------------------------------
		
		"Ability1"					""			// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.
		"Ability6"					""			// Ability 6 - Extra.
		"Ability7"					""			// Ability 7 - Extra.
		"Ability8"					""			// Ability 8 - Extra.

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"1"			// Physical protection.
		"MagicalResistance"				"50"			// Magical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"35"		// Damage range min.
		"AttackDamageMax"			"40"		// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"1.2"		// Speed of attack.
		"AttackAnimationPoint"		"0.56"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"300"		// Range within a target can be acquired.
		"AttackRange"				"115"		// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			""			// Speed of projectile.

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"5"		// Experience earn.
		"BountyGoldMin"				"5"			// Gold earned min.
		"BountyGoldMax"				"5"		// Gold earned max.

		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALLEST"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"140"

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"350"		// Speed
		"MovementTurnRate"			"0.5"		// Turning rate.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"350"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		"StatusMana"				"1000"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"800"		// Range of vision during day light.
		"VisionNighttimeRange"		"600"		// Range of vision at night time.

		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{
			"CanRespawn"				"0"
			
			"AttachWearables"
			{
				//"Wearable1" { "ItemDef"			"149" }
				//"Wearable2" { "ItemDef"			"7528" }
				//"Wearable3" { "ItemDef"			"7212" }
				//"Wearable4" { "ItemDef"			"7529" }
			}
		}
	}
	
	// VANILA OVERRIDES
	"npc_dota_techies_land_mine"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/techies/fx_techiesfx_mine.vmdl"	// Model.
		"BaseClass"					"npc_dota_techies_mines"
		"SoundSet"					"0"			// Name of sound set.
		"Level"						"1"
		"ModelScale"				"1.0"
		"SelectionGroup"			"Techies_LandMines"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
 		"wearable"					"8644"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"			// Damage range min.
		"AttackDamageMax"			"0"			// Damage range max.	
		"AttackRate"				"1.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"			// Range within a target can be acquired.
		"AttackRange"				"0"			// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"HealthBarOffset"			"140"

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"0"		// Gold earned min.
		"BountyGoldMax"				"0"		// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"  // has to be move ground because something about neutral camps
		"MovementSpeed"				"0"		// Speed.
		"MovementTurnRate"			"0.4"		// Turning rate.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"64"		// Range of vision during day light.
		"VisionNighttimeRange"		"64"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
	}
	"npc_dota_clinkz_skeleton_archer"
	{
		// General
		//----------------------------------------------------------------
		"BaseClass"					"npc_dota_clinkz_skeleton_archer"	// Class of entity of link to.
		"Model"						"models/heroes/clinkz/clinkz_archer.vmdl"// Model.
		"SoundSet"					"Hero_Clinkz"					// Name of sound set.
		"Level"						"1"
		"ModelScale"				"1.1"
		"wearable"				"669"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					"clinkz_searing_arrows"			// Ability 1.
		"Ability2"					""			// Ability 2.
		"Ability3"					""			// Ability 3.
		"Ability4"					""			// Ability 4.
		"Ability5"					""			// Ability 5.

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"				"0"			// Magical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"5"			// Damage range min.
		"AttackDamageMax"			"5"			// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"1.7"		// Speed of attack.
		"AttackAnimationPoint"		"0.3"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"900"		// Range within a target can be acquired.
		"AttackRange"				"500"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_clinkz/clinkz_base_attack.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"900"		// Speed of projectile.

		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"200"

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"0"			// Speed
		"MovementTurnRate"			"0.5"		// Turning rate.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"20"		// Experience earn.
		"BountyGoldMin"				"20"		// Gold earned min.
		"BountyGoldMax"				"20"		// Gold earned max.

			// Status
		//----------------------------------------------------------------
		"StatusHealth"				"8"		// Base health.
		"StatusHealthRegen"			"0"		// Health regeneration rate.
		"StatusMana"				"100"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"800"		// Range of vision during day light.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.

		//Inventory
		"HasInventory"				"0"
	}
	"npc_dota_arc_warden_tempest_mirage"
	{
		// General
		//----------------------------------------------------------------
		"BaseClass"					"npc_dota_lone_druid_bear"	// Class of entity of link to.
		"Model"						"models/heroes/arc_warden/arc_warden.vmdl"// Model.
		"SoundSet"					"Hero_ArcWarden"					// Name of sound set.
		"Level"						"1"
		"ConsideredHero"			"1"
		"ModelScale"				"1.1"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					"arc_warden_flux_bh"			// Ability 1.
		"Ability2"					"arc_warden_magnetic_field_bh"			// Ability 2.
		"Ability3"					"arc_warden_spark_wrath_bh"			// Ability 3.
		"Ability4"					"generic_hidden"			// Ability 4.
		"Ability5"					"generic_hidden"			// Ability 4.
		"Ability6"					"arc_warden_primordial_current"			// Ability 5.

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.
		"MagicalResistance"			"0"			// Magical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"
		"AttackDamageMin"			"5"			// Damage range min.
		"AttackDamageMax"			"5"			// Damage range max.
		"AttackDamageType"			"DAMAGE_TYPE_ArmorPhysical"
		"AttackRate"				"1.7"		// Speed of attack.
		"AttackAnimationPoint"		"0.3"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"900"		// Range within a target can be acquired.
		"AttackRange"				"625"		// Range within a target can be attacked.
		"ProjectileModel"			"particles/units/heroes/hero_arc_warden/arc_warden_base_attack.vpcf" // Particle system model for projectile.
		"ProjectileSpeed"			"900"		// Speed of projectile.

		// Bounds
		//----------------------------------------------------------------
		"BoundsHullName"			"DOTA_HULL_SIZE_HERO"			// Hull type used for navigation/locomotion.
		"HealthBarOffset"			"200"

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_GROUND"			// Type of locomotion - ground, air
		"MovementSpeed"				"280"			// Speed
		"MovementTurnRate"			"0.6"		// Turning rate.
	
		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"20"		// Experience earn.
		"BountyGoldMin"				"20"		// Gold earned min.
		"BountyGoldMax"				"20"		// Gold earned max.

			// Status
		//----------------------------------------------------------------
		"StatusHealth"				"200"		// Base health.
		"StatusHealthRegen"			"0"		// Health regeneration rate.
		"StatusMana"				"75"			// Base mana.
		"StatusManaRegen"			"0"			// Mana regeneration rate.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_GOODGUYS"			// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_HERO"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"1800"		// Range of vision during day light.
		"VisionNighttimeRange"		"800"		// Range of vision at night time.

		//Inventory
		"HasInventory"				"1"
	}
	"npc_dota_beastmaster_hawk_1"
	{										
		// General
		//----------------------------------------------------------------
		"Model"							"models/heroes/beastmaster/beastmaster_bird.vmdl"	// Model.
		"BaseClass"						"npc_dota_beastmaster_hawk"
		"SoundSet"						"0"			// Name of sound set.
		"Level"							"1"
		"ModelScale"					"1.2"
		"IsSummoned"					"1"
		"UnitLabel"						"hawk"
		"IgnoreAddSummonedToSelection" "0"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"5"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_RANGED_ATTACK"

		// Bounds
		//----------------------------------------------------------------
		"HealthBarOffset"			"165"

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"77"		// Experience earn.
		"BountyGoldMin"				"30"		// Gold earned min.
		"BountyGoldMax"				"30"		// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_FLY"
		"MovementSpeed"				"300"		// Speed.
		"MovementTurnRate"			"0.6"		// Turning rate.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"150"		// Base health.
		"StatusHealthRegen"			"1.5"		// Health regeneration rate.
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"600"		// Range of vision during day light.
		"VisionNighttimeRange"		"600"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"
		
		"WakesNeutrals"				"0"
	}
	"npc_mars_warrior"	
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/mars/mars_soldier.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"n_creep_Ranged"
		"GameSoundsFile"			"soundevents/game_sounds_creeps.vsndevts"
		"Level"						"1"
		"ModelScale" 				"1"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_MELEE_ATTACK"
		"AttackDamageMin"			"30"		// Damage range min.
		"AttackDamageMax"			"36"		// Damage range max.
		"AttackRate"				"1"		// Speed of attack.
		"AttackAnimationPoint"		"0.4"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"80000"		// Range within a target can be acquired.
		"AttackRange"				"160"		// Range within a target can be attacked.
		"ProjectileModel"			"" // Particle system model for projectile.
		"ProjectileSpeed"			"0"		// Speed of projectile.		     

		// Bounds
		//----------------------------------------------------------------
		"RingRadius"				"40"
	    "BoundsHullName"      		"DOTA_HULL_SIZE_SMALL"      // Hull type used for navigation/locomotion.
	

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"
		"MovementSpeed"				"270"		// Speed.			

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"75"		// Base health.
		"StatusHealthRegen"			"0.5"		// Health regeneration rate.
		"StatusMana"				"0"			// Base mana.
		"StatusManaRegen"			"0.0"		// Mana regeneration rate.		 
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"80000"		// Range of vision during day light.
		"VisionNighttimeRange"		"80000"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_PIERCE"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_DEFAULT"

		// Creature Data
		//----------------------------------------------------------------------------------------------------------------------
		"Creature"
		{

			//Level Up
			"HPGain"					"50"
			"DamageGain"				"2"
			"ArmorGain"					"0.25"
			"MagicResistGain"			"0.1"
			"MoveSpeedGain"				"1"
			"BountyGain"				"3"
			"XPGain"					"15"
		}
	}
	"npc_dota_generic_land_mine"
	{
		// General
		//----------------------------------------------------------------
		"Model"						"models/heroes/techies/fx_techiesfx_mine.vmdl"	// Model.
		"BaseClass"					"npc_dota_creature"
		"SoundSet"					"0"			// Name of sound set.
		"Level"						"1"
		"ModelScale"				"1.0"
		"SelectionGroup"			"Techies_LandMines"
		"BoundsHullName"			"DOTA_HULL_SIZE_SMALL"

		// Abilities
		//----------------------------------------------------------------
		"Ability1"					""			// Ability 1
		"Ability2"					""			// Ability 2
		"Ability3"					""			// Ability 3
		"Ability4"					""			// Ability 4

		// Armor
		//----------------------------------------------------------------
		"ArmorPhysical"				"0"			// Physical protection.

		// Attack
		//----------------------------------------------------------------
		"AttackCapabilities"		"DOTA_UNIT_CAP_NO_ATTACK"
		"AttackDamageMin"			"0"			// Damage range min.
		"AttackDamageMax"			"0"			// Damage range max.	
		"AttackRate"				"1.0"		// Speed of attack.
		"AttackAnimationPoint"		"0.0"		// Normalized time in animation cycle to attack.
		"AttackAcquisitionRange"	"0"			// Range within a target can be acquired.
		"AttackRange"				"0"			// Range within a target can be attacked.
		"ProjectileModel"			""			// Particle system model for projectile.
		"ProjectileSpeed"			"0"			// Speed of projectile.		   

		// Bounds
		//----------------------------------------------------------------
		"HealthBarOffset"			"140"

		// Bounty
		//----------------------------------------------------------------
		"BountyXP"					"0"	// Experience earn.
		"BountyGoldMin"				"25"		// Gold earned min.
		"BountyGoldMax"				"25"		// Gold earned max.

		// Movement
		//----------------------------------------------------------------
		"MovementCapabilities"		"DOTA_UNIT_CAP_MOVE_NONE"  // has to be move ground because something about neutral camps
		"MovementSpeed"				"0"		// Speed.
		"MovementTurnRate"			"0.4"		// Turning rate.

		// Status
		//----------------------------------------------------------------
		"StatusHealth"				"1"		// Base health.
		"StatusHealthRegen"			"0.0"		// Health regeneration rate.
		
		// Vision
		//----------------------------------------------------------------
		"VisionDaytimeRange"		"64"		// Range of vision during day light.
		"VisionNighttimeRange"		"64"		// Range of vision at night time.

		// Team
		//----------------------------------------------------------------
		"TeamName"					"DOTA_TEAM_NEUTRALS"							// Team name.
		"CombatClassAttack"			"DOTA_COMBAT_CLASS_ATTACK_BASIC"
		"CombatClassDefend"			"DOTA_COMBAT_CLASS_DEFEND_BASIC"
		"UnitRelationshipClass"		"DOTA_NPC_UNIT_RELATIONSHIP_TYPE_WARD"
	}
}"dota_shops"
{
    "consumables"
    {
        "item"		"item_ward_observer"
		"item"		"item_potion_of_recovery"
		"item"		"item_potion_of_essence"
		"item"		"item_dust_of_stasis"
		"item"		"item_creed_of_knowledge"
		"item"		"item_tome_of_immense_knowledge"
		"item"		"item_vaudevilles_mystery_box"
    }
    "attributes"
    {
		"item"		"item_crystal_of_life"
		"item"		"item_ring_of_mana"
		"item"		"item_elven_boots"
		"item"		"item_archmages_orb"
		"item"		"item_glacier_boots"
		"item"		"item_force_boots"
		"item"		"item_wings_of_icarus"
		"item"		"item_spell_refinery"
		"item"		"item_calming_skull"
		"item"		"item_gauntlet_of_alacrity"
		"item"		"item_worn_cloak"
		"item"		"item_strange_trinket"
		"item"		"item_ruby_ring"
		"item"		"item_cultists_veil"
		"item"		"item_jar_of_souls"	
		"item"		"item_mantle_of_the_fallen"
		"item"		"item_valiant_locket"
    }
    "weapons_armor"
    {
        "item"		"item_sorcerers_staff"
		"item"		"item_hunters_hatchet"
		"item"		"item_culling_greataxe"
		"item"		"item_pages_buckler"
		"item"		"item_soldiers_pike"
		"item"		"item_breeze_amulet"
		"item"		"item_mithril_armor"
        "item"		"item_plate_of_the_unbreakable"
		"item"		"item_ice_fang"
		"item"		"item_broadsword"
		"item"		"item_iron_rod"
		"item"		"item_runed_artifact"
		"item"		"item_orb_of_renewal"
		"item"		"item_focused_lens"
		"item"		"item_warlocks_reliquary"
    }
    "misc"
    {
        "item"		"item_crown_of_thorns"
		"item"		"item_dagger_of_escape"
		"item"		"item_amulet_of_aggression"
		"item"		"item_sanguine_mask"
		"item"		"item_soul_vessel"
		"item"		"item_purging_stone"
		"item"		"item_gem_of_corruption"
		"item"		"item_reaping_scythe"
		"item"		"item_cursed_amulet"
		"item"		"item_orb_of_shadows"
		"item"		"item_warm_fire"
		"item"		"item_phantom_staff"
		"item"		"item_barrier_leaves"
		"item"		"item_hawks_feather"
		"item"		"item_ringing_rapier"
    }
    // Level 1 - Green Recipes
    "basics"
    {
		"item"		"item_blade_of_agility"
		"item"		"item_ogre_club"
		"item"		"item_staff_of_magi"
		"item"		"item_orb_of_haste"
		"item"		"item_orb_of_vitality"
		"item"		"item_orb_of_essence"
		"item"		"item_titan_blade"
		"item"		"item_power_core"
		"item"		"item_siegebreaker"
		"item"		"item_trebuchet"
		"item"		"item_winters_breath"
		"item"		"item_war_drum"
		"item"		"item_inspiring_bongos"
    }
    // Level 2 - Blue Recipes
    "support"
    {
		"item"		"item_lucifers_cage"
		"item"		"item_dark_ones_blessing"
		"item"		"item_protection_sphere"
		"item"		"item_angelic_guard"
		"item"		"item_ward_of_life"
		"item"		"item_lazarus_rags"
		"item"		"item_father_pipe"
		"item"		"item_iron_rose"
		"item"		"item_cloak_of_the_hunter"
		"item"		"item_keshas_booze_barrel"
		"item"		"item_tempest_staff"
    }
    "magics"
    {  
		"item"		"item_arcane_accelerator"
		"item"		"item_lifeweavers_clockwork"
		"item"		"item_lightningbottle"
		"item"		"item_flashback"
		"item"		"item_lightningrod"
		"item"		"item_voltas_greathammer"
		"item"		"item_essence_piercer"
		"item"		"item_crystalline_staff"
		"item"		"item_dark_wand"
		"item"		"item_lucys_ring"
		"item"		"item_galactic_hammer"
		"item"		"item_ogre_seal_totem"
		"item"		"item_echoing_tambourine"
		"item"		"item_trinity"
    }
    // Level 3 - Purple Recipes
    "defense"
    {
		"item"		"item_armor_of_invasion"
		"item"		"item_borealis_cloak"
		"item"		"item_gem_of_inner_power"
		"item"		"item_gauntlet_of_might"
		"item"		"item_penitent_mail"
		"item"		"item_wrathbearers_robes"
		"item"		"item_memento"
		"item"		"item_behemoths_heart"
		"item"		"item_everbright_shield"
		"item"		"item_fortress_shield"
		"item"		"item_royal_guardian"
		"item"		"item_legionnaires_dualswords"
		"item"		"item_ferrum_ascensus"
		"item"		"item_leechblade"
		"item"		"item_conquerors_helm"
		"item"		"item_mighty_timpani"
    }
	"weapons"
    {
		"item"		"item_spellslayers_dirk"
		"item"		"item_thanatos"
		"item"		"item_executioners_blade"
		"item"		"item_headchopper"
		"item"		"item_boomstick"
		"item"		"item_guillotine"
		"item"		"item_death_sentence"
		"item"		"item_blade_of_storm"
		"item"		"item_arcane_reaver"
		"item"		"item_gauntlet_of_the_void"
		"item"		"item_anvil"
		"item"		"item_soothslayer"
		"item"		"item_shadow_blade"
		"item"		"item_penumbra"
		"item"		"item_visionarys_cutlass"
		"item"		"item_antique_battlestaff"
    }
    // Level 4 - Orange / Orb / Artifacts
    "artifacts"
    {
        "item"		"item_ultimate_scepter"
		"item"		"item_mirrors_edge"
		"item"		"item_illusionists_charm"
		"item"		"item_tricksters_blade"
		"item"		"item_warp_staff"
		"item"		"item_presence_booster"
		"item"		"item_incandescance"
		"item"		"item_blade_of_dominion"
		"item"		"item_frostfire_brand"
		"item"		"item_berserkers_cape"
		"item"		"item_blood_gods_mask"
		"item"		"item_ghost_saber"
		"item"		"item_rising_salt"
		"item"		"item_lance_of_longinus"
		"item"		"item_hurricane_blade"
		"item"		"item_rapture"
    }
}MAXIMUM_ATTACK_SPEED	= 9999
MINIMUM_ATTACK_SPEED	= 50

ROUND_END_DELAY = 3

DOTA_LIFESTEAL_SOURCE_NONE = 0
DOTA_LIFESTEAL_SOURCE_ATTACK = 1
DOTA_LIFESTEAL_SOURCE_ABILITY = 2

MAP_CENTER = Vector(332, -1545)
GAME_MAX_LEVEL = 200

HERO_SELECTION_TIME = 80

GLOBAL_STUN_LIST = {}

if CHoldoutGameMode == nil then
	CHoldoutGameMode = class({})
end

function SendErrorReport(err, context)
	Notifications:BottomToAll({text="An error has occurred! Please screenshot this: "..err, duration=15.0})
	print(err)
	if context then context.gameHasBeenBroken = true end
end

require("lua_map/map")
require( "libraries/Timers" )
require( "libraries/notifications" )
require( "statcollection/init" )
require("libraries/utility")
require( "libraries/clientserver" )
require("libraries/animations")
require("stats_screen")
require("relicmanager")
require("roundmanager")
require("eventmanager")
require( "ai/ai_core" )
require( "ai/ai_timers")

-- Precache resources
function Precache( context )
	print("precaching shit")
	
	PrecacheResource( "model", "models/props_gameplay/tombstoneb01.vmdl", context )
	PrecacheModel( "models/props_gameplay/tombstoneb01.vmdl", context ) 
	
	PrecacheResource( "particle", "particles/range_ability_line.vpcf", context )
	PrecacheResource( "particle", "particles/items3_fx/lotus_orb_shield.vpcf", context )
	PrecacheResource( "particle", "particles/generic_gameplay/generic_stunned.vpcf", context )
	PrecacheResource( "particle", "particles/generic_gameplay/generic_silence.vpcf", context )
	PrecacheResource( "particle", "particles/generic_gameplay/generic_disarm.vpcf", context )
	PrecacheResource( "particle", "particles/generic_gameplay/generic_break.vpcf", context )
	PrecacheResource( "particle", "particles/items_fx/glyph.vpcf", context )
	PrecacheResource( "particle", "particles/generic_dazed_side.vpcf", context )
	PrecacheResource( "particle", "particles/generic_gameplay/generic_slowed_cold.vpcf", context )
	PrecacheResource( "particle", "particles/brd_taunt/brd_taunt_mark_base.vpcf", context )
	PrecacheResource( "particle", "particles/status_fx/status_effect_beserkers_call.vpcf", context )
	PrecacheResource( "particle", "particles/econ/items/effigies/status_fx_effigies/status_effect_effigy_frosty_dire.vpcf", context )
	PrecacheResource( "particle", "particles/units/heroes/hero_keeper_of_the_light/keeper_of_the_light_blinding_light_debuff.vpcf", context )
	PrecacheResource( "particle", "particles/econ/events/nexon_hero_compendium_2014/blink_dagger_end_nexon_hero_cp_2014.vpcf", context)
	
	-- map stuff
	PrecacheResource( "particle", "particles/units/heroes/hero_doom_bringer/doom_bringer_doom.vpcf", context)
	PrecacheResource( "particle", "particles/alacrity_fire.vpcf", context)
	PrecacheResource( "particle", "particles/econ/items/ember_spirit/ember_spirit_vanishing_flame/ember_spirit_vanishing_flame_ambient_smoke.vpcf", context)
	

	-- Hero Precaches
	PrecacheResource("particle", "particles/warlock_deepfire_ember.vpcf", context)
	
	-- UAM particles
	PrecacheResource("particle", "particles/desolator3_projectile.vpcf", context)
	PrecacheResource("particle", "particles/desolator4_projectile.vpcf", context)
	PrecacheResource("particle", "particles/desolator5_projectile.vpcf", context)
	PrecacheResource("particle", "particles/desolator6_projectile.vpcf", context)
	PrecacheResource("particle", "particles/skadi2_projectile.vpcf", context)
	
	-- Relic particles
	PrecacheResource("particle", "particles/relics/relic_cursed_demon_wings_trail.vpcf", context)
	PrecacheResource("particle", "particles/relics/molten_crystal/molten_crystal_fire.vpcf", context)
	
	-- Elite particles
	PrecacheResource("particle", "particles/econ/items/shadow_fiend/sf_fire_arcana/sf_fire_arcana_shadowraze.vpcf", context)
	PrecacheResource("particle", "particles/units/heroes/hero_lina/lina_spell_light_strike_array.vpcf", context)
	PrecacheResource("particle", "particles/econ/items/kunkka/kunkka_weapon_whaleblade/kunkka_spell_torrent_splash_whaleblade.vpcf", context)
	PrecacheResource("particle", "particles/econ/courier/courier_onibi/courier_onibi_yellow_ambient_smoke_lvl21.vpcf", context)			
	PrecacheResource("soundfile", "soundevents/game_sounds_heroes/game_sounds_enigma.vsndevts" , context)
	PrecacheResource("soundfile", "soundevents/game_sounds_ui.vsndevts" , context)
	PrecacheResource("soundfile", "soundevents/soundevents_dota_ui.vsndevts" , context)
	PrecacheResource("soundfile", "soundevents/game_sound.vsndevts" , context)
	PrecacheResource("soundfile", "soundevents/game_sounds_heroes/game_sounds_crystalmaiden.vsndevts" , context)
	PrecacheResource("soundfile", "soundevents/game_sounds_heroes/game_sounds_ancient_apparition.vsndevts"  , context)
	
	PrecacheResource("particle", "particles/units/heroes/hero_skeletonking/wraith_king_vampiric_aura_lifesteal.vpcf", context)
	PrecacheResource("particle", "particles/items3_fx/octarine_core_lifesteal.vpcf", context)
	PrecacheResource("particle", "particles/elite_warning.vpcf", context)
	PrecacheResource("particle", "particles/elite_overhead.vpcf", context)
	PrecacheResource("particle", "particles/status_fx/status_effect_frost.vpcf", context)
	
	PrecacheResource("particle", "particles/units/heroes/hero_crystalmaiden/maiden_frostbite_buff.vpcf", context)
		
	-- Generic Boss Particles
	PrecacheResource("particle", "particles/nyx_assassin_impale.vpcf", context)
	PrecacheResource("particle", "particles/econ/generic/generic_aoe_shockwave_1/generic_aoe_shockwave_1.vpcf", context)
	PrecacheResource("particle", "particles/generic_aoe_persistent_circle_1/death_timer_glow_rev.vpcf", context)
	PrecacheResource("particle", "particles/econ/generic/generic_aoe_explosion_sphere_1/generic_aoe_explosion_sphere_1.vpcf", context)
	PrecacheResource("particle", "particles/econ/generic/generic_buff_1/generic_buff_1.vpcf", context)
	PrecacheResource("particle", "particles/generic_gameplay/generic_stunned.vpcf", context)
	PrecacheResource("particle", "particles/generic_gameplay/generic_sleep.vpcf", context)
	PrecacheResource("particle", "particles/generic_linear_indicator.vpcf", context)
	PrecacheResource("particle", "particles/generic/generic_marker.vpcf", context)
	
	-- Role Particles
	PrecacheResource("particle", "particles/roles/dev/com_particle.vpcf", context)
	PrecacheResource("particle", "particles/roles/dev/dev_particle.vpcf", context)
	PrecacheResource("particle", "particles/roles/dev/vip_particle.vpcf", context)
	
	-- fix these fucking particles
	PrecacheResource("particle", "particles/units/heroes/hero_tinker/tinker_rockets.vpcf", context)
	PrecacheResource("particle", "particles/econ/items/tinker/tinker_motm_rollermaw/tinker_rollermaw_spawn.vpcf", context)
	PrecacheResource("particle", "particles/econ/items/tinker/tinker_motm_rollermaw/tinker_rollermaw_motm.vpcf", context)
	PrecacheResource("particle", "particles/units/heroes/hero_tinker/tinker_missile.vpcf", context)
	PrecacheResource("particle", "particles/units/heroes/hero_tinker/tinker_missile_dud.vpcf", context)
	PrecacheResource("particle", "particles/units/heroes/hero_tinker/tinker_machine.vpcf", context)
	
	PrecacheResource("particle", "particles/death_spear.vpcf", context)
	PrecacheResource("particle", "particles/boss/boss_shadows_orb.vpcf", context)
	PrecacheResource("particle", "particles/dark_orb.vpcf", context)
	
	PrecacheResource("soundfile", "soundevents/game_sounds_heroes/game_sounds_lone_druid.vsndevts", context)
	PrecacheResource("particle", "particles/units/heroes/hero_lone_druid/lone_druid_savage_roar.vpcf", context)
	PrecacheResource("particle", "particles/units/heroes/hero_lone_druid/lone_druid_savage_roar_debuff.vpcf", context)
	PrecacheResource("particle", "particles/status_fx/status_effect_lone_druid_savage_roar.vpcf", context)
	
	RoundManager:Initialize(context)
end

-- Actually make the game mode when we activate
function Activate()
	GameRules.holdOut = CHoldoutGameMode()
	GameRules.holdOut:InitGameMode()
	require("projectilemanager")
	-- require('statsmanager')
end

function CHoldoutGameMode:InitGameMode()
	print ("Initializing Boss Hunters")
	GameRules._Elites = LoadKeyValues( "scripts/kv/elites.kv" )
	GameRules._maxLives = 10
	GameRules.gameDifficulty = 1
	
	GameRules.UnitKV = LoadKeyValues("scripts/npc/npc_heroes.txt")
	GameRules.UnitKV = MergeTables(GameRules.UnitKV, LoadKeyValues("scripts/npc/npc_heroes_custom.txt"))
	GameRules.UnitKV = MergeTables(GameRules.UnitKV, LoadKeyValues("scripts/npc/npc_units.txt"))
	GameRules.UnitKV = MergeTables(GameRules.UnitKV, LoadKeyValues("scripts/npc/npc_units_custom.txt"))
	
	GameRules.AbilityKV = LoadKeyValues("scripts/npc/npc_abilities_custom.txt")
	GameRules.AbilityKV = MergeTables(GameRules.AbilityKV, LoadKeyValues("scripts/npc/npc_abilities_override.txt"))
	GameRules.AbilityKV = MergeTables(GameRules.AbilityKV, LoadKeyValues("scripts/npc/npc_items_custom.txt"))
	GameRules.AbilityKV = MergeTables(GameRules.AbilityKV, LoadKeyValues("scripts/npc/items.txt"))
	
	GameRules.HeroList = LoadKeyValues("scripts/npc/activelist.txt")
	
	print(GetMapName())
	
	self._message = false
	
	
	if IsInToolsMode() then
		GameRules:SetPreGameTime( 9999.0 )
		HERO_SELECTION_TIME = 9999
	else
		GameRules:SetPreGameTime( 30.0 )
	end
	
	GameRules:SetHeroSelectionTime( HERO_SELECTION_TIME )
	GameRules:SetShowcaseTime( 0 )
	GameRules:SetStrategyTime( 0 )
	GameRules:SetCustomGameSetupAutoLaunchDelay( 0 ) -- fix valve bullshit
	
	local mapInfo = LoadKeyValues( "addoninfo.txt" )[GetMapName()]
	
	GameRules.BasePlayers = mapInfo.MaxPlayers
	GameRules._maxLives =  mapInfo.Lives
	GameRules.gameDifficulty =  mapInfo.Difficulty
	CustomNetTables:SetTableValue( "game_info", "difficulty", {difficulty = GameRules.gameDifficulty} )
	CustomNetTables:SetTableValue( "game_info", "timeofday", {timeofday = 0} )

	GameRules._lives = GameRules._maxLives
	CustomGameEventManager:Send_ServerToAllClients( "updateQuestLife", { lives = GameRules._lives, maxLives = GameRules._maxLives } )
	
	GameRules:SetCustomGameTeamMaxPlayers( DOTA_TEAM_GOODGUYS, mapInfo.MaxPlayers)
	GameRules:SetCustomGameTeamMaxPlayers( DOTA_TEAM_BADGUYS, 0)
	
	GameRules:SetHeroRespawnEnabled( false )
	GameRules:SetUseUniversalShopMode( true )

	GameRules:SetTreeRegrowTime( 30.0 )
	GameRules:SetCreepMinimapIconScale( 4 )
	GameRules:SetRuneMinimapIconScale( 1.5 )
	GameRules:SetGoldTickTime( 1 )
	GameRules:SetGoldPerTick( 1 )
	
	GameRules:GetGameModeEntity():SetTopBarTeamValuesOverride( true )
	GameRules:GetGameModeEntity():SetTopBarTeamValuesVisible( false )
	GameRules:GetGameModeEntity():SetCustomBuybackCooldownEnabled(true)
	GameRules:GetGameModeEntity():SetCustomBuybackCostEnabled(true)
	GameRules:GetGameModeEntity():SetCameraDistanceOverride(1400)
	-- GameRules:GetGameModeEntity():SetCustomGameForceHero("npc_dota_hero_wisp")
	GameRules.XP_PER_LEVEL = {100,
					200}
	for i = 3, GAME_MAX_LEVEL do
		GameRules.XP_PER_LEVEL[i] = GameRules.XP_PER_LEVEL[i-1] + i * 100
	end
	
	GameRules:GetGameModeEntity():SetUseCustomHeroLevels( true )
    GameRules:GetGameModeEntity():SetCustomXPRequiredToReachNextLevel( GameRules.XP_PER_LEVEL )
	
	GameRules:GetGameModeEntity():SetMaximumAttackSpeed(MAXIMUM_ATTACK_SPEED)
	GameRules:GetGameModeEntity():SetMinimumAttackSpeed(MINIMUM_ATTACK_SPEED)
	
	-- Custom console commands
	Convars:RegisterCommand( "bh_test_round", function( command, zone, roundName, roundType )
											if Convars:GetDOTACommandClient() and IsInToolsMode() then
												RoundManager:EndEvent(false)
												RoundManager:EndPrepTime(true)
												local event = BaseEvent(zone, roundType, roundName )
												RoundManager.zones[RoundManager.currentZone][1][1] = event
												GameRules:SetLives(3)
												RoundManager:StartPrepTime()
											end
										end, "adding relics",0)
	Convars:RegisterCommand( "bh_unit_stress_test", function( command, units )
											if Convars:GetDOTACommandClient() and IsInToolsMode() then
												local hero = Convars:GetDOTACommandClient():GetAssignedHero()
												units = units or 10
												for i = 1, units do 
													CreateUnitByNameAsync(
														"npc_dota_creature_spiderling",
														hero:GetAbsOrigin() + RandomVector(600),
														false,
														nil,
														nil,
														DOTA_TEAM_BADGUYS,
														function(unit)
															
														end
													)
												end
											end
										end, "adding relics",0)
	Convars:RegisterCommand( "clear_relics", function()
											if Convars:GetDOTACommandClient() and IsInToolsMode() then
												local player = Convars:GetDOTACommandClient()
												RelicManager:ClearRelics(player:GetPlayerID(), true) 
											end
										end, "adding relics",0)
	Convars:RegisterCommand( "add_relic", function(command, relicName)
											if Convars:GetDOTACommandClient() and ( GameRules:IsCheatMode( ) or ( PlayerResource:IsDeveloper( player:GetPlayerID() ) or PlayerResource:IsManager( player:GetPlayerID() ) ) ) then
												local player = Convars:GetDOTACommandClient()
												local hero = player:GetAssignedHero()
												hero:AddRelic(relicName)
											end
										end, "adding relics",0)
	Convars:RegisterCommand( "team_add_relic", function(command, relicName)
											if Convars:GetDOTACommandClient() then
												local player = Convars:GetDOTACommandClient()
												if not ( PlayerResource:IsDeveloper( player:GetPlayerID() ) or PlayerResource:IsManager( player:GetPlayerID() ) ) then return end
												for _, hero in ipairs( HeroList:GetRealHeroes() ) do
													hero:AddRelic(relicName)
												end
											end
										end, "adding relics",0)
	Convars:RegisterCommand( "add_all_relics", function(command)
											if Convars:GetDOTACommandClient() and IsInToolsMode() then
												local player = Convars:GetDOTACommandClient()
												local hero = player:GetAssignedHero()
												for id, relicPool in ipairs( hero.internalRNGPools ) do
													for relicName, weight in pairs(relicPool) do
														hero:AddRelic(relicName)
													end
												end
											end
										end, "adding relics",0)
	Convars:RegisterCommand( "roll_relics", function(command, fBoss)
											if Convars:GetDOTACommandClient() and IsInToolsMode() then
												local player = Convars:GetDOTACommandClient()
												local hero = player:GetAssignedHero()
												if fBoss then
													RelicManager:RollBossRelicsForPlayer( player:GetPlayerID() )
												else
													RelicManager:RollEliteRelicsForPlayer( player:GetPlayerID() )
												end
											end
										end, "adding relics",0)
	Convars:RegisterCommand( "simulate_round", function(command, cNewRound )
											if Convars:GetDOTACommandClient() and IsInToolsMode() then
												local player = Convars:GetDOTACommandClient()
												local hero = player:GetAssignedHero()
												
												local eventsBeaten = tonumber( cNewRound )
												local currEvents = RoundManager.eventsFinished
												local currRaids = RoundManager.raidsFinished
												local currZones = RoundManager.zonesFinished
												local currAscensions = RoundManager.ascensionLevel
												if eventsBeaten > currEvents then
													local moneyGained = 0
													local xpGained = 0
													
													local raidsBeaten = math.floor( eventsBeaten / 5 )
													local zonesBeaten = math.floor(raidsBeaten / 2 )
													local ascensionsBeaten = math.floor(zonesBeaten / 4 )
													
													RoundManager.eventsFinished = eventsBeaten
													RoundManager.raidsFinished = raidsBeaten
													RoundManager.zonesFinished = zonesBeaten
													RoundManager.ascensionLevel = ascensionsBeaten
													
													local playerScaling = GameRules.BasePlayers - HeroList:GetActiveHeroCount()
													for i = currEvents, eventsBeaten - 1 do
														local eventScaling = i * 0.75
														local raidScaling = 1 + math.floor( i / 5 ) * 0.125
														
														local baseXP = ( 700 + ( (35 + 10 * playerScaling) * eventScaling ) ) + (250 * raidScaling)
														local baseGold = ( 200 + ( (20 + 5 * playerScaling) * eventScaling ) ) + (80 * raidScaling)
														
														if (i % 5) == 0 then
															baseXP = baseXP * 1.5
															baseGold = baseGold * 1.5
														else
															baseXP = baseXP * 0.7 
															baseGold = baseGold * 0.7
														end
														
														moneyGained = moneyGained + baseGold
														xpGained = xpGained + baseXP
													end
													hero:AddGold( moneyGained )
													hero:AddXP( xpGained )
												end
											end
										end, "simulating round",0)
	Convars:RegisterCommand( "getdunked", function()
											if Convars:GetDOTACommandClient() then
												local player = Convars:GetDOTACommandClient()
												local hero = player:GetAssignedHero() 
												hero:ForceKill(true)
											end
										end, "fixing bug",0)
	Convars:RegisterCommand( "reload_modifiers", function()
											if Convars:GetDOTACommandClient() then
												local player = Convars:GetDOTACommandClient()
												local hero = player:GetAssignedHero() 
												if hero then
													local modifierTable = {}
													for _, modifier in ipairs( hero:FindAllModifiers() ) do
														local modifierInfo = {}
														modifierInfo.caster = modifier:GetCaster()
														modifierInfo.ability = modifier:GetAbility()
														modifierInfo.name = modifier:GetName()
														modifierInfo.duration = modifier:GetDuration()
														
														table.insert( modifierTable, modifierInfo )
														modifier:Destroy()
													end
													for _, modifierInfo in ipairs ( modifierTable ) do
														hero:AddNewModifier( modifierInfo.caster, modifierInfo.ability, modifierInfo.name, {duration = modifierInfo.duration})
													end
												end
											end
										end, "fixing bug",0)									
	Convars:RegisterCommand( "deepdebugging", function()
													if not GameRules.DebugCalls then
														print("Starting DebugCalls")
														GameRules.DebugCalls = true

														debug.sethook(function(...)
															local info = debug.getinfo(2)
															local src = tostring(info.short_src)
															local name = tostring(info.name)
															local namewhat = tostring(info.namewhat)
															if name ~= "__index" then
																print("Call: ".. src .. " -- " .. name .. " -- " .. namewhat)
															end
														end, "c")
													else
														print("Stopped DebugCalls")
														GameRules.DebugCalls = false
														debug.sethook(nil, "c")
													end
												end, "fixing bug",0)
														
	Convars:RegisterCommand( "spawn_elite", function(...) if IsInToolsMode() then return self.SpawnTestElites( ... ) end end, "look like someone try to steal my map :D",0)
	
	-- Hook into game events allowing reload of functions at run time
	
	ListenToGameEvent( "player_disconnect", Dynamic_Wrap( CHoldoutGameMode, 'OnPlayerDisconnected' ), self )
	ListenToGameEvent( "game_rules_state_change", Dynamic_Wrap( CHoldoutGameMode, "OnGameRulesStateChange" ), self )
	ListenToGameEvent("dota_player_pick_hero", Dynamic_Wrap( CHoldoutGameMode, "OnHeroPick"), self )
    ListenToGameEvent('dota_player_used_ability', Dynamic_Wrap(CHoldoutGameMode, 'OnAbilityUsed'), self)
	ListenToGameEvent('dota_player_learned_ability', Dynamic_Wrap(CHoldoutGameMode, 'OnAbilityLearned'), self)
	ListenToGameEvent( "dota_player_gained_level", Dynamic_Wrap( CHoldoutGameMode, "OnHeroLevelUp" ), self )
	ListenToGameEvent( "npc_spawned", Dynamic_Wrap( RoundManager, "OnNPCSpawned" ), RoundManager )
	ListenToGameEvent( "dota_holdout_revive_complete", Dynamic_Wrap( RoundManager, 'OnHoldoutReviveComplete' ), RoundManager )
	
	CustomGameEventManager:RegisterListener('Tell_Threat', Dynamic_Wrap( CHoldoutGameMode, 'Tell_threat'))
	CustomGameEventManager:RegisterListener('bh_notify_modifier', Dynamic_Wrap( CHoldoutGameMode, 'NotifyBuffs'))
	CustomGameEventManager:RegisterListener('playerUILoaded', Dynamic_Wrap( CHoldoutGameMode, 'OnPlayerUIInitialized'))

	-- Register OnThink with the game engine so it is called every 0.25 seconds
	GameRules:GetGameModeEntity():SetDamageFilter( Dynamic_Wrap( CHoldoutGameMode, "FilterDamage" ), self )
	GameRules:GetGameModeEntity():SetExecuteOrderFilter( Dynamic_Wrap( CHoldoutGameMode, "FilterOrders" ), self )
	GameRules:GetGameModeEntity():SetHealingFilter( Dynamic_Wrap( CHoldoutGameMode, "FilterHeal" ), self )
	GameRules:GetGameModeEntity():SetModifierGainedFilter( Dynamic_Wrap( CHoldoutGameMode, "FilterModifiers" ), self )
	GameRules:GetGameModeEntity():SetThink( "OnThink", self, 1 )
	
	StatsScreen:StartStatsScreen()
	RelicManager:Initialize()
	
	SendToConsole("rate 200000")
end

function CHoldoutGameMode:FilterModifiers( filterTable )
	local parent_index = filterTable["entindex_parent_const"]
    local caster_index = filterTable["entindex_caster_const"]
	local ability_index = filterTable["entindex_ability_const"]
    if not parent_index or not caster_index then
        return true
    end
	local duration = filterTable["duration"]
    local parent = EntIndexToHScript( parent_index )
    local caster = EntIndexToHScript( caster_index )
	local ability 
	if ability_index then
		ability = EntIndexToHScript( ability_index )
	end
	local name = filterTable["name_const"]
	
	if name == "modifier_item_ultimate_scepter" then
		for i = 0, parent:GetAbilityCount() - 1 do
			local ability = parent:GetAbilityByIndex( i )
			if ability and ability.OnInventoryContentsChanged then
				ability:OnInventoryContentsChanged()
			end
		end
	end
	
	if duration ~= -1 and parent and caster then
		local params = {caster = caster, target = parent, duration = duration, ability = ability, modifier_name = name}
		duration = duration * caster:GetStatusAmplification( params )
		if parent:GetTeam() ~= caster:GetTeam() then
			duration = duration * parent:GetStatusResistance( params )
		end
	end
	
	if parent then
		local handler = parent:FindModifierByName("modifier_handler_handler")
		Timers:CreateTimer(function()
			if handler then handler:CheckIfUpdateNeeded( name, ability, duration ) end
		end)
	end
	
	if duration == 0 then return false end
	if caster:GetTeam() == DOTA_TEAM_GOODGUYS and duration > 0 and name ~= "modifier_illusion" and (caster.lastDebuffTime or 0) + 0.25 < GameRules:GetGameTime() then
		caster:ModifyThreat( math.log(1 + duration) + 0.2 )
		caster.lastDebuffTime = GameRules:GetGameTime() 
	end
	filterTable["duration"] = duration
	return true
end

function CHoldoutGameMode:FilterHeal( filterTable )
	local healer_index = filterTable["entindex_healer_const"]
	local target_index = filterTable["entindex_target_const"]
	local source_index = filterTable["entindex_inflictor_const"]
	local heal = filterTable["heal"]
	local healer, target, source
	
	if healer_index then healer = EntIndexToHScript( healer_index ) end
	if target_index then target = EntIndexToHScript( target_index ) end
	if source_index then source = EntIndexToHScript( source_index ) end
	if not heal then return true end
	-- if no caster then source is regen
	local params = {healer = healer, target = target, heal = heal, ability = source}
	healFactorSelf = 1
	healFactorAllied = 1
	if target then
		for _, modifier in ipairs( target:FindAllModifiers() ) do
			if modifier.GetModifierHealAmplify_Percentage then
				healFactorSelf = healFactorSelf + (modifier:GetModifierHealAmplify_Percentage( params ) or 0 )/100
			end
		end
		if RoundManager:GetAscensions() >= 3 then
			healFactorSelf = healFactorSelf - 0.75
		end
	end
	if healer and healer ~= target then
		for _, modifier in ipairs( healer:FindAllModifiers() ) do
			if modifier.GetModifierHealAmplify_Percentage then
				healFactorAllied = healFactorAllied + ( modifier:GetModifierHealAmplify_Percentage( params ) or 0 )/100
			end
		end
		if RoundManager:GetAscensions() >= 3 then
			healFactorAllied = healFactorAllied - 0.75
		end
	end
	
	filterTable["heal"] = math.max(0, heal * healFactorSelf * healFactorAllied)
	if healer then healer.statsDamageHealed = (healer.statsDamageHealed or 0) + filterTable["heal"] end
	
	if healer and healer:IsRealHero() and target and healer ~= target and healer:HasRelic("relic_cursed_bloody_silk") then
		target:HealEvent(50, nil, healer, true)
		if not self:GetParent():HasModifier("relic_unique_ritual_candle") then ApplyDamage({victim = healer, attacker = healer, damage = 20, damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION }) end
	end
	
	if healer and healer:GetTeam() == DOTA_TEAM_GOODGUYS then
		local totalHealth = 0
		for _, ally in ipairs( healer:FindFriendlyUnitsInRadius( healer:GetAbsOrigin(), -1 ) ) do
			totalHealth = totalHealth + ally:GetMaxHealth()
		end
		healer:ModifyThreat( math.max( target:GetHealthDeficit(), filterTable["heal"] ) / totalHealth)
	end
	
	return true
end

function CHoldoutGameMode:FilterOrders( filterTable )
	local hero = EntIndexToHScript( filterTable.units["0"] )
	if not hero:IsRealHero() then return true end
	if RoundManager:GetCurrentEvent() 
	and RoundManager:GetCurrentEvent():IsEvent()
	and RoundManager:GetCurrentEvent()._playerChoices
	and RoundManager:GetCurrentEvent()._playerChoices[ filterTable["issuer_player_id_const"] ] == nil
	and (filterTable["order_type"] == DOTA_UNIT_ORDER_DROP_ITEM 
	or filterTable["order_type"] == DOTA_UNIT_ORDER_GIVE_ITEM
	or filterTable["order_type"] == DOTA_UNIT_ORDER_PURCHASE_ITEM
	or filterTable["order_type"] == DOTA_UNIT_ORDER_DISASSEMBLE_ITEM
	or filterTable["order_type"] == DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH ) then
		EventManager:ShowErrorMessage(filterTable.issuer_player_id_const, "Cannot manipulate inventory during events.")
		return false
	end
	if GameRules:State_Get() < DOTA_GAMERULES_STATE_GAME_IN_PROGRESS 
	and ( filterTable["order_type"] == DOTA_UNIT_ORDER_CAST_POSITION
	or filterTable["order_type"] == DOTA_UNIT_ORDER_CAST_TARGET 
	or filterTable["order_type"] == DOTA_UNIT_ORDER_CAST_TARGET_TREE 
	or filterTable["order_type"] == DOTA_UNIT_ORDER_CAST_NO_TARGET 
	or filterTable["order_type"] == DOTA_UNIT_ORDER_CAST_TOGGLE ) 
	and not IsInToolsMode() then
		EventManager:ShowErrorMessage(filterTable.issuer_player_id_const, "Cannot cast abilities during pregame.")
		return false
	end
	if filterTable["order_type"] == DOTA_UNIT_ORDER_TRAIN_ABILITY then
		local talent = EntIndexToHScript( filterTable["entindex_ability"] )
		if talent and string.match( talent:GetAbilityName(), "special_bonus" ) and hero:GetLevel() < (hero.talentsSkilled + 1) * 10 then
			return false
		end
	end
	return true
end

function CHoldoutGameMode:FilterDamage( filterTable )
    local total_damage_team = 0
    local dps = 0
    local victim_index = filterTable["entindex_victim_const"]
    local attacker_index = filterTable["entindex_attacker_const"]
    if not victim_index or not attacker_index then
        return true
    end
	local damage = filterTable["damage"] --Post reduction
	local inflictor = filterTable["entindex_inflictor_const"]
    local victim = EntIndexToHScript( victim_index )
    local attacker = EntIndexToHScript( attacker_index )
	local ability = (inflictor ~= nil) and EntIndexToHScript( inflictor )
	local original_attacker = attacker -- make a copy for threat
    local damagetype = filterTable["damagetype_const"]
	if damage <= 0 then return true end
	
	-- VVVVVVVVVVVVVV REMOVE THIS SHIT IN THE FUTURE VVVVVVVVVVV --
	if attacker:GetTeam() == DOTA_TEAM_GOODGUYS and not (attacker:IsFakeHero() or attacker:IsCreature() or attacker:IsCreep() or attacker:IsHero()) then 
		if attacker:GetOwner():GetClassname() == player then
			attacker = attacker:GetOwner():GetAssignedHero()
		else
			attacker = attacker:GetOwner()
		end
	end
	if original_attacker:GetTeam() ~= victim:GetTeam() and not victim:CanEntityBeSeenByMyTeam(original_attacker) then
		if original_attacker:GetTeam() == DOTA_TEAM_BADGUYS then
			AddFOWViewer(DOTA_TEAM_GOODGUYS, original_attacker:GetAbsOrigin(), 256, 1, false)
		else
			AddFOWViewer(DOTA_TEAM_BADGUYS, original_attacker:GetAbsOrigin(), 256, 1, false)
		end
	end
	--- THREAT AND UI NO MORE DAMAGE MANIPULATION ---
	local damage = filterTable["damage"]
	local attacker = original_attacker
	if attacker:IsCreature() then
		if victim:IsRealHero() then
			victim.statsDamageTaken = (victim.statsDamageTaken or 0) + math.min(victim:GetHealth(), damage)
		end
		return true 
	end
	if not victim:IsHero() and victim ~= attacker then
		-- if not victim.threatTable then victim.threatTable = {} end
		if not attacker.threat then attacker.threat = 0 end
		local roundCurrTotalHP = 0
		local enemies = FindAllUnits({team = DOTA_UNIT_TARGET_TEAM_ENEMY})
		for _,unit in ipairs( enemies ) do
			roundCurrTotalHP = roundCurrTotalHP + unit:GetMaxHealth()
		end
		local addedthreat = math.min( (damage / roundCurrTotalHP)*#enemies*100, (victim:GetHealth() * #enemies * 100) / roundCurrTotalHP )
		if addedthreat > 0.01 then
			attacker:ModifyThreat( addedthreat )
		end
	end
    local attackerID = attacker:GetPlayerOwnerID()
    if attackerID and PlayerResource:HasSelectedHero( attackerID ) then
	    local hero = PlayerResource:GetSelectedHeroEntity(attackerID)
	    local player = PlayerResource:GetPlayer(attackerID)
		if hero then 
			hero.statsDamageDealt = (hero.statsDamageDealt or 0) + math.min(victim:GetHealth(), damage)
			if hero.damageDone == 0 and damage > 0 then 
				hero.first_damage_time = GameRules:GetGameTime()
			end
			hero.damageDone = math.floor(hero.damageDone + damage)
		end
		GameRules.TeamDamage = (GameRules.TeamDamage or 0 ) + damage
    end
    return true
end


function GetHeroDamageDone(hero)
    return hero.damageDone
end

function CHoldoutGameMode:OnHeroLevelUp(event)
	local playerID = EntIndexToHScript(event.player):GetPlayerID()
	local hero = PlayerResource:GetSelectedHeroEntity(playerID)
	if hero:GetLevel() <= 27 then
		hero.bonusSkillPoints = ( hero.bonusSkillPoints or ( hero:GetAbilityPoints() - 1 ) ) + 1
		if hero:GetLevel() == 17 or hero:GetLevel() == 19 or (hero:GetLevel() > 20 and hero:GetLevel() < 25) then 
			hero:SetAbilityPoints( hero:GetAbilityPoints() + 1)
			hero.bonusSkillPoints = (hero.bonusSkillPoints or 0) + 1
		end
		if hero:GetLevel() % GameRules.gameDifficulty == 0 then
			hero:ModifyAttributePoints( 1 )
		end
	else
		hero:ModifyAttributePoints( 1 )
		if not ( hero:GetLevel() == 30
		or hero:GetLevel() == 31
		or hero:GetLevel() == 36
		or hero:GetLevel() == 40
		or hero:GetLevel() == 50
		or hero:GetLevel() == 60
		or hero:GetLevel() == 70
		or hero:GetLevel() == 80) then
			hero:SetAbilityPoints( hero:GetAbilityPoints() - 1)
		else
			hero.bonusSkillPoints = (hero.bonusSkillPoints or 0) + 1
		end
	end
end

function CHoldoutGameMode:OnAbilityLearned(event)
	local abilityname = event.abilityname
	local pID = event.PlayerID
	if pID and string.match(abilityname, "special_bonus" ) then
		local hero = PlayerResource:GetSelectedHeroEntity( pID )
		
		if hero:GetLevel() < (hero.talentsSkilled + 1) * 10 then
			local talent = hero:FindAbilityByName(abilityname)
			talent:SetLevel(0)
			for _, modifier in ipairs( hero:FindAllModifiers() ) do
				if modifier:GetAbility() then
					if not modifier:GetAbility():IsInnateAbility() and modifier:GetCaster() == hero and not modifier:GetAbility():IsItem() and modifier:GetAbility():GetName() ~= "item_relic_handler" then -- destroy passive modifiers and any buffs
						modifier:Destroy()
					end
				end
			end
			hero:SetAbilityPoints( hero:GetAbilityPoints() + 1 )
			return false
		end
		
		local talentData = CustomNetTables:GetTableValue("talents", tostring(hero:entindex())) or {}
		if GameRules.AbilityKV[abilityname] then
			if GameRules.AbilityKV[abilityname]["LinkedModifierName"] then
				local modifierName = GameRules.AbilityKV[abilityname]["LinkedModifierName"] 
				for _, unit in ipairs( FindAllUnits() ) do
					if unit:HasModifier(modifierName) then
						local mList = unit:FindAllModifiersByName(modifierName)
						for _, modifier in ipairs( mList ) do
							local remainingDur = modifier:GetRemainingTime()
							modifier:ForceRefresh()
							if remainingDur > 0 then modifier:SetDuration(remainingDur, true) end
						end
					end
				end
			end
			if GameRules.AbilityKV[abilityname]["LinkedAbilityName"] then
				local abilityName = GameRules.AbilityKV[abilityname]["LinkedAbilityName"] or ""
				local ability = hero:FindAbilityByName(abilityName)
				if ability and ability.OnTalentLearned then
					ability:OnTalentLearned(abilityname)
				end
			end
		end
		talentData[abilityname] = true
		CustomNetTables:SetTableValue( "talents", tostring(hero:entindex()), talentData )
		hero.talentsSkilled = hero.talentsSkilled + 1
	end
end

function CHoldoutGameMode:OnAbilityUsed(event)
    local PlayerID = event.PlayerID
    local abilityname = event.abilityname
	local hero = EntIndexToHScript( event.caster_entindex )
	
	if not hero then return end
	if not abilityname then return end
	AddFOWViewer(DOTA_TEAM_BADGUYS, hero:GetAbsOrigin(), 256, 1.5, false)
	local abilityused = hero:FindAbilityByName(abilityname)
	if not abilityused then abilityused = hero:FindItemByName(abilityname, false) end
	if not abilityused then return end
	-- if abilityused then
		-- local addedthreat = abilityused:GetThreat()
		-- local modifier = 0
		-- local escapemod = 0
		-- local talentmodifier = 0
		-- local negtalentmodifier = 0
		
		-- if addedthreat < 0 then
			-- escapemod = 2
		-- end
		-- if abilityused and not abilityused:IsItem() then modifier = (addedthreat*abilityused:GetLevel())/abilityused:GetMaxLevel() end
		-- if not hero.threat then hero.threat = 0 end
		-- hero:ModifyThreat(addedthreat + modifier + talentmodifier - negtalentmodifier)
		-- local player = PlayerResource:GetPlayer(PlayerID)
		-- hero.lastHit = GameRules:GetGameTime() - escapemod
		-- PlayerResource:SortThreat()
		-- local event_data =
		-- {
			-- threat = hero.threat,
			-- lastHit = hero.lastHit,
			-- aggro = hero.aggro
		-- }
		-- if player then
			-- CustomGameEventManager:Send_ServerToPlayer( player, "Update_threat", event_data )
		-- end
	-- end
	-- if abilityused and abilityused:HasPureCooldown() then
		-- if abilityname == "viper_nethertoxin" and not hero:HasTalent("special_bonus_unique_viper_3") then return end
		-- abilityused:EndCooldown()
		-- if abilityused:GetDuration() > 0 then
			-- local duration = abilityused:GetDuration()
			-- for _, modifier in ipairs( hero:FindAllModifiers() ) do
				-- if modifier.GetModifierStatusAmplify_Percentage then
					-- duration = duration * (1 + modifier:GetModifierStatusAmplify_Percentage( params )/100)
				-- end
			-- end
			-- abilityused:StartDelayedCooldown(duration)
		-- else
			-- abilityused:StartCooldown(abilityused:GetCooldown(-1))
		-- end
	-- end
end

function CHoldoutGameMode:Tell_threat(event)
	--print ("show asura core count")
	local pID = event.pID
	local player = PlayerResource:GetPlayer(pID)
	local hero = player:GetAssignedHero() 
	if not hero.threat then hero.threat = 0 end
	local result = math.floor( hero.threat*10 + 0.5 ) / 10
	if result == 0 then result = "no" end
	local message = "I have "..result.." threat!"
	hero.tellThreatDelayTimer = hero.tellThreatDelayTimer or 0
	if GameRules:GetGameTime() > hero.tellThreatDelayTimer + 1 then
		Say(player, message, true)
		hero.tellThreatDelayTimer = GameRules:GetGameTime()
	end
end

function CHoldoutGameMode:NotifyBuffs(event)
	--print ("show asura core count")
	local pID = event.pID
	local player = PlayerResource:GetPlayer(pID)
	local hero = player:GetAssignedHero() 
	if not hero.threat then hero.threat = 0 end
	local result = math.floor( hero.threat*10 + 0.5 ) / 10
	if result == 0 then result = "no" end
	local message = "Enemy "..event.unitname.." is affected by: "..event.buffname.." - "..event.duration.." seconds remaining!"
	hero.tellBuffDelayTimer = hero.tellBuffDelayTimer or 0
	if GameRules:GetGameTime() > hero.tellBuffDelayTimer + 1 then
		Say(player, message, true)
		hero.tellBuffDelayTimer = GameRules:GetGameTime()
	end
end


function CHoldoutGameMode:OnHeroPick (event)
 	local hero = EntIndexToHScript(event.heroindex)
	if not hero then return end
	
	if hero.hasBeenInitialized then return end
	if hero:IsFakeHero() then return end
	Timers:CreateTimer(0.03, function()
		if hero:IsFakeHero() then return end
		for i = 0, 17 do
			local skill = hero:GetAbilityByIndex(i)
			if skill and skill:IsInnateAbility() then
				skill:UpgradeAbility(true)
			end
		end
		hero.damageDone = 0
		hero.hasBeenInitialized = true
		
		StatsScreen:RegisterPlayer(hero)
		RelicManager:RegisterPlayer( hero:GetPlayerID() )
		hero:AddItemByName("item_potion_of_recovery")
		hero:AddItemByName("item_potion_of_essence")
		
		hero:AddExperience(GameRules.XP_PER_LEVEL[7],false,false)
		hero:SetBaseMagicalResistanceValue(15)
		CustomGameEventManager:Send_ServerToPlayer(hero:GetPlayerOwner(), "heroLoadIn", {}) -- wtf is this retarded shit stop force-setting my garbage
		local ID = hero:GetPlayerID()
		if not ID then return end
		PlayerResource:SetCustomBuybackCooldown(ID, 120)
		local playerName = PlayerResource:GetPlayerName( ID )
		if not IsInToolsMode() then
			if PlayerResource:IsDeveloper(ID) then
				
				local messageinfo = {
				text = "You are playing with a developer! Say hi to "..playerName.."!",
				duration = 10
				}
				Notifications:TopToAll(messageinfo)
				ParticleManager:FireParticle("particles/roles/dev/dev_particle.vpcf", PATTACH_POINT_FOLLOW, hero)
			elseif PlayerResource:IsManager(ID) then
				ParticleManager:FireParticle("particles/roles/dev/com_particle.vpcf", PATTACH_POINT_FOLLOW, hero)
			elseif PlayerResource:IsVIP(ID) then
				local messageinfo = {
				text = "You are playing with a VIP! "..playerName.." is supporting the development of Epic Boss Fight!",
				duration = 10
				}
				Notifications:TopToAll(messageinfo)
				ParticleManager:FireParticle("particles/roles/dev/vip_particle.vpcf", PATTACH_POINT_FOLLOW, hero)
			end
		end
		local gold = 400 + 150 * ( GameRules.BasePlayers - PlayerResource:GetPlayerCountForTeam(DOTA_TEAM_GOODGUYS) )
		hero:SetGold( 0, true )
		if PlayerResource:HasRandomed( ID ) then
			gold = gold + 350
		end
		hero:SetGold( gold, true )
		
		hero:SetDayTimeVisionRange(hero:GetDayTimeVisionRange())
		hero:SetNightTimeVisionRange(hero:GetNightTimeVisionRange())
		hero:SetBaseMoveSpeed( hero:GetBaseMoveSpeed() - 35 )
	end)
end

function CHoldoutGameMode:OnPlayerUIInitialized(keys)
	local playerID = keys.PlayerID
	local player = PlayerResource:GetPlayer(playerID)
	Timers:CreateTimer(0.03, function()
		if PlayerResource:GetSelectedHeroEntity(playerID) then
			local hero = PlayerResource:GetSelectedHeroEntity(playerID)
			CustomGameEventManager:Send_ServerToPlayer(player,"dota_player_updated_relic_drops", {playerID = pID, drops = hero.relicsToSelect})
			if StatsScreen:IsPlayerRegistered(hero) and not hero:HasModifier("modifier_stats_system_handler") then hero:AddNewModifier(hero, nil, "modifier_stats_system_handler", {}) end
			CustomGameEventManager:Send_ServerToPlayer(player, "heroLoadIn", {})
			if GameRules.holdOut._flPrepTimeEnd then
				local timeLeft = GameRules.holdOut._flPrepTimeEnd - GameRules:GetGameTime()
				CustomGameEventManager:Send_ServerToAllClients( "updateQuestPrepTime", { prepTime = math.floor(timeLeft + 0.5) } )
			end
			if GameRules.UnitKV[hero:GetUnitName()]["Abilities"] and not hero.hasSkillsSelected then
				CustomGameEventManager:Send_ServerToPlayer(hero:GetPlayerOwner(), "checkNewHero", {})
			end
			if GameRules.holdOut._currentRound then CustomGameEventManager:Send_ServerToAllClients( "updateQuestRound", { roundNumber = GameRules.holdOut._nRoundNumber, roundText = GameRules.holdOut._currentRound._szRoundQuestTitle } ) end
		elseif not PlayerResource:HasSelectedHero(playerID) then
			player:MakeRandomHeroSelection()
			local newHero = CreateHeroForPlayer(PlayerResource:GetSelectedHeroName( playerID ), player)
			newHero:RespawnHero(false, true, false)
			newHero:SetPlayerID( playerID )
			newHero:SetOwner( player )
			newHero:SetControllableByPlayer(playerID, true)
			return 0.03
		else
			return 0.03
		end
	end)
end

function CHoldoutGameMode:OnPlayerDisconnected(keys) 
	local playerID = keys.PlayerID
	if not playerID then return end
	local hero = PlayerResource:GetSelectedHeroEntity(playerID)
	if hero then hero.disconnect = GameRules:GetGameTime() end
	for pID = 0, 24 do -- check if game has to die
		if PlayerResource:IsValidPlayerID( pID ) and PlayerResource:GetConnectionState() == DOTA_CONNECTION_STATE_CONNECTED then
			return
		end
	end
	RoundManager:GameIsFinished(false)
end

-- When game state changes set state in script
function CHoldoutGameMode:OnGameRulesStateChange()
	local nNewState = GameRules:State_Get()
	if nNewState >= DOTA_GAMERULES_STATE_INIT and not statCollection.doneInit then
		statCollection:init()
		customSchema:init()
		statCollection.doneInit = true
		print("start")
    end
	if nNewState == DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP then
		print("setup")
		for nPlayerID = 0, DOTA_MAX_TEAM_PLAYERS-1 do
			if PlayerResource:IsValidPlayerID( nPlayerID ) then
				PlayerResource:SetCustomTeamAssignment(nPlayerID, DOTA_TEAM_GOODGUYS)
			end
		end
	elseif nNewState == DOTA_GAMERULES_STATE_HERO_SELECTION then
		print("pregame")
		
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "grove_raid_1"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		RoundManager.heroSpawnPosition = RoundManager.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			RoundManager.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		ClientServer:Initialize()
		Timers:CreateTimer(HERO_SELECTION_TIME - 1,function()
			for nPlayerID = 0, DOTA_MAX_TEAM_PLAYERS-1 do
				if not PlayerResource:HasSelectedHero( nPlayerID ) and PlayerResource:GetPlayer( nPlayerID ) then
					local player = PlayerResource:GetPlayer( nPlayerID )
					player:MakeRandomHeroSelection()
					PlayerResource:SetHasRandomed( nPlayerID )
				end
			end
		end)
	elseif nNewState == DOTA_GAMERULES_STATE_PRE_GAME then
		
		-- Voting system handler
		-- CHoldoutGameMode:InitializeRoundSystem()
		Timers:CreateTimer(0.1,function()
			CustomGameEventManager:Send_ServerToAllClients( "updateQuestLife", { lives = GameRules._lives, maxLives = GameRules._maxLives } )
			CustomGameEventManager:Send_ServerToAllClients("heroLoadIn", {})
			-- for nPlayerID = 0, DOTA_MAX_TEAM_PLAYERS-1 do
				-- if not PlayerResource:HasSelectedHero( nPlayerID ) and PlayerResource:GetPlayer( nPlayerID ) then
					-- local player = PlayerResource:GetPlayer( nPlayerID )
					-- player:MakeRandomHeroSelection()
					-- CreateHeroForPlayer(PlayerResource:GetSelectedHeroName( nPlayerID ), player)
					-- local hero = PlayerResource:ReplaceHeroWith(nPlayerID, PlayerResource:GetSelectedHeroName( nPlayerID ), 650, 0)
					-- hero:SetPlayerID( nPlayerID )
					-- hero:SetOwner( player )
					-- hero:SetControllableByPlayer(nPlayerID, true)
				-- end
			-- end
		end)
	elseif nNewState == DOTA_GAMERULES_STATE_GAME_IN_PROGRESS then
		RoundManager:StartGame()
	end
end

function CHoldoutGameMode:OnThink()
	DAY_TIME = 1
	NIGHT_TIME = 0
	TEMPORARY_NIGHT = 2
	NIGHT_STALKER_NIGHT = 3
	local timeofday = 1
	
	if GameRules:IsGamePaused() then return 1 end
	if not GameRules:IsDaytime() then timeofday = NIGHT_TIME end
	if GameRules:IsTemporaryNight() then timeofday = TEMPORARY_NIGHT end
	if GameRules:IsNightstalkerNight() then timeofday = NIGHT_STALKER_NIGHT end
	CustomNetTables:SetTableValue( "game_info", "timeofday", {timeofday = timeofday} )
	if GameRules:State_Get() >= 7 and GameRules:State_Get() <= 8 then
		local OnPThink = function(self)
			local playerData = {}
			local currTime = GameRules:GetGameTime()
			-- for _,unit in ipairs ( FindUnitsInRadius(DOTA_TEAM_GOODGUYS, Vector(0,0), nil, -1, DOTA_UNIT_TARGET_TEAM_BOTH, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, DOTA_UNIT_TARGET_FLAG_INVULNERABLE + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES + DOTA_UNIT_TARGET_FLAG_OUT_OF_WORLD + DOTA_UNIT_TARGET_FLAG_DEAD, FIND_ANY_ORDER, false) ) do
				-- if not unit:IsNull() and not unit:IsRealHero() and unit:GetHealth() <= 0 and not unit.confirmTheKill then
					-- unit.confirmTheKill = true
					-- unit:SetHealth(1)
					-- unit:ForceKill( false )
					-- if not unit:IsRealHero() and not unit:UnitCanRespawn() then
						-- Timers:CreateTimer(1, function()
							-- if not unit:IsNull() then UTIL_Remove( unit ) end
						-- end)
					-- end
				-- end
			-- end
			for _,unit in ipairs ( HeroList:GetActiveHeroes() ) do
				if unit:IsRealHero() and not unit:IsFakeHero() then
					local data = CustomNetTables:GetTableValue("hero_properties", unit:GetUnitName()..unit:entindex() ) or {}
					
					data.strength = unit:GetStrength()
					data.intellect = unit:GetIntellect()
					data.agility = unit:GetAgility()
					if unit:GetPlayerOwner() and unit:GetAttackTarget() then
						CustomGameEventManager:Send_ServerToPlayer( unit:GetPlayerOwner(), "bh_update_attack_target", {entindex = unit:GetAttackTarget():entindex()} )
					end
					CustomNetTables:SetTableValue("hero_properties", unit:GetUnitName()..unit:entindex(), data )
					playerData[unit:GetPlayerID()] = {DT = unit.statsDamageTaken or 0, DD = unit.statsDamageDealt or 0, DH = unit.statsDamageHealed or 0}
					-- Threat
					if unit.threat then
					if not unit:IsAlive() then
						unit.threat = 0
					end
					if unit.threat < 0 then unit.threat = 0 end
					else unit.threat = 0 end
					if unit.lastHit then
						if unit.lastHit + 2 <= currTime and unit.threat > 0 then
							unit.threat = unit.threat - (unit.threat/10)
						end
					else unit.lastHit = currTime end
					local event_data =
					{
						threat = unit.threat,
						lastHit = unit.lastHit,
						aggro = unit.aggro or 0
					}
					local player = unit:GetPlayerOwner()
					if player then
						CustomGameEventManager:Send_ServerToPlayer( player, "Update_threat", event_data )
					end
				end	
			end
			CustomGameEventManager:Send_ServerToAllClients( "player_update_stats", playerData )
			PlayerResource:SortThreat()
		end
		status, err, ret = pcall(OnPThink, self)
		if not status  and not self.gameHasBeenBroken then
			SendErrorReport(err, self)
		end
	elseif GameRules:State_Get() >= DOTA_GAMERULES_STATE_POST_GAME then		-- Safe guard catching any state that may exist beyond DOTA_GAMERULES_STATE_POST_GAME
		return nil
	end
	return 0.25
end

function CDOTA_PlayerResource:SortThreat()
	local currThreat = 0
	local secondThreat = 0
	local aggrounit 
	local aggrosecond
	local heroes = HeroList:GetActiveHeroes()
	for _,unit in pairs ( heroes ) do
		if not unit.threat then unit.threat = 0 end
		if not unit:IsFakeHero() then
			if unit.threat > currThreat then
				currThreat = unit.threat
				aggrounit = unit
			elseif unit.threat > secondThreat and unit.threat < currThreat then
				secondThreat = unit.threat
				aggrosecond = unit
			end
		end
	end
	for _,unit in pairs ( heroes ) do
		if unit == aggrosecond then unit.aggro = 2
		elseif unit == aggrounit then unit.aggro = 1
		else unit.aggro = 0 end
	end
end

function CHoldoutGameMode:SpawnTestElites(elite, amount, bossname)
	if IsInToolsMode() or IsCheatMode() then
		local spawns = 1
		if amount then
			spawns = amount
		end
		local spawnName = bossname
		if not spawnName then
			spawnName = "npc_dota_treasure"
		end
		for i = 1, spawns do
			local spawnLoc = RoundManager:PickRandomSpawn()
			PrecacheUnitByNameAsync( spawnName, function()
				local entUnit = CreateUnitByName( spawnName, spawnLoc, true, nil, nil, DOTA_TEAM_BADGUYS )
				if elite then
					entUnit:AddAbilityPrecache(elite):SetLevel(1)
					local nParticle = ParticleManager:CreateParticle( "particles/econ/courier/courier_onibi/courier_onibi_yellow_ambient_smoke_lvl21.vpcf", PATTACH_ABSORIGIN_FOLLOW, entUnit )
					ParticleManager:ReleaseParticleIndex( nParticle )
					entUnit:SetModelScale(entUnit:GetModelScale()*1.5)
				end
			end)
		end
	end
end


function CHoldoutGameMode:_StatusReportConsoleCommand( cmdName )
	print( "*** Holdout Status Report ***" )
	print( string.format( "Current Round: %d", self._nRoundNumber ) )
	if self._currentRound then
		self._currentRound:StatusReport()
	end
	print( "*** Holdout Status Report End *** ")
endHP_PER_STR = 18
MR_PER_STR = 0.4
HP_REGEN_PER_STR = 0.025
MANA_PER_INT = 10
MANA_REGEN_PER_INT = 0.035
ARMOR_PER_AGI = 0.07
ATKSPD_PER_AGI = 0.08
DMG_PER_AGI = 0.5
CDR_PER_INT = 0.385
SPELL_AMP_PER_INT = 0.0075

LinkLuaModifier( "modifier_sleep_generic", "libraries/modifiers/modifier_sleep_generic.lua", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_charm_generic", "libraries/modifiers/modifier_charm_generic.lua", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_stun_immunity", "libraries/modifiers/modifier_stun_immunity.lua", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_restoration_disable", "libraries/modifiers/modifier_restoration_disable.lua", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_boss_ascension", "libraries/modifiers/modifier_boss_ascension.lua", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_illusion_bonuses", "libraries/modifiers/illusions/modifier_illusion_bonuses.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_blind_generic", "libraries/modifiers/modifier_blind_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_wearable", "libraries/modifiers/modifier_wearable.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_status_immunity", "libraries/modifiers/modifier_status_immunity.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_paralyze", "libraries/modifiers/modifier_paralyze.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_in_water", "libraries/modifiers/modifier_in_water.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_bh_heal_disable", "libraries/modifiers/modifier_bh_heal_disable.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_summon_handler", "libraries/modifiers/modifier_summon_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_stunned_generic", "libraries/modifiers/modifier_stunned_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_silence_generic", "libraries/modifiers/modifier_silence_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_disarm_generic", "libraries/modifiers/modifier_disarm_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_break_generic", "libraries/modifiers/modifier_break_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_daze_generic", "libraries/modifiers/modifier_daze_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_root_generic", "libraries/modifiers/modifier_root_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_generic_barrier", "libraries/modifiers/modifier_generic_barrier.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_taunt_generic", "libraries/modifiers/modifier_taunt_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_fear_generic", "libraries/modifiers/modifier_fear_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_chill_generic", "libraries/modifiers/modifier_chill_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_frozen_generic", "libraries/modifiers/modifier_frozen_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_hidden_generic", "libraries/modifiers/modifier_hidden_generic.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_boss_attackspeed", "libraries/modifiers/modifier_boss_attackspeed.lua", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_spawn_immunity", "libraries/modifiers/modifier_spawn_immunity.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_tombstone_respawn_immunity", "libraries/modifiers/modifier_tombstone_respawn_immunity.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_generic_attack_bonus", "libraries/modifiers/modifier_generic_attack_bonus.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_generic_attack_bonus_pct", "libraries/modifiers/modifier_generic_attack_bonus_pct.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_power_scaling", "libraries/modifiers/modifier_power_scaling.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_boss_evasion", "libraries/modifiers/modifier_boss_evasion.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_boss_hard_enrage", "libraries/modifiers/modifier_boss_hard_enrage.lua", LUA_MODIFIER_MOTION_NONE)

LinkLuaModifier( "modifier_stats_system_handler", "libraries/handlers/modifier_stats_system_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_cooldown_reduction_handler", "libraries/handlers/modifier_cooldown_reduction_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_base_attack_time_handler", "libraries/handlers/modifier_base_attack_time_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_accuracy_handler", "libraries/handlers/modifier_accuracy_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_attack_speed_handler", "libraries/handlers/modifier_attack_speed_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_move_speed_handler", "libraries/handlers/modifier_move_speed_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_evasion_handler", "libraries/handlers/modifier_evasion_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_health_handler", "libraries/handlers/modifier_health_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_strength_handler", "libraries/handlers/modifier_strength_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_agility_handler", "libraries/handlers/modifier_agility_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_intellect_handler", "libraries/handlers/modifier_intellect_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_area_dmg_handler", "libraries/handlers/modifier_area_dmg_handler.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_handler_handler", "libraries/handlers/modifier_handler_handler.lua", LUA_MODIFIER_MOTION_NONE)



LinkLuaModifier( "modifier_typing_tag", "libraries/modifiers/tags/modifier_typing_tag.lua", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier( "modifier_illusion_tag", "libraries/modifiers/illusions/modifier_illusion_tag.lua", LUA_MODIFIER_MOTION_NONE)

if IsClient() then -- Load clientside utility lib
	print("client-side has been initialized")
	require("libraries/client_util")
	
	
	if GameRules == nil then
		GameRules = class({})
	end
	GameRules.IsDaytime = function()
		local timeofday = CustomNetTables:GetTableValue( "game_info", "timeofday")
		return tonumber(timeofday["timeofday"]) == 1
	end
	
	GameRules.IsTemporaryNight = function()
		local timeofday = CustomNetTables:GetTableValue( "game_info", "timeofday")
		return tonumber(timeofday["timeofday"]) == 2
	end
	
	GameRules.IsNightstalkerNight = function()
		local timeofday = CustomNetTables:GetTableValue( "game_info", "timeofday")
		return tonumber(timeofday["timeofday"]) == 3
	end
	print( "initialized gamerules", GameRules, GameRules.IsDaytime )
	Convars:RegisterCommand( "cl_deepdebugging", function()
													if not GameRules.DebugCalls then
														print("Starting DebugCalls")
														GameRules.DebugCalls = true

														debug.sethook(function(...)
															local info = debug.getinfo(2)
															local src = tostring(info.short_src)
															local name = tostring(info.name)
															if name ~= "__index" then
																print("Call: ".. src .. " -- " .. name)
															end
														end, "c")
													else
														print("Stopped DebugCalls")
														GameRules.DebugCalls = false
														debug.sethook(nil, "c")
													end
												end, "fixing bug",0)
end

require("templates/relic_base_class")
require("templates/item_base_class")
require("templates/item_basic_base_class")
require("templates/toggle_modifier_base_class")--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.leap = thisEntity:FindAbilityByName("boss_wolves_leap")
	thisEntity.cripple = thisEntity:FindAbilityByName("boss_wolves_critical")
	thisEntity.howl = thisEntity:FindAbilityByName("boss_alpha_wolf_howl")
	thisEntity.aura = thisEntity:FindAbilityByName("boss_alpha_wolf_aura")
	
	AITimers:CreateTimer(0.1, 	function()
		thisEntity.leap:SetLevel(1)
		thisEntity.cripple:SetLevel(1)
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.aura:SetLevel(1)
			thisEntity.howl:SetLevel(1)
		elseif  math.floor(GameRules.gameDifficulty + 0.5) > 2 then
			thisEntity.aura:SetLevel(2)
			thisEntity.howl:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.leap:IsFullyCastable() and target and CalculateDistance( target, thisEntity ) > thisEntity:GetAttackRange() then
			return CastLeap( target:GetAbsOrigin() )
		end
		if thisEntity.howl:IsFullyCastable() and ( thisEntity:IsAttacking() or AICore:BeingAttacked( thisEntity ) > 0 ) then
			return CastHowl()
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end

function CastLeap(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.leap:entindex()
	})
	return thisEntity.leap:GetCastPoint() + 0.1
end

function CastHowl()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.howl:entindex()
	})
	return thisEntity.howl:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	
	thisEntity.see = thisEntity:FindAbilityByName("boss_ammetot_see_all")
	thisEntity.gatekeeper = thisEntity:FindAbilityByName("boss_ammetot_gatekeeper")
	thisEntity.unbound = thisEntity:FindAbilityByName("boss_ammetot_unbound")
	thisEntity.fate = thisEntity:FindAbilityByName("boss_ammetot_fate_acceptance")
	
	thisEntity.warden = thisEntity:FindAbilityByName("boss_ammetot_restless_warden")
	thisEntity.illusion = thisEntity:FindAbilityByName("boss_ammetot_illusion_of_inevitability")
	thisEntity.prisoner = thisEntity:FindAbilityByName("boss_ammetot_willing_prisoner")
	thisEntity.death = thisEntity:FindAbilityByName("boss_ammetot_death_is_lonely")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.see:SetLevel(1)
			thisEntity.gatekeeper:SetLevel(1)
			thisEntity.unbound:SetLevel(1)
			thisEntity.fate:SetLevel(1)
			
			thisEntity.warden:SetLevel(1)
			thisEntity.illusion:SetLevel(1)
			thisEntity.prisoner:SetLevel(1)
			thisEntity.spore:SetLevel(1)
		else
			thisEntity.see:SetLevel(2)
			thisEntity.gatekeeper:SetLevel(2)
			thisEntity.unbound:SetLevel(2)
			thisEntity.fate:SetLevel(2)
			
			thisEntity.warden:SetLevel(2)
			thisEntity.illusion:SetLevel(2)
			thisEntity.prisoner:SetLevel(2)
			thisEntity.death:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.warden:IsFullyCastable() and ( thisEntity:GetAttackTarget() or AICore:BeingAttacked( thisEntity ) > 0 ) then
			return CastWarden()
		end
		if thisEntity.illusion:IsFullyCastable() and ( AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.illusion:GetTrueCastRange() ) or target ) then
			return CastIllusion( AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.illusion:GetTrueCastRange() ) or target )
		end
		if thisEntity.prisoner:IsFullyCastable() and ( AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.prisoner:GetTrueCastRange() ) or target ) then
			return CastPrisoner( AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.prisoner:GetTrueCastRange() ) or target )
		end
		if thisEntity.death:IsFullyCastable() and ( AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.death:GetTrueCastRange() ) or target ) then
			return CastDeath( AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.death:GetTrueCastRange() ) or target )
		end
		return AICore:AttackHighestPriority( thisEntity )
	else 
		return AI_THINK_RATE 
	end
end

function CastWarden()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.warden:entindex()
	})
	return thisEntity.warden:GetCastPoint() + 0.1
end

function CastIllusion(target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.illusion:entindex()
	})
	return thisEntity.illusion:GetCastPoint() + 0.1
end

function CastPrisoner(target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.prisoner:entindex()
	})
	return thisEntity.prisoner:GetCastPoint() + 0.1
end

function CastDeath(target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.death:entindex()
	})
	return thisEntity.death:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.impervious = thisEntity:FindAbilityByName("boss_apotheosis_impervious")
	thisEntity.blessed = thisEntity:FindAbilityByName("boss_apotheosis_blessed_being")
	thisEntity.purifier = thisEntity:FindAbilityByName("boss_apotheosis_purifier")
	thisEntity.potential = thisEntity:FindAbilityByName("boss_apotheosis_latent_potential")
	
	thisEntity.beam = thisEntity:FindAbilityByName("boss_apotheosis_focused_beam")
	thisEntity.rampage = thisEntity:FindAbilityByName("boss_apotheosis_rampage")
	thisEntity.decimate = thisEntity:FindAbilityByName("boss_apotheosis_decimate")
	thisEntity.hunter = thisEntity:FindAbilityByName("boss_apotheosis_ruthless_hunter")
	thisEntity.shield = thisEntity:FindAbilityByName("boss_apotheosis_shield_of_valhalla")
	thisEntity.judge = thisEntity:FindAbilityByName("boss_apotheosis_judge_the_cowards")
	thisEntity.kill = thisEntity:FindAbilityByName("boss_apotheosis_the_end")
	
	AddFOWViewer( DOTA_TEAM_BADGUYS, thisEntity:GetAbsOrigin(), 3000, 10, true )
	
	AITimers:CreateTimer(0.1, 	function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.impervious:SetLevel(1)
			thisEntity.blessed:SetLevel(1)
			thisEntity.purifier:SetLevel(1)
			thisEntity.potential:SetLevel(1)
			
			thisEntity.beam:SetLevel(1)
			thisEntity.rampage:SetLevel(1)
			thisEntity.decimate:SetLevel(1)
			thisEntity.hunter:SetLevel(1)
			thisEntity.shield:SetLevel(1)
			thisEntity.judge:SetLevel(1)
			thisEntity.kill:SetLevel(1)
		elseif  math.floor(GameRules.gameDifficulty + 0.5) > 2 then
			thisEntity.impervious:SetLevel(2)
			thisEntity.blessed:SetLevel(2)
			thisEntity.purifier:SetLevel(2)
			thisEntity.potential:SetLevel(2)
			
			thisEntity.beam:SetLevel(2)
			thisEntity.rampage:SetLevel(2)
			thisEntity.decimate:SetLevel(2)
			thisEntity.hunter:SetLevel(2)
			thisEntity.shield:SetLevel(2)
			thisEntity.judge:SetLevel(2)
			thisEntity.kill:SetLevel(2)
		end
		thisEntity.beam:StartCooldown(10)
		thisEntity.rampage:StartCooldown(15)
		thisEntity.decimate:StartCooldown(20)
		thisEntity.judge:StartCooldown(10)
		thisEntity.kill:StartCooldown(25)
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		local lastHealth = thisEntity.lastKnownHealth or thisEntity:GetHealth()
		thisEntity.lastKnownHealth = thisEntity:GetHealth()
		local totalHeroes = thisEntity:FindEnemyUnitsInRadius( thisEntity:GetAbsOrigin(), -1, {type = DOTA_UNIT_TARGET_HERO} )
		if thisEntity.kill:IsFullyCastable() and #totalHeroes > 1 then
			local killTarget = totalHeroes[RandomInt( #totalHeroes, 1 )]
			return CastTheEnd(thisEntity, killTarget )
		end
		if thisEntity.shield:IsFullyCastable() then
			if thisEntity:PassivesDisabled() or AICore:BeingAttacked( thisEntity ) >= math.ceil(#HeroList:GetActiveHeroes() / 2) or thisEntity.lastKnownHealth <= lastHealth * 0.85 then
				return CastShieldOfValhalla( thisEntity )
			end
		end
		if thisEntity.judge:IsFullyCastable() then
			local judgeHeroes = AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.judge:GetTrueCastRange() )
			if judgeHeroes > AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity:GetAttackRange() )
			or judgeHeroes > AICore:BeingAttacked( thisEntity ) then
				return CastJudgeTheCowards( thisEntity )
			end
		end
		if thisEntity.rampage:IsFullyCastable() and RollPercentage(35) then
			return CastRampage(thisEntity)
		end
		if thisEntity.decimate:IsFullyCastable() and RollPercentage( 25 ) then
			return CastDecimate(thisEntity)
		end
		if thisEntity.beam:IsFullyCastable() then
			return CastFocusedBeam(thisEntity)
		end
		if thisEntity.hunter:IsFullyCastable() then
			if target and CalculateDistance( target, thisEntity ) <= thisEntity:GetIdealSpeed() + thisEntity.hunter:GetTrueCastRange() then
				local position = thisEntity:GetAbsOrigin() + CalculateDirection( target, thisEntity ) * math.min( CalculateDistance( target, thisEntity ) * 2, thisEntity.hunter:GetTrueCastRange() )
				return CastRelentlessHunter(thisEntity, position)
			else
				local hunterTarget = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.hunter:GetTrueCastRange() )
				if hunterTarget then
					local position = thisEntity:GetAbsOrigin() + CalculateDirection( hunterTarget, thisEntity ) * math.min( CalculateDistance( hunterTarget, thisEntity ) * 2, thisEntity.hunter:GetTrueCastRange() )
					return CastRelentlessHunter(thisEntity, position)
				end
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end

function CastFocusedBeam(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.beam:entindex()
	})
	return thisEntity.beam:GetCastPoint() + 0.1
end

function CastRampage(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.rampage:entindex()
	})
	return thisEntity.rampage:GetCastPoint() + 0.1
end

function CastDecimate(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.decimate:entindex()
	})
	return thisEntity.decimate:GetCastPoint() + 0.1
end

function CastRelentlessHunter(thisEntity, position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.hunter:entindex()
	})
	return thisEntity.hunter:GetCastPoint() + 0.1
end

function CastShieldOfValhalla(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.shield:entindex()
	})
	return thisEntity.shield:GetCastPoint() + 0.1
end

function CastJudgeTheCowards(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.judge:entindex()
	})
	return thisEntity.judge:GetCastPoint() + 0.1
end

function CastTheEnd(thisEntity, target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.kill:entindex()
	})
	return thisEntity.kill:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.vici = thisEntity:FindAbilityByName("archangel_imperium_vici")
	thisEntity.frat = thisEntity:FindAbilityByName("archangel_fraternitas")
	
	thisEntity.smite = thisEntity:FindAbilityByName("archangel_smite_the_earth")
	thisEntity.bolt = thisEntity:FindAbilityByName("archangel_holy_bolt")
	thisEntity.judge = thisEntity:FindAbilityByName("archangel_divine_judgement")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.vici:SetLevel(1)
			thisEntity.frat:SetLevel(1)
			
			thisEntity.smite:SetLevel(1)
			thisEntity.bolt:SetLevel(1)
			thisEntity.judge:SetLevel(1)
		else
			thisEntity.vici:SetLevel(2)
			thisEntity.frat:SetLevel(2)
			
			thisEntity.smite:SetLevel(2)
			thisEntity.bolt:SetLevel(2)
			thisEntity.judge:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.judge:IsFullyCastable() then
			local illTarget = AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.judge:GetTrueCastRange() + thisEntity:GetIdealSpeed() , true ) or target
			if illTarget then
				return CastDivineJudgement(illTarget, thisEntity)
			end
		end
		if thisEntity.bolt:IsFullyCastable() then
			return CastHolyBolt(thisEntity)
		end
		if thisEntity.smite:IsFullyCastable()  then
			local position = AICore:OptimalHitPosition( thisEntity, thisEntity.smite:GetTrueCastRange(), thisEntity.smite:GetSpecialValueFor("radius") )
			if position then
				return CastSmite(position, thisEntity)
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastDivineJudgement(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.judge:entindex()
	})
	return thisEntity.judge:GetCastPoint() + 0.1
end

function CastHolyBolt(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		Position = position,
		AbilityIndex = thisEntity.bolt:entindex()
	})
	return thisEntity.bolt:GetCastPoint() + 0.1
end

function CastSmite(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.smite:entindex()
	})
	return thisEntity.smite:GetCastPoint() + 0.1
endfunction Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.decay = thisEntity:FindAbilityByName("boss_arthromos_touch_of_decay")
	thisEntity.raise = thisEntity:FindAbilityByName("boss_arthromos_hellraiser")
	thisEntity.plague = thisEntity:FindAbilityByName("boss_arthromos_plague_aura")
	
	thisEntity.swarm = thisEntity:FindAbilityByName("boss_arthromos_virulent_swarm")
	thisEntity.pestilence = thisEntity:FindAbilityByName("boss_arthromos_pestilence")
	thisEntity.dessicate = thisEntity:FindAbilityByName("boss_arthromos_dessicate")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.decay:SetLevel(1)
			thisEntity.raise:SetLevel(1)
			thisEntity.plague:SetLevel(1)
			
			thisEntity.swarm:SetLevel(1)
			thisEntity.pestilence:SetLevel(1)
			thisEntity.dessicate:SetLevel(1)
		else
			thisEntity.decay:SetLevel(2)
			thisEntity.raise:SetLevel(2)
			thisEntity.plague:SetLevel(2)
			
			thisEntity.swarm:SetLevel(2)
			thisEntity.pestilence:SetLevel(2)
			thisEntity.dessicate:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.pestilence:IsFullyCastable() and AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.pestilence:GetSpecialValueFor("radius") ) then
			return CastPestilence()
		end
		if thisEntity.dessicate:IsFullyCastable() then
			return CastDessicate()
		end
		if thisEntity.swarm:IsFullyCastable() and target then
			return CastSwarm( target:GetAbsOrigin() )
		end
		return AICore:AttackHighestPriority( thisEntity )
	else 
		return AI_THINK_RATE 
	end
end

function CastSwarm(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.swarm:entindex()
	})
	return thisEntity.swarm:GetCastPoint() + 0.1
end

function CastPestilence()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.pestilence:entindex()
	})
	return thisEntity.pestilence:GetCastPoint() + 0.1
end

function CastDessicate()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.dessicate:entindex()
	})
	return thisEntity.dessicate:GetCastPoint() + thisEntity.dessicate:GetChannelTime() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local newPos = AICore:BeAHugeCoward( thisEntity, 600 )
		local timeTaken = CalculateDistance( newPos, thisEntity:GetAbsOrigin() ) / thisEntity:GetIdealSpeed()
		return math.max( timeTaken, 1 )
	else return 1 end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.ravage = thisEntity:FindAbilityByName("boss26_ravage")
	thisEntity.smash = thisEntity:FindAbilityByName("boss26_smash")
	thisEntity.rend = thisEntity:FindAbilityByName("boss26_rend")
	
	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
			thisEntity.ravage:SetLevel(1)
			thisEntity.smash:SetLevel(1)
			thisEntity.rend:SetLevel(1)
		else
			thisEntity.ravage:SetLevel(2)
			thisEntity.smash:SetLevel(2)
			thisEntity.rend:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = thisEntity:GetTauntTarget() or FindMarkedTarget(thisEntity) or AttackingMaster(thisEntity) or AICore:GetHighestPriorityTarget(thisEntity)
		if target then
			if thisEntity.ravage:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = target:GetAbsOrigin(),
					AbilityIndex = thisEntity.ravage:entindex()
				})
				return thisEntity.ravage:GetCastPoint() + 0.1
			end
			if thisEntity.rend:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = target:GetAbsOrigin(),
					AbilityIndex = thisEntity.rend:entindex()
				})
				return thisEntity.rend:GetCastPoint() + 0.1
				
			end
		end
		if thisEntity.smash:IsFullyCastable() and AICore:IsNearEnemyUnit(thisEntity, thisEntity.smash:GetSpecialValueFor("radius")) then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.smash:entindex()
			})
			return thisEntity.smash:GetCastPoint() + 0.1
		end
		if not target then
			return AICore:AttackHighestPriority( thisEntity )
		else
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
				TargetIndex = target:entindex(),
			})
		end
		return AI_THINK_RATE
	else return AI_THINK_RATE end
end

function FindMarkedTarget(entity)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local targets = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, -1, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	for _, target in ipairs(targets) do
		if target:HasModifier("modifier_boss27_kill_them_debuff") then return target end
	end
end

function AttackingMaster(entity)
	if entity.bearMaster then
		local attackers = AICore:BeingAttackedBy( entity.bearMaster )
		for _, attacker in ipairs(attackers) do
			return attacker
		end
	end
end--[[
Broodking AI
]]
if IsServer() then
	require( "ai/ai_core" )
	
	AI_STATE_CLOSE_COMBAT = 1
	AI_STATE_CHASING = 2
	AI_STATE_STEALTH = 3
	
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.rush = thisEntity:FindAbilityByName("boss1a_rushdown")
		thisEntity.blink = thisEntity:FindAbilityByName("boss1a_blink_strike")
		thisEntity.vanish = thisEntity:FindAbilityByName("boss1a_vanish")
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) > 2 then
				thisEntity.vanish:SetLevel(2)
				thisEntity.blink:SetLevel(2)
				thisEntity.rush:SetLevel(2)
			else
				thisEntity.vanish:SetLevel(1)
				thisEntity.blink:SetLevel(1)
				thisEntity.rush:SetLevel(1)
			end
		end)
		thisEntity.AIbehavior = RandomInt(1,3)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsCommandRestricted() then
			EvaluateBehavior(thisEntity)
			if thisEntity.AIstate == AI_STATE_CLOSE_COMBAT then
				if thisEntity.AIbehavior == AI_BEHAVIOR_AGGRESSIVE then -- uses all abilities without concern of options
					if thisEntity:IsAttacking() and not thisEntity:IsInvisible() then
						local target = thisEntity:GetAttackTarget()
						if target then
							if thisEntity.vanish:IsFullyCastable() then
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
									AbilityIndex = thisEntity.vanish:entindex()
								})
								return AI_THINK_RATE
							elseif thisEntity.blink:IsFullyCastable() then
								local targetPos = AICore:OptimalHitPosition(thisEntity, CalculateDistance(target:GetAbsOrigin(), thisEntity), thisEntity.blink:GetSpecialValueFor("strike_radius"), true)
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = targetPos,
									AbilityIndex = thisEntity.blink:entindex()
								})
								return AI_THINK_RATE
							elseif thisEntity.rush:IsFullyCastable() then
								if AICore:NumEnemiesInLine(thisEntity, thisEntity.rush:GetTrueCastRange(), 175, true) >= 2 then
									ExecuteOrderFromTable({
										UnitIndex = thisEntity:entindex(),
										OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
										Position = AICore:FindFarthestEnemyInLine(thisEntity, thisEntity.rush:GetTrueCastRange(), 175, true):GetAbsOrigin(),
										AbilityIndex = thisEntity.rush:entindex()
									})
									return AI_THINK_RATE
								end
							end
						end
					else
						local target = AICore:GetHighestPriorityTarget(thisEntity)
						if target then
							local distance = CalculateDistance(thisEntity, target)
							local pathLength = GridNav:FindPathLength(thisEntity:GetAbsOrigin(), target:GetAbsOrigin())
							if (pathLength < 0 or AICore:NumEnemiesInLine(thisEntity, thisEntity.rush:GetTrueCastRange(), 175, true) < 2) and thisEntity.blink:IsFullyCastable() then
								local targetPos = AICore:OptimalHitPosition(thisEntity, distance, thisEntity.blink:GetSpecialValueFor("strike_radius"), true)
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = targetPos,
									AbilityIndex = thisEntity.blink:entindex()
								})
								return AI_THINK_RATE
							elseif pathLength < thisEntity.rush:GetTrueCastRange() and thisEntity.rush:IsFullyCastable() then
								local rushTarget = AICore:FindFarthestEnemyInLine(thisEntity, thisEntity.rush:GetTrueCastRange(), 175, true)
								local rushPos = target:GetAbsOrigin()
								if rushTarget then rushPos = rushTarget:GetAbsOrigin() end
								rushPos = rushPos + CalculateDirection(rushPos, thisEntity) * thisEntity:GetAttackRange()
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = rushPos,
									AbilityIndex = thisEntity.rush:entindex()
								})
								return AI_THINK_RATE
							end
						end
					end
				elseif thisEntity.AIbehavior == AI_BEHAVIOR_CAUTIOUS then -- uses abilities to get in and out
					local target = AICore:GetHighestPriorityTarget(thisEntity)
					if target then
						local hasBothSpells = thisEntity.rush:IsFullyCastable() and thisEntity.blink:IsFullyCastable()
						local hasOneSpell = thisEntity.rush:IsFullyCastable() or thisEntity.blink:IsFullyCastable()
						local attackedByOthers = (AICore:BeingAttacked( thisEntity ) > 1 and target:IsAttackingEntity(thisEntity) )
						if hasBothSpells then
							local distance = CalculateDistance(thisEntity, target)
							local pathLength = GridNav:FindPathLength(thisEntity:GetAbsOrigin(), target:GetAbsOrigin())
							if (pathLength < 0 or AICore:NumEnemiesInLine(thisEntity, thisEntity.rush:GetTrueCastRange(), 175, true) <= math.min(HeroList:GetActiveHeroCount(), 2)) and thisEntity.blink:IsFullyCastable() then
								local targetPos = AICore:OptimalHitPosition(thisEntity, distance, thisEntity.blink:GetSpecialValueFor("strike_radius"), true)
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = targetPos,
									AbilityIndex = thisEntity.blink:entindex()
								})
								return AI_THINK_RATE
							elseif pathLength > distance and thisEntity.rush:IsFullyCastable() then
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = AICore:FindFarthestEnemyInLine(thisEntity, thisEntity.rush:GetTrueCastRange(), 175, true):GetAbsOrigin(),
									AbilityIndex = thisEntity.rush:entindex()
								})
								return AI_THINK_RATE
							end
						elseif hasOneSpell then
							if attackedByOthers then
								local targetPos
								for _, attacker in ipairs( AICore:BeingAttackedBy( thisEntity ) ) do
									targetPos = ((targetPos or attacker:GetAbsOrigin()) + attacker:GetAbsOrigin()) / 2
								end
								local runDir = CalculateDirection(thisEntity, targetPos)
								if thisEntity.blink:IsFullyCastable() then
									ExecuteOrderFromTable({
										UnitIndex = thisEntity:entindex(),
										OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
										Position = thisEntity:GetAbsOrigin() + runDir * thisEntity.blink:GetTrueCastRange(),
										AbilityIndex = thisEntity.blink:entindex()
									})
									return AI_THINK_RATE
								elseif thisEntity.rush:IsFullyCastable() then
									ExecuteOrderFromTable({
										UnitIndex = thisEntity:entindex(),
										OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
										Position = thisEntity:GetAbsOrigin() + runDir * thisEntity.rush:GetTrueCastRange(),
										AbilityIndex = thisEntity.rush:entindex()
									})
									return AI_THINK_RATE
								end
							end
						else
							AICore:BeAHugeCoward( thisEntity, thisEntity:GetIdealSpeed() )
						end
					elseif not thisEntity:IsInvisible() then
						if thisEntity.vanish:IsFullyCastable() then
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
								AbilityIndex = thisEntity.vanish:entindex()
							})
							return AI_THINK_RATE
						end
					end
				elseif thisEntity.AIbehavior == AI_BEHAVIOR_SAFE then -- tries to use mobility and invis to focus a target down and runs if it gets attacked by others, unless if it has no other choice
					local target = AICore:GetHighestPriorityTarget(thisEntity)
					if target then 
						if (AICore:BeingAttacked( thisEntity ) > 2 and target:IsAttackingEntity(thisEntity) ) or (AICore:BeingAttacked( thisEntity ) > 0 and not target:IsAttackingEntity(thisEntity)) and not thisEntity:IsInvisible() then
							if thisEntity.vanish:IsFullyCastable() then
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
									AbilityIndex = thisEntity.vanish:entindex()
								})
								return AI_THINK_RATE
							elseif thisEntity.rush:IsFullyCastable() then
								local targetPos = thisEntity:GetAbsOrigin() + CalculateDirection(thisEntity, target) * thisEntity.rush:GetTrueCastRange()
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = targetPos,
									AbilityIndex = thisEntity.rush:entindex()
								})
								return AI_THINK_RATE
							elseif thisEntity.blink:IsFullyCastable() then
								local targetPos
								for _, attacker in ipairs( AICore:BeingAttackedBy( thisEntity ) ) do
									targetPos = ((targetPos or attacker:GetAbsOrigin()) + attacker:GetAbsOrigin()) / 2
								end
								targetPos = thisEntity:GetAbsOrigin() + CalculateDirection(thisEntity, targetPos) * CalculateDistance(thisEntity, targetPos)
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = targetPos,
									AbilityIndex = thisEntity.blink:entindex()
								})
								return AI_THINK_RATE
							end
						else
							if thisEntity:IsAttacking() and not thisEntity:IsInvisible() then
								if thisEntity.vanish:IsFullyCastable() then
									ExecuteOrderFromTable({
										UnitIndex = thisEntity:entindex(),
										OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
										AbilityIndex = thisEntity.vanish:entindex()
									})
									return AI_THINK_RATE
								elseif thisEntity.blink:IsFullyCastable() then
									ExecuteOrderFromTable({
										UnitIndex = thisEntity:entindex(),
										OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
										Position = target:GetAbsOrigin(),
										AbilityIndex = thisEntity.blink:entindex()
									})
									return AI_THINK_RATE
								elseif thisEntity.rush:IsFullyCastable() then
									ExecuteOrderFromTable({
										UnitIndex = thisEntity:entindex(),
										OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
										Position = target:GetAbsOrigin() + CalculateDirection(target, thisEntity) * (target:GetAttackRange() - 50),
										AbilityIndex = thisEntity.rush:entindex()
									})
									return AI_THINK_RATE
								end
							end
						end
					end
				end
			elseif thisEntity.AIstate == AI_STATE_CHASING then
				local target = AICore:GetHighestPriorityTarget(thisEntity)
				if target then
					local distance = CalculateDistance(thisEntity, target)
					local pathLength = GridNav:FindPathLength(thisEntity:GetAbsOrigin(), target:GetAbsOrigin())
					if (pathLength - 5 > distance and thisEntity.blink:IsFullyCastable()) then
						local distToReach = math.min(thisEntity.blink:GetTrueCastRange(), distance)
						local targetPos = thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * distToReach
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = targetPos,
							AbilityIndex = thisEntity.blink:entindex()
						})
						return AI_THINK_RATE
					elseif thisEntity.rush:IsFullyCastable() then
						local distToReach = math.min(thisEntity.rush:GetTrueCastRange(), distance)
						local targetPos = thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * distToReach
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = targetPos,
							AbilityIndex = thisEntity.rush:entindex()
						})
						return AI_THINK_RATE
					end
				end
			elseif thisEntity.AIstate == AI_STATE_STEALTH then
				local target = AICore:GetHighestPriorityTarget(thisEntity)
				if thisEntity.vanish:IsFullyCastable() and not thisEntity:IsInvisible() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.vanish:entindex()
					})
					return AI_THINK_RATE
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
	
	function EvaluateBehavior(entity)
		if AICore:IsNearEnemyUnit(entity, 1500) then
			if AICore:IsNearEnemyUnit(entity, entity:GetAttackRange() + entity:GetIdealSpeed() * 0.8 ) then
				entity.AIstate = AI_STATE_CLOSE_COMBAT
			else
				entity.AIstate = AI_STATE_CHASING
			end
		else
			entity.AIstate = AI_STATE_STEALTH
		end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.fire = thisEntity:FindAbilityByName("creature_fire_breath")
	thisEntity.crush = thisEntity:FindAbilityByName("creature_slithereen_crush")
	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
			thisEntity.fire:SetLevel(1)
			thisEntity.crush:SetLevel(1)
		else
			thisEntity.fire:SetLevel(2)
			thisEntity.crush:SetLevel(2)
		end
	end)
	thisEntity.idle = GameRules:GetGameTime()
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		if not thisEntity:IsChanneling() then
			local radius = thisEntity.crush:GetSpecialValueFor("crush_radius")
			if thisEntity.crush then
				if AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius, false ) >= math.floor(AICore:TotalEnemyHeroesInRange( thisEntity, radius )/2) 
				and AICore:TotalEnemyHeroesInRange( thisEntity, radius ) ~= 0
				and thisEntity.crush:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.crush:entindex()
					})
					return AI_THINK_RATE
				end
			end
			if thisEntity.fire:IsFullyCastable() then
				target = AICore:NearestDisabledEnemyHeroInRange( thisEntity, thisEntity.fire:GetCastRange(), false )
				if target then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetOrigin(),
						AbilityIndex = thisEntity.fire:entindex()
					})
					thisEntity.idle = GameRules:GetGameTime()
					return thisEntity.fire:GetChannelTime()
				end
			end
			-- FORCE CAST AFTER SET DURATION --
			if thisEntity.idle + 10 < GameRules:GetGameTime() and thisEntity.fire:IsFullyCastable() then
				target = AICore:HighestThreatHeroInRange(thisEntity, 99999, 0, true)
				if target then
					ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = target:GetOrigin(),
							AbilityIndex = thisEntity.fire:entindex()
					})
					thisEntity.idle = GameRules:GetGameTime()
					return thisEntity.fire:GetChannelTime()
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else
			return 0.5
		end
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.spike = thisEntity:FindAbilityByName("boss_leshrac_erupt")
	thisEntity.lightning = thisEntity:FindAbilityByName("creature_lightning_storm")
	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
			thisEntity.lightning:SetLevel(1)
			thisEntity.spike:SetLevel(1)
		else
			thisEntity.lightning:SetLevel(2)
			thisEntity.spike:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if thisEntity.spike:IsFullyCastable() and thisEntity.lightning:IsFullyCastable() then
			local range = thisEntity.spike:GetTrueCastRange(  )
			if thisEntity.spike:GetTrueCastRange() < thisEntity.lightning:GetTrueCastRange() then range = thisEntity.lightning:GetTrueCastRange() end
			local target = AICore:HighestThreatHeroInRange( thisEntity, range, 15, false )
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, range, false ) end
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					AbilityIndex = thisEntity.spike:entindex(),
					Position = target:GetOrigin()
				})
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = target:entindex(),
					AbilityIndex = thisEntity.lightning:entindex()
				})
				return AI_THINK_RATE
			end
		elseif thisEntity.spike:IsFullyCastable() then
			local target = AICore:HighestThreatHeroInRange( thisEntity, thisEntity.spike:GetTrueCastRange(), 15, false )
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, thisEntity.spike:GetTrueCastRange(), false ) end
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					AbilityIndex = thisEntity.spike:entindex(),
					Position = target:GetOrigin()
				})
				return AI_THINK_RATE
			end
		elseif thisEntity.lightning:IsFullyCastable() then
			local target = AICore:HighestThreatHeroInRange( thisEntity, thisEntity.lightning:GetTrueCastRange(), 0, false )
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, thisEntity.lightning:GetTrueCastRange(), false ) end
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = target:entindex(),
					AbilityIndex = thisEntity.lightning:entindex()
				})
			end
			return AI_THINK_RATE
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.bloodlust = thisEntity:FindAbilityByName("boss_ogre_magi_bloodlust")
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local radius = thisEntity.bloodlust:GetCastRange()
		local allies = FindUnitsInRadius( thisEntity:GetTeam(), thisEntity:GetOrigin(), nil, radius, DOTA_UNIT_TARGET_TEAM_FRIENDLY, DOTA_UNIT_TARGET_ALL, 0, 0, false )
		if thisEntity:HasModifier("modifier_ogre_magi_bloodlust") and thisEntity.bloodlust:IsFullyCastable() then
			for _,ally in pairs(allies) do
				if not ally:HasModifier("modifier_ogre_magi_bloodlust") then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
						TargetIndex = ally:entindex(),
						AbilityIndex = thisEntity.bloodlust:entindex()
					})
					return AI_THINK_RATE
				end
			end
		elseif not thisEntity:HasModifier("modifier_ogre_magi_bloodlust") and thisEntity.bloodlust:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
				TargetIndex = thisEntity:entindex(),
				AbilityIndex = thisEntity.bloodlust:entindex()
			})
			return AI_THINK_RATE
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.smash = thisEntity:FindAbilityByName("boss_ogre_smash")
	if not thisEntity.smash then thisEntity.smash = thisEntity:FindAbilityByName("boss_ogre_smash") end
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local target = AICore:NearestEnemyHeroInRange( thisEntity, 99999 , true)
		local radius = thisEntity.smash:GetCastRange(thisEntity:GetAbsOrigin(), target)
		if AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius, false ) <= AICore:TotalEnemyHeroesInRange( thisEntity, radius ) 
		and AICore:TotalEnemyHeroesInRange( thisEntity, radius ) ~= 0 
		and thisEntity.smash:IsFullyCastable() then
			local smashRadius = thisEntity.smash:GetSpecialValueFor("radius")
			local position = AICore:OptimalHitPosition(thisEntity, radius, smashRadius)
			if position then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = position,
					AbilityIndex = thisEntity.smash:entindex()
				})
				return AI_THINK_RATE
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.smash = thisEntity:FindAbilityByName("boss_ogre_smash_king")
	if not thisEntity.smash then thisEntity.smash = thisEntity:FindAbilityByName("boss_ogre_smash_king") end
	thisEntity.summon = thisEntity:FindAbilityByName("creature_summon_ogres")
	thisEntity.internalClock = GameRules:GetGameTime()
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local target = AICore:NearestEnemyHeroInRange( thisEntity, 99999 , true)
		local radius = thisEntity.smash:GetCastRange(thisEntity:GetAbsOrigin(), target)
		if AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius, false ) <= AICore:TotalEnemyHeroesInRange( thisEntity, radius ) 
		and AICore:TotalEnemyHeroesInRange( thisEntity, radius ) ~= 0 
		and thisEntity.smash:IsFullyCastable() then
			local smashRadius = thisEntity.smash:GetSpecialValueFor("radius")
			local position = AICore:OptimalHitPosition(thisEntity, radius, smashRadius)
			if position then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = position,
					AbilityIndex = thisEntity.smash:entindex()
				})
				return AI_THINK_RATE
			end
		end
		if thisEntity.summon:IsFullyCastable() and AICore:SpecificAlliedUnitsAlive(thisEntity, "npc_dota_mini_boss2") < 6 then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.summon:entindex()
			})
			return AI_THINK_RATE
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.kick = thisEntity:FindAbilityByName("creature_kick")
	thisEntity.punch = thisEntity:FindAbilityByName("creature_punch")
	thisEntity.kick:SetHidden(false)
	thisEntity.bloodlust = thisEntity:FindAbilityByName("boss_ogre_magi_bloodlust_champ")
	thisEntity.smash = thisEntity:FindAbilityByName("creature_melee_smash")
	if not thisEntity.bloodlust then thisEntity.bloodlust = thisEntity:FindAbilityByName("boss_ogre_magi_bloodlust_champ_vh") end
	if not thisEntity.smash then thisEntity.smash = thisEntity:FindAbilityByName("creature_melee_smash_h") end
	thisEntity.internalClock = GameRules:GetGameTime()
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if thisEntity.bloodlust:IsFullyCastable() and thisEntity:GetHealth() < 0.5*thisEntity:GetMaxHealth() and not thisEntity:HasModifier("modifier_ogre_magi_bloodlust") then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
				TargetIndex = thisEntity:entindex(),
				AbilityIndex = thisEntity.bloodlust:entindex()
			})
			return AI_THINK_RATE
		end
		if thisEntity.kick:IsFullyCastable() then
			local target = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.kick:GetCastRange() + 150, true)
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = target:entindex(),
					AbilityIndex = thisEntity.kick:entindex()
				})
				return AI_THINK_RATE
			end
		end
		if thisEntity.punch:IsFullyCastable() then
			local target = AICore:WeakestEnemyHeroInRange( thisEntity, thisEntity.punch:GetCastRange() + 50, true)
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = target:entindex(),
					AbilityIndex =  thisEntity.punch:entindex()
				})
				return AI_THINK_RATE
			end
		end
		if thisEntity.smash:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, 500) > 2 then
			local target = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.smash:GetCastRange())
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = target:GetOrigin(),
					AbilityIndex = thisEntity.smash:entindex()
				})
				return AI_THINK_RATE
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.armor = thisEntity:FindAbilityByName("boss_living_armor")
	thisEntity.summon = thisEntity:FindAbilityByName("creature_summon_tree")
	
	AITimers:CreateTimer(0.1, function() 
		thisEntity.armor:SetLevel( math.floor(GameRules:GetGameDifficulty()/2) )
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if not thisEntity:IsChanneling() then
			if thisEntity.armor:IsFullyCastable() and not thisEntity:HasModifier("modifier_treant_living_armor") then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = thisEntity:entindex(),
					AbilityIndex = thisEntity.armor:entindex()
				})
				return AI_THINK_RATE
			end
			if thisEntity.summon:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.summon:entindex()
				})
				return AI_THINK_RATE
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return 0.5 end
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.armor = thisEntity:FindAbilityByName("boss_living_armor")
	thisEntity.summon = thisEntity:FindAbilityByName("creature_summon_tree")
	thisEntity.summon2 = thisEntity:FindAbilityByName("creature_summon_tree2")
	thisEntity.sprout = thisEntity:FindAbilityByName("furion_sprout")
	
	AITimers:CreateTimer(0.1, function() 
		thisEntity.armor:SetLevel( math.floor(GameRules:GetGameDifficulty()/2) )
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if not thisEntity:IsChanneling() then
			if thisEntity.armor:IsFullyCastable() and not thisEntity:HasModifier("modifier_treant_living_armor") then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = thisEntity:entindex(),
					AbilityIndex = thisEntity.armor:entindex()
				})
				return AI_THINK_RATE
			end
			if thisEntity.summon:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.summon:entindex()
				})
				return AI_THINK_RATE
			end
			if thisEntity.summon2:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.summon2:entindex()
				})
				return AI_THINK_RATE
			end
			radius = thisEntity:GetAttackRange()+thisEntity:GetAttackRangeBuffer()
			target = AICore:HighestThreatHeroInRange(thisEntity, radius, 0, true)
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, radius, true) end
			if not target then target = AICore:NearestEnemyHeroInRange( thisEntity, 9999, true) end
			if target then
				if target:GetHealth() < target:GetMaxHealth()*0.4 then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetOrigin(),
						AbilityIndex = thisEntity.sprout:entindex()
					})
					return AI_THINK_RATE
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	else return AI_THINK_RATE end
endif IsServer() then
	require( "ai/ai_core" )
	
	AI_STATE_CLOSE_COMBAT = 1
	AI_STATE_CHASING = 2
	
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.leap = thisEntity:FindAbilityByName("boss1b_leap")
		thisEntity.pin = thisEntity:FindAbilityByName("boss1b_spear_pin")
		thisEntity.pierce = thisEntity:FindAbilityByName("boss1b_spear_pierce")
		
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
				thisEntity.leap:SetLevel(1)
				thisEntity.pin:SetLevel(1)
				thisEntity.pierce:SetLevel(1)
			else
				thisEntity.leap:SetLevel(2)
				thisEntity.pin:SetLevel(2)
				thisEntity.pierce:SetLevel(2)
			end
		end)
	end


	function AIThink(thisEntity)
		if thisEntity and not thisEntity:IsNull() then
			if not thisEntity:IsDominated() and not thisEntity:IsCommandRestricted() then
				EvaluateBehavior(thisEntity)
				if thisEntity.AIstate == AI_STATE_CLOSE_COMBAT then
					local target = AICore:GetHighestPriorityTarget(thisEntity)
					if thisEntity.pin:IsFullyCastable() and not target:IsStunned() then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = target:GetAbsOrigin(),
							AbilityIndex = thisEntity.pin:entindex()
						})
						return AI_THINK_RATE
					end
					
					-- BEHAVIOR SPECIFIC
					if thisEntity.leap:IsFullyCastable() then
						local attackedByOthers = (AICore:BeingAttacked( thisEntity ) > 1 and target:IsAttackingEntity(thisEntity) )
						if thisEntity:GetAIBehavior() == AI_BEHAVIOR_AGGRESSIVE then -- uses all abilities without concern of options
							local targetPos = AICore:OptimalHitPosition(thisEntity, thisEntity.leap:GetTrueCastRange(), thisEntity.leap:GetSpecialValueFor("leap_radius"), false)
							if targetPos then
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
									Position = target:GetAbsOrigin(),
									AbilityIndex = thisEntity.leap:entindex()
								})
								return AI_THINK_RATE
							end
						elseif attackedByOthers then -- only uses leap if not being focused
							local targetPos
							for _, attacker in ipairs( AICore:BeingAttackedBy( thisEntity ) ) do
								targetPos = ((targetPos or attacker:GetAbsOrigin()) + attacker:GetAbsOrigin()) / 2
							end
							local runDir = CalculateDirection(thisEntity, targetPos)
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
								Position =  thisEntity:GetAbsOrigin() + runDir * thisEntity.leap:GetTrueCastRange(),
								AbilityIndex = thisEntity.leap:entindex()
							})
							return AI_THINK_RATE
						elseif thisEntity.AIbehavior == AI_BEHAVIOR_CAUTIOUS then -- holds leap to jump out if focused
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
								Position = target:GetAbsOrigin(),
								AbilityIndex = thisEntity.leap:entindex()
							})
							return AI_THINK_RATE					
						end
					end
					if thisEntity.pierce:IsFullyCastable() and (AICore:NumEnemiesInLine(thisEntity, thisEntity.pierce:GetSpecialValueFor("spear_distance"), thisEntity.pierce:GetSpecialValueFor("spear_width"), true) <= math.min(HeroList:GetActiveHeroCount(), 2) or thisEntity:GetAIBehavior() == AI_BEHAVIOR_AGGRESSIVE) then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = target:GetAbsOrigin(),
							AbilityIndex = thisEntity.pierce:entindex()
						})
						return AI_THINK_RATE
					end
				elseif thisEntity.AIstate == AI_STATE_CHASING then
					local target = AICore:GetHighestPriorityTarget(thisEntity)
					if target then
						local pathLength = GridNav:FindPathLength(thisEntity:GetAbsOrigin(), target:GetAbsOrigin()) 
						if pathLength - 5 > CalculateDistance(thisEntity, target) and thisEntity.leap:IsFullyCastable() then -- if need to path around something
							local distToReach = math.min(thisEntity.leap:GetTrueCastRange(), CalculateDistance(target, thisEntity))
							local targetPos = thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * distToReach
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
								Position = targetPos,
								AbilityIndex = thisEntity.leap:entindex()
							})
							return AI_THINK_RATE
						end
					end
				end
				return AICore:AttackHighestPriority( thisEntity )
			else return AI_THINK_RATE end
		end
	end
	
	function EvaluateBehavior(entity)
		if AICore:IsNearEnemyUnit(entity, entity:GetAttackRange() + entity:GetIdealSpeed() * 0.8 ) then
			entity.AIstate = AI_STATE_CLOSE_COMBAT
		else
			entity.AIstate = AI_STATE_CHASING
		end
	end
end--[[
Broodking AI
]]

if IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.bloodlust = thisEntity:FindAbilityByName("boss14_bloodlust")
		thisEntity.execute = thisEntity:FindAbilityByName("boss14_execute")
		thisEntity.quake = thisEntity:FindAbilityByName("boss14_quake")
		thisEntity.whirlwind = thisEntity:FindAbilityByName("boss14_whirlwind")
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
				thisEntity.bloodlust:SetLevel(1)
				thisEntity.execute:SetLevel(1)
				thisEntity.quake:SetLevel(1)
				thisEntity.whirlwind:SetLevel(1)
			else
				thisEntity.bloodlust:SetLevel(2)
				thisEntity.execute:SetLevel(2)
				thisEntity.quake:SetLevel(2)
				thisEntity.whirlwind:SetLevel(2)
			end
		end)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target and not target:IsNull() then
				if thisEntity:GetHealthPercent() > 50 then
					if thisEntity.quake and thisEntity.quake:IsFullyCastable() then
						local radius = thisEntity.quake:GetSpecialValueFor("radius")
						if AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius, false ) >= AICore:TotalEnemyHeroesInRange( thisEntity, radius ) and not AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius, false ) == 0 then
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
								Position = thisEntity:GetAbsOrigin(),
								AbilityIndex = thisEntity.quake:entindex()
							})
							return thisEntity.quake:GetCastPoint() + 0.1
						end
					end
					if thisEntity.execute and thisEntity.execute:IsFullyCastable() then
						local executeTarget = thisEntity.execute:NearestExecuteableTarget( thisEntity.execute:GetTrueCastRange() + thisEntity:GetIdealSpeed() )
						if executeTarget and not executeTarget:IsNull() then
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
								TargetIndex = executeTarget:entindex(),
								AbilityIndex = thisEntity.execute:entindex()
							})
							return thisEntity.execute:GetCastPoint() + 1.2
						end
					end
					if thisEntity.whirlwind and thisEntity.whirlwind:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity,  thisEntity.whirlwind:GetSpecialValueFor("radius") ) > 0 then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
							AbilityIndex = thisEntity.whirlwind:entindex()
						})
						return thisEntity.whirlwind:GetCastPoint() + 0.1
					end
				else
					if thisEntity.quake and thisEntity.quake:IsFullyCastable() then
						local radius = thisEntity.quake:GetSpecialValueFor("radius")
						if AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius, false ) >= AICore:TotalEnemyHeroesInRange( thisEntity, radius ) then
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
								Position = target:GetAbsOrigin(),
								AbilityIndex = thisEntity.quake:entindex()
							})
							return thisEntity.quake:GetCastPoint() + 0.1
						end
					end
					if thisEntity.whirlwind and thisEntity.whirlwind:IsFullyCastable() then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
							AbilityIndex = thisEntity.whirlwind:entindex()
						})
						return thisEntity.whirlwind:GetCastPoint() + 0.1
					end
					if thisEntity.execute and thisEntity.execute:IsFullyCastable() then
						local executeTarget = thisEntity.execute:NearestExecuteableTarget( thisEntity.execute:GetTrueCastRange() + thisEntity:GetIdealSpeed() ) or target
						if executeTarget then
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
								TargetIndex = executeTarget:entindex(),
								AbilityIndex = thisEntity.execute:entindex()
							})
							return thisEntity.execute:GetCastPoint() + 3
						end
					end
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
endif IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.thread = thisEntity:FindAbilityByName("boss15_thread_of_life")
		thisEntity.peel = thisEntity:FindAbilityByName("boss15_peel_the_veil")
		thisEntity.exorcise = thisEntity:FindAbilityByName("boss15_exorcise")
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
				thisEntity.thread:SetLevel(1)
				thisEntity.peel:SetLevel(1)
				thisEntity.exorcise:SetLevel(1)
			elseif  math.floor(GameRules.gameDifficulty + 0.5) == 2 then 
				thisEntity.thread:SetLevel(2)
				thisEntity.peel:SetLevel(2)
				thisEntity.exorcise:SetLevel(2)
			else
				thisEntity.thread:SetLevel(3)
				thisEntity.peel:SetLevel(3)
				thisEntity.exorcise:SetLevel(3)
			end
		end)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target and not target:IsNull() then
				if thisEntity:GetHealthPercent() < 66 and thisEntity:GetHealthPercent() > 33 then
					if #thisEntity.thread:GetTethers() < 1 and thisEntity.thread:IsFullyCastable() then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
							TargetIndex = target:entindex(),
							AbilityIndex = thisEntity.thread:entindex()
						})
						return AI_THINK_RATE
					end
				else
					if thisEntity.thread:IsFullyCastable() then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
							TargetIndex = target:entindex(),
							AbilityIndex = thisEntity.thread:entindex()
						})
						return AI_THINK_RATE
					end
				end
				if thisEntity.exorcise:IsFullyCastable() and AICore:EnemiesInLine(thisEntity, thisEntity.exorcise:GetSpecialValueFor("distance"), thisEntity.exorcise:GetSpecialValueFor("width_end"), false) then
					local targetPos = thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * 100
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = targetPos,
						AbilityIndex = thisEntity.exorcise:entindex()
					})
					return AI_THINK_RATE
				end
				if thisEntity.peel:IsFullyCastable() and thisEntity.peel:GetGhostCount() < 25 then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.peel:entindex()
					})
					return AI_THINK_RATE
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.hail = thisEntity:FindAbilityByName("boss_reaper_necrotic_hail")
	thisEntity.reposition = thisEntity:FindAbilityByName("boss_reaper_reposition")
	thisEntity.multi = thisEntity:FindAbilityByName("boss_reaper_multi_shot")
	
	AITimers:CreateTimer(function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then 
			thisEntity.hail:SetLevel(1)
			thisEntity.reposition:SetLevel(1)
			thisEntity.multi:SetLevel(1)
		else
			thisEntity.hail:SetLevel(2)
			thisEntity.reposition:SetLevel(2)
			thisEntity.multi:SetLevel(2)
		end
	end)
end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if not thisEntity:IsChanneling() then
			local target =  AICore:GetHighestPriorityTarget(thisEntity)
			if not thisEntity:HasModifier("modifier_boss_reaper_reposition") or thisEntity.aiChasing then
				if thisEntity.hail:IsFullyCastable() and RollPercentage(33) then
					local position = AICore:OptimalHitPosition(thisEntity, thisEntity.hail:GetTrueCastRange(), thisEntity.hail:GetSpecialValueFor("radius"), false)
					if position then 
						return CastHail(position) 
					end
				end
				if thisEntity.reposition:IsFullyCastable() then
					if target and CalculateDistance(target, thisEntity) > thisEntity:GetAttackRange() then
						thisEntity.aiChasing = true
						return CastReposition()
					elseif AICore:BeingAttacked( thisEntity ) > 0 then
						aiChasing = false
						return CastReposition()
					end
				end
				return AICore:AttackHighestPriority( thisEntity )
			else
				AICore:BeAHugeCoward( thisEntity, 500 )
				return AI_THINK_RATE
			end
		else return 0.5 end
	else return AI_THINK_RATE end
end

function CastReposition()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.reposition:entindex()
	})
	return thisEntity.reposition:GetCastPoint() + 0.1
end

function CastHail(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position, 
		AbilityIndex = thisEntity.hail:entindex()
	})
	return thisEntity.hail:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.shatter = thisEntity:FindAbilityByName("boss_vanguard_shin_shatter")
	thisEntity.breaker = thisEntity:FindAbilityByName("boss_vanguard_back_breaker")
	thisEntity.wall = thisEntity:FindAbilityByName("boss_vanguard_bone_wall")
	
	AITimers:CreateTimer(function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then 
			thisEntity.shatter:SetLevel(1)
			thisEntity.breaker:SetLevel(1)
			thisEntity.wall:SetLevel(1)
		else
			thisEntity.shatter:SetLevel(2)
			thisEntity.breaker:SetLevel(2)
			thisEntity.wall:SetLevel(2)
		end
	end)
end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if not thisEntity:IsChanneling() then
			if thisEntity.shatter:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.shatter:GetSpecialValueFor("radius")) > 0 and RollPercentage(35) then
				return CastShinShatter()
			end
			if thisEntity.wall:IsFullyCastable() and AICore:BeingAttacked( thisEntity ) > 0 and RollPercentage(20) then
				return CastBoneWall()
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return 0.5 end
	else return AI_THINK_RATE end
end

function CastShinShatter()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.shatter:entindex()
	})
	return thisEntity.shatter:GetCastPoint() + 0.1
end

function CastBoneWall()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.wall:entindex()
	})
	return thisEntity.wall:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	
	thisEntity.vamp = thisEntity:FindAbilityByName("boss_wk_vampirism")
	thisEntity.mortal = thisEntity:FindAbilityByName("boss_wk_mortal_strike")
	thisEntity.reincarnation = thisEntity:FindAbilityByName("boss_wk_reincarnation")
	thisEntity.blast = thisEntity:FindAbilityByName("boss_wk_scourge_blast")
	thisEntity.cull = thisEntity:FindAbilityByName("boss_wk_culling_blow")
	
	AITimers:CreateTimer(function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then 
			thisEntity.vamp:SetLevel(1)
			thisEntity.mortal:SetLevel(1)
			thisEntity.reincarnation:SetLevel(1)
			thisEntity.blast:SetLevel(1)
			thisEntity.cull:SetLevel(1)
		else
			thisEntity.vamp:SetLevel(2)
			thisEntity.mortal:SetLevel(2)
			thisEntity.reincarnation:SetLevel(2)
			thisEntity.blast:SetLevel(2)
			thisEntity.cull:SetLevel(2)
		end
	end)
end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if not thisEntity:IsChanneling() then
			local target =  AICore:GetHighestPriorityTarget(thisEntity)
			if thisEntity.mortal:IsCooldownReady() and RollPercentage(50) and target then
				if not target:HasModifier("modifier_boss_wk_mortal_strike_debuff") then
					return CastMortalStrike(target)
				else
					local newT = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.mortal:GetTrueCastRange() + thisEntity:GetIdealSpeed(), false )
					if newT and not newT:HasModifier("modifier_boss_wk_mortal_strike_debuff") then
						return CastMortalStrike(newT)
					end
				end
			end
			if thisEntity.cull:IsCooldownReady() and RollPercentage(50) then
				return CastCulling()
			end
			if thisEntity.blast:IsCooldownReady() and RollPercentage(50) and target then
				if thisEntity:HasModifier("modifier_boss_wk_reincarnation_enrage") then
					return CastScourge(thisEntity:GetAbsOrigin())
				else
					if CalculateDistance(target, thisEntity) > thisEntity.blast:GetTrueCastRange() then
						local newT = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.blast:GetTrueCastRange(), false)
						if newT then
							return  CastScourge(newT:GetAbsOrigin())
						end
					else
						return CastScourge(target:GetAbsOrigin())
					end
				end
			end
			
			return AICore:AttackHighestPriority( thisEntity )
		else return 0.5 end
	else return AI_THINK_RATE end
end

function CastCulling()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.cull:entindex()
	})
	return thisEntity.cull:GetCastPoint() + 0.1
end

function CastMortalStrike(target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET ,
		TargetIndex  = target:entindex(),
		AbilityIndex = thisEntity.mortal:entindex()
	})
	return thisEntity.mortal:GetCastPoint() + 0.1
end

function CastVanguard()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.vanguard:entindex()
	})
	return thisEntity.vanguard:GetCastPoint() + 0.1
end

function CastReaper()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.reaper:entindex()
	})
	return thisEntity.reaper:GetCastPoint() + 0.1
end

function CastScourge(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position, 
		AbilityIndex = thisEntity.blast:entindex()
	})
	return thisEntity.blast:GetCastPoint() + 0.1
end
--[[
Broodking AI
]]

if IsServer() then
	require( "ai/ai_core" )
	function Spawn( thisEntityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.mark = thisEntity:FindAbilityByName("boss27_kill_them")
		thisEntity.destroy = thisEntity:FindAbilityByName("boss27_destroy")
		thisEntity.protect = thisEntity:FindAbilityByName("boss27_protect_me")
		thisEntity.bigbear = thisEntity:FindAbilityByName("boss27_ursa_giant")
		thisEntity.smallbear = thisEntity:FindAbilityByName("boss27_ursa_warrior")
		
		thisEntity.bigBearsTable = thisEntity.bigBearsTable or {}
		thisEntity.smallBearsTable = thisEntity.smallBearsTable or {}
		
		thisEntity.GetBigBears = function(thisEntity) return thisEntity.bigBearsTable or {} end
		thisEntity.GetSmallBears = function(thisEntity) return thisEntity.smallBearsTable or {} end
		
		thisEntity.GetBigBearCount = function(thisEntity) return #thisEntity.bigBearsTable or 0 end
		thisEntity.GetSmallBearCount = function(thisEntity) return #thisEntity.smallBearsTable or 0 end
		
		thisEntity.GetMaxBigBearCount = function(thisEntity) return math.ceil(#HeroList:GetActiveHeroes() / 2) end
		thisEntity.GetMaxSmallBearCount = function(thisEntity) return math.ceil(#HeroList:GetActiveHeroes() * 2) end
		
		thisEntity.GetTotalBearCount = function(thisEntity) return thisEntity:GetBigBearCount() + thisEntity:GetSmallBearCount() end
		thisEntity.GetMaxTotalBearCount = function(thisEntity) return thisEntity:GetMaxBigBearCount() + thisEntity:GetMaxSmallBearCount() end
		
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
				thisEntity.mark:SetLevel(1)
				thisEntity.destroy:SetLevel(1)
				thisEntity.protect:SetLevel(1)
				thisEntity.bigbear:SetLevel(1)
				thisEntity.smallbear:SetLevel(1)
			else
				thisEntity.mark:SetLevel(2)
				thisEntity.destroy:SetLevel(2)
				thisEntity.protect:SetLevel(2)
				thisEntity.bigbear:SetLevel(2)
				thisEntity.smallbear:SetLevel(2)
			end
		end)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			for id, bigbear in pairs(thisEntity.bigBearsTable) do
				if bigbear:IsNull() or not bigbear:IsAlive() then
					table.remove( thisEntity.bigBearsTable, id )
				end
			end
			for id, smallbear in pairs(thisEntity.smallBearsTable) do
				if smallbear:IsNull() or not smallbear:IsAlive() then
					table.remove( thisEntity.smallBearsTable, id )
				end
			end
			if AICore:BeingAttacked( thisEntity ) > 0 then
				local nearest = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity:GetIdealSpeed() * 1.5 + thisEntity:GetAttackRange(), true )
				if thisEntity:GetTotalBearCount() == 0 then
					if thisEntity.bigbear:IsFullyCastable() then
						return SummonBearGiant(thisEntity)
					end
					if thisEntity.smallbear:IsFullyCastable() then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
							AbilityIndex = thisEntity.smallbear:entindex()
						})
						return thisEntity.smallbear:GetCastPoint() + 0.1
					end
					if nearest then
						if thisEntity.mark:IsFullyCastable() and RollPercentage(45) then
							local target = thisEntity:GetTauntTarget() or nearest
							if target then
								ExecuteOrderFromTable({
									UnitIndex = thisEntity:entindex(),
									OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
									TargetIndex = target:entindex(),
									AbilityIndex = thisEntity.mark:entindex()
								})
								return thisEntity.mark:GetCastPoint() + 0.1
							end
						end
						return AICore:AttackHighestPriority( thisEntity )
					end
				else
					if thisEntity.protect:IsFullyCastable() and RollPercentage(65) then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
							AbilityIndex = thisEntity.protect:entindex()
						})
						return thisEntity.protect:GetCastPoint() + 0.1
					end
					if thisEntity.mark:IsFullyCastable() and RollPercentage(60) then
						local target = thisEntity:GetTauntTarget() or AICore:RandomEnemyHeroInRange( thisEntity, 8000 , true)
						if target then
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
								TargetIndex = target:entindex(),
								AbilityIndex = thisEntity.mark:entindex()
							})
							return thisEntity.mark:GetCastPoint() + 0.1
						end
					end
					if thisEntity.destroy:IsFullyCastable() and RollPercentage(80) then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
							AbilityIndex = thisEntity.destroy:entindex()
						})
						return thisEntity.destroy:GetCastPoint() + 0.1
					end
					if thisEntity.bigbear:IsFullyCastable() and thisEntity:GetBigBearCount() <= thisEntity:GetMaxBigBearCount() and RollPercentage( 50 / math.min(thisEntity:GetBigBearCount(), 1) ) then
						return SummonBearGiant(thisEntity)
					end
					if thisEntity.smallbear:IsFullyCastable() and thisEntity:GetSmallBearCount() <= thisEntity:GetMaxSmallBearCount()  and RollPercentage(50 / math.min(thisEntity:GetSmallBearCount(), 1)) then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
							AbilityIndex = thisEntity.smallbear:entindex()
						})
						return thisEntity.smallbear:GetCastPoint() + 0.1

					end
				end
				return AICore:AttackHighestPriority( thisEntity )
			else
				if thisEntity.bigbear:IsFullyCastable() and thisEntity:GetBigBearCount() <= thisEntity:GetMaxBigBearCount() then
					return SummonBearGiant(thisEntity)
				end
				if thisEntity.smallbear:IsFullyCastable() and thisEntity:GetSmallBearCount() <= thisEntity:GetMaxSmallBearCount() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.smallbear:entindex()
					})
					return thisEntity.smallbear:GetCastPoint() + 0.1
				end
				if thisEntity.mark:IsFullyCastable() and RollPercentage(35) then
					local target = thisEntity:GetTauntTarget() or AICore:RandomEnemyHeroInRange( thisEntity, 8000 , true)
					if target then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
							TargetIndex = target:entindex(),
							AbilityIndex = thisEntity.mark:entindex()
						})
						return thisEntity.mark:GetCastPoint() + 0.1
					end
				end				
				if thisEntity.destroy:IsFullyCastable() and ( thisEntity:GetTotalBearCount() >= math.floor( thisEntity:GetMaxTotalBearCount() / 2 ) or RollPercentage(15) ) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.destroy:entindex()
					})
					return thisEntity.destroy:GetCastPoint() + 0.1
				end
				AICore:BeAHugeCoward( thisEntity, 900 )
				return AI_THINK_RATE
			end
			return AI_THINK_RATE
		else return AI_THINK_RATE end
		return AI_THINK_RATE
	end
end

function SummonBearGiant(thisEntity)
	print( thisEntity.bigbear:GetCastPoint() )
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.bigbear:entindex()
	})
	return thisEntity.bigbear:GetCastPoint() + 0.1
endif IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.trample = thisEntity:FindAbilityByName("boss18b_trample")
		thisEntity.swipe = thisEntity:FindAbilityByName("boss18b_swipe")
		thisEntity.frenzy = thisEntity:FindAbilityByName("boss18b_frenzy")
		thisEntity.huntress = thisEntity:FindAbilityByName("boss18b_elusive_huntress")
		thisEntity.corrupt = thisEntity:FindAbilityByName("boss18b_corrupted_huntress")
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
				thisEntity.trample:SetLevel(1)
				thisEntity.swipe:SetLevel(1)
				thisEntity.frenzy:SetLevel(1)
				if thisEntity.huntress and not thisEntity.huntress:IsNull() then
					thisEntity.huntress:SetLevel(1)
				elseif thisEntity.corrupt then
					thisEntity.corrupt:SetLevel(1)
				end
			else
				thisEntity.trample:SetLevel(2)
				thisEntity.swipe:SetLevel(2)
				thisEntity.frenzy:SetLevel(2)
				if thisEntity.huntress and not thisEntity.huntress:IsNull() then
					thisEntity.huntress:SetLevel(2)
				elseif thisEntity.corrupt then
					thisEntity.corrupt:SetLevel(2)
				end
			end
		end)
	end
	function AIThink()
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			if thisEntity.frenzy:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.frenzy:entindex()
				})
				return thisEntity.frenzy:GetCastPoint() + 0.1
			end
			if target then
				if thisEntity.trample:IsFullyCastable() then	
					local jumps = thisEntity.trample:GetSpecialValueFor("jumps")
					if thisEntity:GetHealthPercent() < 66 then jumps = jumps + 1 end
					if thisEntity:GetHealthPercent() < 33 then jumps = jumps + 1 end
					local jumpDistance = thisEntity.trample:GetSpecialValueFor("jump_distance") * jumps
					if CalculateDistance( thisEntity, target ) < jumpDistance then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = target:GetAbsOrigin(),
							AbilityIndex = thisEntity.trample:entindex()
						})
						return (thisEntity.trample:GetCastPoint() * jumps) + 1
					elseif AICore:NumEnemiesInLine(thisEntity, jumpDistance, thisEntity.trample:GetSpecialValueFor("starting_radius"), false) > 2 then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = caster:GetAbsOrigin() + caster:GetForwardVector() * 200,
							AbilityIndex = thisEntity.trample:entindex()
						})
						return (thisEntity.trample:GetCastPoint() * jumps) + 1
					end
				end
				if thisEntity.swipe:IsFullyCastable() and CalculateDistance(thisEntity, target) <= thisEntity:GetAttackRange() + thisEntity:GetIdealSpeed() then
					ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = target:GetAbsOrigin(),
							AbilityIndex = thisEntity.swipe:entindex()
						})
					return thisEntity.swipe:GetCastPoint() + 0.1
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		end
		return AI_THINK_RATE
	end
end--[[
Broodking AI
]]

if IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.burrow = thisEntity:FindAbilityByName("boss19_burrow")
		thisEntity.ground = thisEntity:FindAbilityByName("boss19_cracked_ground")
		thisEntity.swarm = thisEntity:FindAbilityByName("boss19_the_swarm")
		thisEntity.chasm = thisEntity:FindAbilityByName("boss19_chasm")
		thisEntity.shield = thisEntity:FindAbilityByName("boss19_shield")
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
				thisEntity.burrow:SetLevel(1)
				thisEntity.ground:SetLevel(1)
				thisEntity.swarm:SetLevel(1)
				thisEntity.chasm:SetLevel(1)
				thisEntity.shield:SetLevel(1)
			else
				thisEntity.burrow:SetLevel(2)
				thisEntity.ground:SetLevel(2)
				thisEntity.swarm:SetLevel(2)
				thisEntity.chasm:SetLevel(2)
				thisEntity.shield:SetLevel(2)
			end
		end)
		thisEntity.ground.uses = 4
		thisEntity.ground.useTable = {}
	end
	function AIThink(thisEntity)
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			if target then
				if thisEntity.ground:IsFullyCastable() and thisEntity.ground.uses > #thisEntity.ground.useTable and thisEntity:GetHealthPercent() < 100/thisEntity.ground.uses * (thisEntity.ground.uses - #thisEntity.ground.useTable) and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.ground:GetTrueCastRange() ) > 0 then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.ground:entindex()
					})
					return thisEntity.ground:GetChannelTime() + 0.1
				end
				if thisEntity.chasm:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.chasm:entindex()
					})
					return thisEntity.chasm:GetCastPoint() + 0.1
				end
				if thisEntity.swarm:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.swarm:entindex()
					})
					return thisEntity.swarm:GetCastPoint() + 0.1
				end
				if thisEntity:GetHealthPercent() < 75 then
					if thisEntity.burrow:IsFullyCastable() then
						local randomPos = target:GetAbsOrigin() + ActualRandomVector(1000, 400)
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = randomPos,
							AbilityIndex = thisEntity.burrow:entindex()
						})
						return thisEntity.burrow:GetCastPoint() + 0.1
					end
				elseif thisEntity:GetHealthPercent() < 40 then
					if thisEntity.burrow:IsFullyCastable() then
						local randomPos = caster:GetAbsOrigin() + ActualRandomVector(1000, 400)
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = randomPos,
							AbilityIndex = thisEntity.burrow:entindex()
						})
						return thisEntity.burrow:GetCastPoint() + 0.1
					end
				else
					if thisEntity.burrow:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, 800 ) == 0 then
						local randomPos = target:GetAbsOrigin() + ActualRandomVector(1000, 400)
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = randomPos,
							AbilityIndex = thisEntity.burrow:entindex()
						})
						return thisEntity.burrow:GetCastPoint() + 0.1
					end
				end
				return AICore:AttackHighestPriority( thisEntity )
			else
				return AICore:AttackHighestPriority( thisEntity )
			end
		end
		return AI_THINK_RATE
	end
endif IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.poison = thisEntity:FindAbilityByName("boss33a_devitalize")
		thisEntity.orb = thisEntity:FindAbilityByName("boss33a_dark_orb")
		thisEntity.ward = thisEntity:FindAbilityByName("boss33a_protective_ward")
		
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
				thisEntity.poison:SetLevel(1)
				thisEntity.orb:SetLevel(1)
				thisEntity.ward:SetLevel(1)
			else
				thisEntity.poison:SetLevel(2)
				thisEntity.orb:SetLevel(2)
				thisEntity.ward:SetLevel(2)
			end
		end)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target and CalculateDistance(target, thisEntity) > thisEntity.poison:GetTrueCastRange() then target = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.poison:GetTrueCastRange() , false) end
			if target then
				if thisEntity.poison:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.poison:entindex()
					})
					return thisEntity.poison:GetCastPoint() + 0.1
				end
				if thisEntity.orb:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.orb:entindex()
					})
					return thisEntity.orb:GetCastPoint() + 0.1
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
endif IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.raze1 = thisEntity:FindAbilityByName("boss33b_shadowrazeN")
		thisEntity.raze2 = thisEntity:FindAbilityByName("boss33b_shadowrazeM")
		thisEntity.raze3 = thisEntity:FindAbilityByName("boss33b_shadowrazeF")
		thisEntity.shield = thisEntity:FindAbilityByName("boss33b_protective_shield")
		
		AITimers:CreateTimer(function()
			if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
				thisEntity.raze1:SetLevel(1)
				thisEntity.raze1:SetLevel(1)
				thisEntity.raze1:SetLevel(1)
				thisEntity.raze1:SetLevel(1)
			else
				thisEntity.raze1:SetLevel(2)
				thisEntity.raze1:SetLevel(2)
				thisEntity.raze1:SetLevel(2)
				thisEntity.raze1:SetLevel(2)
			end
		end)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if thisEntity:GetHealthPercent() > 50 then
				local raze1Pos = GetGroundPosition(thisEntity:GetAbsOrigin() + thisEntity:GetForwardVector() * thisEntity.raze1:GetSpecialValueFor("distance"), thisEntity)
				local raze2Pos = GetGroundPosition(thisEntity:GetAbsOrigin() + thisEntity:GetForwardVector() * thisEntity.raze2:GetSpecialValueFor("distance"), thisEntity)
				local raze3Pos = GetGroundPosition(thisEntity:GetAbsOrigin() + thisEntity:GetForwardVector() * thisEntity.raze3:GetSpecialValueFor("distance"), thisEntity)
				local razeRadius = thisEntity.raze1:GetSpecialValueFor("radius") + 32
				
				local raze1Units = thisEntity:FindEnemyUnitsInRadius(raze1Pos, razeRadius + 25)
				local raze2Units = thisEntity:FindEnemyUnitsInRadius(raze2Pos, razeRadius + 25)
				local raze3Units = thisEntity:FindEnemyUnitsInRadius(raze3Pos, razeRadius + 25)
				
				local razesActive = 0
				if thisEntity.raze1:IsFullyCastable() then razesActive = razesActive + 1 end
				if thisEntity.raze2:IsFullyCastable() then razesActive = razesActive + 1 end
				if thisEntity.raze3:IsFullyCastable() then razesActive = razesActive + 1 end

				if thisEntity.raze1:IsFullyCastable() and ( #raze1Units > 2 or HasValInTable(raze1Units, target) ) or (#raze1Units > 1 and razesActive < 1) or RollPercentage(15) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze1:entindex()
					})
					return thisEntity.raze1:GetCastPoint() + 0.1
				end
				if thisEntity.raze2:IsFullyCastable() and ( #raze2Units > 2 or HasValInTable(raze2Units, target) ) or (#raze2Units > 1 and razesActive < 1) or RollPercentage(15) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze2:entindex()
					})
					return thisEntity.raze2:GetCastPoint() + 0.1
				end
				if thisEntity.raze3:IsFullyCastable() and ( #raze3Units > 2 or HasValInTable(raze3Units, target) ) or (#raze3Units > 1 and razesActive < 1) or RollPercentage(15) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze3:entindex()
					})
					return thisEntity.raze3:GetCastPoint() + 0.1
				end
			else
				local raze1Pos = GetGroundPosition(thisEntity:GetAbsOrigin() + thisEntity:GetForwardVector() * thisEntity.raze1:GetSpecialValueFor("distance"), thisEntity)
				local raze2Pos = GetGroundPosition(thisEntity:GetAbsOrigin() + thisEntity:GetForwardVector() * thisEntity.raze2:GetSpecialValueFor("distance"), thisEntity)
				local raze3Pos = GetGroundPosition(thisEntity:GetAbsOrigin() + thisEntity:GetForwardVector() * thisEntity.raze3:GetSpecialValueFor("distance"), thisEntity)
				local razeRadius = thisEntity.raze1:GetSpecialValueFor("radius")
				
				local raze1Units = thisEntity:FindEnemyUnitsInRadius(raze1Pos, razeRadius + 25)
				local raze2Units = thisEntity:FindEnemyUnitsInRing(thisEntity:GetAbsOrigin(), thisEntity.raze2:GetSpecialValueFor("distance") + (razeRadius + 12),  thisEntity.raze2:GetSpecialValueFor("distance") - (razeRadius + 12))
				local raze3Units = thisEntity:FindEnemyUnitsInLine(thisEntity:GetAbsOrigin(), thisEntity:GetAbsOrigin() + thisEntity:GetForwardVector() * (thisEntity.raze3:GetSpecialValueFor("distance")/3) * thisEntity.raze3:GetSpecialValueFor("phase2_raze_count"), razeRadius + 25)
				
				local razesActive = 0
				if thisEntity.raze1:IsFullyCastable() then razesActive = razesActive + 1 end
				if thisEntity.raze2:IsFullyCastable() then razesActive = razesActive + 1 end
				if thisEntity.raze3:IsFullyCastable() then razesActive = razesActive + 1 end
				
				if thisEntity.raze1:IsFullyCastable() and ( #raze1Units > 2 or HasValInTable(raze2Units, target) )  or (#raze1Units > 1 and razesActive > 1) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze1:entindex()
					})
					return thisEntity.raze1:GetCastPoint() + 0.1
				end
				if thisEntity.raze2:IsFullyCastable() and ( #raze2Units > 2 or HasValInTable(raze2Units, target) )  or (#raze2Units > 1 and razesActive > 1) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze2:entindex()
					})
					return thisEntity.raze2:GetCastPoint() + 0.1
				end
				if thisEntity.raze3:IsFullyCastable() and ( #raze3Units > 2 or HasValInTable(raze2Units, target) )  or (#raze3Units > 1 and razesActive > 1)then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze3:entindex()
					})
					return thisEntity.raze3:GetCastPoint() + 0.1
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	
	thisEntity.aura = thisEntity:FindAbilityByName("boss_necro_vile_aura")
	thisEntity.death = thisEntity:FindAbilityByName("boss_necro_deathbringer")
	thisEntity.take = thisEntity:FindAbilityByName("boss_necro_take_the_weak")
	
	thisEntity.wave = thisEntity:FindAbilityByName("boss_necro_plague_wave")
	thisEntity.reaper = thisEntity:FindAbilityByName("boss_necro_fear_the_reaper")
	thisEntity.song = thisEntity:FindAbilityByName("boss_necro_swans_song")
	thisEntity.guillotine = thisEntity:FindAbilityByName("boss_necro_guillotine")
	thisEntity.weaken = thisEntity:FindAbilityByName("boss_necro_weaken")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.aura:SetLevel(1)
			thisEntity.death:SetLevel(1)
			thisEntity.take:SetLevel(1)
			
			thisEntity.wave:SetLevel(1)
			thisEntity.reaper:SetLevel(1)
			thisEntity.song:SetLevel(1)
			thisEntity.guillotine:SetLevel(1)
			thisEntity.weaken:SetLevel(1)
		else
			thisEntity.aura:SetLevel(2)
			thisEntity.death:SetLevel(2)
			thisEntity.take:SetLevel(2)
			
			thisEntity.wave:SetLevel(2)
			thisEntity.reaper:SetLevel(2)
			thisEntity.song:SetLevel(2)
			thisEntity.guillotine:SetLevel(2)
			thisEntity.weaken:SetLevel(2)
		end
	end)
	
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.wave:IsFullyCastable() and RollPercentage(50) then
			return CastWave( thisEntity )
		end
		if thisEntity.weaken:IsFullyCastable() and HeroList:GetActiveHeroCount() > 1 and RollPercentage(20) then
			local weakenTarget = AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.weaken:GetTrueCastRange() + thisEntity:GetIdealSpeed() , true ) or target
			if weakenTarget then
				return CastWeaken( weakenTarget, thisEntity )
			end
		end
		if thisEntity.song:IsFullyCastable() and RollPercentage(20) then
			local songTarget = AICore:RandomEnemyHeroInRange( thisEntity, -1 , false) or target
			if songTarget then
				return CastSong( songTarget, thisEntity )
			end
		end
		if thisEntity.guillotine:IsFullyCastable() and RollPercentage(20) then
			local songTarget = AICore:WeakestEnemyHeroInRange( thisEntity, -1 , false) or target
			if songTarget then
				return CastGuillotine( songTarget, thisEntity )
			end
		end
		if thisEntity.reaper:IsFullyCastable() and RollPercentage(60) then
			if RollPercentage(25) then
				local reaperTarget = AICore:RandomEnemyHeroInRange( thisEntity, -1 , false) or target
				if reaperTarget then
					return CastReaper( reaperTarget:GetAbsOrigin(), thisEntity )
				end
			elseif RollPercentage(50) and target then
				return CastReaper( target:GetAbsOrigin(), thisEntity )
			else
				AICore:OptimalHitPosition(thisEntity, thisEntity.reaper:GetTrueCastRange(), thisEntity.reaper:GetSpecialValueFor("radius"), false)
				return thisEntity.reaper:GetCastPoint() + 0.1
			end
		end
		return AI_THINK_RATE
	else
		return AI_THINK_RATE
	end
end


function CastWave(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.wave:entindex()
	})
	return thisEntity.wave:GetCastPoint() + 0.1
end

function CastReaper(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.reaper:entindex()
	})
	return thisEntity.reaper:GetCastPoint() + 0.1
end

function CastGuillotine(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.guillotine:entindex()
	})
	return thisEntity.guillotine:GetCastPoint() + 0.1
end

function CastSong(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.song:entindex()
	})
	return thisEntity.song:GetCastPoint() + 0.1
end

function CastWeaken(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.weaken:entindex()
	})
	return thisEntity.weaken:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.blood = thisEntity:FindAbilityByName("boss_doom_blood_is_power")
	thisEntity.sacrifice = thisEntity:FindAbilityByName("boss_doom_sacrificial_rite")
	thisEntity.unstoppable = thisEntity:FindAbilityByName("boss_doom_unstoppable")
	
	thisEntity.ill = thisEntity:FindAbilityByName("boss_doom_ill_fated")
	thisEntity.pillar = thisEntity:FindAbilityByName("boss_doom_pillar_of_hell")
	thisEntity.wave = thisEntity:FindAbilityByName("boss_doom_infernal_wave")
	thisEntity.tempest = thisEntity:FindAbilityByName("boss_doom_hell_tempest")
	thisEntity.servants = thisEntity:FindAbilityByName("boss_doom_demonic_servants")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.blood:SetLevel(1)
			thisEntity.sacrifice:SetLevel(1)
			thisEntity.unstoppable:SetLevel(1)
			
			thisEntity.ill:SetLevel(1)
			thisEntity.pillar:SetLevel(1)
			thisEntity.wave:SetLevel(1)
			thisEntity.tempest:SetLevel(1)
			thisEntity.servants:SetLevel(1)
		else
			thisEntity.blood:SetLevel(2)
			thisEntity.sacrifice:SetLevel(2)
			thisEntity.unstoppable:SetLevel(2)
			
			thisEntity.ill:SetLevel(2)
			thisEntity.pillar:SetLevel(2)
			thisEntity.wave:SetLevel(2)
			thisEntity.tempest:SetLevel(2)
			thisEntity.servants:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.ill:IsFullyCastable() then
			local illTarget = AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.ill:GetTrueCastRange() + thisEntity:GetIdealSpeed() , true ) or target
			if illTarget then
				return CastIllFated(illTarget, thisEntity)
			end
		end
		if thisEntity.servants:IsFullyCastable() and ( AICore:BeingAttacked( thisEntity ) > 0 or RollPercentage( 2 ) ) then
			return CastServants(thisEntity)
		end
		if thisEntity.tempest:IsFullyCastable() and ( AICore:TotalEnemyHeroesInRange( thisEntity, 1200) > 1 or ( AICore:TotalEnemyHeroesInRange( thisEntity, 1200) > 0 and RollPercentage(5) ) ) then
			return CastTempest(thisEntity)
		end
		if thisEntity.wave:IsFullyCastable() and ( AICore:NumEnemiesInLine(thisEntity, 2000, 1000, false) > 1 or ( AICore:NumEnemiesInLine(thisEntity, 2000, 1000, false) > 0 and RollPercentage(25) ) ) then
			return CastWave(thisEntity)
		end
		if thisEntity.pillar:IsFullyCastable() and ( AICore:NumEnemiesInLine(thisEntity, 1200, 250, false) > 1 or ( AICore:NumEnemiesInLine(thisEntity, 1200, 250, false) > 0 and RollPercentage(20) ) ) then
			return CastPillar(target:GetAbsOrigin(), thisEntity)
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastIllFated(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.ill:entindex()
	})
	return thisEntity.ill:GetCastPoint() + 0.1
end

function CastPillar(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.pillar:entindex()
	})
	return thisEntity.pillar:GetCastPoint() + 0.1
end

function CastWave(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.wave:entindex()
	})
	return thisEntity.wave:GetCastPoint() + 0.1
end

function CastTempest(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.tempest:entindex()
	})
	return thisEntity.tempest:GetCastPoint() + 0.1
end

function CastServants(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.servants:entindex()
	})
	return thisEntity.servants:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	
end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and thisEntity.doom then
		if not thisEntity:HasModifier("modifier_boss_doom_demonic_servants_checker") then
			if AICore:BeingAttacked( thisEntity ) > 0 or thisEntity.previousHealth > thisEntity:GetHealth() then
				AICore:BeAHugeCoward( thisEntity, 300 )
				goto done
			else
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
					Position = thisEntity.doom:GetAbsOrigin() + CalculateDirection(thisEntity, thisEntity.doom) * 450
				})
				goto done
			end
		else
			AICore:RunToRandomPosition( thisEntity, 20 )
			goto done
		end
	end
	::done::
	thisEntity.previousHealth = thisEntity:GetHealth()
	return AI_THINK_RATE
end

--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.shield = thisEntity:FindAbilityByName("boss_evil_guardian_fire_shield")
	thisEntity.purge = thisEntity:FindAbilityByName("boss_evil_guardian_purge_their_sin")
	thisEntity.pool = thisEntity:FindAbilityByName("boss_evil_guardian_hell_on_earth")

	thisEntity.raze1 = thisEntity:FindAbilityByName("boss_evil_guardian_annihilation")
	thisEntity.raze2 = thisEntity:FindAbilityByName("boss_evil_guardian_destruction")
	thisEntity.raze3 = thisEntity:FindAbilityByName("boss_evil_guardian_apocalypse")
	thisEntity.fist = thisEntity:FindAbilityByName("boss_evil_guardian_rise_of_hell")
	thisEntity.stun = thisEntity:FindAbilityByName("boss_evil_guardian_end_of_days")
	thisEntity.getRazingFactor = 0
end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.fist:IsFullyCastable() then
			if not target then
				target = AICore:NearestEnemyHeroInRange( thisEntity, -1, true)
			end
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = target:GetAbsOrigin(),
					AbilityIndex = thisEntity.fist:entindex()
				})
				return thisEntity.fist:GetCastPoint() + 0.1
			end
		end
		if target and not target:IsNull() then
			local cds = 0
			local raze1CD = thisEntity.raze1:IsCooldownReady()
			local raze2CD = thisEntity.raze2:IsCooldownReady()
			local raze3CD = thisEntity.raze3:IsCooldownReady()
			if raze1CD then
				cds = cds + 1
			end
			if raze2CD then
				cds = cds + 1
			end
			if raze3CD then
				cds = cds + 1
			end
			if thisEntity.getRazingFactor < 50 then
				if thisEntity.raze1:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, 1200 ) > 0 and RollPercentage(33/cds) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze1:entindex()
					})
					return thisEntity.raze1:GetCastPoint() + 0.1 + 2
				elseif thisEntity.raze2:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, 1200 ) > 0 and RollPercentage(33/cds) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze2:entindex()
					})
					return thisEntity.raze2:GetCastPoint() + 0.1 + 2
				elseif thisEntity.raze3:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, 1200 ) > 0 and RollPercentage(33/cds) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.raze3:entindex()
					})
					return thisEntity.raze3:GetCastPoint() + 0.1 + 2
				end
			end
			if thisEntity.stun:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.stun:entindex()
				})
				return thisEntity.stun:GetCastPoint() + 0.1
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return 1
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

AI_STATE_COWARD = 1
AI_STATE_AGGRESSIVE = 2
AI_STATE_EGGS = 3

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.fate = thisEntity:FindAbilityByName("boss_broodmother_clipped_fate")
	thisEntity.injection = thisEntity:FindAbilityByName("boss_broodmother_parasitic_injection")
	thisEntity.brood = thisEntity:FindAbilityByName("boss_broodmother_strength_of_the_brood")
	
	thisEntity.egg = thisEntity:FindAbilityByName("boss_broodmother_egg_sack")
	thisEntity.infest = thisEntity:FindAbilityByName("boss_broodmother_infest")
	thisEntity.hunger = thisEntity:FindAbilityByName("boss_broodmother_arachnids_hunger")
	thisEntity.web = thisEntity:FindAbilityByName("boss_broodmother_fates_web")
	thisEntity.shot = thisEntity:FindAbilityByName("boss_broodmother_web_shot")

	AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
				thisEntity.fate:SetLevel(1)
				thisEntity.injection:SetLevel(1)
				thisEntity.brood:SetLevel(1)
				thisEntity.hunger:SetLevel(1)
				thisEntity.shot:SetLevel(1)
			else
				thisEntity.fate:SetLevel(2)
				thisEntity.injection:SetLevel(2)
				thisEntity.brood:SetLevel(2)
				thisEntity.hunger:SetLevel(2)
				thisEntity.shot:SetLevel(2)
			end
		end)
	thisEntity.getAIState = AI_STATE_AGGRESSIVE
end

function AIThink(thisEntity)
	thisEntity.getLastCheckedHealth = thisEntity.getLastCheckedHealth or thisEntity:GetHealth()
	if not thisEntity:IsDominated() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.getLastCheckedHealth - thisEntity:GetHealth() < thisEntity:GetHealth() * 0.25 and thisEntity.getAIState ~= AI_STATE_COWARD and not thisEntity:HasModifier("modifier_boss_broodmother_arachnids_hunger_active") then
			thisEntity.getAIState = AI_STATE_COWARD
			thisEntity.getLastCheckedHealth = thisEntity:GetHealth()
		elseif thisEntity.getLastCheckedHealth > thisEntity:GetHealth() + thisEntity:GetHealthRegen() and thisEntity.getAIState ~= AI_STATE_AGGRESSIVE then
			thisEntity.getAIState = AI_STATE_AGGRESSIVE
		end
		if target then
			local distance = CalculateDistance( thisEntity, target )
			if thisEntity.getAIState == AI_STATE_AGGRESSIVE then
				if thisEntity:GetHealthPercent() > 50 then
					if thisEntity.shot:IsFullyCastable() then
						if distance > thisEntity:GetAttackRange() + thisEntity:GetIdealSpeed() and distance < thisEntity.shot:GetTrueCastRange() then
							return CastShot( thisEntity, target:GetAbsOrigin() )
						elseif distance > thisEntity.shot:GetTrueCastRange() then
							target = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then return CastShot(thisEntity, target:GetAbsOrigin() ) end
						end
					end
					if thisEntity.hunger:IsFullyCastable() then
						if thisEntity:IsAttacking() or thisEntity:IsDisarmed() then
							return CastHunger(thisEntity)
						end
					end
					if thisEntity.egg:IsFullyCastable() and AICore:SpecificAlliedUnitsAlive( thisEntity, "npc_dota_creature_broodmother", -1 ) < 4 then return CastEggSack(thisEntity, thisEntity:GetAbsOrigin() + RandomVector(thisEntity.egg:GetTrueCastRange()) ) end
					if thisEntity.infest:IsFullyCastable() then
						if distance < thisEntity.infest:GetTrueCastRange() then
							CastInfest( thisEntity, target:GetAbsOrigin() )
						else
							target = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then return CastInfest(thisEntity, target:GetAbsOrigin() ) end
						end
					end
					if thisEntity.web:IsFullyCastable() then
						if target:IsAtAngleWithEntity(thisEntity, 105) then -- running away
							return CastWeb( thisEntity, thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * thisEntity.web:GetTrueCastRange() )
						end
					end
				elseif thisEntity:GetHealthPercent() > 25 then
					if thisEntity.hunger:IsFullyCastable() then
						if thisEntity:IsAttacking() or thisEntity:IsDisarmed() then
							return CastHunger(thisEntity)
						end
					end
					if AICore:BeingAttacked( thisEntity ) > 2 then
						thisEntity.getAIState = AI_STATE_COWARD
						if thisEntity.web:IsFullyCastable() then
							return CastWeb( thisEntity, thisEntity:GetAbsOrigin() - thisEntity:GetForwardVector() * thisEntity.web:GetTrueCastRange() )
						end
						return AI_THINK_RATE
					end
					if thisEntity.infest:IsFullyCastable() then
						if distance < thisEntity.infest:GetTrueCastRange() then
							CastInfest( thisEntity, target:GetAbsOrigin() )
						else
							target = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then return CastInfest(thisEntity, target:GetAbsOrigin() ) end
						end
					end
					if thisEntity.egg:IsFullyCastable() and AICore:SpecificAlliedUnitsAlive( thisEntity, "npc_dota_creature_broodmother", -1 ) < 4 then return CastEggSack(thisEntity, thisEntity:GetAbsOrigin() + RandomVector(thisEntity.egg:GetTrueCastRange()) ) end
					if thisEntity.shot:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.shot:GetTrueCastRange()) < 3 then
						if distance > thisEntity:GetAttackRange() + thisEntity:GetIdealSpeed() and distance < thisEntity.shot:GetTrueCastRange() then
							return CastShot( thisEntity, target:GetAbsOrigin() )
						elseif distance > thisEntity.shot:GetTrueCastRange() then
							target = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then return CastShot(thisEntity, target:GetAbsOrigin() ) end
						end
					end
					if thisEntity.web:IsFullyCastable() then
						if target:IsMoving() then -- running away
							return CastWeb( thisEntity, thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * thisEntity.web:GetTrueCastRange() )
						end
					end
				else
					if AICore:BeingAttacked( thisEntity ) > 1 or (thisEntity:IsDisarmed() and not thisEntity.hunger:IsFullyCastable()) or thisEntity:IsSilenced() then
						thisEntity.getAIState = AI_STATE_COWARD
						return AI_THINK_RATE
					end
					if thisEntity.hunger:IsFullyCastable() then
						if thisEntity:IsAttacking() or (thisEntity:IsDisarmed() and distance < thisEntity:GetAttackRange()) then
							return CastHunger(thisEntity)
						end
					end
					if thisEntity.shot:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.shot:GetTrueCastRange()) < 2 then
						if distance > thisEntity:GetAttackRange() + thisEntity:GetIdealSpeed() and distance < thisEntity.shot:GetTrueCastRange() then
							return CastShot( thisEntity, target:GetAbsOrigin() )
						elseif distance > thisEntity.shot:GetTrueCastRange() then
							target = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then return CastShot(thisEntity, target:GetAbsOrigin() ) end
						end
					end
					if thisEntity.infest:IsFullyCastable() then
						if distance < thisEntity.infest:GetTrueCastRange() then
							CastInfest( thisEntity, target:GetAbsOrigin() )
						else
							target = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then return CastInfest(thisEntity, target:GetAbsOrigin() ) end
						end
					end
					if thisEntity.web:IsFullyCastable() then
						if target:IsMoving() then -- running away
							return CastWeb( thisEntity, thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * thisEntity.web:GetTrueCastRange() )
						end
					end
					if thisEntity.egg:IsFullyCastable() and AICore:SpecificAlliedUnitsAlive( thisEntity, "npc_dota_creature_broodmother", -1 ) < 4 then return CastEggSack(thisEntity, thisEntity:GetAbsOrigin() + RandomVector(thisEntity.egg:GetTrueCastRange()) ) end
				end
				return AICore:AttackHighestPriority( thisEntity )
			elseif thisEntity.getAIState == AI_STATE_COWARD then
				local runPosition = AICore:BeAHugeCoward( thisEntity, 800 )
				if not runPosition then thisEntity:GetAbsOrigin() end
				if thisEntity.web:IsFullyCastable() and GridNav:FindPathLength(thisEntity:GetAbsOrigin(), runPosition) > CalculateDistance( runPosition, thisEntity ) + 200 then
					return CastWeb(thisEntity, thisEntity:GetAbsOrigin() + CalculateDirection( runPosition, thisEntity ) * thisEntity.web:GetTrueCastRange())
				end
				if thisEntity.hunger:IsFullyCastable() and distance < thisEntity:GetAttackRange() then
					thisEntity.getAIState = AI_STATE_AGGRESSIVE
				end
				if AICore:BeingAttacked( thisEntity ) < 2 then 
					if thisEntity.egg:IsFullyCastable() and AICore:SpecificAlliedUnitsAlive( thisEntity, "npc_dota_creature_broodmother", -1 ) < 4 then 
						return CastEggSack(thisEntity, thisEntity:GetAbsOrigin() + RandomVector(thisEntity.egg:GetTrueCastRange()) ) 
					end
					if thisEntity.shot:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.shot:GetTrueCastRange()) < 2 then
						if distance > thisEntity:GetAttackRange() + thisEntity:GetIdealSpeed() and distance < thisEntity.shot:GetTrueCastRange() then
							thisEntity.getAIState = AI_STATE_AGGRESSIVE
							thisEntity.getLastCheckedHealth = thisEntity:GetHealth()
							return CastShot( thisEntity, target:GetAbsOrigin() )
						elseif distance > thisEntity.shot:GetTrueCastRange() then
							target = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then 
								thisEntity.getAIState = AI_STATE_AGGRESSIVE
								thisEntity.getLastCheckedHealth = thisEntity:GetHealth()
								return CastShot(thisEntity, target:GetAbsOrigin() )
							end
						end
					end
					if thisEntity.infest:IsFullyCastable() then
						if distance < thisEntity.infest:GetTrueCastRange() then
							CastInfest( thisEntity, target:GetAbsOrigin() )
						else
							target = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.shot:GetTrueCastRange(), false)
							if target then return CastInfest(thisEntity, target:GetAbsOrigin() ) end
						end
					end
				end
			end
		end
		return AI_THINK_RATE
	else
		return AI_THINK_RATE
	end
end


function CastWeb(thisEntity, position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.web:entindex()
	})
	return thisEntity.web:GetCastPoint() + 0.1
end

function CastHunger(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.hunger:entindex()
	})
	return thisEntity.hunger:GetCastPoint() + 0.1
end

function CastShot(thisEntity, position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.shot:entindex()
	})
	return thisEntity.shot:GetCastPoint() + 0.1
end

function CastEggSack(thisEntity, position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.egg:entindex()
	})
	return thisEntity.egg:GetCastPoint() + 0.1
end

function CastInfest(thisEntity, position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.infest:entindex()
	})
	return thisEntity.infest:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.acceleration = thisEntity:FindAbilityByName("boss_aeon_time_acceleration")
	thisEntity.distortion = thisEntity:FindAbilityByName("boss_aeon_distortion_field")
	thisEntity.flashback = thisEntity:FindAbilityByName("boss_aeon_flashback")
	
	thisEntity.sphere = thisEntity:FindAbilityByName("boss_aeon_chronal_sphere")
	thisEntity.past = thisEntity:FindAbilityByName("boss_aeon_sins_of_the_past")
	thisEntity.rewind = thisEntity:FindAbilityByName("boss_aeon_rewind")
	thisEntity.fetal = thisEntity:FindAbilityByName("boss_aeon_fetal_syndrome")
	thisEntity.deteriorate = thisEntity:FindAbilityByName("boss_aeon_deteriorate")
	
	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.acceleration:SetLevel(1)
			thisEntity.distortion:SetLevel(1)
			thisEntity.flashback:SetLevel(1)
			
			thisEntity.sphere:SetLevel(1)
			thisEntity.past:SetLevel(1)
			thisEntity.rewind:SetLevel(1)
			thisEntity.fetal:SetLevel(1)
			thisEntity.deteriorate:SetLevel(1)
		elseif  math.floor(GameRules.gameDifficulty + 0.5) > 2 and  math.floor(GameRules.gameDifficulty + 0.5) <= 4 then 
			thisEntity.acceleration:SetLevel(2)
			thisEntity.distortion:SetLevel(2)
			thisEntity.flashback:SetLevel(2)
			
			thisEntity.sphere:SetLevel(2)
			thisEntity.past:SetLevel(2)
			thisEntity.rewind:SetLevel(2)
			thisEntity.fetal:SetLevel(2)
			thisEntity.deteriorate:SetLevel(2)
		end
		thisEntity.rewind:StartCooldown(10)
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() or not thisEntity:IsAlive() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.sphere:IsCooldownReady() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.sphere:GetTrueCastRange() + thisEntity.sphere:GetSpecialValueFor("max_radius")) > 0 and RollPercentage(50) then
			local position = AICore:OptimalHitPosition(thisEntity, thisEntity.sphere:GetTrueCastRange(), thisEntity.sphere:GetSpecialValueFor("max_radius"), false)
			return CastSphere(position)
		end
		if thisEntity.past:IsCooldownReady() and AICore:TotalEnemyHeroesInRange( thisEntity, -1 ) > 0 and RollPercentage(20) then
			local randomTarget = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.past:GetTrueCastRange() , true)
			if randomTarget then
				return CastSins( randomTarget )
			end
		end
		if thisEntity.rewind:IsCooldownReady() and RollPercentage(10) then
			return CastRewind()
		end
		if thisEntity.fetal:IsCooldownReady() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.fetal:GetTrueCastRange() ) > 0 and RollPercentage(75) then
			local highestDamage = AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.fetal:GetTrueCastRange(), false)
			if highestDamage then
				return CastFetalSyndrome(highestDamage)
			end
		end
		if thisEntity.deteriorate:IsCooldownReady() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.deteriorate:GetTrueCastRange() + thisEntity.deteriorate:GetSpecialValueFor("radius" ) ) > 0 and RollPercentage(90) then
			local position = AICore:OptimalHitPosition(thisEntity, thisEntity.deteriorate:GetTrueCastRange(), thisEntity.deteriorate:GetSpecialValueFor("radius"), false)
			return CastDeteriorate(position)
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastSphere(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.sphere:entindex()
	})
	return thisEntity.sphere:GetCastPoint() + 0.1
end

function CastSins(target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.past:entindex()
	})
	return thisEntity.past:GetCastPoint() + 0.1
end

function CastRewind()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.rewind:entindex()
	})
	return thisEntity.rewind:GetCastPoint() + 0.1
end

function CastFetalSyndrome(target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.fetal:entindex()
	})
	return thisEntity.fetal:GetCastPoint() + 0.1
end

function CastDeteriorate(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.deteriorate:entindex()
	})
	return thisEntity.deteriorate:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.density = thisEntity:FindAbilityByName("boss_aether_neutron_density")
	thisEntity.well = thisEntity:FindAbilityByName("boss_aether_gravity_well")
	thisEntity.shift = thisEntity:FindAbilityByName("boss_aether_phase_shift")
	
	thisEntity.wormhole = thisEntity:FindAbilityByName("boss_aether_wormhole")
	thisEntity.meteor = thisEntity:FindAbilityByName("boss_aether_meteor_shower")
	thisEntity.rift = thisEntity:FindAbilityByName("boss_aether_space_rift")
	thisEntity.pool = thisEntity:FindAbilityByName("boss_aether_entropy_pool")
	thisEntity.mass = thisEntity:FindAbilityByName("boss_aether_mass_effect")
	thisEntity.horizon = thisEntity:FindAbilityByName("boss_aether_event_horizon")
	
	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.density:SetLevel(1)
			thisEntity.well:SetLevel(1)
			thisEntity.shift:SetLevel(1)
			
			thisEntity.wormhole:SetLevel(1)
			thisEntity.meteor:SetLevel(1)
			thisEntity.rift:SetLevel(1)
			thisEntity.pool:SetLevel(1)
			thisEntity.mass:SetLevel(1)
			thisEntity.horizon:SetLevel(1)
		elseif  math.floor(GameRules.gameDifficulty + 0.5) > 2 and  math.floor(GameRules.gameDifficulty + 0.5) <= 4 then 
			thisEntity.density:SetLevel(2)
			thisEntity.well:SetLevel(2)
			thisEntity.shift:SetLevel(2)
			
			thisEntity.wormhole:SetLevel(2)
			thisEntity.meteor:SetLevel(2)
			thisEntity.rift:SetLevel(2)
			thisEntity.pool:SetLevel(2)
			thisEntity.mass:SetLevel(2)
			thisEntity.horizon:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.wormhole:IsFullyCastable() then
			if AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity:GetAttackRange() ) == 0 then
				if target and not target:IsNull() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin() + ActualRandomVector(900, 200),
						AbilityIndex = thisEntity.wormhole:entindex()
					})
					return thisEntity.wormhole:GetCastPoint() + 0.1
				end
			elseif AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity:GetAttackRange() ) < 2  and RollPercentage(20) then
				local target = AICore:GetHighestPriorityTarget(thisEntity)
				if target then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin() + ActualRandomVector(900, 200),
						AbilityIndex = thisEntity.wormhole:entindex()
					})
					return thisEntity.wormhole:GetCastPoint() + 0.1
				end
			end
		end
		local horizonWeight = 50 + 50/AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.horizon:GetTalentSpecialValueFor("radius") * 2 )
		if thisEntity.horizon:IsFullyCastable() then
			if AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.horizon:GetTalentSpecialValueFor("radius") * 2 ) > 0 and RollPercentage(horizonWeight) then
				if thisEntity.wormhole:IsFullyCastable() and RollPercentage(50) then -- teleport away
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = thisEntity:GetAbsOrigin() + ActualRandomVector(800, 500),
						AbilityIndex = thisEntity.wormhole:entindex()
					})
					return thisEntity.wormhole:GetCastPoint() + 0.1
				else -- stand still
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.horizon:entindex()
					})
					return thisEntity.horizon:GetCastPoint() + 0.1
				end
			elseif AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.horizon:GetTalentSpecialValueFor("radius") ) > 0 then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.horizon:entindex()
				})
				return thisEntity.horizon:GetCastPoint() + 0.1
			end
		end
		if thisEntity.pool:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.pool:GetTalentSpecialValueFor("pool_spawn_range") ) > 0 and RollPercentage(50) then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.pool:entindex()
			})
			return thisEntity.pool:GetCastPoint() + 0.1
		end
		if thisEntity.meteor:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.meteor:entindex()
			})
			return thisEntity.meteor:GetCastPoint() + 0.1
		end
		if thisEntity.mass:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.mass:GetTrueCastRange() ) > 0 then
			local distCheck = CalculateDistance( thisEntity, target )
			local position = target:GetAbsOrigin()
			if distCheck > thisEntity.mass:GetTrueCastRange() and AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.mass:GetTrueCastRange() , true ) then
				position = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.mass:GetTrueCastRange() , true ):GetAbsOrigin()
			end
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
				Position = position,
				AbilityIndex = thisEntity.mass:entindex()
			})
			return thisEntity.mass:GetCastPoint() + 0.1
		end
		if thisEntity.rift:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.rift:GetTrueCastRange() + thisEntity.rift:GetTalentSpecialValueFor("pull_radius") ) > 0 then
			local distCheck = CalculateDistance( thisEntity, target )
			local position = target:GetAbsOrigin()
			if distCheck > thisEntity.rift:GetTrueCastRange() and AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.rift:GetTrueCastRange() + thisEntity.rift:GetTalentSpecialValueFor("pull_radius") , false ) then
				position = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.rift:GetTrueCastRange() + thisEntity.rift:GetTalentSpecialValueFor("pull_radius") , false ):GetAbsOrigin()
			end
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
				Position = position,
				AbilityIndex = thisEntity.rift:entindex()
			})
			return thisEntity.rift:GetCastPoint() + 0.1
		end
		return AICore:AttackHighestPriority( thisEntity )
	else 
		return AI_THINK_RATE 
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
if IsServer() then
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.berserk = thisEntity:FindAbilityByName("boss3a_berserk")
		thisEntity.tombstone = thisEntity:FindAbilityByName("boss3a_tombstone")
		AITimers:CreateTimer(0.1, function()
			if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
				thisEntity.berserk:SetLevel(1)
				thisEntity.tombstone:SetLevel(1)
			else
				thisEntity.berserk:SetLevel(2)
				thisEntity.tombstone:SetLevel(2)
			end
		end)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local radius = thisEntity:GetAttackRange()+thisEntity:GetAttackRangeBuffer()
			local target = AICore:HighestThreatHeroInRange(thisEntity, radius, 0, true)
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, radius, true) end
			if not target then target = AICore:NearestEnemyHeroInRange( thisEntity, 8000, true) end
			if target then
				if (target:GetOrigin() - thisEntity:GetOrigin()):Length2D() > 500 and thisEntity.berserk:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.berserk:entindex()
					})
					return thisEntity.berserk:GetCastPoint() + 0.1
				end
			end
			if thisEntity:IsAttacking() and thisEntity.berserk:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.berserk:entindex()
				})
				return thisEntity.berserk:GetCastPoint() + 0.1
			end
			if thisEntity.tombstone:IsFullyCastable() and thisEntity:GetHealthPercent() < 5 then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.tombstone:entindex()
				})
				return AI_THINK_RATE
			elseif thisEntity.tombstone:IsFullyCastable() and thisEntity:GetHealthPercent() < 10 then
				if AICore:IsNearEnemyUnit(thisEntity, 600) then
					AICore:BeAHugeCoward( thisEntity, 600 )
					return AI_THINK_RATE
				else
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.tombstone:entindex()
					})
					return AI_THINK_RATE
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
if IsServer() then
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.spit = thisEntity:FindAbilityByName("boss3b_acid_spit")
		thisEntity.passive = thisEntity:FindAbilityByName("boss3b_acid_interior")
		AITimers:CreateTimer(function()
			if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then 
				thisEntity.spit:SetLevel(1)
				thisEntity.passive:SetLevel(1)
			else
				thisEntity.spit:SetLevel(2)
				thisEntity.passive:SetLevel(2)
			end
		end)
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target and thisEntity:GetHealthPercent() > 25 then 
				if thisEntity.spit:IsFullyCastable() then
					if not target:HasModifier("modifier_boss3b_acid_spit") then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
							Position = target:GetAbsOrigin(),
							AbilityIndex = thisEntity.spit:entindex()
						})
						return thisEntity.spit:GetCastPoint() + 0.1
					else
						local castRadius = thisEntity.spit:GetTrueCastRange() + thisEntity:GetIdealSpeed()
						local searchRadius = thisEntity.spit:GetSpecialValueFor("radius") + castRadius
						local potentialEnemies = thisEntity:FindEnemyUnitsInRadius(thisEntity:GetAbsOrigin(), searchRadius)
						local newTarget 
						for _, potTarget in ipairs(potentialEnemies) do
							if not potTarget:HasModifier("modifier_boss3b_acid_spit") then 
								newTarget = potTarget
								break
							end
						end
						if newTarget then
							ExecuteOrderFromTable({
								UnitIndex = thisEntity:entindex(),
								OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
								Position = newTarget:GetAbsOrigin(),
								AbilityIndex = thisEntity.spit:entindex()
							})
							return thisEntity.spit:GetCastPoint() + 0.1
						end
					end
				end
			else
				target = AICore:NearestEnemyHeroInRange( thisEntity, 15000 , true )
				AICore:RunToTarget( thisEntity, target )
				return AI_THINK_RATE
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.ball = thisEntity:FindAbilityByName("boss4_death_ball")
	thisEntity.summon = thisEntity:FindAbilityByName("boss4_summon_zombies")
	thisEntity.sacrifice = thisEntity:FindAbilityByName("boss4_sacrifice")
	thisEntity.tombstone = thisEntity:FindAbilityByName("boss4_tombstone")
	
	AITimers:CreateTimer(function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then 
			thisEntity.ball:SetLevel(1)
			thisEntity.summon:SetLevel(1)
			thisEntity.sacrifice:SetLevel(1)
			thisEntity.tombstone:SetLevel(1)
		else
			thisEntity.ball:SetLevel(2)
			thisEntity.summon:SetLevel(2)
			thisEntity.sacrifice:SetLevel(2)
			thisEntity.tombstone:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if (AICore:BeingAttacked(thisEntity) > 1 or AICore:IsNearEnemyUnit(thisEntity, 600)) and thisEntity.tombstone:IsFullyCastable() and not thisEntity:HasModifier("modifier_boss4_tombstone_caster") then
			local position = thisEntity:GetAbsOrigin() - (thisEntity:GetForwardVector() * thisEntity.tombstone:GetCastRange(thisEntity:GetAbsOrigin(), thisEntity))
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
				Position = position,
				AbilityIndex = thisEntity.tombstone:entindex()
			})
			return thisEntity.tombstone:GetCastPoint() + 0.1
		end
		if thisEntity.summon:IsFullyCastable() and AICore:IsNearEnemyUnit(thisEntity, 800) then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.summon:entindex()
			})
			return thisEntity.summon:GetCastPoint() + 0.1
		end
		local range = thisEntity.ball:GetSpecialValueFor("distance")
		local radius = thisEntity.ball:GetSpecialValueFor("radius")
		if thisEntity.ball:IsFullyCastable() and AICore:EnemiesInLine(thisEntity, range, radius) then
			local targetPos = AICore:FindNearestEnemyInLine(thisEntity, range, radius)
			if CalculateDistance(thisEntity, target) < range then targetPos = target end
			if targetPos then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = targetPos:GetAbsOrigin(), 
					AbilityIndex = thisEntity.ball:entindex()
				})
			end
			return thisEntity.ball:GetCastPoint() + 0.1
		end
		if thisEntity.sacrifice:IsFullyCastable() and thisEntity:GetHealthPercent() < 75 and thisEntity.summon:GetZombieCount() > 4 then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.sacrifice:entindex()
			})
			return thisEntity.sacrifice:GetCastPoint() + 0.1
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.moment = thisEntity:FindAbilityByName("boss_moment_of_courage")
	-- thisEntity.odds = thisEntity:FindAbilityByName("boss_overwhelming_odds")
	thisEntity.press = thisEntity:FindAbilityByName("boss_press_the_attack")
	thisEntity.call = thisEntity:FindAbilityByName("boss_call_reinforcements")
	if  math.floor(GameRules.gameDifficulty + 0.5) > 3 then
		thisEntity.moment:SetLevel(4)
		thisEntity.press:SetLevel(4)
		-- thisEntity.odds:SetLevel(4)
	elseif  math.floor(GameRules.gameDifficulty + 0.5) == 3 then
		thisEntity.moment:SetLevel(3)
		thisEntity.press:SetLevel(3)
		-- thisEntity.odds:SetLevel(3)
	elseif  math.floor(GameRules.gameDifficulty + 0.5) == 2 then
		thisEntity.moment:SetLevel(2)
		thisEntity.press:SetLevel(2)
		-- thisEntity.odds:SetLevel(2)
	else
		thisEntity.moment:SetLevel(1)
		thisEntity.press:SetLevel(1)
		-- thisEntity.odds:SetLevel(1)
	end
	thisEntity:SetHealth(thisEntity:GetMaxHealth())
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		-- if thisEntity.odds:IsFullyCastable() then
			-- local radius = thisEntity.odds:GetSpecialValueFor("radius")
			-- local range = thisEntity.odds:GetCastRange() + radius
			-- if AICore:TotalEnemyHeroesInRange( thisEntity, radius ) ~= 0 then
				-- local position = AICore:OptimalHitPosition(thisEntity, range, radius)
				-- if position and RollPercentage(25) then
					-- ExecuteOrderFromTable({
						-- UnitIndex = thisEntity:entindex(),
						-- OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						-- Position = position,
						-- AbilityIndex = thisEntity.odds:entindex()
					-- })
					-- return AI_THINK_RATE
				-- end
			-- end
		-- end
		if thisEntity.press:IsFullyCastable() then
			local hpregen = thisEntity.press:GetSpecialValueFor("hp_regen") *  thisEntity.press:GetSpecialValueFor("duration")
			if (thisEntity:IsAttacking() or thisEntity:GetHealthDeficit() > hpregen) and RollPercentage(8) then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = thisEntity:entindex(),
					AbilityIndex = thisEntity.press:entindex()
				})
				return AI_THINK_RATE
			elseif AICore:TotalAlliedUnitsInRange( thisEntity, thisEntity.press:GetCastRange() ) then
				local ally = AICore:WeakestAlliedUnitInRange( thisEntity, thisEntity.press:GetCastRange() , false)
				if ally and ally:GetHealthDeficit() > hpregen and RollPercentage(8) then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
						TargetIndex = ally:entindex(),
						AbilityIndex = thisEntity.press:entindex()
					})
					return AI_THINK_RATE
				end
			end
		end
		if thisEntity.call:IsFullyCastable() and AICore:SpecificAlliedUnitsAlive( thisEntity, "npc_dota_boss5b" ) < 6 then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.call:entindex()
			})
			return thisEntity.call:GetChannelTime()
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.blink = thisEntity:FindAbilityByName("boss_blink")
	thisEntity.strike = thisEntity:FindAbilityByName("boss_shadow_strike")
	thisEntity.scream = thisEntity:FindAbilityByName("boss_scream_of_pain")
	if math.floor(GameRules.gameDifficulty + 0.5) > 3 then
		thisEntity.blink:SetLevel(4)
		thisEntity.strike:SetLevel(4)
		thisEntity.scream:SetLevel(4)
	elseif math.floor(GameRules.gameDifficulty + 0.5) == 3 then
		thisEntity.blink:SetLevel(3)
		thisEntity.strike:SetLevel(3)
		thisEntity.scream:SetLevel(3)
	elseif math.floor(GameRules.gameDifficulty + 0.5) == 2 then
		thisEntity.blink:SetLevel(2)
		thisEntity.strike:SetLevel(2)
		thisEntity.scream:SetLevel(2)
	else
		thisEntity.blink:SetLevel(1)
		thisEntity.strike:SetLevel(1)
		thisEntity.scream:SetLevel(1)
	end
	thisEntity:SetHealth(thisEntity:GetMaxHealth())
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if thisEntity.blink:IsFullyCastable() then
			local range = thisEntity.blink:GetSpecialValueFor("blink_range")
			local target = AICore:HighestThreatHeroInRange( thisEntity, 9999, 15, false )
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, 9999, false ) end
			if target and not thisEntity:IsAttackingEntity(target) and RollPercentage(25) then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					AbilityIndex = thisEntity.blink:entindex(),
					Position = target:GetOrigin() - (target:GetOrigin() + thisEntity:GetOrigin()):Normalized()*thisEntity:GetAttackRange()*math.random()
				})
				return thisEntity.blink:GetCastPoint() + 0.25
			end
		end
		if thisEntity.strike:IsFullyCastable() and RollPercentage(25) then
			local range = thisEntity.strike:GetCastRange()
			local target = AICore:HighestThreatHeroInRange( thisEntity, range, 15, false )
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, range, false ) end
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
					TargetIndex = target:entindex(),
					AbilityIndex = thisEntity.strike:entindex()
				})
				return thisEntity.strike:GetCastPoint() + 0.25
			end
		end
		if thisEntity.scream:IsFullyCastable() and RollPercentage(25) then
			local range = thisEntity.blink:GetSpecialValueFor("area_of_effect")
			local target = AICore:HighestThreatHeroInRange( thisEntity, range, 15, false )
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity,range, false ) end
			if target then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.scream:entindex()
				})
				return thisEntity.scream:GetCastPoint() + 0.25
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.dance = thisEntity:FindAbilityByName("nightcrawler_shadowdance")
	thisEntity.pounce = thisEntity:FindAbilityByName("lesser_nightcrawler_pounce")
	local target = AICore:HighestThreatHeroInRange( thisEntity, 9000 , 15, true)
	if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, 9000, true ) end
	if target then
		ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
				TargetIndex = target:entindex()
			})
	else
		AICore:AttackHighestPriority( thisEntity )
	end
	thisEntity.prevHP = thisEntity:GetHealth()
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local hp = thisEntity:GetHealth()
		if not thisEntity.prevHP then thisEntity.prevHP = hp end
		if (hp < thisEntity.prevHP*0.6 or hp < thisEntity:GetMaxHealth()*0.4) and thisEntity.dance:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.dance:entindex()
			})
			local reverseDir = thisEntity:GetForwardVector() * -1
			thisEntity:SetForwardVector(reverseDir)
			local duration = thisEntity.dance:GetSpecialValueFor("duration")
			local movespeed = thisEntity:GetIdealSpeed()
			ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION ,
					Position = thisEntity:GetForwardVector()*duration*movespeed
				})
			if thisEntity.pounce:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.pounce:entindex()
				})
			end
			return duration
		end
			local radius = thisEntity.pounce:GetSpecialValueFor("pounce_radius")
			local range = thisEntity.pounce:GetSpecialValueFor("pounce_distance")
			if AICore:EnemiesInLine(thisEntity, range, radius, true) and thisEntity.pounce:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.pounce:entindex()
				})
				return AI_THINK_RATE
			end
			local target = AICore:HighestThreatHeroInRange(thisEntity, 9000, 15, true)
			if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, 9000, true) end
			if target then
				local distance = (thisEntity:GetOrigin() - target:GetOrigin()):Length2D()
				local direction = (thisEntity:GetOrigin() - target:GetOrigin()):Normalized()
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
					TargetIndex = target:entindex()
				})
				if distance > 1000 and thisEntity.pounce:IsFullyCastable() then 
					thisEntity:SetForwardVector(direction)
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.pounce:entindex()
					})
					return AI_THINK_RATE
				end
			else
				return AICore:AttackHighestPriority( thisEntity )
			end
		thisEntity.prevHP = thisEntity:GetHealth()
		return AI_THINK_RATE
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.rupture = thisEntity:FindAbilityByName("creature_rupture")
	thisEntity.pounce = thisEntity:FindAbilityByName("lesser_nightcrawler_pounce")
	local target = AICore:WeakestEnemyHeroInRange( thisEntity, 9000, true )
	if target then
		ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
				TargetIndex = target:entindex()
			})
	else
		AICore:AttackHighestPriority( thisEntity )
	end
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local target = AICore:WeakestEnemyHeroInRange( thisEntity, thisEntity.rupture:GetCastRange(), true )
		if target and thisEntity.rupture:IsFullyCastable() and not target:HasModifier("modifier_bloodseeker_rupture") then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
				TargetIndex = target:entindex(),
				AbilityIndex = thisEntity.rupture:entindex()
			})
			return 1
		end
		local radius = thisEntity.pounce:GetSpecialValueFor("pounce_radius")
		local range = thisEntity.pounce:GetSpecialValueFor("pounce_distance")
		if AICore:EnemiesInLine(thisEntity, range, radius, true) and thisEntity.pounce:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.pounce:entindex()
			})
			return AI_THINK_RATE
		end
		local target = AICore:WeakestEnemyHeroInRange( thisEntity, 99999, true )
		if target then
			local distance = (thisEntity:GetOrigin() - target:GetOrigin()):Length2D()
			local direction = (thisEntity:GetOrigin() - target:GetOrigin()):Normalized()
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
					TargetIndex = target:entindex()
				})
			if distance > 1000 and thisEntity.pounce:IsFullyCastable() then 
				thisEntity:SetForwardVector(direction)
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.pounce:entindex()
				})
				return AI_THINK_RATE
			end
		else
			return AICore:AttackHighestPriority( thisEntity )
		end
		return AI_THINK_RATE
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.rage = thisEntity:FindAbilityByName("boss_ragebuff")
	thisEntity.wounds = thisEntity:FindAbilityByName("boss_wounds")
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local target = AICore:HighestThreatHeroInRange(thisEntity, thisEntity.wounds:GetCastRange(), 15, false)
		if not target then target = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.wounds:GetCastRange(), false) end
		if thisEntity.wounds:IsFullyCastable() and target and thisEntity:GetHealth() < thisEntity:GetMaxHealth()*0.6 then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
				TargetIndex = target:entindex(),
				AbilityIndex = thisEntity.wounds:entindex()
			})
			return AI_THINK_RATE
		end
		if ((thisEntity:IsAttackingEntity(target) and thisEntity:IsAttacking()) or thisEntity:IsDisabled()) and thisEntity.rage:IsFullyCastable() and RollPercentage(25) then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.rage:entindex()
			})
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.spear = thisEntity:FindAbilityByName("boss_clockwerk_spear")
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local radius = thisEntity.spear:GetTrueCastRange()
		local target = AICore:HighestThreatHeroInRange(thisEntity, radius, 0, false)
		if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, radius, false) end
		if not target then target = AICore:NearestEnemyHeroInRange( thisEntity, radius, false) end
		if target and thisEntity.spear:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
				Position = target:GetOrigin(),
				AbilityIndex = thisEntity.spear:entindex()
			})
			return AI_THINK_RATE
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.rockets = thisEntity:FindAbilityByName("boss_rockets")
	thisEntity.march = thisEntity:FindAbilityByName("boss_march")
	thisEntity.rearm = thisEntity:FindAbilityByName("boss_rearm")
	if  math.floor(GameRules.gameDifficulty + 0.5) > 3 then
		thisEntity.rockets:SetLevel(4)
		thisEntity.march:SetLevel(4)
		thisEntity.rearm:SetLevel(4)
	elseif  math.floor(GameRules.gameDifficulty + 0.5) == 3 then
		thisEntity.rockets:SetLevel(3)
		thisEntity.march:SetLevel(3)
		thisEntity.rearm:SetLevel(3)
	elseif  math.floor(GameRules.gameDifficulty + 0.5) == 2 then
		thisEntity.rockets:SetLevel(2)
		thisEntity.march:SetLevel(2)
		thisEntity.rearm:SetLevel(2)
	else
		thisEntity.rockets:SetLevel(1)
		thisEntity.march:SetLevel(1)
		thisEntity.rearm:SetLevel(1)
	end
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if thisEntity:IsChanneling() then return AI_THINK_RATE end
		local danger = AICore:NearestEnemyHeroInRange( thisEntity, 600, true )
		if danger then 
			if thisEntity.march:IsFullyCastable() and RollPercentage( 50 ) then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = thisEntity:GetOrigin(),
					AbilityIndex = thisEntity.march:entindex()
				})
				return AI_THINK_RATE
			elseif thisEntity.rearm:IsCooldownReady() and not thisEntity.march:IsCooldownReady() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.rearm:entindex()
				})
				return thisEntity.rearm:GetCastPoint() + 0.1
			elseif RollPercentage(50) then
				AICore:BeAHugeCoward ( thisEntity, 600 )
				return AI_THINK_RATE
			elseif thisEntity.rockets:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.rockets:entindex()
				})
				return AI_THINK_RATE
			else
				AICore:RunToRandomPosition( thisEntity, 10 )
				return AI_THINK_RATE
			end
		else
			if thisEntity.rockets:IsFullyCastable() and AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.rockets:GetSpecialValueFor("radius"), false ) then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.rockets:entindex()
				})
				return AI_THINK_RATE
			elseif not thisEntity.rockets:IsCooldownReady() and thisEntity.rearm:IsCooldownReady() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.rearm:entindex()
				})
				return thisEntity.rearm:GetCastPoint() + 0.1
			else
				AICore:RunToRandomPosition( thisEntity, 10 )
				return AI_THINK_RATE
			end
		end
		return AI_THINK_RATE
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]
TECHIES_BEHAVIOR_SEEK_AND_DESTROY = 1
TECHIES_BEHAVIOR_ROAM_AND_MINE = 2
require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.suicide = thisEntity:FindAbilityByName("boss_suicide")
	thisEntity.mine = thisEntity:FindAbilityByName("boss_proximity")
	thisEntity.AIstate = RandomInt(1,2)
	if  math.floor(GameRules.gameDifficulty + 0.5) > 2 then
		thisEntity.suicide:SetLevel(2)
		thisEntity.mine:SetLevel(2)
	else
		thisEntity.suicide:SetLevel(1)
		thisEntity.mine:SetLevel(1)
	end
	thisEntity.suicide:StartCooldown(5)
end


function AIThink(thisEntity)
	if not thisEntity:IsAlive() then
		for _,mine in pairs( FindUnitsInRadius( thisEntity:GetTeam(), thisEntity:GetOrigin(), nil, 99999, DOTA_UNIT_TARGET_TEAM_FRIENDLY, DOTA_UNIT_TARGET_ALL, 0, 0, false ) ) do
			if mine:GetUnitName() == "npc_dota_techies_land_mine" or mine:GetName() == "npc_dota_techies_land_mine" or mine:GetUnitLabel() == "npc_dota_techies_land_mine" then
				if mine:GetOwnerEntity() == thisEntity then
					mine:RemoveSelf()
				end
			end
		end
	end
	if not thisEntity:IsDominated() then
		if thisEntity:IsChanneling() then return AI_THINK_RATE end
		local boom = AICore:NearestEnemyHeroInRange( thisEntity, 300, true )
		if boom then 
			if thisEntity.suicide:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
					Position = boom:GetOrigin(),
					AbilityIndex = thisEntity.suicide:entindex()
				})
				return AI_THINK_RATE
			end
		end
		if thisEntity.mine:IsFullyCastable() and not AICore:SpecificAlliedUnitsInRange( thisEntity, "npc_dota_techies_land_mine", 450 ) then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
				Position = thisEntity:GetOrigin(),
				AbilityIndex = thisEntity.mine:entindex()
			})
			return AI_THINK_RATE
		end
		if thisEntity.AIstate == TECHIES_BEHAVIOR_SEEK_AND_DESTROY then
			AICore:RunToTarget( thisEntity, AICore:NearestEnemyHeroInRange( thisEntity, 9999, true ) )
		elseif thisEntity.AIstate == TECHIES_BEHAVIOR_ROAM_AND_MINE then
			AICore:RunToRandomPosition( thisEntity, 15 )
		end
		return AI_THINK_RATE
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]
TECHIES_BEHAVIOR_SEEK_AND_DESTROY = 1
TECHIES_BEHAVIOR_ROAM_AND_MINE = 2
require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.spawn = thisEntity:FindAbilityByName("boss_spawn_techies")
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if thisEntity:IsChanneling() then return AI_THINK_RATE end
		if not thisEntity.spawn:IsCooldownReady() then return AI_THINK_RATE end
		ExecuteOrderFromTable({
			UnitIndex = thisEntity:entindex(),
			OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
			AbilityIndex = thisEntity.spawn:entindex()
		})
		return AI_THINK_RATE
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.summon = thisEntity:FindAbilityByName("creature_summon_slither")
	thisEntity.crush = thisEntity:FindAbilityByName("creature_slithereen_crush")
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local radius = thisEntity.crush:GetSpecialValueFor("crush_radius")
		if AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius, false ) >= math.floor(AICore:TotalEnemyHeroesInRange( thisEntity, radius )/2) 
		and AICore:TotalEnemyHeroesInRange( thisEntity, radius ) ~= 0 
		and thisEntity.crush:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.crush:entindex()
			})
			return AI_THINK_RATE
		end
		if thisEntity.summon:IsFullyCastable() and AICore:AlliedUnitsAlive(thisEntity) < 20 then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.summon:entindex()
			})
			return AI_THINK_RATE
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.summon = thisEntity:FindAbilityByName("creature_summon_slither")
	thisEntity.crush = thisEntity:FindAbilityByName("creature_slithereen_crush")
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local radius = thisEntity.crush:GetSpecialValueFor("crush_radius")
		if AICore:TotalNotDisabledEnemyHeroesInRange( thisEntity, radius ) > math.floor(AICore:TotalEnemyHeroesInRange( thisEntity, radius )/2) 
		and thisEntity.crush:IsFullyCastable()
		and AICore:TotalEnemyHeroesInRange( thisEntity, radius ) ~= 0  then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.crush:entindex()
			})
			return AI_THINK_RATE
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
endif IsServer() then
	require( "ai/ai_core" )
	
	AI_STATE_CLOSE_COMBAT = 1
	AI_STATE_CHASING = 2
	
	function Spawn( entityKeyValues )
		thisEntity:SetContextThink( "AIThinker", AIThink, 0.25 )
		thisEntity.leap = thisEntity:FindAbilityByName("boss1b_leap")
		thisEntity.pin = thisEntity:FindAbilityByName("boss1b_spear_pin")
		thisEntity.pierce = thisEntity:FindAbilityByName("boss1b_spear_pierce")
		if  math.floor(GameRules.gameDifficulty + 0.5) > 2 then
			thisEntity.leap:SetLevel(2)
			thisEntity.pin:SetLevel(2)
			thisEntity.pierce:SetLevel(2)
			
			thisEntity:SetBaseMaxHealth(thisEntity:GetMaxHealth()*1.5)
			thisEntity:SetMaxHealth(thisEntity:GetMaxHealth()*1.5)
			thisEntity:SetHealth(thisEntity:GetMaxHealth())
			
			 thisEntity:SetAverageBaseDamage(thisEntity:GetAverageBaseDamage()*1.2, 30)
		else
			thisEntity.leap:SetLevel(1)
			thisEntity.pin:SetLevel(1)
			thisEntity.pierce:SetLevel(1)
		end
	end


	function AIThink()
		if not thisEntity:IsDominated() and not thisEntity:IsCommandRestricted() then
			EvaluateBehavior(thisEntity)
			if thisEntity.AIstate == AI_STATE_CLOSE_COMBAT then
				if thisEntity:GetAIBehavior() == AI_BEHAVIOR_AGGRESSIVE then -- uses all abilities without concern of options
					
				elseif thisEntity.AIbehavior == AI_BEHAVIOR_CAUTIOUS then -- uses abilities to get in and out
					
				elseif thisEntity.AIbehavior == AI_BEHAVIOR_SAFE then -- tries to use mobility and invis to focus a target down and runs if it gets attacked by others, unless if it has no other choice
					
			elseif thisEntity.AIstate == AI_STATE_CHASING then
				
			end
			AICore:AttackHighestPriority( thisEntity )
			return 0.25
		else return 0.25 end
	end
	
	function EvaluateBehavior(entity)
		if AICore:IsNearEnemyUnit(entity, entity:GetAttackRange() + entity:GetIdealSpeed() * 0.8 ) then
			entity.AIstate = AI_STATE_CLOSE_COMBAT
		else
			entity.AIstate = AI_STATE_CHASING
		end
		end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	
	thisEntity.spawn = thisEntity:FindAbilityByName("boss_broodling_spawn_spiderling")
	thisEntity.spawn:StartCooldown(10)

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.spawn:SetLevel(1)
		else
			thisEntity.spawn:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if thisEntity.spawn:IsFullyCastable() and AICore:SpecificAlliedUnitsAlive( thisEntity, "npc_dota_creature_spiderling", -1 ) < 15 then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.spawn:entindex()
			})
			return thisEntity.spawn:GetCastPoint() + 0.1
		end
		if AICore:TotalAlliedUnitsInRange( thisEntity, 1200 ) > math.ceil(4 * (thisEntity:GetHealthPercent()/100)) then
			return AICore:AttackHighestPriority( thisEntity )
		else
			AICore:BeAHugeCoward( thisEntity, 800 )
			return AI_THINK_RATE
		end
		return AI_THINK_RATE
	else
		return AI_THINK_RATE
	end
end--[[
Tower Defense AI

These are the valid orders, in case you want to use them (easier here than to find them in the C code):

DOTA_UNIT_ORDER_NONE
DOTA_UNIT_ORDER_MOVE_TO_POSITION 
DOTA_UNIT_ORDER_MOVE_TO_TARGET 
DOTA_UNIT_ORDER_ATTACK_MOVE
DOTA_UNIT_ORDER_ATTACK_TARGET
DOTA_UNIT_ORDER_CAST_POSITION
DOTA_UNIT_ORDER_CAST_TARGET
DOTA_UNIT_ORDER_CAST_TARGET_TREE
DOTA_UNIT_ORDER_CAST_NO_TARGET
DOTA_UNIT_ORDER_CAST_TOGGLE
DOTA_UNIT_ORDER_HOLD_POSITION
DOTA_UNIT_ORDER_TRAIN_ABILITY
DOTA_UNIT_ORDER_DROP_ITEM
DOTA_UNIT_ORDER_GIVE_ITEM
DOTA_UNIT_ORDER_PICKUP_ITEM
DOTA_UNIT_ORDER_PICKUP_RUNE
DOTA_UNIT_ORDER_PURCHASE_ITEM
DOTA_UNIT_ORDER_SELL_ITEM
DOTA_UNIT_ORDER_DISASSEMBLE_ITEM
DOTA_UNIT_ORDER_MOVE_ITEM
DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO
DOTA_UNIT_ORDER_STOP
DOTA_UNIT_ORDER_TAUNT
DOTA_UNIT_ORDER_BUYBACK
DOTA_UNIT_ORDER_GLYPH
DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH
DOTA_UNIT_ORDER_CAST_RUNE
]]

AICore = {}


AI_BEHAVIOR_AGGRESSIVE = 1 -- Threat is weighted towards damage
AI_BEHAVIOR_CAUTIOUS = 2 -- Threat is weighted towards health
AI_BEHAVIOR_SAFE = 3 -- Threat is weighted towards heals and debuffs, requires bigger threat difference to switch aggro

AI_THINK_RATE = 1.5
BASE_AGGRO_RADIUS = 600

function AICore:RandomEnemyHeroInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	if #enemies > 0 then
		local index = RandomInt( 1, #enemies )
		return enemies[index]
	else
		return nil
	end
end

function AICore:NearestEnemyHeroInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
	
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local minRange = range
	local target = nil
	
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and distanceToEnemy < minRange then
			minRange = distanceToEnemy
			target = enemy
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:MostDamageEnemyHeroInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
	
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local minDamage = 0
	local target = nil
	
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and enemy.statsDamageDealt and enemy.statsDamageDealt > minDamage then
			minDamage = enemy.statsDamageDealt
			target = enemy
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:BeingAttacked( entity )
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, 9999, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_ALL, DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES, 0, false )
	local count = 0
	
	for _,enemy in pairs(enemies) do
		if enemy:IsAlive() and enemy:IsAttackingEntity(entity) then
			count = (count or 0) + 1
		end
	end
	return count
end

function AICore:BeingAttackedBy( entity )
	if entity:IsNull() then return end
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, 9999, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_ALL, DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES, 0, false )
	local attackers = {}
	
	for _,enemy in pairs(enemies) do
		if enemy:IsAlive() and enemy:IsAttackingEntity(entity) then
			table.insert(attackers, enemy)
		end
	end
	return attackers
end

function AICore:GetHighestPriorityTarget(entity)
	local target
	if entity.AIprevioustarget and entity:CanEntityBeSeenByMyTeam(entity.AIprevioustarget) then
		target = entity.AIprevioustarget
	else
		target = AICore:NearestEnemyHeroInRange( entity, 15000 , true )
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:AttackHighestPriority( entity )
	if not entity or not entity:IsAlive() then return end
	local flag = DOTA_UNIT_TARGET_FLAG_NOT_ATTACK_IMMUNE + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES + DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE
	if not entity:IsDominated() then
		local target = entity:GetTauntTarget()
		local weakestInRange
		local closestUnit
		local minThreat = 0
		local minHP = 0
		if not target then
			if entity.AIprevioustarget and not entity.AIprevioustarget:IsNull() and entity.AIprevioustarget:IsAlive() and entity:CanEntityBeSeenByMyTeam(entity.AIprevioustarget) then 
				target = entity.AIprevioustarget
				target.threat = target.threat or 0
				minThreat = target.threat
			end
			local range = entity:GetAttackRange() + entity:GetIdealSpeed() * 0.5 + BASE_AGGRO_RADIUS
			local minRange = 99999
			local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, -1, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flag, 0, false )
			for _, enemy in pairs(enemies) do
				local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
				if not enemy.threat then enemy.threat = 0 end
				if not minThreat then minThreat = 0 end
				if entity:CanEntityBeSeenByMyTeam(enemy) and enemy:IsAlive() then
					if distanceToEnemy < range then
						if enemy.threat > minThreat and not entity.AIprevioustarget then
							minThreat = enemy.threat
							target = enemy
						elseif entity.AIprevioustarget and enemy.threat > minThreat + 5*(entity.AIbehavior or 1) then
							minThreat = enemy.threat
							target = enemy
						end
						if not target then
							local HP = enemy:GetHealth()
							if HP < minHP then
								minHP = HP
								weakestInRange = enemy
							end
						end
					end
					if not weakestInRange then
						if minRange > distanceToEnemy then
							minRange = distanceToEnemy
							closestUnit = enemy
						end
					end
				end
			end
		end
		target = target or weakestInRange or closestUnit	
		if target then
			entity.AIprevioustarget = target
			entity.AIprevioustargetPosition = target:GetAbsOrigin() + CalculateDirection( target, entity ) * 150
		end
		if not target and entity.AIprevioustargetPosition and CalculateDistance(entity.AIprevioustargetPosition, entity) > 20 then
			ExecuteOrderFromTable({
				UnitIndex = entity:entindex(),
				OrderType = DOTA_UNIT_ORDER_ATTACK_MOVE,
				Position = entity.AIprevioustargetPosition,
			})
			return AI_THINK_RATE
		elseif not target and entity.AIprevioustargetPosition and CalculateDistance(entity.AIprevioustargetPosition, entity) <= 20 then
			entity.AIprevioustargetPosition = nil
		end
		if target and not target:IsNull() and RollPercentage(80) then
			if entity:GetAttackCapability() == DOTA_UNIT_CAP_NO_ATTACK then
				if CalculateDistance(target, entity) > entity:GetAttackRange() * 0.95 then
					ExecuteOrderFromTable({
						UnitIndex = entity:entindex(),
						OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
						Position = entity:GetAbsOrigin() + CalculateDirection(target, entity) * math.min(entity:GetIdealSpeed() * AI_THINK_RATE, CalculateDistance(target, entity) - entity:GetAttackRange() * 0.95)
					})
				elseif RollPercentage(20 * (AICore:BeingAttacked( entity ) + 1) ) then
					AICore:BeAHugeCoward( entity, 300 )
				elseif RollPercentage(20) then
					AICore:RunToRandomPosition( entity, 100, true )
				end
				return AI_THINK_RATE
			elseif entity:CanEntityBeSeenByMyTeam(target) and not entity:IsAttackingEntity( target ) then
				ExecuteOrderFromTable({
					UnitIndex = entity:entindex(),
					OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
					TargetIndex = target:entindex()
				})
			end
			return ( ( entity:GetAttackAnimationPoint() / entity:GetAttackSpeed( ) ) + 0.1 ) + AI_THINK_RATE
		else
			AICore:RunToRandomPosition( entity, 100, true )
			return AI_THINK_RATE
		end
	end
end


function AICore:IsNearEnemyUnit(entity, radius)
	local iFlag = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	local units = FindUnitsInRadius(entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, radius, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, iFlag, 0, false)
	return (#units > 0)
end

function AICore:BeAHugeCoward( entity, runbuffer )
	local nearest = AICore:NearestEnemyHeroInRange( entity, 99999, true )
	local position
	if nearest and not entity:GetTauntTarget() then
		local direction = (nearest:GetAbsOrigin()-entity:GetAbsOrigin()):Normalized()
		local distance = (nearest:GetAbsOrigin()-entity:GetAbsOrigin()):Length2D()
		position = entity:GetAbsOrigin() + (-direction)*entity:GetIdealSpeed() * 0.5
		if distance < runbuffer then
			if not GridNav:CanFindPath( entity:GetAbsOrigin(), position ) then
				position = entity:GetAbsOrigin() + (direction)*entity:GetIdealSpeed() * 2
			end
			if not GridNav:CanFindPath( entity:GetAbsOrigin(), position ) then
				position = entity:GetAbsOrigin() + RandomVector( 400 )
			end
			ExecuteOrderFromTable({
				UnitIndex = entity:entindex(),
				OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
				Position = position
			})
		end
	elseif entity:GetTauntTarget() then
		position = entity:GetTauntTarget():GetAbsOrigin()
		ExecuteOrderFromTable({
			UnitIndex = entity:entindex(),
			OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
			TargetIndex = entity:GetTauntTarget():entindex()
		})
	else
		position = entity:GetAbsOrigin() + RandomVector( entity:GetIdealSpeed() * 0.5 )
		ExecuteOrderFromTable({
			UnitIndex = entity:entindex(),
			OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
			Position = position
		})
	end
	return position
end

function AICore:RunToRandomPosition( entity, spasticness, bAggro )
	local position = entity:GetAbsOrigin() + RandomVector( entity:GetIdealSpeed() * 1.5 )
	local order = DOTA_UNIT_ORDER_MOVE_TO_POSITION
	if bAggro then order = DOTA_UNIT_ORDER_ATTACK_MOVE end
	if RollPercentage(spasticness) and not entity:GetTauntTarget() then
		ExecuteOrderFromTable({
			UnitIndex = entity:entindex(),
			OrderType = order,
			Position = position
		})
	elseif entity:GetTauntTarget() then
		ExecuteOrderFromTable({
			UnitIndex = entity:entindex(),
			OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
			TargetIndex = entity:GetTauntTarget():entindex()
		})
	end
end

function AICore:RunToTarget( entity, target )
	if not entity or (not target and not entity:GetTauntTarget()) then 
		return 0.5 
	elseif entity:GetTauntTarget() then
		ExecuteOrderFromTable({
			UnitIndex = entity:entindex(),
			OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
			TargetIndex = entity:GetTauntTarget():entindex()
		})
		return 0.25
	end
	local position = target:GetAbsOrigin()
	ExecuteOrderFromTable({
		UnitIndex = entity:entindex(),
		OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
		Position = position
	})
end

function AICore:FarthestEnemyHeroInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local minRange = nil
	local target = nil
	
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and (minRange == nil or distanceToEnemy > minRange) and distanceToEnemy < range then
			minRange = distanceToEnemy
			target = enemy
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:NearestDisabledEnemyHeroInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local minRange = range
	local target = nil
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and distanceToEnemy < minRange and enemy:IsDisabled() then
			minRange = distanceToEnemy
			target = enemy
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:TotalEnemyHeroesInRange( entity, range)
	local flags = DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES + DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local count = 0
	
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and distanceToEnemy < range then
			count = count + 1
		end
	end
	return count
end

function AICore:OptimalHitPosition(entity, range, radius, magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range + radius, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local initTarget = entity:GetTauntTarget() or AICore:HighestThreatHeroInRange(entity, range + radius, 0, (magic_immune or false) )
	
	
	local meanPos
	if initTarget then meanPos = initTarget:GetAbsOrigin() end
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = CalculateDistance(enemy, entity)
		if not meanPos then withinRadius = 0
		else withinRadius = CalculateDistance(meanPos, enemy) end
		if enemy:IsAlive() and distanceToEnemy < range + radius and withinRadius < 2 * radius and not (enemy == initTarget) then
			if not meanPos then meanPos = enemy:GetAbsOrigin()
			elseif CalculateDistance(meanPos, entity) > range then meanPos = entity:GetAbsOrigin() + CalculateDirection(meanPos, entity) * range
			meanPos = (meanPos + enemy:GetAbsOrigin())/2 end
		end
	end
	if entity:GetTauntTarget() then meanPos = entity:GetTauntTarget():GetAbsOrigin() end
	return meanPos
end

function AICore:FindFarthestEnemyInLine(entity, range, width, magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local enemies = FindUnitsInLine(entity:GetTeamNumber(), entity:GetAbsOrigin(),  entity:GetAbsOrigin() + entity:GetForwardVector()*range, nil, width, DOTA_UNIT_TARGET_TEAM_ENEMY,DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags)
	local distance = 0
	local target
	for _, enemy in ipairs(enemies) do
		if CalculateDistance(enemy, entity) > distance then
			distance = CalculateDistance(enemy, entity)
			target = enemy 
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:FindNearestEnemyInLine(entity, range, width, magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local enemies = FindUnitsInLine(entity:GetTeamNumber(), entity:GetAbsOrigin(),  entity:GetAbsOrigin() + entity:GetForwardVector()*(range + width), nil, width, DOTA_UNIT_TARGET_TEAM_ENEMY,DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags)
	local distance = 99999
	local target
	for _, enemy in ipairs(enemies) do
		if CalculateDistance(enemy, entity) < distance then
			distance = CalculateDistance(enemy, entity)
			target = enemy 
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:TotalNotDisabledEnemyHeroesInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local count = 0
	
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and distanceToEnemy < range and not enemy:IsDisabled() then
			count = count + 1
		end
	end
	return count
end

function AICore:TotalUnitsInRange( entity, range )
	
	local flags = DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_BOTH, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	
	local count = 0
	
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and distanceToEnemy < range then
			count = count + 1
		end
	end
	return count
end

function AICore:TotalAlliedUnitsInRange( entity, range	)
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_FRIENDLY, DOTA_UNIT_TARGET_ALL, 0, 0, false )
	
	local count = 0
	
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if enemy:IsAlive() and distanceToEnemy < range then
			count = count + 1
		end
	end
	return count
end

function AICore:AlliedUnitsAlive( entity )
	local allies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, 99999, DOTA_UNIT_TARGET_TEAM_FRIENDLY, DOTA_UNIT_TARGET_ALL, 0, 0, false )
	
	local count = 0
	
	for _,ally in pairs(allies) do
		if ally:IsAlive() and ally ~= entity then
			count = count + 1
		end
	end
	return count
end

function AICore:WeakestAlliedUnitInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local allies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_FRIENDLY, DOTA_UNIT_TARGET_ALL, flags, 0, false )

	local minHP = nil
	local target = nil

	for _,ally in pairs(allies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - ally:GetAbsOrigin()):Length2D()
		local HP = ally:GetHealth()
		if ally:IsAlive() and (minHP == nil or HP < minHP) and distanceToEnemy < range then
			minHP = HP
			target = ally
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:SpecificAlliedUnitsInRange( entity, name, range )
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_FRIENDLY, DOTA_UNIT_TARGET_ALL, 0, 0, false )
	
	for _,enemy in pairs(enemies) do
		if enemy:IsAlive() and enemy ~= entity and (enemy:GetUnitName() == name or enemy:GetName() == name or enemy:GetUnitLabel() == name) then
			return true
		end
	end
	return false
end

function AICore:SpecificAlliedUnitsAlive( entity, name )
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, 99999, DOTA_UNIT_TARGET_TEAM_FRIENDLY, DOTA_UNIT_TARGET_ALL, 0, 0, false )
	
	local count = 0
	
	for _,enemy in pairs(enemies) do
		if enemy:IsAlive() and enemy ~= entity and (enemy:GetUnitName() == name or enemy:GetName() == name or enemy:GetUnitLabel() == name) then
			count = count + 1
		end
	end
	return count
end

function AICore:EnemiesInLine(entity, range, width, magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local enemies = FindUnitsInLine(entity:GetTeamNumber(), entity:GetAbsOrigin(),  entity:GetAbsOrigin() + entity:GetForwardVector()*range, nil, width, DOTA_UNIT_TARGET_TEAM_ENEMY,DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags)
	if #enemies > 0 then
		if entity:GetTauntTarget() then
			return HasValInTable(enemies, entity:GetTauntTarget())
		end
		return true
	else
		return false
	end
end

function AICore:NumEnemiesInLine(entity, range, width, magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local enemies = FindUnitsInLine(entity:GetTeamNumber(), entity:GetAbsOrigin(),  entity:GetAbsOrigin() + entity:GetForwardVector()*range, nil, width, DOTA_UNIT_TARGET_TEAM_ENEMY,DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags)
	return #enemies
end

function AICore:WeakestEnemyHeroInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )

	local minHP = nil
	local target = nil

	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		local HP = enemy:GetHealth()
		if enemy:IsAlive() and (minHP == nil or HP < minHP) and distanceToEnemy < range then
			minHP = HP
			target = enemy
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:StrongestEnemyHeroInRange( entity, range , magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
	local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )

	local minHP = nil
	local target = nil

	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		local HP = enemy:GetHealth()
		if enemy:IsAlive() and (minHP == nil or HP > minHP) and distanceToEnemy < range then
			minHP = HP
			target = enemy
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:HighestThreatHeroInRange(entity, range, basethreat, magic_immune)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	if entity:GetTauntTarget() then return entity:GetTauntTarget() end
    local enemies = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, range, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )

	local target = nil
	local minThreat = basethreat
	for _,enemy in pairs(enemies) do
		local distanceToEnemy = (entity:GetAbsOrigin() - enemy:GetAbsOrigin()):Length2D()
		if not enemy.threat then enemy.threat = 0 end
		local threat = enemy.threat
		if enemy:IsAlive() and (minThreat == nil or threat > minThreat) and distanceToEnemy < range then
			minThreat = threat
			target = enemy
		end
	end
	if entity:GetTauntTarget() then 
		target = entity:GetTauntTarget()
	end
	return target
end

function AICore:CreateBehaviorSystem( behaviors )
	local BehaviorSystem = {}

	BehaviorSystem.possibleBehaviors = behaviors
	BehaviorSystem.thinkDuration = 1.0
	BehaviorSystem.repeatedlyIssueOrders = true -- if you're paranoid about dropped orders, leave this true

	BehaviorSystem.currentBehavior =
	{
		endTime = 0,
		order = { OrderType = DOTA_UNIT_ORDER_NONE }
	}

	function BehaviorSystem:Think()
		if GameRules:GetGameTime() >= self.currentBehavior.endTime then
			local newBehavior = self:ChooseNextBehavior()
			if newBehavior == nil then 
				-- Do nothing here... this covers possible problems with ChooseNextBehavior
			elseif newBehavior == self.currentBehavior then
				self.currentBehavior:Continue()
			else
				if self.currentBehavior.End then self.currentBehavior:End() end
				self.currentBehavior = newBehavior
				self.currentBehavior:Begin()
			end
		end

		if self.currentBehavior.order and self.currentBehavior.order.OrderType ~= DOTA_UNIT_ORDER_NONE then
			if self.repeatedlyIssueOrders or
				self.previousOrderType ~= self.currentBehavior.order.OrderType or
				self.previousOrderTarget ~= self.currentBehavior.order.TargetIndex or
				self.previousOrderPosition ~= self.currentBehavior.order.Position then

				-- Keep sending the order repeatedly, in case we forgot >.<
				ExecuteOrderFromTable( self.currentBehavior.order )
				self.previousOrderType = self.currentBehavior.order.OrderType
				self.previousOrderTarget = self.currentBehavior.order.TargetIndex
				self.previousOrderPosition = self.currentBehavior.order.Position
			end
		end

		if self.currentBehavior.Think then self.currentBehavior:Think(self.thinkDuration) end

		return self.thinkDuration
	end

	function BehaviorSystem:ChooseNextBehavior()
		local result = nil
		local bestDesire = nil
		for _,behavior in pairs( self.possibleBehaviors ) do
			local thisDesire = behavior:Evaluate()
			if bestDesire == nil or thisDesire > bestDesire then
				result = behavior
				bestDesire = thisDesire
			end
		end

		return result
	end

	function BehaviorSystem:Deactivate()
		print("End")
		if self.currentBehavior.End then self.currentBehavior:End() end
	end

	return BehaviorSystem
end

---
---

function CDOTA_BaseNPC:GetAIBehavior()
	self.AIbehavior = self.AIbehavior or RandomInt(1,3)
	return self.AIbehavior
end--[[
Broodking AI
]]

if IsServer() then
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.flock = thisEntity:FindAbilityByName("boss16_the_flock")
		thisEntity.conflag = thisEntity:FindAbilityByName("boss16_conflagration")
		thisEntity.dragonfire = thisEntity:FindAbilityByName("boss16_dragonfire")
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.flock:SetLevel(1)
			thisEntity.conflag:SetLevel(3)
			thisEntity.dragonfire:SetLevel(3)
		else
			thisEntity.flock:SetLevel(2)
			thisEntity.conflag:SetLevel(4)
			thisEntity.dragonfire:SetLevel(4)
		end
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target then
				if thisEntity.flock:IsFullyCastable() then
					local noDrakes = (thisEntity.flock:GetDrakeCount() == 0)
					local reachedHPThreshold1 = (thisEntity:GetHealthPercent() < 66 and not thisEntity.reachedFirstThreshold)
					local reachedHPThreshold2 = (thisEntity:GetHealthPercent() < 33 and not thisEntity.reachedSecondThreshold)
					if reachedHPThreshold1 and not thisEntity.reachedFirstThreshold then thisEntity.reachedFirstThreshold = true end
					if reachedHPThreshold2 and not thisEntity.reachedSecondThreshold then thisEntity.reachedSecondThreshold = true end
					if noDrakes or reachedHPThreshold1 or reachedHPThreshold2 then
						ExecuteOrderFromTable({
							UnitIndex = thisEntity:entindex(),
							OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
							AbilityIndex = thisEntity.flock:entindex()
						})
						return thisEntity.flock:GetCastPoint() + 0.1
					end
				end
				if thisEntity.conflag:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.conflag:entindex()
					})
					return thisEntity.conflag:GetCastPoint() + 0.1
				end
				if thisEntity.dragonfire:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.dragonfire:entindex()
					})
					return thisEntity.dragonfire:GetCastPoint() + 0.1
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return 0.25 end
	end
end--[[
Green Dragon
]]

if IsServer() then
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity:SetContextThink( "AIThinker", AIThink, AI_THINK_RATE )
		thisEntity.toxic_pool = thisEntity:FindAbilityByName("green_dragon_toxic_pool")
		thisEntity.rot = thisEntity:FindAbilityByName("green_dragon_rot")
		thisEntity.armor = thisEntity:FindAbilityByName("green_dragon_etheral_armor")
		thisEntity.volatile_rot = thisEntity:FindAbilityByName("green_dragon_volatile_rot")
		
		
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then
			thisEntity.toxic_pool:SetLevel(1)
			thisEntity.armor:SetLevel(1)
			thisEntity.volatile_rot:SetLevel(1)
			thisEntity.rot:SetLevel(1)
		else
			thisEntity.toxic_pool:SetLevel(2)
			thisEntity.armor:SetLevel(2)
			thisEntity.volatile_rot:SetLevel(2)
			thisEntity.rot:SetLevel(2)
		end
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() and not thisEntity:HasModifier("modifier_green_dragon_etheral_armor") then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target then
				if thisEntity.toxic_pool:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.toxic_pool:entindex()
					})
					return thisEntity.toxic_pool:GetCastPoint() + 0.1
				end
				if thisEntity.volatile_rot:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.volatile_rot:entindex()
					})
					return thisEntity.volatile_rot:GetCastPoint() + 0.1
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
end--[[
Broodking AI
]]

if IsServer() then
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity.heal = thisEntity:FindAbilityByName("boss16m_heal_aura")
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.heal:SetLevel(1)
		else
			thisEntity.heal:SetLevel(2)
		end
	end


	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target then
				if thisEntity.conflag and thisEntity.conflag:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.conflag:entindex()
					})
					return thisEntity.conflag:GetCastPoint() + 0.1
				end
				if thisEntity.dragonfire and thisEntity.dragonfire:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
						Position = target:GetAbsOrigin(),
						AbilityIndex = thisEntity.dragonfire:entindex()
					})
					return thisEntity.dragonfire:GetCastPoint() + 0.1
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return AI_THINK_RATE end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.core = thisEntity:FindAbilityByName("boss_durva_gorged_core")
	thisEntity.soul = thisEntity:FindAbilityByName("boss_durva_soul_barrier")
	thisEntity.link = thisEntity:FindAbilityByName("boss_durva_all_is_linked")
	
	thisEntity.consume = thisEntity:FindAbilityByName("boss_durva_consume_soul")
	thisEntity.feast = thisEntity:FindAbilityByName("boss_durva_feast_on_their_eyes")
	thisEntity.purgatory = thisEntity:FindAbilityByName("boss_durva_purgatory")
	thisEntity.burst = thisEntity:FindAbilityByName("boss_durva_filled_to_burst")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.core:SetLevel(1)
			thisEntity.soul:SetLevel(1)
			thisEntity.link:SetLevel(1)
			
			thisEntity.consume:SetLevel(1)
			thisEntity.feast:SetLevel(1)
			thisEntity.purgatory:SetLevel(1)
			thisEntity.burst:SetLevel(1)
		else
			thisEntity.core:SetLevel(2)
			thisEntity.soul:SetLevel(2)
			thisEntity.link:SetLevel(2)
			
			thisEntity.consume:SetLevel(2)
			thisEntity.feast:SetLevel(2)
			thisEntity.purgatory:SetLevel(2)
			thisEntity.burst:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.consume:IsFullyCastable() and target then
			return CastConsume( target:GetAbsOrigin() )
		end
		if thisEntity.feast:IsFullyCastable() and AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.feast:GetTrueCastRange(), true ) then
			return CastFeast()
		end
		if thisEntity.purgatory:IsFullyCastable() and AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.purgatory:GetTrueCastRange() ) then
			return CastPurgatory( AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.purgatory:GetTrueCastRange() ) )
		end
		if thisEntity.burst:IsFullyCastable() and AICore:RandomEnemyHeroInRange( thisEntity, 800, true ) then
			return CastBurst()
		end
		return AICore:AttackHighestPriority( thisEntity )
	else 
		return AI_THINK_RATE 
	end
end

function CastConsume(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.consume:entindex()
	})
	return thisEntity.consume:GetCastPoint() + 0.1
end

function CastFeast()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.feast:entindex()
	})
	return thisEntity.feast:GetCastPoint() + 0.1
end

function CastPurgatory(target)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.purgatory:entindex()
	})
	return thisEntity.purgatory:GetCastPoint() + 0.1
end

function CastBurst()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.burst:entindex()
	})
	return thisEntity.burst:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.aura = thisEntity:FindAbilityByName("fallen_one_aura_of_war")
	thisEntity.debilitate = thisEntity:FindAbilityByName("fallen_one_debilitate")
	thisEntity.fade = thisEntity:FindAbilityByName("fallen_one_fade_out")
	thisEntity.bolt = thisEntity:FindAbilityByName("fallen_one_sinister_bolt")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.aura:SetLevel(1)
			thisEntity.debilitate:SetLevel(1)
			thisEntity.fade:SetLevel(1)
			thisEntity.bolt:SetLevel(1)
		else
			thisEntity.aura:SetLevel(2)
			thisEntity.fade:SetLevel(2)
			thisEntity.bolt:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.fade:IsFullyCastable() and ( AICore:BeingAttacked( thisEntity ) > 0 or RollPercentage( 25 ) ) then
			local illTarget = AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.fade:GetTrueCastRange() + thisEntity:GetIdealSpeed() , true ) or target
			if illTarget then
				return CastFadeout(illTarget, thisEntity)
			end
		end
		if thisEntity.bolt:IsFullyCastable() and target and RollPercentage(50) then
			return CastSinisterBolt(target:GetAbsOrigin(), thisEntity)
		end
		if thisEntity.debilitate:IsFullyCastable() and target and RollPercentage(50) then
			return CastDebilitate(target:GetAbsOrigin(), thisEntity)
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastFadeout(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.fade:entindex()
	})
	return thisEntity.fade:GetCastPoint() + 0.1
end

function CastSinisterBolt(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.bolt:entindex()
	})
	return thisEntity.bolt:GetCastPoint() + 0.1
end

function CastDebilitate(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.debilitate:entindex()
	})
	return thisEntity.debilitate:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

-- GENERIC AI FOR SIMPLE CHASE ATTACKERS

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	
	thisEntity.meat = thisEntity:FindAbilityByName("boss_flesh_behemoth_meat_pile")
	thisEntity.decay = thisEntity:FindAbilityByName("boss_flesh_behemoth_decay")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.meat:SetLevel(1)
			thisEntity.decay:SetLevel(1)
		else
			thisEntity.meat:SetLevel(2)
			thisEntity.decay:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if thisEntity and not thisEntity:IsNull() then
		if not thisEntity:IsDominated() then
			if thisEntity.decay:IsFullyCastable() and AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.decay:GetTrueCastRange()) then
				local position = AICore:OptimalHitPosition( thisEntity, thisEntity.decay:GetTrueCastRange(), thisEntity.decay:GetSpecialValueFor("radius") * 1.25 )
				return CastDecay(thisEntity, position)
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return 1 end
	end
end

function CastDecay(thisEntity, position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.decay:entindex()
	})
	return thisEntity.decay:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

-- GENERIC AI FOR SIMPLE CHASE ATTACKERS

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
end


function AIThink(thisEntity)
	if thisEntity and not thisEntity:IsNull() then
		if not thisEntity:IsDominated() then
			return AICore:AttackHighestPriority( thisEntity )
		else return 1 end
	end
end--[[
Broodking AI
]]

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.reconstruction = thisEntity:FindAbilityByName("boss_genesis_reconstruction")
	thisEntity.deconstruction = thisEntity:FindAbilityByName("boss_genesis_deconstruction")
	thisEntity.pacifism = thisEntity:FindAbilityByName("boss_genesis_pacifism")
	
	thisEntity.crumple = thisEntity:FindAbilityByName("boss_genesis_crumple")
	thisEntity.purify = thisEntity:FindAbilityByName("boss_genesis_purify")
	thisEntity.resolve = thisEntity:FindAbilityByName("boss_genesis_strengthen_resolve")
	thisEntity.tolife = thisEntity:FindAbilityByName("boss_genesis_return_to_life")
	thisEntity.sanctuary = thisEntity:FindAbilityByName("boss_genesis_sanctuary")
	thisEntity.dominion = thisEntity:FindAbilityByName("boss_genesis_dominion")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.reconstruction:SetLevel(1)
			thisEntity.deconstruction:SetLevel(1)
			thisEntity.pacifism:SetLevel(1)
			
			thisEntity.crumple:SetLevel(1)
			thisEntity.purify:SetLevel(1)
			thisEntity.resolve:SetLevel(1)
			thisEntity.sanctuary:SetLevel(1)
			thisEntity.dominion:SetLevel(1)
		else
			thisEntity.reconstruction:SetLevel(2)
			thisEntity.deconstruction:SetLevel(2)
			thisEntity.pacifism:SetLevel(2)
			
			thisEntity.crumple:SetLevel(2)
			thisEntity.purify:SetLevel(2)
			thisEntity.resolve:SetLevel(2)
			thisEntity.sanctuary:SetLevel(2)
			thisEntity.dominion:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.crumple:IsFullyCastable() then
			if not target or thisEntity.crumple:GetTrueCastRange() < CalculateDistance( target, thisEntity ) then
				local nearest = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.crumple:GetTrueCastRange() + thisEntity:GetIdealSpeed(), false)
				if nearest then
					return CastCrumple(nearest:GetAbsOrigin(), thisEntity)
				end
			elseif target then
				return CastCrumple(target:GetAbsOrigin(), thisEntity)
			end
		end
		if thisEntity.purify:IsFullyCastable() and RollPercentage(50) then
			local randomTarget = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.purify:GetTrueCastRange() )
			if randomTarget then
				return CastPurify(randomTarget, thisEntity)
			elseif target then
				return CastPurify(target, thisEntity)
			end
		end
		if thisEntity.resolve:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.deconstruction:GetSpecialValueFor("radius") ) > 0 then
			return CastResolve(thisEntity)
		end
		if thisEntity.tolife:IsFullyCastable() then
			return CastReturn(thisEntity)
		end
		if thisEntity.sanctuary:IsFullyCastable() 
		and ( AICore:TotalEnemyHeroesInRange( thisEntity, 1200 ) > 1 
		or ( AICore:TotalEnemyHeroesInRange( thisEntity, 1200 ) > 0 
		and RollPercentage(20) ) )
		and not thisEntity:HasModifier("modifier_boss_genesis_dominion") then
			return CastSanctuary(thisEntity)
		end
		if thisEntity.dominion:IsFullyCastable() 
		and ( AICore:BeingAttacked( thisEntity ) > 1 ) 
		and not thisEntity:HasModifier("modifier_boss_genesis_sanctuary") then
			return CastDominion(thisEntity)
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastPurify(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.purify:entindex()
	})
	return thisEntity.purify:GetCastPoint() + 0.1
end

function CastCrumple(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.crumple:entindex()
	})
	return thisEntity.crumple:GetCastPoint() + 0.1
end

function CastResolve(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.resolve:entindex()
	})
	return thisEntity.resolve:GetCastPoint() + 0.1
end

function CastReturn(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.tolife:entindex()
	})
	return thisEntity.tolife:GetCastPoint() + 0.1
end

function CastSanctuary(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.sanctuary:entindex()
	})
	return thisEntity.sanctuary:GetCastPoint() + 0.1
end

function CastDominion(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.dominion:entindex()
	})
	return thisEntity.dominion:GetCastPoint() + 0.1
end--[[
Broodking AI
]]
function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.split = thisEntity:FindAbilityByName("boss_golem_split")
	thisEntity.mass = thisEntity:FindAbilityByName("boss_golem_cracked_mass")

	thisEntity.toss = thisEntity:FindAbilityByName("boss_golem_golem_toss")
	thisEntity.leap = thisEntity:FindAbilityByName("boss_golem_golem_leap")
	thisEntity.smash = thisEntity:FindAbilityByName("boss_golem_golem_smash")
	
	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.split:SetLevel(1)
			thisEntity.mass:SetLevel(1)
			
			thisEntity.toss:SetLevel(1)
			thisEntity.leap:SetLevel(1)
			thisEntity.smash:SetLevel(1)
		else
			thisEntity.split:SetLevel(2)
			thisEntity.mass:SetLevel(2)
			
			thisEntity.toss:SetLevel(2)
			thisEntity.leap:SetLevel(2)
			thisEntity.smash:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if thisEntity and not thisEntity:IsNull() then
		if not thisEntity:IsDominated() then
			local target = AICore:GetHighestPriorityTarget( thisEntity )
			if thisEntity.smash:IsFullyCastable() and AICore:TotalEnemyHeroesInRange( thisEntity, thisEntity.smash:GetTrueCastRange() * 0.75 ) >= 1 then
				return Smash()
			end
			if target then
				if thisEntity.leap:IsFullyCastable() then
					if CalculateDistance(target, thisEntity) > thisEntity:GetAttackRange() then
						if CalculateDistance(target, thisEntity) > thisEntity.leap:GetTrueCastRange() then
							if RollPercentage(50) then
								return Leap( thisEntity:GetAbsOrigin() + CalculateDirection(target, thisEntity) * thisEntity.leap:GetTrueCastRange() )
							else
								local nearest = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.leap:GetTrueCastRange() , true )
								if nearest then
									return Leap( nearest:GetAbsOrigin() )
								end
							end
						end
					elseif RollPercentage(50) then
						local weakest = AICore:WeakestEnemyHeroInRange( thisEntity, thisEntity.leap:GetTrueCastRange() , true )
						if weakest then
							return Leap( weakest:GetAbsOrigin() )
						end
						local nearest = AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.leap:GetTrueCastRange() , true )
						if nearest then
							return Leap( nearest:GetAbsOrigin() )
						end
					end
				end
				if thisEntity.toss:IsFullyCastable() then
					local tossTarget = target
					if RollPercentage(33) then
						local tossTarget = AICore:MostDamageEnemyHeroInRange( thisEntity, -1, true)
					elseif RollPercentage(33) then
						local tossTarget = AICore:WeakestEnemyHeroInRange( thisEntity, -1, true)
					elseif RollPercentage(33) then
						local tossTarget = AICore:NearestEnemyHeroInRange( thisEntity, -1, true)
					end
					if tossTarget then
						if CalculateDistance( tossTarget, thisEntity ) > thisEntity.toss:GetTrueCastRange() then
							return TossGolem( thisEntity:GetAbsOrigin() + CalculateDirection(tossTarget, thisEntity) * thisEntity.toss:GetTrueCastRange())
						else
							return TossGolem( tossTarget:GetAbsOrigin() )
						end
					end
				end
				
				return AICore:AttackHighestPriority( thisEntity )
			end
			return AI_THINK_RATE
		else return AI_THINK_RATE end
	end
end

function TossGolem(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.toss:entindex()
	})
	return thisEntity.toss:GetCastPoint() + 0.1
end

function Leap(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.leap:entindex()
	})
	return thisEntity.leap:GetCastPoint() + 0.1
end

function Smash()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.smash:entindex()
	})
	return thisEntity.smash:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.call = thisEntity:FindAbilityByName("boss_greymane_call_of_the_alpha")
	thisEntity.leader = thisEntity:FindAbilityByName("boss_greymane_leaders_inspiration")
	
	thisEntity.swipe = thisEntity:FindAbilityByName("boss_greymane_furious_swipe")
	thisEntity.pounce = thisEntity:FindAbilityByName("boss_greymane_pounce")
	thisEntity.cry = thisEntity:FindAbilityByName("boss_greymane_battle_cry")
	thisEntity.blows = thisEntity:FindAbilityByName("boss_greymane_frenzied_blows")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.call:SetLevel(1)
			thisEntity.leader:SetLevel(1)
			
			thisEntity.swipe:SetLevel(1)
			thisEntity.pounce:SetLevel(1)
			thisEntity.cry:SetLevel(1)
			thisEntity.blows:SetLevel(1)
		else
			thisEntity.call:SetLevel(2)
			thisEntity.leader:SetLevel(2)
			
			thisEntity.swipe:SetLevel(2)
			thisEntity.pounce:SetLevel(2)
			thisEntity.cry:SetLevel(2)
			thisEntity.blows:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.cry:IsFullyCastable() then
			return CastCry( thisEntity )
		end
		if thisEntity.swipe:IsFullyCastable() then
			if target and CalculateDistance( target, thisEntity) <= thisEntity.swipe:GetTrueCastRange() * 1.5 then
				return CastSwipe( target:GetAbsOrigin(), thisEntity )
			else
				local randomTarget = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.swipe:GetTrueCastRange() * 1.5 )
				if randomTarget then
					return CastSwipe( randomTarget:GetAbsOrigin(), thisEntity )
				end
			end
		end
		if thisEntity.pounce:IsFullyCastable() and target then
			return CastPounce( target:GetAbsOrigin(), thisEntity )
		end
		if thisEntity.blows:IsFullyCastable() and target then
			return CastBlows( target:GetAbsOrigin(), thisEntity )
		end
		return AICore:AttackHighestPriority( thisEntity )
	else 
		return AI_THINK_RATE 
	end
end

function CastSwipe(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.swipe:entindex()
	})
	return thisEntity.swipe:GetCastPoint() + 0.1
end

function CastPounce(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.pounce:entindex()
	})
	return thisEntity.pounce:GetCastPoint() + 0.1
end

function CastCry(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.cry:entindex()
	})
	return thisEntity.cry:GetCastPoint() + 0.1
end

function CastBlows(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.blows:entindex()
	})
	return thisEntity.blows:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.ankle = thisEntity:FindAbilityByName("boss26b_ankle_biter")
	thisEntity.wound = thisEntity:FindAbilityByName("boss26b_wound")
	
	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) <= 2 then
			thisEntity.ankle:SetLevel(1)
			thisEntity.wound:SetLevel(1)
		else
			thisEntity.ankle:SetLevel(2)
			thisEntity.wound:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = thisEntity:GetTauntTarget() or FindMarkedTarget(thisEntity) or AttackingMaster(thisEntity) or AICore:GetHighestPriorityTarget(thisEntity)
		if target and thisEntity.ankle:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
				TargetIndex = target:entindex(),
				AbilityIndex = thisEntity.ankle:entindex()
			})
			return thisEntity.ankle:GetCastPoint() + 0.1
		end
		
		if target then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_ATTACK_TARGET,
				TargetIndex = target:entindex(),
			})
			return thisEntity:GetCastPoint(true) + 0.1
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return 0.25 end
end


function FindMarkedTarget(entity)
	local flags = DOTA_UNIT_TARGET_FLAG_FOW_VISIBLE + DOTA_UNIT_TARGET_FLAG_NO_INVIS
	if magic_immune then
		flags = flags + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES
	end
	local targets = FindUnitsInRadius( entity:GetTeamNumber(), entity:GetAbsOrigin(), nil, -1, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, flags, 0, false )
	for _, target in ipairs(targets) do
		if target:HasModifier("modifier_boss27_kill_them_debuff") then return target end
	end
	return nil
end

function AttackingMaster(entity)
	if entity.bearMaster then
		local attackers = AICore:BeingAttackedBy( entity.bearMaster )
		for _, attacker in ipairs(attackers) do
			return attacker
		end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

-- GENERIC AI FOR SIMPLE CHASE ATTACKERS

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	
	thisEntity.cold = thisEntity:FindAbilityByName("boss_phantom_cold_touch")
	thisEntity.wail = thisEntity:FindAbilityByName("boss_phantom_banshee_wail")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.cold:SetLevel(1)
			thisEntity.wail:SetLevel(1)
		else
			thisEntity.cold:SetLevel(2)
			thisEntity.wail:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if thisEntity and not thisEntity:IsNull() then
		if not thisEntity:IsDominated() then
			if thisEntity.wail:IsFullyCastable() and AICore:NearestEnemyHeroInRange( thisEntity, thisEntity.wail:GetSpecialValueFor("radius")) then
				return CastWail(thisEntity)
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return 1 end
	end
end

function CastWail(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.wail:entindex()
	})
	return thisEntity.wail:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.shock = thisEntity:FindAbilityByName("satyr_champion_shockwave")
	thisEntity.combust = thisEntity:FindAbilityByName("satyr_champion_mana_combustion")
	thisEntity.occult = thisEntity:FindAbilityByName("satyr_champion_occult_aura")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.shock:SetLevel(1)
			thisEntity.combust:SetLevel(1)
			thisEntity.occult:SetLevel(1)
		else
			thisEntity.shock:SetLevel(2)
			thisEntity.combust:SetLevel(2)
			thisEntity.occult:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.shock:IsFullyCastable() and ( AICore:NumEnemiesInLine(thisEntity, thisEntity.shock:GetSpecialValueFor("distance"), thisEntity.shock:GetSpecialValueFor("width")) >= 2 or (AICore:NumEnemiesInLine(thisEntity, thisEntity.shock:GetSpecialValueFor("distance"), thisEntity.shock:GetSpecialValueFor("width") ) >= 1 and RollPercentage( 25 ) ) ) then
			local sTarget = AICore:FindNearestEnemyInLine(thisEntity, thisEntity.shock:GetSpecialValueFor("distance"), thisEntity.shock:GetSpecialValueFor("width") )
			if sTarget then
				return CastShockwave(sTarget:GetAbsOrigin(), thisEntity)
			end
		end
		if thisEntity.combust:IsFullyCastable()  then
			local position = AICore:OptimalHitPosition( thisEntity, thisEntity.combust:GetTrueCastRange(), thisEntity.combust:GetSpecialValueFor("radius") )
			if position then
				return CastManaCombustion(position, thisEntity)
			elseif target then
				return CastManaCombustion(target:GetAbsOrigin(), thisEntity)
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastShockwave(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.shock:entindex()
	})
	return thisEntity.shock:GetCastPoint() + 0.1
end

function CastManaCombustion(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.combust:entindex()
	})
	return thisEntity.combust:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.lightning = thisEntity:FindAbilityByName("satyr_mage_lightning")
	thisEntity.revitalize = thisEntity:FindAbilityByName("satyr_mage_revitalize")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.lightning:SetLevel(1)
			thisEntity.revitalize:SetLevel(1)
		else
			thisEntity.lightning:SetLevel(2)
			thisEntity.revitalize:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.lightning:IsFullyCastable() then
			local attackT = AICore:RandomEnemyHeroInRange( thisEntity, thisEntity.lightning:GetTrueCastRange() + thisEntity:GetIdealSpeed(), true ) or target
			if attackT then
				return CastLightning(attackT, thisEntity)
			end
		end
		if thisEntity.revitalize:IsFullyCastable() and thisEntity:GetHealthPercent() <= 100 - thisEntity.revitalize:GetSpecialValueFor("heal_pct") then
			return CastRevitalize(thisEntity)
		else
			for _, enemy in ipairs( thisEntity:FindFriendlyUnitsInRadius( thisEntity:GetAbsOrigin(), 2000 ) ) do
				if RollPercentage( math.max( 10 + (100 - enemy:GetHealthPercent() ) - thisEntity.revitalize:GetSpecialValueFor("heal_pct"), 0) ) then
					return CastRevitalize(thisEntity)
				end
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastLightning(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.lightning:entindex()
	})
	return thisEntity.lightning:GetCastPoint() + 0.1
end

function CastRevitalize(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.revitalize:entindex()
	})
	return thisEntity.revitalize:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.tendril = thisEntity:FindAbilityByName("boss_sloth_demon_slime_tendrils")
	thisEntity.hide = thisEntity:FindAbilityByName("boss_sloth_demon_slime_hide")
	thisEntity.trail = thisEntity:FindAbilityByName("boss_sloth_demon_slime_trail")
	thisEntity.cocoon = thisEntity:FindAbilityByName("boss_sloth_demon_slime_cocoon")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.tendril:SetLevel(1)
			thisEntity.hide:SetLevel(1)
			thisEntity.trail:SetLevel(1)
			thisEntity.cocoon:SetLevel(1)
		else
			thisEntity.tendril:SetLevel(2)
			thisEntity.hide:SetLevel(2)
			thisEntity.trail:SetLevel(2)
			thisEntity.cocoon:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.cocoon:IsFullyCastable() and ( AICore:BeingAttacked( thisEntity ) > 2 or thisEntity:GetHealthPercent() < 75 ) then
			return CastCocoon(thisEntity)
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastCocoon(thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.cocoon:entindex()
	})
	return thisEntity.cocoon:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )
function Spawn( entityKeyValues )
	POSITIONS_retreat = Entities:FindAllByName( "path_invader1_*" )
	for k,v in pairs(POSITIONS_retreat) do
		POSITIONS_retreat[k] = v:GetOrigin()
	end
	thisEntity:SetContextThink( "AIThinker", AIThink, 10 )
end


function AIThink()
	local picker = math.random(#POSITIONS_retreat)
	ExecuteOrderFromTable({
			UnitIndex = thisEntity:entindex(),
			OrderType = DOTA_UNIT_ORDER_HOLD_POSITION,
		})
	
	ExecuteOrderFromTable({
			UnitIndex = thisEntity:entindex(),
			OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
			Position = POSITIONS_retreat[picker]
		})
	print(POSITIONS_retreat[picker],picker)
	return 10
endTIMERS_VERSION = "1.05"

--[[
  -- A timer running every second that starts immediately on the next frame, respects pauses
  AITimers:CreateTimer(function()
      print ("Hello. I'm running immediately and then every second thereafter.")
      return 1.0
    end
  )
  -- The same timer as above with a shorthand call 
  AITimers(function()
    print ("Hello. I'm running immediately and then every second thereafter.")
    return 1.0
  end)
  
  -- A timer which calls a function with a table context
  AITimers:CreateTimer(GameMode.someFunction, GameMode)
  -- A timer running every second that starts 5 seconds in the future, respects pauses
  AITimers:CreateTimer(5, function()
      print ("Hello. I'm running 5 seconds after you called me and then every second thereafter.")
      return 1.0
    end
  )
  -- 10 second delayed, run once using gametime (respect pauses)
  AITimers:CreateTimer({
    endTime = 10, -- when this timer should first execute, you can omit this if you want it to run first on the next frame
    callback = function()
      print ("Hello. I'm running 10 seconds after when I was started.")
    end
  })
  -- 10 second delayed, run once regardless of pauses
  AITimers:CreateTimer({
    useGameTime = false,
    endTime = 10, -- when this timer should first execute, you can omit this if you want it to run first on the next frame
    callback = function()
      print ("Hello. I'm running 10 seconds after I was started even if someone paused the game.")
    end
  })
  -- A timer running every second that starts after 2 minutes regardless of pauses
  AITimers:CreateTimer("uniqueTimerString3", {
    useGameTime = false,
    endTime = 120,
    callback = function()
      print ("Hello. I'm running after 2 minutes and then every second thereafter.")
      return 1
    end
  })
  -- A timer using the old style to repeat every second starting 5 seconds ahead
  AITimers:CreateTimer("uniqueTimerString3", {
    useOldStyle = true,
    endTime = GameRules:GetGameTime() + 5,
    callback = function()
      print ("Hello. I'm running after 5 seconds and then every second thereafter.")
      return GameRules:GetGameTime() + 1
    end
  })
]]



TIMERS_THINK = 0.01

if AITimers == nil then
  print ( '[AITimers] creating AITimers' )
  AITimers = {}
  setmetatable(AITimers, {
    __call = function(t, ...)
      return t:CreateTimer(...)
    end
  })
  --AITimers.__index = AITimers
end

function AITimers:start()
  AITimers = self
  self.timers = {}
  
  --local ent = Entities:CreateByClassname("info_target") -- Entities:FindByClassname(nil, 'CWorld')
  local ent = SpawnEntityFromTableSynchronous("info_target", {targetname="ai_thinker"})
  ent:SetThink("Think", self, "timers", TIMERS_THINK)
end

function AITimers:Think()
	--if GameRules:State_Get() >= DOTA_GAMERULES_STATE_POST_GAME then
	--return
	--end
	local AIThink = function(self)
		-- Track game time, since the dt passed in to think is actually wall-clock time not simulation time.
		local now = GameRules:GetGameTime()

		-- Process timers
		for k,v in pairs(AITimers.timers) do
			local bUseGameTime = true
			if v.useGameTime ~= nil and v.useGameTime == false then
			  bUseGameTime = false
			end
			local bOldStyle = false
			if v.useOldStyle ~= nil and v.useOldStyle == true then
			  bOldStyle = true
			end
			
			if not bUseGameTime then
			  now = Time()
			end

			if v.endTime == nil then
			  v.endTime = now
			end
			-- Check if the timer has finished
			if now >= v.endTime then
			  -- Remove from timers list
			  AITimers.timers[k] = nil

			  AITimers.runningTimer = k
			  AITimers.removeSelf = false
			  
			  -- Run the callback
			  local status = true
			  local nextCall
			  if v.context then
				nextCall = v.callback(v.context, v)
			  else
				nextCall = v.callback(v)
			  end

			  AITimers.runningTimer = nil

			  -- Make sure it worked
			  if status then
				-- Check if it needs to loop
				if nextCall and not AITimers.removeSelf then
				  -- Change its end time

				  if bOldStyle then
					v.endTime = v.endTime + nextCall - now
				  else
					v.endTime = v.endTime + nextCall
				  end

				  AITimers.timers[k] = v
				end

				-- Update timer data
				--self:UpdateTimerData()
			  else
				-- Nope, handle the error
				AITimers:HandleEventError('Timer', k, nextCall)
			  end
			end
		end
	end
	status, err, ret = xpcall(AIThink, debug.traceback, self, fPrep )
	if not status then
		print(err)
	end
	return TIMERS_THINK
end

function AITimers:HandleEventError(name, event, err)
  print(err)

  -- Ensure we have data
  name = tostring(name or 'unknown')
  event = tostring(event or 'unknown')
  err = tostring(err or 'unknown')

  -- Tell everyone there was an error
  --Say(nil, name .. ' threw an error on event '..event, false)
  --Say(nil, err, false)

  -- Prevent loop arounds
  if not self.errorHandled then
    -- Store that we handled an error
    self.errorHandled = true
  end
end

function AITimers:CreateTimer(name, args, context)
  if type(name) == "function" then
    if args ~= nil then
      context = args
    end
    args = {callback = name}
    name = DoUniqueString("timer")
  elseif type(name) == "table" then
    args = name
    name = DoUniqueString("timer")
  elseif type(name) == "number" then
    args = {endTime = name, callback = args}
    name = DoUniqueString("timer")
  end
  if not args.callback then
    print("Invalid timer created: "..name)
    return
  end


  local now = GameRules:GetGameTime()
  if args.useGameTime ~= nil and args.useGameTime == false then
    now = Time()
  end

  if args.endTime == nil then
    args.endTime = now
  elseif args.useOldStyle == nil or args.useOldStyle == false then
    args.endTime = now + args.endTime
  end

  args.context = context

  AITimers.timers[name] = args 

  return name
end

function AITimers:RemoveTimer(name)
  AITimers.timers[name] = nil
  if AITimers.runningTimer == name then
    AITimers.removeSelf = true
  end
end

function AITimers:RemoveTimers(killAll)
  local timers = {}
  AITimers.removeSelf = true

  if not killAll then
    for k,v in pairs(AITimers.timers) do
      if v.persist then
        timers[k] = v
      end
    end
  end

  AITimers.timers = timers
end

if not AITimers.timers then AITimers:start() end

GameRules.AITimers = AITimers--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.armor = thisEntity:FindAbilityByName("boss_living_armor")
	thisEntity.summon = thisEntity:FindAbilityByName("creature_summon_tree")
	
	AITimers:CreateTimer(0.1, function() 
		thisEntity.armor:SetLevel( math.min(thisEntity.armor:GetMaxLevel(), math.floor(GameRules:GetGameDifficulty()/4) + RoundManager:GetRaidsFinished() ) )
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		if thisEntity.armor:IsFullyCastable() and not thisEntity:HasModifier("modifier_treant_living_armor") then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
				TargetIndex = thisEntity:entindex(),
				AbilityIndex = thisEntity.armor:entindex()
			})
			return thisEntity.armor:GetCastPoint()
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return AI_THINK_RATE end
end--[[
Troll Warlord Boss
]]

if IsServer() then
	function Spawn( entityKeyValues )
		Timers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)

		thisEntity.axe_fury = thisEntity:FindAbilityByName("boss_troll_warlord_axe_fury")
		if thisEntity.axe_fury then
			thisEntity.axe_fury:SetLevel( math.ceil(GameRules:GetGameDifficulty()/2) )
			--thisEntity.axe_fury:SetCooldown()
		end

		thisEntity.ensare = thisEntity:FindAbilityByName("boss_troll_warlord_ensare")
		if thisEntity.ensare then
			thisEntity.ensare:SetLevel( math.ceil(GameRules:GetGameDifficulty()/2) )
		end

		thisEntity.mystic_axes = thisEntity:FindAbilityByName("boss_troll_warlord_mystic_axes")
		if thisEntity.mystic_axes then
			thisEntity.mystic_axes:SetLevel( math.ceil(GameRules:GetGameDifficulty()/2) )
		end

		thisEntity.enrage = thisEntity:FindAbilityByName("boss_troll_warlord_enrage")
		if thisEntity.enrage then
			thisEntity.enrage:SetLevel( math.ceil(GameRules:GetGameDifficulty()/2) )
		end

		thisEntity.leap = thisEntity:FindAbilityByName("boss_troll_warlord_savage_leap")
		if thisEntity.leap then
			thisEntity.leap:SetLevel( math.ceil(GameRules:GetGameDifficulty()/2) )
		end
	end

	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target then
				if thisEntity.axe_fury and thisEntity.axe_fury:IsFullyCastable() and not thisEntity:HasModifier("modifier_boss_troll_warlord_enrage") then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.axe_fury:entindex()
					})
					return thisEntity.axe_fury:GetCastPoint() + 0.1
				end

				if thisEntity.ensare and thisEntity.ensare:IsFullyCastable() and not thisEntity:HasModifier("modifier_boss_troll_warlord_enrage")then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.ensare:entindex()
					})
					return thisEntity.ensare:GetCastPoint() + 0.1
				end
				if thisEntity.mystic_axes and thisEntity.mystic_axes:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.mystic_axes:entindex()
					})
					return thisEntity.mystic_axes:GetCastPoint() + 0.1
				end

				if thisEntity.leap and thisEntity.leap:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
						TargetIndex = target:entindex(),
						AbilityIndex = thisEntity.leap:entindex()
					})
					return thisEntity.leap:GetCastPoint() + 0.1
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return 0.25 end
	end
end--[[
Troll Warlord Boss Axes
]]

if IsServer() then
	function Spawn( entityKeyValues )
		Timers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)

		thisEntity.charge = thisEntity:FindAbilityByName("boss_troll_warlord_mystic_axes_charge")
		if thisEntity.charge then
			thisEntity.charge:SetLevel( math.ceil(GameRules:GetGameDifficulty() / 2) )
		end

	end

	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:RandomEnemyHeroInRange( thisEntity, 3000, true)
			thisEntity.thinks = (thisEntity.thinks or 0) + 1
			if target then
				if thisEntity.charge and thisEntity.charge:IsFullyCastable() then
					thisEntity:CastAbilityOnTarget(target, thisEntity.charge, -1)
					return 8 / GameRules:GetGameDifficulty()
				end
			end
			return 0.25
		else return 0.25 end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.wild = thisEntity:FindAbilityByName("boss_valgraduth_breath_of_the_wild")
	thisEntity.entangle = thisEntity:FindAbilityByName("boss_valgraduth_entangling_grip")
	
	thisEntity.protect = thisEntity:FindAbilityByName("boss_valgraduth_forests_protection")
	thisEntity.grip = thisEntity:FindAbilityByName("boss_valgraduth_roots_grip")
	thisEntity.spore = thisEntity:FindAbilityByName("boss_valgraduth_bomb_spores")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.wild:SetLevel(1)
			thisEntity.entangle:SetLevel(1)
			
			thisEntity.protect:SetLevel(1)
			thisEntity.grip:SetLevel(1)
			thisEntity.spore:SetLevel(1)
		else
			thisEntity.wild:SetLevel(2)
			thisEntity.entangle:SetLevel(2)
			
			thisEntity.protect:SetLevel(2)
			thisEntity.grip:SetLevel(2)
			thisEntity.spore:SetLevel(2)
		end
	end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.protect:IsFullyCastable() then
			return CastProtect()
		end
		if thisEntity.grip:IsFullyCastable() and ( thisEntity:HasModifier("modifier_boss_valgraduth_bomb_spores_bomb") or RollPercentage(20) or AICore:RandomEnemyHeroInRange( thisEntity, 900 , true ) ) then
			return CastGrip()
		end
		if thisEntity.spore:IsFullyCastable() then
			return CastSpore()
		end
		return AICore:AttackHighestPriority( thisEntity )
	else 
		return AI_THINK_RATE 
	end
end

function CastProtect()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.protect:entindex()
	})
	return thisEntity.protect:GetCastPoint() + 0.1
end

function CastGrip()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.grip:entindex()
	})
	return thisEntity.grip:GetCastPoint() + 0.1
end

function CastSpore()
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
		AbilityIndex = thisEntity.spore:entindex()
	})
	return thisEntity.spore:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.archon = thisEntity:FindAbilityByName("vile_archmage_vile_archon")
	thisEntity.wand = thisEntity:FindAbilityByName("vile_archmage_unstable_wand")
	
	thisEntity.explosion = thisEntity:FindAbilityByName("vile_archmage_vile_explosion")
	thisEntity.blow = thisEntity:FindAbilityByName("vile_archmage_ethereal_blow")
	thisEntity.coil = thisEntity:FindAbilityByName("vile_archmage_runic_coil")

	AITimers:CreateTimer(0.1, function()
		if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
			thisEntity.archon:SetLevel(1)
			thisEntity.wand:SetLevel(1)
			
			thisEntity.explosion:SetLevel(1)
			thisEntity.blow:SetLevel(1)
			thisEntity.coil:SetLevel(1)
		else
			thisEntity.archon:SetLevel(2)
			thisEntity.wand:SetLevel(2)
			
			thisEntity.explosion:SetLevel(2)
			thisEntity.blow:SetLevel(2)
			thisEntity.coil:SetLevel(2)
		end
	end)

end

function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget( thisEntity )
		if thisEntity.blow:IsFullyCastable() then
			local illTarget = AICore:MostDamageEnemyHeroInRange( thisEntity, thisEntity.blow:GetTrueCastRange() + thisEntity:GetIdealSpeed() , true ) or target
			if illTarget then
				return CastEtherealBlow(illTarget, thisEntity)
			end
		end
		if thisEntity.coil:IsFullyCastable() and ( AICore:BeingAttacked( thisEntity ) > 0 or RollPercentage( 25 ) ) then
			local position = thisEntity:GetAbsOrigin() - thisEntity:GetForwardVector() * thisEntity.coil:GetTrueCastRange()
			return CastRunicCoil(position, thisEntity)
		end
		if thisEntity.explosion:IsFullyCastable()  then
			local position = AICore:OptimalHitPosition( thisEntity, thisEntity.explosion:GetTrueCastRange(), thisEntity.explosion:GetSpecialValueFor("radius") )
			if position then
				return CastVileExplosion(position, thisEntity)
			end
		end
		return AICore:AttackHighestPriority( thisEntity )
	else
		return AI_THINK_RATE
	end
end

function CastEtherealBlow(target, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
		TargetIndex = target:entindex(),
		AbilityIndex = thisEntity.blow:entindex()
	})
	return thisEntity.blow:GetCastPoint() + 0.1
end

function CastRunicCoil(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.coil:entindex()
	})
	return thisEntity.coil:GetCastPoint() + 0.1
end

function CastVileExplosion(position, thisEntity)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.explosion:entindex()
	})
	return thisEntity.explosion:GetCastPoint() + 0.1
end--[[
Warlock Boss
]]

if IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity:SetContextThink( "AIThinker", AIThink, 0.25 )

		thisEntity.conflag = thisEntity:FindAbilityByName("boss_warlock_conflagration")
		if thisEntity.conflag then
			thisEntity.conflag:SetLevel(1)
		end

		thisEntity.desecrate = thisEntity:FindAbilityByName("boss_warlock_desecrate")
		if thisEntity.desecrate then
			thisEntity.desecrate:SetLevel(1)
			thisEntity.desecrate:SetCooldown()
		end

		thisEntity.bonds = thisEntity:FindAbilityByName("boss_warlock_fatal_bonds")
		if thisEntity.bonds then
			thisEntity.bonds:SetLevel(1)
		end

		thisEntity.unholy_summon = thisEntity:FindAbilityByName("boss_warlock_unholy_summon")
		if thisEntity.unholy_summon then
			thisEntity.unholy_summon:SetLevel(1)
		end

		thisEntity.ult_form = thisEntity:FindAbilityByName("boss_warlock_ultimate_form")
		if thisEntity.ult_form then
			thisEntity.ult_form:SetLevel(1)
		end

		thisEntity.demon_lust = thisEntity:FindAbilityByName("boss_warlock_demon_lust")
		if thisEntity.demon_lust then
			thisEntity.demon_lust:SetLevel(1)
			thisEntity.demon_lust:SetCooldown()
		end

		thisEntity.rain_of_fire = thisEntity:FindAbilityByName("boss_warlock_rain_of_fire")
		if thisEntity.rain_of_fire then
			thisEntity.rain_of_fire:SetLevel(1)
		end

		thisEntity.inferno_spikes = thisEntity:FindAbilityByName("boss_warlock_inferno_spikes")
		if thisEntity.inferno_spikes then
			thisEntity.inferno_spikes:SetLevel(1)
		end
	end

	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target = AICore:GetHighestPriorityTarget(thisEntity)
			if target then
				if thisEntity.conflag and thisEntity.conflag:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.conflag:entindex()
					})
					return thisEntity.conflag:GetCastPoint() + 0.1
				end

				if thisEntity.desecrate and thisEntity.desecrate:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.desecrate:entindex()
					})
					return thisEntity.desecrate:GetCastPoint() + 0.1					
				end

				if thisEntity.bonds and thisEntity.bonds:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
						TargetIndex = target:entindex(),
						AbilityIndex = thisEntity.bonds:entindex()
					})
					return thisEntity.bonds:GetCastPoint() + 0.1					
				end

				if thisEntity.unholy_summon and thisEntity.unholy_summon:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.unholy_summon:entindex()
					})
					return thisEntity.unholy_summon:GetCastPoint() + 0.1					
				end

				if thisEntity.demon_lust and thisEntity.demon_lust:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.demon_lust:entindex()
					})
					return thisEntity.demon_lust:GetCastPoint() + 0.1					
				end

				if thisEntity.rain_of_fire and thisEntity.rain_of_fire:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_TARGET,
						TargetIndex = target:entindex(),
						AbilityIndex = thisEntity.rain_of_fire:entindex()
					})
					return thisEntity.rain_of_fire:GetCastPoint() + 0.1					
				end

				if thisEntity.inferno_spikes and thisEntity.inferno_spikes:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
						AbilityIndex = thisEntity.inferno_spikes:entindex()
					})
					return thisEntity.inferno_spikes:GetCastPoint() + 0.1					
				end
			end
			return AICore:AttackHighestPriority( thisEntity )
		else return 0.25 end
	end
end--[[
Warlock Imp
]]

if IsServer() then
	require( "ai/ai_core" )
	function Spawn( entityKeyValues )
		AITimers:CreateTimer(function()
			if thisEntity and not thisEntity:IsNull() then
				return AIThink(thisEntity)
			end
		end)
		thisEntity:SetContextThink( "AIThinker", AIThink, 0.25 )

		thisEntity.bolt = thisEntity:FindAbilityByName("warlock_imp_bolt")
		thisEntity.bolt:SetLevel(1)
	end

	function AIThink(thisEntity)
		if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
			local target
			if thisEntity:GetOwnerEntity() and thisEntity:GetOwnerEntity():GetAttackTarget() then
				target = thisEntity:GetOwnerEntity():GetAttackTarget()
			else
				target = AICore:GetHighestPriorityTarget(thisEntity)
			end
			if target then
				if thisEntity.bolt:IsFullyCastable() then
					ExecuteOrderFromTable({
						UnitIndex = thisEntity:entindex(),
						OrderType = DOTA_UNIT_ORDER_CAST_TARGET ,
						TargetIndex  = target:entindex(),
						AbilityIndex = thisEntity.bolt:entindex()
					})
					return thisEntity.bolt:GetCastPoint() + 0.1
				end
			else
				thisEntity:MoveToNPC(thisEntity:GetOwner())
			end
			AICore:AttackHighestPriority( thisEntity )
			return 0.25
		else return 0.25 end
	end
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.leap = thisEntity:FindAbilityByName("boss_wolves_leap")
	thisEntity.cripple = thisEntity:FindAbilityByName("boss_wolves_critical")
	
	AITimers:CreateTimer(0.1, 	function()
									thisEntity.leap:SetLevel(1)
									thisEntity.cripple:SetLevel(1)
								end)
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() and not thisEntity:IsChanneling() then
		local target = AICore:GetHighestPriorityTarget(thisEntity)
		if thisEntity.leap:IsFullyCastable() and target and CalculateDistance( target, thisEntity ) > thisEntity:GetAttackRange() then
			return CastLeap( target:GetAbsOrigin() )
		end
		return AICore:AttackHighestPriority( thisEntity )
	else 
		return AI_THINK_RATE 
	end
end

function CastLeap(position)
	ExecuteOrderFromTable({
		UnitIndex = thisEntity:entindex(),
		OrderType = DOTA_UNIT_ORDER_CAST_POSITION,
		Position = position,
		AbilityIndex = thisEntity.leap:entindex()
	})
	return thisEntity.leap:GetCastPoint() + 0.1
end--[[
Broodking AI
]]

require( "ai/ai_core" )

function Spawn( entityKeyValues )
	AITimers:CreateTimer(function()
		if thisEntity and not thisEntity:IsNull() then
			return AIThink(thisEntity)
		end
	end)
	thisEntity.berserk = thisEntity:FindAbilityByName("boss3a_berserk")
end


function AIThink(thisEntity)
	if not thisEntity:IsDominated() then
		local radius = thisEntity:GetAttackRange()+thisEntity:GetAttackRangeBuffer()
		local target = AICore:HighestThreatHeroInRange(thisEntity, radius, 0, true)
		if not target then target = AICore:WeakestEnemyHeroInRange( thisEntity, radius, true) end
		if not target then target = AICore:NearestEnemyHeroInRange( thisEntity, 8000, true) end
		if target then
			if (target:GetOrigin() - thisEntity:GetOrigin()):Length2D() > 500 and thisEntity.berserk:IsFullyCastable() then
				ExecuteOrderFromTable({
					UnitIndex = thisEntity:entindex(),
					OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
					AbilityIndex = thisEntity.berserk:entindex()
				})
				return 0.25
			end
		end
		if thisEntity:IsAttacking() and thisEntity.berserk:IsFullyCastable() then
			ExecuteOrderFromTable({
				UnitIndex = thisEntity:entindex(),
				OrderType = DOTA_UNIT_ORDER_CAST_NO_TARGET,
				AbilityIndex = thisEntity.berserk:entindex()
			})
			return 0.25
		end
		return AICore:AttackHighestPriority( thisEntity )
	else return 0.25 end
endboss14_bloodlust = class({})

function boss14_bloodlust:GetIntrinsicModifierName()
	return "modifier_boss14_bloodlust_passive"
end

modifier_boss14_bloodlust_passive = class({})
LinkLuaModifier("modifier_boss14_bloodlust_passive", "bosses/boss14/boss14_bloodlust", 0)

function modifier_boss14_bloodlust_passive:OnCreated()
	self.ms = self:GetSpecialValueFor("movespeed")
	self.amp = self:GetSpecialValueFor("damage_amp")
	if IsServer() then self:StartIntervalThink(0.1) end
end

function modifier_boss14_bloodlust_passive:OnIntervalThink()
	if self:GetParent().AIprevioustarget then 
		local difference = self:GetParent().AIprevioustarget:GetThreat() - self:GetStackCount()
		if math.abs(difference) > 0 then
			local clamp = ((difference<0 and -1) or 1)
			self:SetStackCount( math.max(0, self:GetStackCount() + clamp) )
		end
	else 
		self:DecrementStackCount() 
	end
end

function modifier_boss14_bloodlust_passive:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE, MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, MODIFIER_PROPERTY_MODEL_SCALE}
end

function modifier_boss14_bloodlust_passive:GetModifierTotalDamageOutgoing_Percentage()
	return self:GetStackCount() * self.amp
end

function modifier_boss14_bloodlust_passive:GetModifierMoveSpeedBonus_Percentage()
	return self:GetStackCount() * self.ms
end

function modifier_boss14_bloodlust_passive:GetModifierModelScale()
	return math.min(50, self:GetStackCount() / 2)
endboss14_execute = class({})

function boss14_execute:OnAbilityPhaseStart()
	ParticleManager:FireParticle("particles/units/heroes/hero_axe/axe_culling_blade_boost.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster(), {[1] = self:GetCaster():GetAbsOrigin()})
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss14_execute:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	if target:TriggerSpellAbsorb(self) then return end
	
	self:DealDamage(caster, target, target:GetMaxHealth() * self:GetSpecialValueFor("execution_damage") / 100, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_HPLOSS + DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
	if target:GetHealth() == 0 then
		EmitSoundOn("Hero_Axe.Culling_Blade_Success", target)
		Timers:CreateTimer(0.1, function() self:EndCooldown() end)
	else
		EmitSoundOn("Hero_Axe.Culling_Blade_Fail", target)
	end
	ParticleManager:FireParticle("particles/units/heroes/hero_axe/axe_culling_blade_kill.vpcf", PATTACH_POINT_FOLLOW, target, {[4] = target:GetAbsOrigin()})
end


function boss14_execute:NearestExecuteableTarget(range)
    local caster = self:GetCaster()
    local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), range)

    local execuTable = {}
    local bloodLustStacks = 0
    local modifier = caster:FindModifierByName("modifier_boss14_bloodlust_passive")
    local executeDamage = self:GetSpecialValueFor("execution_damage") / 100
    if modifier then 
        local bloodLust = modifier:GetAbility()
        executeDamage = executeDamage * ( 1 + ( modifier:GetStackCount() * bloodLust:GetSpecialValueFor("damage_amp") )/100 )
    end
    for _,enemy in ipairs(enemies) do
        if enemy:GetHealth() < enemy:GetMaxHealth() * executeDamage then table.insert(execuTable, enemy) end
    end
    local minRange = range or self:GetTrueCastRange()
    for _, executable in ipairs(execuTable) do
        local distanceToEnemy = CalculateDistance(caster, executable)
        if executable:IsAlive() and distanceToEnemy < minRange then
            minRange = distanceToEnemy
            target = executable
        end
    end
    return target
endboss14_quake = class({})

function boss14_quake:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCursorPosition(), self:GetSpecialValueFor("radius"))
	return true
end

function boss14_quake:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local radius = self:GetSpecialValueFor("radius")
	ParticleManager:FireParticle("particles/units/heroes/hero_axe/axe_beserkers_call_owner.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position})
	EmitSoundOn("Hero_Axe.BerserkersCall.Item.Shoutmask", caster)
	local enemies = caster:FindEnemyUnitsInRadius(position, radius)
	for _, enemy in ipairs(enemies) do
		if not enemy:TriggerSpellAbsorb(self) then
			enemy:AddNewModifier(caster, self, "modifier_stunned_generic", {duration = self:GetSpecialValueFor("duration")})
		end
	end
endboss14_whirlwind = class({})

function boss14_whirlwind:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	ParticleManager:FireWarningParticle(caster:GetAbsOrigin(), self:GetSpecialValueFor("radius"))
	return true
end

function boss14_whirlwind:OnSpellStart()
	local caster = self:GetCaster()
	local duration = self:GetSpecialValueFor("duration")
	caster:AddNewModifier(caster, self, "modifier_boss14_whirlwind", {duration = duration})
end

modifier_boss14_whirlwind = class({})
LinkLuaModifier("modifier_boss14_whirlwind", "bosses/boss14/boss14_whirlwind.lua", 0)

function modifier_boss14_whirlwind:IsHidden()
	return true
end

function modifier_boss14_whirlwind:OnCreated()
	self.damage = self:GetSpecialValueFor("spin_damage")
	self.radius = self:GetSpecialValueFor("radius")
	self.ms = self:GetParent():GetIdealSpeedNoSlows()
	if IsServer() then 
		self:StartIntervalThink(0.2)
		if self:GetParent():GetHealthPercent() < 50 then
			local caster = self:GetCaster()
			local suck = self:GetSpecialValueFor("suck_power") * FrameTime()
			local radius = self.radius * 2
			Timers:CreateTimer(function()
				local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), radius)
				for _, enemy in ipairs(enemies) do
					local dir = CalculateDirection(caster, enemy)
					enemy:SetAbsOrigin(enemy:GetAbsOrigin() + dir*suck)
				end
				if caster:HasModifier("modifier_boss14_whirlwind") then return FrameTime() 
				else ResolveNPCPositions(caster:GetAbsOrigin(), radius * 2) end
			end)
		end
	end
end

function modifier_boss14_whirlwind:OnIntervalThink()
	local caster = self:GetCaster()
	caster:StartGestureWithPlaybackRate( ACT_DOTA_CAST_ABILITY_3, 2 )
	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), self.radius, {flag = DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES})
	ParticleManager:FireParticle("particles/units/heroes/hero_axe/axe_attack_blur_counterhelix.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
	EmitSoundOn("Hero_Axe.CounterHelix", caster)
	ProjectileManager:ProjectileDodge(self:GetParent())
	AddFOWViewer(DOTA_TEAM_GOODGUYS, self:GetParent():GetAbsOrigin(), self.radius, 0.5, false)
	for _, enemy in ipairs(enemies) do
		caster:PerformAbilityAttack(enemy, false, self:GetAbility(), nil, nil, false)
	end
end

function modifier_boss14_whirlwind:OnDestroy()
	if IsServer() then 
		self:GetCaster():RemoveGesture( ACT_DOTA_CAST_ABILITY_3 )
		self:GetCaster():StartGesture( ACT_DOTA_SPAWN )
	end
end

function modifier_boss14_whirlwind:CheckState()
	return {[MODIFIER_STATE_ROOTED] = false,
			[MODIFIER_STATE_DISARMED] = false,
			[MODIFIER_STATE_SILENCED] = false,
			[MODIFIER_STATE_MUTED] = false,
			[MODIFIER_STATE_STUNNED] = false,
			[MODIFIER_STATE_HEXED] = false,
			[MODIFIER_STATE_FROZEN] = false,
			[MODIFIER_STATE_PASSIVES_DISABLED] = false,
			[MODIFIER_STATE_DISARMED] = true}
end

function modifier_boss14_whirlwind:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ABILITY_START, 
			MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE,
			MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN,
			MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE
			}
end

function modifier_boss14_whirlwind:OnAbilityStart(params)
	if params.unit == self:GetParent() then self:Destroy() end
end

function modifier_boss14_whirlwind:GetModifierBaseDamageOutgoing_Percentage()
	return self.damage
end

function modifier_boss14_whirlwind:GetModifierTurnRate_Percentage()
	return 99
endboss15_exorcise = class({})

function boss15_exorcise:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCaster():GetAbsOrigin() + CalculateDirection(self:GetCursorPosition(), self:GetCaster()) * self:GetSpecialValueFor( "distance" ), self:GetSpecialValueFor( "width_end" ) * 2)
	return true
end

function boss15_exorcise:OnSpellStart()
	local caster = self:GetCaster()
	local vPos = self:GetCursorPosition()
	if self:GetCursorTarget() then
		vPos = self:GetCursorTarget():GetAbsOrigin()
	end
	
	local speed = self:GetSpecialValueFor( "speed" )
	local width_initial = self:GetSpecialValueFor( "width_initial" )
	local width_end = self:GetSpecialValueFor( "width_end" )
	local distance = self:GetSpecialValueFor( "distance" )
	local damage = self:GetSpecialValueFor( "damage" ) 
	local velocity = CalculateDirection( vPos, caster ) * speed
	
	self:FireLinearProjectile("", velocity, distance, width_initial, {width_end = width_end})
	if self.exorciseProj then ParticleManager:ClearParticle( self.exorciseProj ) end
	self.exorciseProj = ParticleManager:CreateParticle("particles/units/heroes/hero_death_prophet/death_prophet_carrion_swarm.vpcf", PATTACH_CUSTOMORIGIN, nil)
	local position = caster:GetAbsOriginCenter()
	ParticleManager:SetParticleControl( self.exorciseProj, 0, position )
	ParticleManager:SetParticleControl( self.exorciseProj, 2, Vector(0,width_initial,0) )
	ParticleManager:SetParticleControl( self.exorciseProj, 3, position )
	ParticleManager:SetParticleControl( self.exorciseProj, 5, position )
	ParticleManager:SetParticleControl( self.exorciseProj, 1, velocity )

	EmitSoundOn( "Hero_DeathProphet.CarrionSwarm.Mortis", self:GetCaster() )
end

--------------------------------------------------------------------------------

function boss15_exorcise:OnProjectileHit( hTarget, vPosition )
	if hTarget ~= nil and ( not hTarget:IsMagicImmune() ) and ( not hTarget:IsInvulnerable() ) then
		if hTarget:TriggerSpellAbsorb(self) then return true end
		local damage = {
			victim = hTarget,
			attacker = self:GetCaster(),
			damage = self.damage,
			damage_type = DAMAGE_TYPE_MAGICAL,
			ability = self
		}

		ApplyDamage( damage )
		EmitSoundOn( "Hero_DeathProphet.CarrionSwarm.Damage.Mortis", self:GetCaster() )
		if self:GetCaster():GetHealthPercent() > 66 then
			hTarget:AddNewModifier(self:GetCaster(), self, "modifier_boss15_exorcise_damage_debuff", {duration = self:GetSpecialValueFor("debuff_duration")})
		elseif self:GetCaster():GetHealthPercent() > 33 then
			hTarget:AddNewModifier(self:GetCaster(), self, "modifier_silence", {duration = self:GetSpecialValueFor("debuff_duration")})
			hTarget:AddNewModifier(self:GetCaster(), self, "modifier_disarmed", {duration = self:GetSpecialValueFor("debuff_duration")})
		else
			self:Stun( hTarget, self:GetSpecialValueFor("stun_duration"), true )
		end
		
		ParticleManager:FireParticle( "particles/units/heroes/hero_death_prophet/death_prophet_carrion_swarm_impact.vpcf", PATTACH_ABSORIGIN_FOLLOW, hTarget )
	end
	if not hTarget then ParticleManager:ClearParticle( self.exorciseProj ) end
end

modifier_boss15_exorcise_damage_debuff = class({})
LinkLuaModifier("modifier_boss15_exorcise_damage_debuff", "bosses/boss15/boss15_exorcise.lua", 0)

function modifier_boss15_exorcise_damage_debuff:OnCreated()
	self.damage_reduction = self:GetSpecialValueFor("damage_reduction")
end

function modifier_boss15_exorcise_damage_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE}
end

function modifier_boss15_exorcise_damage_debuff:GetModifierTotalDamageOutgoing_Percentage()
	return self.damage_reduction
end

function modifier_boss15_exorcise_damage_debuff:GetEffectName()
	return "particles/units/heroes/hero_queenofpain/queen_shadow_strike_debuff_poison.vpcf"
endboss15_peel_the_veil = class({})

function boss15_peel_the_veil:OnSpellStart()
	self.ghostCount = self.ghostCount or 0
	self.ghostLimit = self:GetSpecialValueFor("ghost_count")
	self.ghostSpawnDelay = self:GetChannelTime() / self:GetSpecialValueFor("ghost_count")
	self.ghostSpawner = 0
end

function boss15_peel_the_veil:OnChannelThink(dt)
	self.ghostSpawner = self.ghostSpawner + dt
	if self.ghostSpawner >= self.ghostSpawnDelay then
		self:CreateGhost()
		self.ghostSpawner = 0
	end
end

function boss15_peel_the_veil:CreateGhost()
	if self.ghostCount < self.ghostLimit then self.ghostCount = math.min(self.ghostCount + 1, self.ghostCount)
	else
		self:GetCaster():Interrupt()
	end
	local ghost = CreateUnitByName("npc_dota_boss22b", self:GetCaster():GetAbsOrigin() + ActualRandomVector(300, 200), true, nil, nil, self:GetTeam())
	ghost.hasBeenInitialized = true
	ghost:SetAverageBaseDamage(self:GetCaster():GetAverageBaseDamage() * self:GetSpecialValueFor("ghost_damage")/100, 25)
	ghost:SetBaseMaxHealth(self:GetCaster():GetBaseMaxHealth() * self:GetSpecialValueFor("ghost_health")/100)
	ghost:SetMaxHealth(self:GetCaster():GetMaxHealth() * self:GetSpecialValueFor("ghost_health")/100)
	ghost:SetHealth(ghost:GetMaxHealth())
	ghost:AddNewModifier(self:GetCaster(), self, "modifier_boss15_peel_the_veil_phased", {})
	Timers:CreateTimer(0.2, function()
		if not ghost:IsNull() and ghost:IsAlive() then
			return 0.2
		else
			self.ghostCount = self.ghostCount - 1
		end
	end)
end

function boss15_peel_the_veil:GetGhostCount()
	return self.ghostCount or 0
end

modifier_boss15_peel_the_veil_phased = class({})
LinkLuaModifier("modifier_boss15_peel_the_veil_phased", "bosses/boss15/boss15_peel_the_veil.lua", 0)

function modifier_boss15_peel_the_veil_phased:IsHidden()
	return true
end

function modifier_boss15_peel_the_veil_phased:CheckState()
	return {[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
endboss15_thread_of_life = class({})

function boss15_thread_of_life:OnAbilityPhaseStart()
	local target = self:GetCursorTarget()
	local caster = self:GetCaster()
	if caster:GetHealthPercent() <= 33 then
		local radius = math.max( self:GetTrueCastRange(), CalculateDistance( caster, target ) + caster:GetHullRadius() + target:GetHullRadius() )
		local enemies = caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), radius )
		for _, enemy in ipairs(enemies) do
			ParticleManager:FireTargetWarningParticle(enemy)
		end
	else
		ParticleManager:FireTargetWarningParticle(target)
	end
	return true
end

function boss15_thread_of_life:GetCooldown( nLevel )
	local cooldown = self.BaseClass.GetCooldown( self, nLevel )
	if self:GetCaster():GetHealthPercent() <= 33 then
		cooldown = cooldown + self:GetSpecialValueFor("aoe_cooldown_increase")
	end
	return cooldown
end


function boss15_thread_of_life:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	EmitSoundOn("Hero_DeathProphet.SpiritSiphon.Cast", caster)
	
	if caster:GetHealthPercent() <= 33 then
		local radius = math.max( self:GetTrueCastRange(), CalculateDistance( caster, target ) + caster:GetHullRadius() + target:GetHullRadius() )
		local enemies = caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), radius )
		for _, enemy in ipairs(enemies) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:CreateTether(enemy)
			end
		end
	else
		if not target:TriggerSpellAbsorb(self) then
			self:CreateTether(target)
		end
	end
end

function boss15_thread_of_life:GetTethers()
	return self.tetherList or {}
end

function boss15_thread_of_life:CreateTether(target)
	local caster = self:GetCaster()
	self.tetherList = self.tetherList or {}
	target:AddNewModifier(caster, self, "modifier_boss15_thread_of_life_tether", {})
end

function boss15_thread_of_life:RemoveTether(target)
	self.tetherList = self.tetherList or {}
	table.removeval(self.tetherList, target:entindex())
	local caster = self:GetCaster()
	local modifier = caster:FindModifierByName("modifier_boss15_thread_of_life_reduction")
	if modifier then
		modifier:DecrementStackCount()
		if modifier:GetStackCount() == 0 then modifier:Destroy() end
	end
end

modifier_boss15_thread_of_life_tether = class({})
LinkLuaModifier("modifier_boss15_thread_of_life_tether", "bosses/boss15/boss15_thread_of_life.lua", 0)
if IsServer() then
	function modifier_boss15_thread_of_life_tether:OnCreated()
		self.maxHPDmg = self:GetSpecialValueFor("max_hp_damage") / 100
		self.hpDmg = self:GetSpecialValueFor("hp_damage") / 100
		self.damage = self:GetSpecialValueFor("damage")
		self.rampup = self:GetSpecialValueFor("max_damage_rampup")
		self.buffer = self:GetSpecialValueFor("radius_buffer")
		
		self:StartIntervalThink(0.3)
		
		self.distance = CalculateDistance(self:GetCaster(), self:GetParent())
		
		EmitSoundOn("Hero_DeathProphet.SpiritSiphon.Target", target)
		
		local tetherFX = ParticleManager:CreateParticle( "particles/units/heroes/hero_death_prophet/death_prophet_spiritsiphon.vpcf", PATTACH_POINT_FOLLOW, self:GetParent() )
		ParticleManager:SetParticleControlEnt(tetherFX, 0, self:GetCaster(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetCaster():GetAbsOrigin(), true)
		ParticleManager:SetParticleControlEnt(tetherFX, 1, self:GetParent(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetParent():GetAbsOrigin(), true)
		ParticleManager:SetParticleControl(tetherFX, 5, Vector(999,0,0) )
		self:AddEffect(tetherFX)
		
		self:GetCaster():AddNewModifier(self:GetCaster(), self:GetAbility(), "modifier_boss15_thread_of_life_reduction", {})
		table.insert(self:GetAbility().tetherList, self:GetParent():entindex())
	end
	
	function modifier_boss15_thread_of_life_tether:OnIntervalThink()
		local parent = self:GetParent()
		local caster = self:GetCaster()
		
		if not caster or caster:IsNull() or not caster:IsAlive() or CalculateDistance(caster, parent) > self.distance + self.buffer  then
			self:Destroy()
			return
		end
		
		local damage = self.hpDmg * parent:GetMaxHealth() + self.damage
		if caster:GetHealthPercent() <= 66 and self.hpDmg < self.maxHPDmg then
			self.hpDmg = math.min(self.hpDmg + (self.maxHPDmg/self.rampup * 0.3), self.maxHPDmg)
		end
		local dmg = self:GetAbility():DealDamage(caster,  parent, damage * 0.3, {damage_flags = DOTA_DAMAGE_FLAG_HPLOSS + DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
		caster:HealEvent(dmg, self:GetAbility(), caster)
	end
	
	function modifier_boss15_thread_of_life_tether:OnDestroy()
		StopSoundOn("Hero_DeathProphet.SpiritSiphon.Target", target)
		if self:GetAbility() then self:GetAbility():RemoveTether(self:GetParent()) end
	end
end

modifier_boss15_thread_of_life_reduction = class({})
LinkLuaModifier("modifier_boss15_thread_of_life_reduction", "bosses/boss15/boss15_thread_of_life.lua", 0)
if IsServer() then
	function modifier_boss15_thread_of_life_reduction:OnCreated()
		self.damage_reduction = self:GetSpecialValueFor("tether_damage_reduction")
		self:SetStackCount(1)
		self:StartIntervalThink(0.25)
	end
	
	function modifier_boss15_thread_of_life_reduction:OnIntervalThink()
		local stacks = 0
		for id, enemy in ipairs( self:GetParent():FindEnemyUnitsInRadius(self:GetParent():GetAbsOrigin(), -1) ) do
			if enemy:HasModifier("modifier_boss15_thread_of_life_tether") then
				stacks = stacks + 1
			end
		end
		self:SetStackCount( math.min(stacks, 5) )
		if self:GetStackCount() == 0 then self:Destroy() end
	end

	function modifier_boss15_thread_of_life_reduction:DeclareFunctions()
		return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
	end

	function modifier_boss15_thread_of_life_reduction:GetModifierIncomingDamage_Percentage()
		return self.damage_reduction * self:GetStackCount()
	end
end
boss16m_heal_aura = class({})

function boss16m_heal_aura:GetIntrinsicModifierName()
	return "modifier_boss16m_heal_aura"
end

modifier_boss16m_heal_aura = class({})
LinkLuaModifier("modifier_boss16m_heal_aura", "bosses/boss16/boss16m_heal_aura.lua", 0)

if IsServer() then
	function modifier_boss16m_heal_aura:OnCreated()
		self.heal = self:GetSpecialValueFor("heal_amount") / 100
		self:StartIntervalThink(0.3)
	end
	
	function modifier_boss16m_heal_aura:OnIntervalThink()
		local dragon = self:GetCaster().owningDragon
		if self:GetParent():PassivesDisabled() then return end
		if not dragon or dragon:IsNull() then
			self:StartIntervalThink(-1)
			return -1
		end
		local hpHeal = self.heal * dragon:GetMaxHealth() * 0.3
		dragon:HealEvent(hpHeal, self:GetAbility(), self:GetCaster())
	end
end	

function modifier_boss16m_heal_aura:IsHidden()
	return true
endboss16_conflagration = class({})

function boss16_conflagration:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	local direction = CalculateDirection(position, caster)
	
	if caster:GetHealthPercent() < 66 and self:GetLevel() > 2 then
		local startPos = caster:GetAbsOrigin() + direction * 128
		local endPos = startPos + direction * self:GetSpecialValueFor("length") 
		ParticleManager:FireLinearWarningParticle(startPos, endPos, self:GetSpecialValueFor("radius"))
	else
		ParticleManager:FireWarningParticle(self:GetCursorPosition(), self:GetSpecialValueFor("radius"))
	end
	return true
end

function boss16_conflagration:OnSpellStart()
	EmitSoundOn("Hero_Jakiro.Macropyre.Cast", self:GetCaster())
	local position = self:GetCursorPosition()
	local caster = self:GetCaster()
	local direction = CalculateDirection(position, caster)
	if self:GetCaster():GetHealthPercent() < 33 and self:GetLevel() > 2 then
		local spread = self:GetSpecialValueFor("cone_spread")
		local pathCount = (spread/30) * 2
		for i = 0, pathCount do
			local newDir = RotateVector2D(direction, ToRadians(15*(i/2)*(-1^i)) )
			self:CreateFirePath(newDir)
		end
	else
		self:CreateFirePath(direction)
	end
end

function boss16_conflagration:CreateFirePath(direction)
	local caster = self:GetCaster()
	local ability = self
	
	local initialPosition = self:GetCursorPosition()
	local endPos = initialPosition
	local duration = self:GetSpecialValueFor("duration")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage_over_time")
	if caster:GetHealthPercent() < 66 and self:GetLevel() > 2 then
		initialPosition = caster:GetAbsOrigin() + direction * 128
		endPos = endPos + direction * self:GetSpecialValueFor("length") 
	end
	
	local fireFX = ParticleManager:CreateParticle("particles/units/bosses/boss_dragon/boss_dragon_conflagragation.vpcf", PATTACH_CUSTOMORIGIN, nil)
	ParticleManager:SetParticleControl(fireFX, 0, initialPosition)
	ParticleManager:SetParticleControl(fireFX, 1, endPos)
	ParticleManager:SetParticleControl(fireFX, 2, Vector(duration, 0, 0))
	
	local timer = 0
	Timers:CreateTimer(1, function()
		if not caster or caster:IsNull() then return nil end
		local enemies = caster:FindEnemyUnitsInLine(initialPosition, endPos, radius)
		for _, enemy in ipairs(enemies) do
			if not enemy.lastDamageInstance or ( enemy.lastDamageInstance < GameRules:GetGameTime() ) then
				ability:DealDamage(caster, enemy, damage)
				enemy.lastDamageInstance = GameRules:GetGameTime() + FrameTime()
			end
		end
		timer = timer + 1
		if timer < duration then
			return 1
		end
	end)
endboss16_dragonfire = class({})

function boss16_dragonfire:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	ParticleManager:FireLinearWarningParticle(caster:GetAbsOrigin(), caster:GetAbsOrigin() + CalculateDirection(self:GetCursorPosition(), self:GetCaster()) * self:GetSpecialValueFor("range"), self:GetSpecialValueFor("end_radius"))
	return true
end

function boss16_dragonfire:OnSpellStart()
	EmitSoundOn( "Hero_DragonKnight.BreathFire", self:GetCaster() )
	self:FireLinearProjectile("particles/units/heroes/hero_dragon_knight/dragon_knight_breathe_fire.vpcf", self:GetSpecialValueFor("speed") * CalculateDirection(self:GetCursorPosition(), self:GetCaster()), self:GetSpecialValueFor("range"), self:GetSpecialValueFor("start_radius"), {width_end = self:GetSpecialValueFor("end_radius")})
end

function boss16_dragonfire:OnProjectileHit(hTarget, vPosition)
	if hTarget and hTarget:TriggerSpellAbsorb(self) then return true end
	if hTarget ~= nil and not hTarget:IsSameTeam( self:GetCaster() ) and ( not hTarget:IsMagicImmune() ) and ( not hTarget:IsInvulnerable() ) then
		local caster = self:GetCaster()
		local damage = self:GetSpecialValueFor("initial_damage")
		local duration = self:GetSpecialValueFor("duration")
		self:DealDamage(caster, hTarget, damage)
		if self:GetLevel() > 2 then hTarget:AddNewModifier(caster, self, "modifier_boss16_dragonfire", {duration = duration}) end
	end
	return false
end

modifier_boss16_dragonfire = class({})
LinkLuaModifier("modifier_boss16_dragonfire", "bosses/boss16/boss16_dragonfire.lua", 0)

function modifier_boss16_dragonfire:OnCreated()
	self.armor = self:GetSpecialValueFor("armor_reduction")
	self.dot = self:GetSpecialValueFor("damage_over_time")
	if IsServer() then self:StartIntervalThink(1) end
end

function modifier_boss16_dragonfire:OnIntervalThink()
	if self:GetAbility() and self:GetCaster() and self:GetParent() then
		self:GetAbility():DealDamage(self:GetCaster(), self:GetParent(), self.dot)
	end
end

function modifier_boss16_dragonfire:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_boss16_dragonfire:GetModifierPhysicalArmorBonus()
	return self.armor
end

function modifier_boss16_dragonfire:GetAttributes()
	return MODIFIER_ATTRIBUTE_MULTIPLE
endboss16_the_flock = class({})

function boss16_the_flock:GetIntrinsicModifierName()
	return "modifier_boss16_the_flock_manager"
end

function boss16_the_flock:OnSpellStart()
	self.drakeCount = self.drakeCount or {}
	self.drakeLimit = self:GetSpecialValueFor("drake_count")
	self:ReplaceDrakes()
	for i = 1, self.drakeLimit do
		self:CreateDrake()
	end
	EmitSoundOn("Hero_DragonKnight.ElderDragonForm", self:GetCaster())
end

function boss16_the_flock:ReplaceDrakes()
	for _, drake in ipairs(self.drakeCount) do
		if drake and not drake:IsNull() then drake:ForceKill(false) end
	end
	self.drakeCount = {}
end

function boss16_the_flock:CreateDrake()
	local drake = CreateUnitByName("npc_dota_boss23_m", self:GetCaster():GetAbsOrigin() + ActualRandomVector(600, 400), true, drake, drake, self:GetCaster():GetTeam())
	
	drake.hasBeenInitialized = true
	
	drake:SetAverageBaseDamage(self:GetCaster():GetAverageBaseDamage() * self:GetSpecialValueFor("drake_damage")/100, 25)
	drake:SetBaseMaxHealth(self:GetCaster():GetBaseMaxHealth() * self:GetSpecialValueFor("drake_health")/100)
	drake:SetMaxHealth(self:GetCaster():GetMaxHealth() * self:GetSpecialValueFor("drake_health")/100)
	drake:SetHealth(drake:GetMaxHealth())
	
	Timers:CreateTimer(0.1, function()
		drake:SetAverageBaseDamage(self:GetCaster():GetAverageBaseDamage() * self:GetSpecialValueFor("drake_damage")/100, 25)
		drake:SetBaseMaxHealth(self:GetCaster():GetBaseMaxHealth() * self:GetSpecialValueFor("drake_health")/100)
		drake:SetMaxHealth(self:GetCaster():GetMaxHealth() * self:GetSpecialValueFor("drake_health")/100)
		drake:SetHealth(drake:GetMaxHealth())
	end)
	ParticleManager:FireParticle("particles/units/heroes/hero_dragon_knight/dragon_knight_transform_red.vpcf", PATTACH_POINT_FOLLOW, drake)
	drake.owningDragon = self:GetCaster()
	table.insert(self.drakeCount, drake)
	if self:GetCaster():GetHealthPercent() < 66 then
		drake:AddAbility("boss16_conflagration"):SetLevel( self:GetLevel() )
	end
	if self:GetCaster():GetHealthPercent() < 33 then
		drake:AddAbility("boss16_dragonfire"):SetLevel( self:GetLevel() )
	end
end

function boss16_the_flock:GetDrakeCount()
	self.drakeCount = self.drakeCount or {}
	return #self.drakeCount or 0
end


modifier_boss16_the_flock_manager = class({})
LinkLuaModifier("modifier_boss16_the_flock_manager", "bosses/boss16/boss16_the_flock.lua", 0)

function modifier_boss16_the_flock_manager:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH}
end

function modifier_boss16_the_flock_manager:OnDeath(params)
	if params.unit == self:GetParent() then
		local dragon
		for id, drake in ipairs(self:GetAbility().drakeCount) do
			if not drake:IsNull() and drake:IsAlive() then
				local health = drake:GetHealth()
				drake:ForceKill(false)
				dragon = CreateUnitByName("npc_dota_boss23", drake:GetAbsOrigin(), true, nil, nil, drake:GetTeam())
				dragon.unitIsRoundNecessary = true;
				self:GetAbility().drakeCount[id] = nil
				Timers:CreateTimer(0.1, function() 
					dragon:SetHealth( health )
				end)
				local flock = dragon:FindAbilityByName("boss16_the_flock")
				flock:SetCooldown( flock:GetCooldown(-1) / 2 )
				break
			end
		end
		if not dragon then return end
		local dragonAb = dragon:FindAbilityByName("boss16_the_flock")
		dragonAb.drakeCount = {}
		for _, drake in pairs(self:GetAbility().drakeCount) do
			drake.owningDragon = dragon
			table.insert(dragonAb.drakeCount, drake)
		end
		dragonAb:StartCooldown(15)
	end
endboss18b_corrupted_huntress = class({})

function boss18b_corrupted_huntress:GetIntrinsicModifierName()
	return "modifier_boss18b_corrupted_huntress_passive"
end

modifier_boss18b_corrupted_huntress_passive = class({})
LinkLuaModifier("modifier_boss18b_corrupted_huntress_passive", "bosses/boss18b/boss18b_corrupted_huntress.lua", 0)

function modifier_boss18b_corrupted_huntress_passive:OnCreated()
	self.radius = self:GetSpecialValueFor("aura_radius")
end

function modifier_boss18b_corrupted_huntress_passive:OnRefresh()
	self.radius = self:GetSpecialValueFor("aura_radius")
end

function modifier_boss18b_corrupted_huntress_passive:IsHidden()
	return true
end

function modifier_boss18b_corrupted_huntress_passive:IsAura()
	return not self:GetParent():PassivesDisabled()
end

function modifier_boss18b_corrupted_huntress_passive:GetModifierAura()
	return "modifier_boss18b_corrupted_huntress_debuff"
end

function modifier_boss18b_corrupted_huntress_passive:GetAuraRadius()
	return 500
end

function modifier_boss18b_corrupted_huntress_passive:GetAuraDuration()
	return 0.5
end

function modifier_boss18b_corrupted_huntress_passive:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss18b_corrupted_huntress_passive:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss18b_corrupted_huntress_passive:GetEffectName()
	return "particles/units/heroes/hero_skeletonking/wraith_king_ambient.vpcf"
end

function modifier_boss18b_corrupted_huntress_passive:GetStatusEffectName()
	return "particles/status_fx/status_effect_wraithking_ghosts.vpcf"
end

function modifier_boss18b_corrupted_huntress_passive:StatusEffectPriority()
	return 50
end

modifier_boss18b_corrupted_huntress_debuff = class({})
LinkLuaModifier("modifier_boss18b_corrupted_huntress_debuff", "bosses/boss18b/boss18b_corrupted_huntress.lua", 0)

function modifier_boss18b_corrupted_huntress_debuff:OnCreated()
	self.armor = self:GetSpecialValueFor("armor_reduction")
	self.damage = self:GetSpecialValueFor("damage_per_sec")
	if IsServer() then self:StartIntervalThink(1) end
end

function modifier_boss18b_corrupted_huntress_debuff:OnRefresh()
	self.armor = self:GetSpecialValueFor("armor_reduction")
	self.damage = self:GetSpecialValueFor("damage_per_sec")
end

function modifier_boss18b_corrupted_huntress_debuff:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.damage )
end

function modifier_boss18b_corrupted_huntress_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_boss18b_corrupted_huntress_debuff:GetModifierPhysicalArmorBonus()
	return self.armor
endboss18b_elusive_huntress = class({})

function boss18b_elusive_huntress:GetIntrinsicModifierName()
	return "modifier_boss18b_elusive_huntress_passive"
end

modifier_boss18b_elusive_huntress_passive = class({})
LinkLuaModifier("modifier_boss18b_elusive_huntress_passive", "bosses/boss18b/boss18b_elusive_huntress.lua", 0)

function modifier_boss18b_elusive_huntress_passive:OnCreated()
	self.hitsToEffect = self:GetSpecialValueFor("hits_to_stun")
	self.stunDuration = self:GetSpecialValueFor("stun_duration")
	self.evasion = self:GetSpecialValueFor("evasion")
	self.critical = self:GetSpecialValueFor("critical_damage")
	self.hitsApplied = 0
end

function modifier_boss18b_elusive_huntress_passive:OnRefresh()
	self.hitsToEffect = self:GetSpecialValueFor("hits_to_stun")
	self.stunDuration = self:GetSpecialValueFor("stun_duration")
	self.evasion = self:GetSpecialValueFor("evasion")
	self.critical = self:GetSpecialValueFor("critical_damage")
end

function modifier_boss18b_elusive_huntress_passive:IsHidden()
	return true
end

function modifier_boss18b_elusive_huntress_passive:DeclareFunctions()
	return {MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE, MODIFIER_PROPERTY_EVASION_CONSTANT, MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss18b_elusive_huntress_passive:GetModifierEvasion_Constant()
	if not self:GetParent():PassivesDisabled() then return self.evasion end
end

function modifier_boss18b_elusive_huntress_passive:GetModifierPreAttack_CriticalStrike(params)
	if self.hitsApplied >= self.hitsToEffect and not self:GetParent():PassivesDisabled() then
		return self.critical
	end
end	

function modifier_boss18b_elusive_huntress_passive:OnAttackLanded(params)
	if self:GetParent() == params.attacker then
		if self.target == params.target and not self:GetParent():PassivesDisabled() then
			if self.hitsApplied >= self.hitsToEffect then
				self.hitsApplied = 0
				self:GetAbility():Stun(params.target, self.stunDuration, false)
				EmitSoundOn("Hero_Juggernaut.BladeDance", params.target)
			else
				self.hitsApplied = self.hitsApplied + 1
			end
		else self.target = params.target end
	end
endboss18b_frenzy = class({})

function boss18b_frenzy:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	ParticleManager:FireWarningParticle(caster:GetAbsOrigin(), caster:GetAttackRange())
	return true
end

function boss18b_frenzy:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_boss18b_frenzy_thinker", {duration = self:GetSpecialValueFor("duration")})
	EmitSoundOn("Hero_Ursa.Enrage", caster)
end

modifier_boss18b_frenzy_thinker = class({})
LinkLuaModifier("modifier_boss18b_frenzy_thinker", "bosses/boss18b/boss18b_frenzy.lua", 0)

function modifier_boss18b_frenzy_thinker:OnCreated()
	self.movespeed = self:GetSpecialValueFor("movespeed_bonus")
	self.attackspeed = self:GetSpecialValueFor("attackspeed_bonus")
	if IsServer() then
		self.initHP = self:GetParent():GetHealth()
		Timers:CreateTimer(function()
			self:StartIntervalThink(self:GetParent():GetSecondsPerAttack())
		end)
	end
end

function modifier_boss18b_frenzy_thinker:OnIntervalThink()
	local caster = self:GetCaster()
	
	if caster:GetHealth() < self.initHP - caster:GetMaxHealth() * 0.1 then
		self:Destroy()
		return
	end
	
	if caster:IsStunned() or caster:IsDisarmed() or caster:IsRooted() then return end
	
	local enemies = caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), caster:GetAttackRange() )
	AddFOWViewer(DOTA_TEAM_GOODGUYS, self:GetParent():GetAbsOrigin(), caster:GetAttackRange(), self:GetParent():GetSecondsPerAttack() + 0.1, false)
	for _, enemy in ipairs(enemies) do
		caster:PerformGenericAttack(enemy, true)
		ParticleManager:FireParticle("particles/units/heroes/hero_riki/riki_backstab.vpcf", PATTACH_POINT_FOLLOW, enemy)
	end
end

function modifier_boss18b_frenzy_thinker:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, }
end

function modifier_boss18b_frenzy_thinker:CheckState()
	return {[MODIFIER_STATE_SILENCED] = true}
end

function modifier_boss18b_frenzy_thinker:GetModifierMoveSpeedBonus_Percentage()
	return self.movespeed
end

function modifier_boss18b_frenzy_thinker:GetModifierAttackSpeedBonus()
	return self.attackspeed
end

function modifier_boss18b_frenzy_thinker:GetEffectName()
	return "particles/units/heroes/hero_ursa/ursa_enrage_buff.vpcf"
end

function modifier_boss18b_frenzy_thinker:GetHeroEffectName()
	return "particles/units/heroes/hero_ursa/ursa_enrage_hero_effect.vpcf"
end

function modifier_boss18b_frenzy_thinker:GetStatusEffectName()
	return "particles/status_fx/status_effect_bloodrage.vpcf"
end

function modifier_boss18b_frenzy_thinker:StatusEffectPriority()
	return 20
endboss18b_swipe = class({})

function boss18b_swipe:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local direction = CalculateDirection(self:GetCursorPosition(), caster)
	local distance =  self:GetCastRange(caster:GetAbsOrigin(), caster)
	local position = caster:GetAbsOrigin() + direction * distance
	ParticleManager:FireWarningParticle(position, distance/2)
	if caster:GetHealthPercent() < 66 then
		for i = 1, 2 do
			local newDir = RotateVector2D(direction, ToRadians(45) * (-1)^i )
			local position = caster:GetAbsOrigin() + newDir * distance
			ParticleManager:FireWarningParticle(position, distance/2)
		end
	end
	if caster:GetHealthPercent() < 33 then
		for i = 1, 4 do
			local newDir = RotateVector2D(direction, ToRadians(45) * 2 * (-1)^i )
			local position = caster:GetAbsOrigin() + newDir * distance
			ParticleManager:FireWarningParticle(position, distance/2)
		end
	end
	return true
end

function boss18b_swipe:OnSpellStart()
	local caster = self:GetCaster()
	local distance =  self:GetCastRange(caster:GetAbsOrigin(), caster)
	local direction = CalculateDirection(self:GetCursorPosition(), caster)
	local position = caster:GetAbsOrigin() + direction * distance
	
	ParticleManager:FireParticle("particles/dev/library/base_attack_swipe.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] =  caster:GetAnglesAsVector()})
	local enemies = caster:FindEnemyUnitsInRadius(position, distance/2)
	for _, enemy in ipairs(enemies) do
		caster:PerformGenericAttack(enemy, true)
		enemy:AddNewModifier(caster, self, "modifier_boss18b_swipe_bleed", {duration = self:GetSpecialValueFor("duration")})
	end
	
	if caster:GetHealthPercent() < 66 then
		for i = 1, 2 do
			local newDir = RotateVector2D(direction, ToRadians(45) * (-1)^i )
			local newPos = caster:GetAbsOrigin() + newDir * distance
			ParticleManager:FireParticle("particles/dev/library/base_attack_swipe.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = newPos, [1] =  caster:GetAnglesAsVector()})
			local enemies = caster:FindEnemyUnitsInRadius(newPos, distance/2)
			for _, enemy in ipairs(enemies) do
				if not enemy:TriggerSpellAbsorb(self) then
					caster:PerformGenericAttack(enemy, true)
					enemy:AddNewModifier(caster, self, "modifier_boss18b_swipe_bleed", {duration = self:GetSpecialValueFor("duration")})
				end
			end
		end
	end
	if caster:GetHealthPercent() < 33 then
		for i = 1, 4 do
			local newDir = RotateVector2D(direction, ToRadians(45) * 2 * (-1)^i )
			local newPos = caster:GetAbsOrigin() + newDir * distance
			local newPos = caster:GetAbsOrigin() + newDir * distance
			ParticleManager:FireParticle("particles/dev/library/base_attack_swipe.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = newPos, [1] =  caster:GetAnglesAsVector()})
			local enemies = caster:FindEnemyUnitsInRadius(newPos, distance/2)
			for _, enemy in ipairs(enemies) do
				if not enemy:TriggerSpellAbsorb(self) then
					caster:PerformGenericAttack(enemy, true)
					enemy:AddNewModifier(caster, self, "modifier_boss18b_swipe_bleed", {duration = self:GetSpecialValueFor("duration")})
				end
			end
		end
	end
	EmitSoundOn("hero_bloodseeker.rupture.cast", caster)
end


modifier_boss18b_swipe_bleed = class({})
LinkLuaModifier("modifier_boss18b_swipe_bleed", "bosses/boss18b/boss18b_swipe.lua", 0)


function modifier_boss18b_swipe_bleed:OnCreated()
	self.moveslow = self:GetSpecialValueFor("moveslow")
	self.attackslow = self:GetSpecialValueFor("attackslow")
end


function modifier_boss18b_swipe_bleed:DeclareFunctions()
	return {MODIFIER_PROPERTY_DISABLE_HEALING, MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT, }
end

function modifier_boss18b_swipe_bleed:GetModifierMoveSpeedBonus_Constant()
	return self.moveslow
end

function modifier_boss18b_swipe_bleed:GetModifierAttackSpeedBonus()
	return self.attackslow
end

function modifier_boss18b_swipe_bleed:GetDisableHealing()
	return 1
end

function modifier_boss18b_swipe_bleed:GetEffectName()
	return "particles/bosses/boss18b/boss18b_swipe_bleed.vpcf"
endboss18b_trample = class({})

function boss18b_trample:OnAbilityPhaseStart(direction, radius)
	local caster = self:GetCaster()
	local newRad = radius or self:GetSpecialValueFor("starting_radius")
	local newPos = caster:GetAbsOrigin() + (direction or CalculateDirection(self:GetCursorPosition(), caster)) * self:GetSpecialValueFor("jump_distance")
	ParticleManager:FireWarningParticle(newPos, newRad)
	return true
end

function boss18b_trample:OnSpellStart()
	local caster = self:GetCaster()
	local vDir = CalculateDirection(self:GetCursorPosition(), caster)
	
	local jump_distance = self:GetSpecialValueFor("jump_distance")
	local radius = self:GetSpecialValueFor("starting_radius")
	local jumps = self:GetSpecialValueFor("jumps")
	if caster:GetHealthPercent() < 66 then jumps = jumps + 1 end
	if caster:GetHealthPercent() < 33 then jumps = jumps + 1 end
	local position = caster:GetAbsOrigin() + vDir * jump_distance
	local growth = self:GetSpecialValueFor("radius_growth")
	Timers:CreateTimer(function()
		if not caster or caster:IsNull() then return end
		position = caster:GetAbsOrigin() + vDir * jump_distance
		local blocked = self:BlinkAndBreak(position, radius)
		if blocked then return end
		jumps = jumps - 1
		if jumps > 0 then
			self:OnAbilityPhaseStart(vDir, radius)
			radius = radius + growth
			jump_distance = jump_distance + growth
			return self:GetCastPoint()
		end
	end)
end

function boss18b_trample:BlinkAndBreak(newPos, radius)
	local caster = self:GetCaster()
	caster:SmoothFindClearSpace(newPos)
	
	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), radius)
	
	local stunDuration = self:GetSpecialValueFor("stun_duration")
	local damage = self:GetSpecialValueFor("damage")
	
	for _, enemy in ipairs(enemies) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:Stun(enemy, stunDuration)
			self:DealDamage(caster, enemy, damage)
		else
			return true
		end
	end
	GridNav:DestroyTreesAroundPoint( caster:GetAbsOrigin(), radius, true )
	ParticleManager:FireParticle("particles/test_particle/ogre_melee_smash.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = newPos, [1] = Vector(radius, radius, radius)})
	EmitSoundOn("Ability.SandKing_BurrowStrike", caster)
end
boss19_burrow = class({})

function boss19_burrow:OnAbilityPhaseStart(bConsecutive)
	local caster = self:GetCaster()
	if not bConsecutive then self.recast_count = self:GetSpecialValueFor("frenzy_stuns")
	else self.recast_count = (self.recast_count or self:GetSpecialValueFor("frenzy_stuns")) - 1 end
	caster:AddNewModifier(caster, self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	ParticleManager:FireWarningParticle(self:GetCursorPosition(), self:GetSpecialValueFor("stun_radius"))
	EmitSoundOn("Hero_NyxAssassin.Burrow.In", caster)
	return true
end

function boss19_burrow:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	local stunRadius = self:GetSpecialValueFor("stun_radius")
	local damage = self:GetSpecialValueFor("stun_damage")
	
	FindClearSpaceForUnit(caster, position, true)
	local enemies = caster:FindEnemyUnitsInRadius(position, stunRadius)
	for _, enemy in ipairs(enemies) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, enemy, damage)
		end
	end
	
	caster:StartGesture(ACT_DOTA_CAST_BURROW_END)
	EmitSoundOn("Hero_Leshrac.Split_Earth", caster)
	ParticleManager:FireParticle("particles/units/heroes/hero_leshrac/leshrac_split_earth.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(stunRadius, stunRadius, stunRadius)})
	
	if self.recast_count > 0 and caster:GetHealthPercent() < 40 then
		local newPos = position + ActualRandomVector(1000, 400)
		if RoundManager:GetBoundingBox() then
			newPos = RoundManager:GetBoundingBox():GetAbsOrigin() + ActualRandomVector( FindRadius( RoundManager:GetBoundingBox() ) * 0.75, 150 )
		end
		caster:SetCursorPosition( newPos )
		self:OnAbilityPhaseStart(true)
		Timers:CreateTimer(self:GetCastPoint(), function() self:OnSpellStart() end)
	end
endboss19_chasm = class({})

function boss19_chasm:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	local startPos = caster:GetAbsOrigin()
	local endPos = startPos + CalculateDirection(position, caster) * self:GetSpecialValueFor("proj_distance")
	ParticleManager:FireLinearWarningParticle(startPos, endPos, self:GetSpecialValueFor("proj_width"))
	return true
end

function boss19_chasm:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local velocity = CalculateDirection(position, caster) * self:GetSpecialValueFor("proj_speed")
	local distance = self:GetSpecialValueFor("proj_distance")
	local width = self:GetSpecialValueFor("proj_width")
	self:FireLinearProjectile("particles/econ/items/nyx_assassin/nyx_assassin_ti6/nyx_assassin_impale_ti6.vpcf", velocity, distance, width)
	EmitSoundOn("Hero_NyxAssassin.Impale", caster)
end

if IsServer() then
	function boss19_chasm:OnProjectileHit(target, position)
		if not target then return end
		if target:TriggerSpellAbsorb(self) then return true end
		local caster =  self:GetCaster()
		local ability = self
		local knockUpDuration = self:GetSpecialValueFor("knockup_duration")
		StartAnimation(target, {activity = ACT_DOTA_FLAIL, rate = 1, duration = knockUpDuration})
		target:AddNewModifier(caster, self, "modifier_stunned_generic", {duration = knockUpDuration, delay = false})
		local Z_VECTOR = Vector(0,0,1)
		ParticleManager:FireParticle("particles/econ/items/nyx_assassin/nyx_assassin_ti6/nyx_assassin_impale_hit_ti6.vpcf", PATTACH_POINT_FOLLOW, target)
		local distance_traveled = 0
		local distance = self:GetSpecialValueFor("knockup_height")
		local speed = (distance * 2/ knockUpDuration) * FrameTime()
			
		EmitSoundOn("Hero_NyxAssassin.Impale.Target", target)
		Timers:CreateTimer(function ()
			if not target:HasMovementCapability() or not target:IsAlive() or target:IsNull() then return end
			if distance_traveled < distance / 2 then
				target:SetAbsOrigin(target:GetAbsOrigin() + Z_VECTOR * speed)
				distance_traveled = distance_traveled + speed
				return FrameTime()
			elseif distance_traveled > distance / 2 and distance_traveled < distance then
				target:SetAbsOrigin(target:GetAbsOrigin() - Z_VECTOR * speed)
				distance_traveled = distance_traveled + speed
				return FrameTime()
			else
				self:DealDamage(caster, target, ability:GetSpecialValueFor("knockup_damage") )
				target:SetAbsOrigin(target:GetAbsOrigin() - Z_VECTOR * speed)
				FindClearSpaceForUnit(target, target:GetAbsOrigin(), true)
				EmitSoundOn("Hero_NyxAssassin.Impale.TargetLand", target)
				self.isInKnockbackState = false
				return nil
			end 
		end)
	end
endboss19_cracked_ground = class({})

function boss19_cracked_ground:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_status_immunity", {duration = self:GetChannelTime() - 0.01})
	ParticleManager:FireWarningParticle(caster:GetAbsOrigin(), 600)
	self.chargeFX = ParticleManager:CreateParticle("particles/bosses/boss19/boss19_cracked_ground_charge.vpcf", PATTACH_POINT_FOLLOW, caster)
	ParticleManager:SetParticleControl(self.chargeFX, 0, caster:GetAbsOrigin())
	return true
end

function boss19_cracked_ground:OnChannelFinish(bInterrupted)
	if not bInterrupted then
		table.insert(self.useTable, true)
		local caster = self:GetCaster()
		caster:AddNewModifier(caster, self, "modifier_boss19_cracked_ground_thinker", {duration = self:GetSpecialValueFor("duration")})
	end
	AddFOWViewer(DOTA_TEAM_GOODGUYS, self:GetCaster():GetAbsOrigin(), 800, self:GetSpecialValueFor("duration"), false)
	ParticleManager:DestroyParticle(self.chargeFX, false)
	ParticleManager:ReleaseParticleIndex(self.chargeFX)
end


modifier_boss19_cracked_ground_thinker = class({})
LinkLuaModifier("modifier_boss19_cracked_ground_thinker", "bosses/boss19/boss19_cracked_ground.lua", 0)

if IsServer() then
	function modifier_boss19_cracked_ground_thinker:OnCreated()
		self.ticker = self:GetSpecialValueFor("spike_ticker")
		self:StartIntervalThink( self.ticker )
		self.spikeDir = self:GetParent():GetForwardVector()
		self.spikeCount = self:GetSpecialValueFor("spike_count")
		self.spikeAngle = ToRadians(360/self.spikeCount)
		self.spikeDirSpeed = ToRadians(360 / (self:GetDuration()/self.ticker))
		self.chasm = self:GetCaster():FindAbilityByName("boss19_chasm")
	end
	
	function modifier_boss19_cracked_ground_thinker:OnIntervalThink()
		local spikeAngle = self.spikeDir
		local caster = self:GetCaster()
		local counter = 1
		for i = 1, self.spikeCount do
			counter = counter + 1
			caster:SetCursorPosition(caster:GetAbsOrigin() + spikeAngle * 200)
			self.chasm:OnSpellStart()
			spikeAngle = RotateVector2D(spikeAngle, self.spikeAngle)
		end
		self.spikeDir = RotateVector2D(self.spikeDir, self.spikeDirSpeed)
	end
end

function modifier_boss19_cracked_ground_thinker:CheckState()
	return {[MODIFIER_STATE_ROOTED] = true,
			[MODIFIER_STATE_DISARMED] = true,
			[MODIFIER_STATE_SILENCED] = true,}
end

function modifier_boss19_cracked_ground_thinker:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss19_cracked_ground_thinker:GetModifierIncomingDamage_Percentage()
	return self:GetSpecialValueFor("damage_reduction")
endboss19_shield = class({})

function boss19_shield:GetIntrinsicModifierName()
	return "modifier_boss19_shield_passive"
end

modifier_boss19_shield_passive = class({})
LinkLuaModifier("modifier_boss19_shield_passive", "bosses/boss19/boss19_shield.lua", 0)

function modifier_boss19_shield_passive:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
	if IsServer() then self:StartIntervalThink(0) end
end

function modifier_boss19_shield_passive:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss19_shield_passive:OnIntervalThink()
	local caster = self:GetCaster()
	if self:GetAbility():IsCooldownReady() and caster:IsDisabled() and not caster:PassivesDisabled() and not caster:HasModifier("modifier_boss19_cracked_ground_thinker") then
		caster:Dispel(caster, true)
		EmitSoundOn("Hero_NyxAssassin.ManaBurn.Target", caster)
		self:GetAbility():UseResources(false, false, true)
		caster:AddNewModifier(caster, self:GetAbility(), "modifier_boss19_shield_buff", {duration = self.duration})
		ParticleManager:FireParticle("particles/units/heroes/hero_nyx_assassin/nyx_assassin_mana_burn.vpcf", PATTACH_POINT_FOLLOW, caster)
	end
end

function modifier_boss19_shield_passive:IsHidden()
	return true
end

function modifier_boss19_shield_passive:IsPurgable()
	return false
end

modifier_boss19_shield_buff = class({})
LinkLuaModifier("modifier_boss19_shield_buff", "bosses/boss19/boss19_shield.lua", 0)

function modifier_boss19_shield_buff:OnCreated()
	self.dmg = self:GetSpecialValueFor("damage_reduction")
end

function modifier_boss19_shield_buff:OnRefresh()
	self.dmg = self:GetSpecialValueFor("damage_reduction")
end

function modifier_boss19_shield_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE, MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE}
end


function modifier_boss19_shield_buff:GetModifierIncomingDamage_Percentage()
	return self.dmg
end

function modifier_boss19_shield_buff:GetModifierTotalDamageOutgoing_Percentage()
	return self.dmg * (-1)
end

function modifier_boss19_shield_buff:GetEffectName()
	return "particles/units/heroes/hero_nyx_assassin/nyx_assassin_spiked_carapace.vpcf"
endboss19_the_swarm = class({})

ATTACK_STATE_RADIAL = 1
ATTACK_STATE_CONE = 2
ATTACK_STATE_LINEAR = 3

function boss19_the_swarm:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local casterPos = self:GetCaster():GetAbsOrigin()
	local vDir = CalculateDirection(self:GetCursorPosition(), caster)
	
	self.attackState = RandomInt(1,3)
	
	local distance = self:GetSpecialValueFor("proj_distance")
	local beetleCount = self:GetSpecialValueFor("frenzy_count")
	
	local newPos = casterPos + vDir * distance
	local dirAngle = ToRadians(360 / beetleCount)
	
	if self.attackState == ATTACK_STATE_RADIAL then
		for i = 1, beetleCount do
			vDir = RotateVector2D(vDir, dirAngle)
			newPos = casterPos + vDir * distance
			ParticleManager:FireLinearWarningParticle(casterPos, newPos,self:GetSpecialValueFor("proj_width"))
		end
	elseif self.attackState == ATTACK_STATE_CONE then
		local dirAngle = ToRadians(60 / beetleCount) 
		
		for i = 0, beetleCount - 1 do
			local newDir = RotateVector2D(vDir, dirAngle * math.ceil(i/2) * (-1)^i)
			newPos = casterPos + newDir * distance
			ParticleManager:FireLinearWarningParticle(casterPos, newPos, self:GetSpecialValueFor("proj_width"))
		end
	else
		ParticleManager:FireLinearWarningParticle(casterPos, newPos, self:GetSpecialValueFor("proj_width"))
	end
	return true
end

function boss19_the_swarm:OnSpellStart()
	local caster = self:GetCaster()
	local casterPos = self:GetCaster():GetAbsOrigin()
	local vDir = CalculateDirection(self:GetCursorPosition(), caster)
	
	local distance = self:GetSpecialValueFor("proj_distance")
	local speed = self:GetSpecialValueFor("proj_speed")
	local width = self:GetSpecialValueFor("proj_width")
	local beetleCount = self:GetSpecialValueFor("frenzy_count")
		
	if self.attackState == ATTACK_STATE_RADIAL then
		local newPos = casterPos + vDir * distance
		local dirAngle = ToRadians(360 / beetleCount) 
		
		for i = 1, beetleCount do
			self:FireLinearProjectile("particles/units/heroes/hero_weaver/weaver_swarm_projectile.vpcf", vDir * speed, distance, width)
			vDir = RotateVector2D(vDir, dirAngle)
			newPos = casterPos + vDir * distance
		end
	elseif self.attackState == ATTACK_STATE_CONE then
		local dirAngle = ToRadians(90 / beetleCount) 
		
		for i = 0, beetleCount - 1 do
			local newDir = RotateVector2D(vDir, dirAngle * math.ceil(i/2) * (-1)^i)
			self:FireLinearProjectile("particles/units/heroes/hero_weaver/weaver_swarm_projectile.vpcf", newDir * speed, distance, width)
		end
	else
		self:FireLinearProjectile("particles/units/heroes/hero_weaver/weaver_swarm_projectile.vpcf", vDir * speed, distance, width)
		Timers:CreateTimer(function()
			self:FireLinearProjectile("particles/units/heroes/hero_weaver/weaver_swarm_projectile.vpcf", vDir * speed, distance, width)
			beetleCount = beetleCount - 1
			if beetleCount > 0 then
				return 0.35
			end
		end)
	end
	if caster:GetHealthPercent() < 40 then
		local frenzyBlock = self:GetSpecialValueFor("frenzy_block")
		caster:AddNewModifier(caster, self, "modifier_boss19_the_swarm_buff", {duration = self:GetCooldownTimeRemaining()/2}):SetStackCount(frenzyBlock)
	end
end

function boss19_the_swarm:OnProjectileHit(target, position)
	if not target then return end
	local caster = self:GetCaster()
	target:AddNewModifier(caster, self, "modifier_boss19_the_swarm_debuff", {duration = self:GetSpecialValueFor("duration")})
	local critbuff = caster:AddNewModifier(caster, self, "modifier_boss19_the_swarm_crit", {})
	caster:PerformAbilityAttack(target, true, self)
	critbuff:Destroy()
end

modifier_boss19_the_swarm_buff = class({})
LinkLuaModifier("modifier_boss19_the_swarm_buff", "bosses/boss19/boss19_the_swarm.lua", 0)

function modifier_boss19_the_swarm_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE, MODIFIER_PROPERTY_TOOLTIP}
end

function modifier_boss19_the_swarm_buff:GetModifierIncomingDamage_Percentage()
	self:DecrementStackCount()
	if self:GetStackCount() == 0 then 
		self:Destroy()
	end
	return -100
end

function modifier_boss19_the_swarm_buff:OnTooltip()
	return self:GetStackCount()
end

function modifier_boss19_the_swarm_buff:GetEffectName()
	return "particles/bosses/boss19/boss19_the_swarm_buff.vpcf"
end

modifier_boss19_the_swarm_crit = class({})
LinkLuaModifier("modifier_boss19_the_swarm_crit", "bosses/boss19/boss19_the_swarm.lua", 0)

function modifier_boss19_the_swarm_crit:OnCreated()
	self.crit = self:GetSpecialValueFor("crit_damage")
end

function modifier_boss19_the_swarm_crit:OnRefresh()
	self.crit = self:GetSpecialValueFor("crit_damage")
end

function modifier_boss19_the_swarm_crit:IsHidden()
	return true
end

function modifier_boss19_the_swarm_crit:DeclareFunctions()
	return {MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE}
end

function modifier_boss19_the_swarm_crit:GetModifierPreAttack_CriticalStrike()
	return self.crit
end

modifier_boss19_the_swarm_debuff = class({})
LinkLuaModifier("modifier_boss19_the_swarm_debuff", "bosses/boss19/boss19_the_swarm.lua", 0)

function modifier_boss19_the_swarm_debuff:OnCreated()
	self.armor = self:GetSpecialValueFor("armor_reduction")
	if IsServer() then self:SetStackCount(1) end
end

function modifier_boss19_the_swarm_debuff:OnRefresh()
	self.armor = self:GetSpecialValueFor("armor_reduction")
	if IsServer() then self:IncrementStackCount() end
end

function modifier_boss19_the_swarm_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_boss19_the_swarm_debuff:GetModifierPhysicalArmorBonus()
	return self.armor * self:GetStackCount()
end

function modifier_boss19_the_swarm_debuff:GetEffectName()
	return "particles/units/heroes/hero_weaver/weaver_swarm_debuff.vpcf"
endboss1a_blink_strike = class({})

function boss1a_blink_strike:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCursorPosition(), self:GetSpecialValueFor("strike_radius"))
	return true
end

function boss1a_blink_strike:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	EmitSoundOn("Hero_Riki.Blink_Strike", caster)
	ParticleManager:FireParticle("particles/units/heroes/hero_riki/riki_blink_strike.vpcf", PATTACH_POINT_FOLLOW, caster, {[0] = caster:GetAbsOrigin(),[1] = position})
	for _, enemy in ipairs(caster:FindEnemyUnitsInRadius(position, self:GetSpecialValueFor("strike_radius"))) do
		if enemy:TriggerSpellAbsorb(self) then return end
		ParticleManager:FireParticle("particles/units/heroes/hero_riki/riki_backstab.vpcf", PATTACH_POINT_FOLLOW, enemy) -- riki blink strike sounds and particles
		caster:PerformGenericAttack(enemy, true)
	end
	FindClearSpaceForUnit(caster, position, true)

	
endboss1a_rushdown = class({})

function boss1a_rushdown:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCursorPosition(), 250)
	return true
end

function boss1a_rushdown:OnSpellStart()
	local caster = self:GetCaster()
	local endPos = self:GetCursorPosition()
	-- run around like an idiot
	caster:Interrupt()
	ExecuteOrderFromTable({
		UnitIndex = caster:entindex(),
		OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
		Position = endPos, 
	})
	caster:AddNewModifier( caster, self, "modifier_boss1a_rushdown_attack_thinker", {duration = CalculateDistance(caster, endPos)/self:GetSpecialValueFor("rush_speed")})
end


modifier_boss1a_rushdown_attack_thinker = class({})
LinkLuaModifier("modifier_boss1a_rushdown_attack_thinker", "bosses/boss1a/boss1a_rushdown.lua", 0)

function modifier_boss1a_rushdown_attack_thinker:OnCreated()
	self.ms = self:GetSpecialValueFor("rush_speed")
	if IsServer() then self:StartIntervalThink(self:GetParent():GetSecondsPerAttack()) end
end

function modifier_boss1a_rushdown_attack_thinker:OnIntervalThink()
	local parent = self:GetParent()
	local enemies = FindUnitsInLine(parent:GetTeam(), parent:GetAbsOrigin(), parent:GetAbsOrigin() + parent:GetForwardVector() * parent:GetAttackRange(), nil, 175, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC, DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES)
	for _, enemy in ipairs(enemies) do
		ParticleManager:FireParticle("particles/bosses/boss1a/boss1a_rushdown.vpcf", PATTACH_POINT_FOLLOW, enemy)
		parent:PerformGenericAttack(enemy, true)
	end
end

function modifier_boss1a_rushdown_attack_thinker:CheckState()
	return {[MODIFIER_STATE_COMMAND_RESTRICTED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss1a_rushdown_attack_thinker:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN}
end

function modifier_boss1a_rushdown_attack_thinker:GetModifierMoveSpeed_AbsoluteMin()
	return self.ms
endboss1a_vanish = class({})

function boss1a_vanish:OnAbilityPhaseStart()
	ParticleManager:FireParticle( "particles/units/heroes/hero_keeper_of_the_light/keeper_of_the_light_recall_poof.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster() )
	return true
end

function boss1a_vanish:OnSpellStart()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_boss1a_vanish_fade", {duration = 2})
end

modifier_boss1a_vanish_fade = class({})
LinkLuaModifier("modifier_boss1a_vanish_fade", "bosses/boss1a/boss1a_vanish.lua", 0)

function modifier_boss1a_vanish_fade:OnDestroy()
	if IsServer() then
		self:GetParent():AddNewModifier(self:GetCaster(), self:GetAbility(), "modifier_boss1a_vanish_invis", {duration = self:GetAbility():GetSpecialValueFor("duration")})
		self:GetParent():AddNewModifier(self:GetCaster(), self:GetAbility(), "modifier_invisible", {duration = self:GetAbility():GetSpecialValueFor("duration")})
	end
end

function modifier_boss1a_vanish_fade:DeclareFunctions()
	local funcs = {
		MODIFIER_PROPERTY_INVISIBILITY_LEVEL
	}

	return funcs
end

function modifier_boss1a_vanish_fade:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss1a_vanish_fade:GetModifierInvisibilityLevel( params )
	return 0.45
end

modifier_boss1a_vanish_invis = class({})
LinkLuaModifier("modifier_boss1a_vanish_invis", "bosses/boss1a/boss1a_vanish.lua", 0)

function modifier_boss1a_vanish_invis:OnCreated()
	self.damage = self:GetAbility():GetSpecialValueFor("bonus_damage")
	self.ms = self:GetAbility():GetSpecialValueFor("movement_speed")
end

function modifier_boss1a_vanish_invis:OnDestroy()
	if IsServer() then self:GetParent():RemoveModifierByName("modifier_invisible") end
end

function modifier_boss1a_vanish_invis:CheckState()
	local state = {MODIFIER_STATE_INVISIBLE = true}

	return state
end

function modifier_boss1a_vanish_invis:DeclareFunctions()
	local funcs = {
		MODIFIER_PROPERTY_INVISIBILITY_LEVEL,
		MODIFIER_EVENT_ON_ATTACK_LANDED,
		MODIFIER_EVENT_ON_ABILITY_START,
		MODIFIER_PROPERTY_PROCATTACK_BONUS_DAMAGE_PHYSICAL,
	}

	return funcs
end

function modifier_boss1a_vanish_invis:OnAbilityStart( params )
	if params.unit == self:GetParent() then self:Destroy() end
end

function modifier_boss1a_vanish_invis:OnAttackLanded( params )
	if params.attacker == self:GetParent() then 
		local fxIndex = ParticleManager:CreateParticle( "particles/units/heroes/hero_nyx_assassin/nyx_assassin_vendetta.vpcf", PATTACH_CUSTOMORIGIN, params.attacker )
		ParticleManager:SetParticleControl( fxIndex, 0, params.attacker:GetAbsOrigin() )
		ParticleManager:SetParticleControl( fxIndex, 1, params.target:GetAbsOrigin() )
		ParticleManager:ReleaseParticleIndex(fxIndex)
		StartSoundEvent( "Hero_NyxAssassin.Vendetta.Crit", params.target )
		self:Destroy() 
	end
end

function modifier_boss1a_vanish_invis:GetModifierProcAttack_BonusDamage_Physical( params )
	return self.damage
endboss1b_leap = class({})

function boss1b_leap:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCursorPosition(), self:GetSpecialValueFor("leap_radius"))
	return true
end

function boss1b_leap:OnSpellStart()
	local caster = self:GetCaster()
	local endPos = self:GetCursorPosition()
	-- run around like an idiot
	caster:Interrupt()
	ExecuteOrderFromTable({
		UnitIndex = caster:entindex(),
		OrderType = DOTA_UNIT_ORDER_MOVE_TO_POSITION,
		Position = endPos, 
	})
	caster:AddNewModifier( caster, self, "modifier_boss1b_leap_attack_thinker", {duration = CalculateDistance(caster, endPos)/self:GetSpecialValueFor("leap_speed")})
end


modifier_boss1b_leap_attack_thinker = class({})
LinkLuaModifier("modifier_boss1b_leap_attack_thinker", "bosses/boss1b/boss1b_leap.lua", 0)

function modifier_boss1b_leap_attack_thinker:OnCreated()
	self.distance = 0
	self.horSpeed = self:GetSpecialValueFor("leap_speed") * FrameTime()
	self.verSpeed = self:GetSpecialValueFor("leap_height") / (self:GetDuration() / 2) * FrameTime()
	self.verAcc = - (self.verSpeed / (self:GetDuration() / 2))  * FrameTime()
	if IsServer() then 
		self.direction = CalculateDirection(self:GetAbility():GetCursorPosition(), self:GetParent())
		self:GetParent():Interrupt()
		self:GetParent():Hold()
		self:StartMotionController()
	end
end

function modifier_boss1b_leap_attack_thinker:OnDestroy()
	if IsServer() then
		FindClearSpaceForUnit(self:GetParent(), self:GetParent():GetAbsOrigin(), true)
		for _, enemy in ipairs( self:GetParent():FindEnemyUnitsInRadius(self:GetParent():GetAbsOrigin(), self:GetSpecialValueFor("leap_radius"))) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:GetAbility():DealDamage(enemy, self:GetParent(), self:GetSpecialValueFor("leap_damage"))
				enemy:AddNewModifier(self:GetParent(), self:GetAbility(), "modifier_boss1b_leap_slow", {duration = self:GetSpecialValueFor("slow_duration")})
			end	
		end
		self:StopMotionController()
	end
end

function modifier_boss1b_leap_attack_thinker:DoControlledMotion()
	if self:GetParent():IsNull() then return end
	local parent = self:GetParent()
	if parent:IsAlive() then
		parent:SetAbsOrigin( (self.prevLoc or parent:GetAbsOrigin()) + self.direction * self.horSpeed * Vector(1,1,0) )
		parent:SetAbsOrigin( parent:GetAbsOrigin() + Vector(0,0,self.verSpeed) )
		
		self.prevLoc = parent:GetAbsOrigin()
		self.verSpeed = self.verSpeed + self.verAcc
	else
		FindClearSpaceForUnit(parent, parent:GetAbsOrigin(), true)
		self:Destroy()
		return nil
	end       
	
end

function modifier_boss1b_leap_attack_thinker:GetEffectName()
	return "particles/units/heroes/hero_tiny/tiny_toss_blur.vpcf"
end

function modifier_boss1b_leap_attack_thinker:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

modifier_boss1b_leap_slow = class({})
LinkLuaModifier("modifier_boss1b_leap_slow", "bosses/boss1b/boss1b_leap.lua", 0)


function modifier_boss1b_leap_slow:OnCreated()
	self.ms = self:GetSpecialValueFor("leap_slow")
end

function modifier_boss1b_leap_slow:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss1b_leap_slow:GetModifierMoveSpeedBonus_Percentage()
	return self.ms
end

function modifier_boss1b_leap_slow:GetEffectName()
	return "particles/items3_fx/silver_edge_slow.vpcf"
endboss1b_spear_pierce = class({})

function boss1b_spear_pierce:GetCooldown(nLevel)
	return self:GetCaster():GetSecondsPerAttack()
end

function boss1b_spear_pierce:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCaster():GetAbsOrigin() + CalculateDirection(self:GetCursorPosition(), self:GetCaster()) * self:GetSpecialValueFor("spear_distance"), self:GetSpecialValueFor("spear_width"))
	self:SetOverrideCastPoint( self:GetCaster():GetCastPoint( true ) )
	return true
end

function boss1b_spear_pierce:OnSpellStart()
	local caster = self:GetCaster()
	self:FireLinearProjectile("particles/bosses/boss1b/boss1b_spear_pierce.vpcf", CalculateDirection(self:GetCursorPosition(), caster) * self:GetSpecialValueFor("spear_speed"), self:GetSpecialValueFor("spear_distance"), self:GetSpecialValueFor("spear_width"))
end

function boss1b_spear_pierce:OnProjectileHit(hTarget, vLocation)
	if hTarget and hTarget:TriggerSpellAbsorb(self) then return true end
	if hTarget ~= nil and ( not hTarget:IsMagicImmune() ) and ( not hTarget:IsInvulnerable() ) then
		self:DealDamage(self:GetCaster(), hTarget, self:GetCaster():GetAttackDamage() * 1.25, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
		return false
	end
endboss1b_spear_pin = class({})

function boss1b_spear_pin:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCaster():GetAbsOrigin() + CalculateDirection(self:GetCursorPosition(), self:GetCaster()) * self:GetSpecialValueFor("spear_distance"), self:GetSpecialValueFor("spear_width"))
	self.warmupFX = ParticleManager:CreateParticle("particles/units/heroes/hero_skywrath_mage/skywrath_mage_concussive_projectile_warmup.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster())
	ParticleManager:SetParticleControlEnt(self.warmupFX, 0, self:GetCaster(), PATTACH_POINT_FOLLOW, "attach_attack1", self:GetCaster():GetAbsOrigin(), true)
	return true
end

function boss1b_spear_pin:OnAbilityPhaseInterrupted()
	ParticleManager:ClearParticle(self.warmupFX)
end

function boss1b_spear_pin:OnSpellStart()
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmupFX)
	self:FireLinearProjectile("particles/bosses/boss1b/boss1b_spear_pin.vpcf", CalculateDirection(self:GetCursorPosition(), caster) * self:GetSpecialValueFor("spear_speed"), self:GetSpecialValueFor("spear_distance"), self:GetSpecialValueFor("spear_width"))
end

function boss1b_spear_pin:OnProjectileHit(hTarget, vLocation)
	if hTarget and hTarget:TriggerSpellAbsorb(self) then return true end
	if hTarget ~= nil and ( not hTarget:IsMagicImmune() ) and ( not hTarget:IsInvulnerable() ) then
		self:DealDamage(self:GetCaster(), hTarget, self:GetSpecialValueFor("spear_damage"))
		self:Stun( hTarget, self:GetSpecialValueFor("stun_duration") )
		return true
	end
endboss26b_ankle_biter = class({})

function boss26b_ankle_biter:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	self.distance = CalculateDistance(caster, target) + 200
	self.direction = CalculateDirection(target, caster)
	ParticleManager:FireLinearWarningParticle( caster:GetAbsOrigin(), caster:GetAbsOrigin() + self.direction * self.distance, (caster:GetHullRadius() * 2 + 32) * 2 )
	EmitSoundOn("Hero_Ursa.Overpower", caster)
	return true
end

function boss26b_ankle_biter:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	local ability = self
	
	local speed = 600 * FrameTime()
	
	caster:AddNewModifier(caster, self, "modifier_phased", {duration = 0.1})
	Timers:CreateTimer(FrameTime(), function()
		local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), caster:GetHullRadius() * 2 + 32 )
		if self.distance > 0 and not enemies[1] then
			caster:SetAbsOrigin(caster:GetAbsOrigin() + self.direction * speed)
			self.distance = self.distance - speed
			return FrameTime()
		elseif enemies[1] then
			if not enemies[1]:TriggerSpellAbsorb(self) then
				return self:Grab(enemies[1])
			end
		end
		caster:Stop()
		caster:Interrupt()
		caster:AddNewModifier(caster, ability, "modifier_stunned_generic", {duration = ability:GetSpecialValueFor("duration"), delay = false})
		FindClearSpaceForUnit(caster, caster:GetAbsOrigin(), true)
		ResolveNPCPositions( caster:GetAbsOrigin(), 125 )
	end)
	self.channel = 0
end

function boss26b_ankle_biter:Grab(target)
	local caster = self:GetCaster()
	local ability = self
	
	caster:AddNewModifier(caster, ability, "modifier_phased", {duration = 0.1})
	caster:SetAbsOrigin(target:GetAbsOrigin())
	self.initialDistance = CalculateDistance(caster, target)
	Timers:CreateTimer(FrameTime(), function()
		if caster and target and not caster:IsNull() and not target:IsNull()
		and (CalculateDistance(caster, target) - self.initialDistance) < ( caster:GetHullRadius() + target:GetHullRadius() + ability:GetSpecialValueFor("break_distance") ) * FrameTime() 
		and not (caster:IsStunned() or caster:IsSilenced() or caster:IsHexed()) and ability.channel < 5 then
			ability.channel = (ability.channel or 0) + FrameTime()
			caster:AddNewModifier(caster, ability, "modifier_phased", {duration = FrameTime() + 0.1})
			caster:SetAbsOrigin(target:GetAbsOrigin())
			self.initialDistance = CalculateDistance(caster, target)
			return FrameTime()
		elseif caster and not caster:IsNull() then
			caster:Stop()
			caster:Interrupt()
			caster:AddNewModifier(caster, ability, "modifier_stunned_generic", {duration = ability:GetSpecialValueFor("duration"), delay = false})
			FindClearSpaceForUnit(caster, caster:GetAbsOrigin(), true)
			ResolveNPCPositions( caster:GetAbsOrigin(), 125 ) 
		end
	end)
endboss26b_wound = class({})

function boss26b_wound:GetIntrinsicModifierName()
	return "modifier_boss26b_wound_passive"
end

modifier_boss26b_wound_passive = class({})
LinkLuaModifier("modifier_boss26b_wound_passive", "bosses/boss27/boss26b_wound.lua", 0)

function modifier_boss26b_wound_passive:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
	self.stack_damage = self:GetSpecialValueFor("stack_damage") / 100
end

function modifier_boss26b_wound_passive:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
	self.stack_damage = self:GetSpecialValueFor("stack_damage") / 100
end

function modifier_boss26b_wound_passive:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss26b_wound_passive:OnAttackLanded(params)
	if self:GetParent() == params.attacker and not params.attacker:PassivesDisabled() then
		params.target:AddNewModifier(self:GetParent(), self:GetAbility(), "modifier_boss26b_wound_stack", {duration = self.duration})
		self:GetAbility():DealDamage(params.attacker, params.target, params.attacker:GetAttackDamage() * self.stack_damage * params.target:FindModifierByName("modifier_boss26b_wound_stack"):GetStackCount(), {damage_type = DAMAGE_TYPE_PHYSICAL, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
	end
end

function modifier_boss26b_wound_passive:IsHidden()
	return true
end

modifier_boss26b_wound_stack = class({})
LinkLuaModifier("modifier_boss26b_wound_stack", "bosses/boss27/boss26b_wound.lua", 0)

function modifier_boss26b_wound_stack:OnCreated()
	self:SetStackCount(1)
end

function modifier_boss26b_wound_stack:OnRefresh()
	self:IncrementStackCount()
end

function modifier_boss26b_wound_stack:GetEffectName()
	return "particles/units/heroes/hero_bounty_hunter/bounty_hunter_track_scroll_blood.vpcf"
endboss26_ravage = class({})

function boss26_ravage:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local newPos = caster:GetAbsOrigin() + CalculateDirection(self:GetCursorPosition(), caster) * self:GetSpecialValueFor("jump_distance")
	ParticleManager:FireLinearWarningParticle(caster:GetAbsOrigin(), newPos, 150 * 2 )
	EmitSoundOn("Hero_Ursa.Enrage", caster)
	return true
end

function boss26_ravage:OnSpellStart()
	local caster = self:GetCaster()
	local ability = self
	local vDir = CalculateDirection(self:GetCursorPosition(), caster) * Vector(1,1,0)
	
	local duration = self:GetSpecialValueFor("stun_duration")
	local damage = self:GetSpecialValueFor("impact_damage")
	
	local distance = self:GetSpecialValueFor("jump_distance")
	local position = caster:GetAbsOrigin() + vDir * distance
	local speed = (distance / 0.2) * FrameTime()
	caster:AddNewModifier(caster, self, "modifier_stunned_generic", {duration = 0.19, delay = false})
	
	self.blurFX = ParticleManager:CreateParticle("particles/units/heroes/hero_tiny/tiny_toss_blur.vpcf", PATTACH_POINT_FOLLOW, caster)
	
	local distTravel = 0
	Timers:CreateTimer(function()
		local newPos = GetGroundPosition(caster:GetAbsOrigin(), caster) + vDir * speed
		local enemies = caster:FindEnemyUnitsInLine(caster:GetAbsOrigin(), newPos, 150 )
		for _, enemy in ipairs(enemies) do
			if enemy:TriggerSpellAbsorb(self) then return end
			ability:DealDamage(caster, enemy, damage)
			enemy:AddNewModifier(caster, ability, "modifier_stunned_generic", {duration = duration, delay = false})
			caster:StartGesture(ACT_DOTA_CAST_ABILITY_1)
			EmitSoundOn("Hero_Ursa.Earthshock", caster)
			ParticleManager:ClearParticle(ability.blurFX)
			return nil
		end
		caster:SetAbsOrigin( newPos)
		distTravel = distTravel + speed
		if distTravel < distance then
			return FrameTime()
		else
			ParticleManager:ClearParticle(self.blurFX)
			ResolveNPCPositions(caster:GetAbsOrigin(), 150 )
		end
	end)
endboss26_rend = class({})

function boss26_rend:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local direction = CalculateDirection(self:GetCursorPosition(), caster)
	local distance =  self:GetCastRange(caster:GetAbsOrigin(), caster)
	local position = caster:GetAbsOrigin() + direction * distance
	ParticleManager:FireWarningParticle(position, distance)
	return true
end



function boss26_rend:OnSpellStart()
	local caster = self:GetCaster()
	local distance =  self:GetCastRange(caster:GetAbsOrigin(), caster)
	local direction = CalculateDirection(self:GetCursorPosition(), caster)
	local position = caster:GetAbsOrigin() + direction * distance
	
	local damagePerStack = self:GetSpecialValueFor("bonus_damage_per_stack")
	local damage = self:GetSpecialValueFor("damage")
	local duration = self:GetSpecialValueFor("duration")
	
	EmitSoundOn("Hero_Ursa.Overpower", caster)
	
	ParticleManager:FireParticle("particles/units/heroes/hero_ursa/ursa_fury_sweep_up_right.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] =  caster:GetAnglesAsVector()})
	local enemies = caster:FindEnemyUnitsInRadius(position, distance)
	for _, enemy in ipairs(enemies) do
		if enemy:TriggerSpellAbsorb(self) then return end
		local stacks = 0
		if enemy:HasModifier("modifier_boss26_rend_stack") then stacks = enemy:FindModifierByName("modifier_boss26_rend_stack"):GetStackCount() end
		self:DealDamage(caster, enemy, damage + stacks * damagePerStack)
		enemy:AddNewModifier(caster, self, "modifier_boss26_rend_stack", {duration = duration})
		ParticleManager:FireParticle("particles/units/heroes/hero_ursa/ursa_fury_swipes.vpcf", PATTACH_POINT_FOLLOW, caster)
		
	end
	EmitSoundOn("Hero_Ursa.Attack", caster)
end


modifier_boss26_rend_stack = class({})
LinkLuaModifier("modifier_boss26_rend_stack", "bosses/boss27/boss26_rend.lua", 0)

if IsServer() then
	function modifier_boss26_rend_stack:OnCreated()
		self:SetStackCount(1)
	end

	function modifier_boss26_rend_stack:OnRefresh()
		self:IncrementStackCount()
	end
end

function modifier_boss26_rend_stack:GetEffectName()
	return "particles/units/heroes/hero_ursa/ursa_fury_swipes_debuff.vpcf"
end

function modifier_boss26_rend_stack:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
endboss26_smash = class({})

function boss26_smash:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetSpecialValueFor("radius"))
	return true
end

function boss26_smash:OnSpellStart()
	local caster = self:GetCaster()
	
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local duration = self:GetSpecialValueFor("duration")
	
	ParticleManager:FireParticle("particles/units/heroes/hero_ursa/ursa_earthshock.vpcf", PATTACH_ABSORIGIN, caster)
	EmitSoundOn("Hero_Ursa.Earthshock", caster)
	
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), radius) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, enemy, damage)
			enemy:AddNewModifier(caster, self, "modifier_boss26_smash_slow", {duration = duration})
		end
	end
end

modifier_boss26_smash_slow = class({})
LinkLuaModifier("modifier_boss26_smash_slow", "bosses/boss27/boss26_smash.lua", 0)

function modifier_boss26_smash_slow:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_boss26_smash_slow:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss26_smash_slow:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end
boss27_destroy = class({})

function boss27_destroy:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_Ursa.Overpower", caster)
	for id, bear in pairs( caster.bigBearsTable ) do
		if not bear:IsNull() and bear:IsAlive() then
			ParticleManager:FireTargetWarningParticle(bear)
		end
	end
	for id, bear in pairs( caster.smallBearsTable ) do
		if not bear:IsNull() and bear:IsAlive() then
			ParticleManager:FireTargetWarningParticle(bear)
		end
	end
	return true
end

function boss27_destroy:OnSpellStart()
	local caster = self:GetCaster()
	
	local duration = self:GetSpecialValueFor("duration")
	for id, bear in pairs( caster.bigBearsTable ) do
		if not bear:IsNull() and bear:IsAlive() then
			bear:AddNewModifier(caster, self, "modifier_boss27_destroy_buff", {duration = duration})
		end
	end
	for id, bear in pairs( caster.smallBearsTable ) do
		if not bear:IsNull() and bear:IsAlive() then
			bear:AddNewModifier(caster, self, "modifier_boss27_destroy_buff", {duration = duration})
		end
	end
	caster:FindAbilityByName("boss27_kill_them"):UseResources(false, false, true)
	caster:FindAbilityByName("boss27_protect_me"):UseResources(false, false, true)
end

modifier_boss27_destroy_buff = class({})
LinkLuaModifier("modifier_boss27_destroy_buff", "bosses/boss27/boss27_destroy.lua", 0)

function modifier_boss27_destroy_buff:OnCreated()
	self.cdr = self:GetSpecialValueFor("bonus_cdr")
	self.ms = self:GetSpecialValueFor("bonus_ms")
end

function modifier_boss27_destroy_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING, MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss27_destroy_buff:GetModifierMoveSpeedBonus_Percentage()
	return self.ms
end

function modifier_boss27_destroy_buff:GetModifierPercentageCooldownStacking()
	return self.cdr
end

function modifier_boss27_destroy_buff:GetEffectName()
	return "particles/items2_fx/mask_of_madness.vpcf"
endboss27_kill_them = class({})

function boss27_kill_them:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	ParticleManager:FireTargetWarningParticle(self:GetCursorTarget() )
	return true
end

function boss27_kill_them:OnSpellStart()
	local caster = self:GetCaster()
	
	local duration = self:GetSpecialValueFor("duration")
	if self:GetCursorTarget():TriggerSpellAbsorb(self) then return end
	self:GetCursorTarget():AddNewModifier(caster, self, "modifier_boss27_kill_them_debuff", {duration = duration})
	
	caster:FindAbilityByName("boss27_destroy"):UseResources(false, false, true)
	caster:FindAbilityByName("boss27_protect_me"):UseResources(false, false, true)
end


modifier_boss27_kill_them_debuff = class({})
LinkLuaModifier("modifier_boss27_kill_them_debuff", "bosses/boss27/boss27_kill_them.lua", 0)

function modifier_boss27_kill_them_debuff:OnCreated()
	self.amp = self:GetSpecialValueFor("damage_amp")
	if IsServer() then
		local shieldFX = ParticleManager:CreateParticle("particles/units/heroes/hero_bounty_hunter/bounty_hunter_track_shield.vpcf", PATTACH_OVERHEAD_FOLLOW, self:GetParent())
		ParticleManager:SetParticleControl(shieldFX, 0, self:GetParent():GetAbsOrigin())
		self:AddOverHeadEffect(shieldFX)
	end
end

function modifier_boss27_kill_them_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss27_kill_them_debuff:GetModifierIncomingDamage_Percentage()
	return self.amp
end

function modifier_boss27_kill_them_debuff:GetEffectName()
	return "particles/units/heroes/hero_bounty_hunter/bounty_hunter_track_trail.vpcf"
endboss27_protect_me = class({})

function boss27_protect_me:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_Ursa.Overpower", caster)
	for id, bear in pairs( caster.bigBearsTable ) do
		if not bear:IsNull() and bear:IsAlive() then
			ParticleManager:FireTargetWarningParticle(bear)
		end
	end
	for id, bear in pairs( caster.smallBearsTable ) do
		if not bear:IsNull() and bear:IsAlive() then
			ParticleManager:FireTargetWarningParticle(bear)
		end
	end
	return true
end

function boss27_protect_me:OnSpellStart()
	local caster = self:GetCaster()
	
	local duration = self:GetSpecialValueFor("duration")
	caster:AddNewModifier(caster, self, "modifier_boss27_protect_me_buff", {duration = duration})
	
	caster:FindAbilityByName("boss27_destroy"):UseResources(false, false, true)
	caster:FindAbilityByName("boss27_kill_them"):UseResources(false, false, true)
end

modifier_boss27_protect_me_buff = class({})
LinkLuaModifier("modifier_boss27_protect_me_buff", "bosses/boss27/boss27_protect_me.lua", 0)

function modifier_boss27_protect_me_buff:OnCreated()
	local caster = self:GetCaster()
	local parent = self:GetParent()
	self.red = self:GetSpecialValueFor("damage_reduction")
	if IsServer() then 
		self:StartIntervalThink(0.5)
		
		for id, bear in pairs( caster.bigBearsTable ) do
			if not bear:IsNull() and bear:IsAlive() then
				local linkFX = ParticleManager:CreateParticle("particles/bosses/boss27/boss27_protect_me_link.vpcf", PATTACH_POINT_FOLLOW, parent)
				ParticleManager:SetParticleControlEnt(linkFX, 0, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin(), true)
				ParticleManager:SetParticleControlEnt(linkFX, 1, bear, PATTACH_POINT_FOLLOW, "attach_hitloc", bear:GetAbsOrigin(), true)
				self:AddEffect(linkFX)
			end
		end
		for id, bear in pairs( caster.smallBearsTable ) do
			if not bear:IsNull() and bear:IsAlive() then
				local linkFX = ParticleManager:CreateParticle("particles/bosses/boss27/boss27_protect_me_link.vpcf", PATTACH_POINT_FOLLOW, parent)
				ParticleManager:SetParticleControlEnt(linkFX, 0, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin(), true)
				ParticleManager:SetParticleControlEnt(linkFX, 1, bear, PATTACH_POINT_FOLLOW, "attach_hitloc", bear:GetAbsOrigin(), true)
				self:AddEffect(linkFX)
			end
		end
	end
end

function modifier_boss27_protect_me_buff:OnIntervalThink()
	if self:GetCaster():GetTotalBearCount() == 0 then 
		self:Destroy()
	end
end

function modifier_boss27_protect_me_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss27_protect_me_buff:GetModifierIncomingDamage_Percentage()
	return self.red
end

function modifier_boss27_protect_me_buff:GetEffectName()
	return "particles/econ/events/ti6/teleport_start_ti6_lvl3_shield.vpcf"
endboss27_ursa_giant = class({})

function boss27_ursa_giant:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_Ursa.Enrage", caster)
	self.warmUpFX = ParticleManager:CreateParticle("particles/bosses/boss27/boss27_summon_bigbears_summon.vpcf", PATTACH_POINT_FOLLOW, caster)
	return true
end

function boss27_ursa_giant:OnAbilityPhaseInterrupted()
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmUpFX)
	StopSoundOn("Hero_Ursa.Enrage", caster)
end

function boss27_ursa_giant:OnSpellStart()
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmUpFX)
	
	local bearCount = self:GetSpecialValueFor("spawn_count") + math.floor( HeroList:GetActiveHeroCount() / self:GetSpecialValueFor("players_per_bonus") )
	local bearSpawnRadius = self:GetSpecialValueFor("spawn_radius")
	for i = 1, bearCount do
		local bearPos = caster:GetAbsOrigin() + ActualRandomVector(bearSpawnRadius, 150)
		local bear = CreateUnitByName("npc_dota_boss26", bearPos, true, caster, caster, caster:GetTeamNumber())
		ParticleManager:FireParticle("particles/units/heroes/hero_ursa/ursa_earthshock_energy.vpcf", PATTACH_POINT_FOLLOW, bear)
		bear:FindAbilityByName("boss26_smash"):SetLevel(self:GetLevel())
		bear:FindAbilityByName("boss26_rend"):SetLevel(self:GetLevel())
		bear:FindAbilityByName("boss26_ravage"):SetLevel(self:GetLevel())
		EmitSoundOn("ursa_ursa_pain_"..RandomInt(14,20), caster)
		table.insert(caster.bigBearsTable, bear)
	end
endboss27_ursa_warrior = class({})

function boss27_ursa_warrior:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_Ursa.Enrage", caster)
	self.warmUpFX = ParticleManager:CreateParticle("particles/bosses/boss27/boss27_summon_lilbears_summon.vpcf", PATTACH_POINT_FOLLOW, caster)
	return true
end

function boss27_ursa_warrior:OnAbilityPhaseInterrupted()
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmUpFX)
	StopSoundOn("Hero_Ursa.Enrage", caster)
end

function boss27_ursa_warrior:OnSpellStart()
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmUpFX)
	
	local bearCount = self:GetSpecialValueFor("spawn_count") + math.floor( HeroList:GetActiveHeroCount() / self:GetSpecialValueFor("players_per_bonus") )
	local bearSpawnRadius = self:GetSpecialValueFor("spawn_radius")
	for i = 1, bearCount do
		local bearPos = caster:GetAbsOrigin() + ActualRandomVector(bearSpawnRadius, 150)
		local bear = CreateUnitByName("npc_dota_boss26_mini", bearPos, true, caster, caster, caster:GetTeamNumber())
		ParticleManager:FireParticle("particles/units/heroes/hero_ursa/ursa_earthshock_energy.vpcf", PATTACH_POINT_FOLLOW, bear)
		bear:FindAbilityByName("boss26b_ankle_biter"):SetLevel(self:GetLevel())
		bear:FindAbilityByName("boss26b_wound"):SetLevel(self:GetLevel())
		bear.bearMaster = caster
		EmitSoundOn("ursa_ursa_pain_"..RandomInt(14,20), caster)
		table.insert(caster.smallBearsTable, bear)
	end
endboss33a_dark_orb = class({})

function boss33a_dark_orb:OnAbilityPhaseStart(forceWarning, direction, position)
	local caster = self:GetCaster()
	local vDir = CalculateDirection(self:GetCursorPosition(), caster)
	if caster:GetHealthPercent() >= 50 and not caster:IsMinion() then
		ParticleManager:FireLinearWarningParticle(caster:GetAbsOrigin(), caster:GetAbsOrigin() + vDir * self:GetTrueCastRange() )
	else
		ParticleManager:FireWarningParticle(caster:GetAbsOrigin(), self:GetTrueCastRange())
	end
	return true
end

function boss33a_dark_orb:OnSpellStart()
	local caster = self:GetCaster()
	local direction = CalculateDirection(self:GetCursorPosition(), caster)
	
	local distance = self:GetSpecialValueFor("distance")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local razePos = caster:GetAbsOrigin() + caster:GetForwardVector() * distance
	
	local belowHPThreshold = caster:GetHealthPercent() < 50
	local sdDeath = not caster:IsTwinAlive()
	
	local duration = self:GetSpecialValueFor("phase2_duration")
	local angleVel = self:GetSpecialValueFor("phase2_angle_velocity")
	local tick_interval = duration / (360 / angleVel)
	
	EmitSoundOn("Hero_Puck.Illusory_Orb", caster)
	
	if not belowHPThreshold or caster:IsMinion() then
		self:CreateDarkOrb(direction)
	else
		self:CreateDarkOrb(direction)
		Timers:CreateTimer(tick_interval, function()
			direction = RotateVector2D(direction, ToRadians( angleVel ) )
			self:CreateDarkOrb(direction)
			duration = duration - tick_interval
			if duration > 0 then
				return tick_interval
			end
		end)
	end
end


function boss33a_dark_orb:CreateDarkOrb(direction)
	local caster = self:GetCaster()
	local distance = self:GetTrueCastRange()
	local speed = self:GetSpecialValueFor("orb_speed")
	local radius = self:GetSpecialValueFor("orb_radius")
	local damage = self:GetSpecialValueFor("damage")
	local duration = self:GetSpecialValueFor("duration")
	
	local ProjectileHit = function(self, target, position)
		if target then
			local caster = self:GetCaster()
			local ability = self:GetAbility()
			if not self.hitUnits[target:entindex()] then
				if target:TriggerSpellAbsorb(self) then return false end
				ability:DealDamage(caster, target, self.damage)
				EmitSoundOn("Hero_Puck.IIllusory_Orb_Damage", caster)
				ParticleManager:FireParticle("particles/units/heroes/hero_puck/puck_illusory_orb_blink_out.vpcf", PATTACH_POINT_FOLLOW, target)
				target:AddNewModifier(caster, ability, "modifier_silence", {duration = duration})
				target:AddNewModifier(caster, ability, "modifier_disarmed", {duration = duration})
				self.hitUnits[target:entindex()] = true
			end
		end
		return true
	end
	
	local ProjectileThink = function(self)
		local position = self:GetPosition()
		local velocity = self:GetVelocity()
		local caster = self:GetCaster()
		if velocity.z > 0 then velocity.z = 0 end
		self:SetPosition( position + (velocity*FrameTime()) )
		local distanceCap = 0.75
		if caster:GetHealthPercent() < 50 then distanceCap = 0.4 end
		if self.distanceTravelled > self.distance * distanceCap and RollPercentage(5) and not caster:IsTwinAlive() and not caster.HasRecentlyFuckOrbed then
			caster.HasRecentlyFuckOrbed = true
			local telePos = self:GetPosition()
			ParticleManager:FireWarningParticle(telePos, 350)
			Timers:CreateTimer(0.3, function()
				FindClearSpaceForUnit(caster, telePos, true)
				ParticleManager:FireParticle("particles/units/heroes/hero_puck/puck_illusory_orb_blink_out.vpcf", PATTACH_POINT_FOLLOW, caster)
				EmitSoundOn("Hero_Puck.EtherealJaunt", caster)
				ProjectileManager:ProjectileDodge(caster)
				Timers:CreateTimer(0.3, function() caster.HasRecentlyFuckOrbed = false end)
			end)
			self:Destroy()
		end
	end
	
	ProjectileHandler:CreateProjectile(ProjectileThink, ProjectileHit, {  FX = "particles/bosses/boss33/boss33_dark_orb.vpcf",
																		  position = caster:GetAbsOrigin(),
																		  caster = caster,
																		  ability = self,
																		  speed = speed,
																		  radius = radius,
																		  velocity = speed * direction,
																		  distance = distance,
																		  hitUnits = {},
																		  damage = damage,
																		  duration = duration})
endboss33a_devitalize = class({})

function boss33a_devitalize:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local vDir = CalculateDirection(self:GetCursorPosition(), caster)
	ParticleManager:FireLinearWarningParticle(caster:GetAbsOrigin(), caster:GetAbsOrigin() + vDir * self:GetTrueCastRange() )
	return true
end

function boss33a_devitalize:OnSpellStart()
	local caster = self:GetCaster()
	local direction = CalculateDirection(self:GetCursorPosition(), caster)
	
	local speed = self:GetSpecialValueFor("speed")
	local radius = self:GetSpecialValueFor("radius")
	local distance = self:GetTrueCastRange()
	local duration = self:GetSpecialValueFor("duration")
	
	local ProjectileThink = function(self)
		local position = self:GetPosition()
		local velocity = self:GetVelocity()
		local speed = self:GetSpeed()
		local caster = self:GetCaster()
		if velocity.z > 0 then velocity.z = 0 end
		local homeEnemies = caster:FindEnemyUnitsInRadius(position, self:GetRadius() * 5, {order = FIND_CLOSEST})
		for _, enemy in ipairs(homeEnemies) do
			velocity = velocity + CalculateDirection(enemy, position) * speed * 0.05
			if velocity:Length2D() ~= speed then velocity = velocity:Normalized() * speed end
			break
		end
		self:SetVelocity(velocity)
		self:SetPosition( position + (velocity*FrameTime()) )
	end
	if caster:GetHealthPercent() < 50 and not caster:IsMinion() then
		ProjectileThink = function(self)
			local position = self:GetPosition()
			local velocity = self:GetVelocity()
			local caster = self:GetCaster()
			local speed = self:GetSpeed()
			if velocity.z > 0 then velocity.z = 0 end
			local homeEnemies = caster:FindEnemyUnitsInRadius(position, self:GetRadius() * 5, {order = FIND_CLOSEST})
			for _, enemy in ipairs(homeEnemies) do
				velocity = velocity + CalculateDirection(enemy, position) * speed * 0.05
				if velocity:Length2D() ~= speed then velocity = velocity:Normalized() * speed end
				break
			end
			self:SetVelocity(velocity)
			self:SetPosition( position + (velocity*FrameTime()) )
			if RollPercentage(1) then
				local newdir1 = RotateVector2D(self:GetVelocity(), ToRadians(10))
				local newdir2 = RotateVector2D(self:GetVelocity(), ToRadians(-10))
				self:SetVelocity(newdir1 * speed)
				ProjectileHandler:CreateProjectile(self.thinkBehavior, self.hitBehavior, {  FX = "particles/bosses/boss33/boss3a_devitalize.vpcf",
																					  position = self:GetPosition(),
																					  caster = self:GetCaster(),
																					  ability = self:GetAbility(),
																					  speed = speed,
																					  radius = self:GetRadius(),
																					  velocity = speed * newdir2,
																					  distance = self.distance,
																					  hitUnits = {},
																					  modDuration = self.duration,
																					  distanceTravelled = self.distanceTravelled})
			end
		end
	end
	
	
	
	
	local ProjectileHit = function(self, target, position)
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if not self.hitUnits[target:entindex()] then
			if target:TriggerSpellAbsorb(self) then return false end
			EmitSoundOn("Hero_ShadowDemon.ShadowPoison.Impact", caster)
			ParticleManager:FireParticle("particles/units/heroes/hero_shadow_demon/shadow_demon_shadow_poison_release.vpcf", PATTACH_POINT_FOLLOW, target)
			target:AddNewModifier(caster, ability, "modifier_boss33a_devitalize_debuff", {duration = self.modDuration or ability:GetSpecialValueFor("duration")})
			self.hitUnits[target:entindex()] = true
		end
		return true
	end
	
	ProjectileHandler:CreateProjectile(ProjectileThink, ProjectileHit, {  FX = "particles/bosses/boss33/boss3a_devitalize.vpcf",
																		  position = caster:GetAbsOrigin(),
																		  caster = caster,
																		  ability = self,
																		  speed = speed,
																		  radius = radius,
																		  velocity = speed * direction,
																		  distance = distance,
																		  hitUnits = {},
																		  modDuration = duration})
end

modifier_boss33a_devitalize_debuff = class({})
LinkLuaModifier("modifier_boss33a_devitalize_debuff", "bosses/boss33/boss33a_devitalize.lua", 0)

function modifier_boss33a_devitalize_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_DISABLE_HEALING}
end

function modifier_boss33a_devitalize_debuff:GetDisableHealing()
	return 1
endboss33a_protective_ward = class({})

function boss33a_protective_ward:GetIntrinsicModifierName()
	return "modifier_boss33a_protective_ward"
end

modifier_boss33a_protective_ward = class({})
LinkLuaModifier("modifier_boss33a_protective_ward", "bosses/boss33/boss33a_protective_ward.lua", 0)

function modifier_boss33a_protective_ward:OnCreated()
	self.sfDeathDamageReduction = self:GetSpecialValueFor("sf_death_reduction")
	local caster = self:GetCaster()
	caster.IsTwinAlive = function( caster )
		return caster.twinDemon and not caster.twinDemon:IsNull() and caster.twinDemon:IsAlive()
	end
end

function modifier_boss33a_protective_ward:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE, MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss33a_protective_ward:GetModifierIncomingDamage_Percentage(params)
	local sfAlive = self:GetParent():IsTwinAlive()
	if self:GetParent():PassivesDisabled() then return end
	if (params.damage_type == DAMAGE_TYPE_PHYSICAL or params.damage_type == DAMAGE_TYPE_PURE) and not HasBit( params.damage_flags, DOTA_DAMAGE_FLAG_PROPERTY_FIRE) then
		if sfAlive then
			ParticleManager:FireParticle("particles/bosses/boss33/boss33a_protection_poof.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
			return -9999
		elseif not sfAlive then
			return self.sdDeathDamageReduction
		end
	end
end

function modifier_boss33a_protective_ward:OnAttackLanded(params)
	if params.attacker == self:GetParent() then
		self:GetAbility():DealDamage(params.attacker, params.target, self:GetParent():GetAverageBaseDamage(), {damage_type = DAMAGE_TYPE_MAGICAL, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
	end
end

boss33b_protective_shield = class({})

function boss33b_protective_shield:GetIntrinsicModifierName()
	return "modifier_boss33b_protective_shield"
end

modifier_boss33b_protective_shield = class({})
LinkLuaModifier("modifier_boss33b_protective_shield", "bosses/boss33/boss33b_protective_shield.lua", 0)

function modifier_boss33b_protective_shield:OnCreated()
	self.sdDeathDamageReduction = self:GetSpecialValueFor("sd_death_reduction")
	local caster = self:GetCaster()
	caster.IsTwinAlive = function( caster )
		return caster.twinDemon and not caster.twinDemon:IsNull() and caster.twinDemon:IsAlive()
	end
end

function modifier_boss33b_protective_shield:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss33b_protective_shield:GetModifierIncomingDamage_Percentage(params)
	local sdAlive = self:GetParent():IsTwinAlive()
	if self:GetParent():PassivesDisabled() then return end
	if params.damage_type == DAMAGE_TYPE_MAGICAL and not HasBit( params.damage_flags, DOTA_DAMAGE_FLAG_PROPERTY_FIRE) then
		if sdAlive then
			ParticleManager:FireParticle("particles/bosses/boss33/boss33b_protection_poof.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
			return -9999
		elseif not sdAlive then
			return self.sdDeathDamageReduction
		end
	end
endboss33b_shadowrazeF = class({})


function boss33b_shadowrazeF:OnAbilityPhaseStart(forceWarning, direction, position)
	local caster = self:GetCaster()
	local distance = self:GetSpecialValueFor("distance")
	local radius = self:GetSpecialValueFor("radius")
	local belowHPThreshold = caster:GetHealthPercent() < 50 or forceWarning
	local vDir = direction or caster:GetForwardVector()
	local vPos = position or caster:GetAbsOrigin() + vDir * distance
	if not belowHPThreshold then
		ParticleManager:FireWarningParticle(GetGroundPosition( (position or caster:GetAbsOrigin()) + vDir * distance, caster), radius)
	else
		ParticleManager:FireLinearWarningParticle(vPos, vPos  + vDir * (distance/3) * self:GetSpecialValueFor("phase2_raze_count"), radius)
	end
	return true
end

function boss33b_shadowrazeF:OnSpellStart()
	local caster = self:GetCaster()
	
	local distance = self:GetSpecialValueFor("distance")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local razePos = caster:GetAbsOrigin() + caster:GetForwardVector() * distance
	
	local belowHPThreshold = caster:GetHealthPercent() < 50
	self:CreateRazePattern(belowHPThreshold, razePos, radius, damage)
	
	local sdDeath = not caster:IsTwinAlive()
	
	if sdDeath and not caster:IsMinion() then
		local degrees = 360
		local angleDiff = 72
		local cd = self:GetCooldownTimeRemaining()
		local vDir = CalculateDirection(razePos, caster)
		local ogPos = caster:GetAbsOrigin()
		local bonusRadius = self:GetSpecialValueFor("sd_death_bonus_radius")
		self:EndCooldown()
		self:StartCooldown( (cd + 8 + self:GetCastPoint())*1.2 )
		self:OnAbilityPhaseStart(belowHPThreshold, RotateVector2D(vDir, ToRadians(angleDiff)), ogPos)
		Timers:CreateTimer(1, function()
			vDir = RotateVector2D(vDir, ToRadians(angleDiff))
			razePos = ogPos + vDir * distance
			self:CreateRazePattern(belowHPThreshold, razePos, radius + bonusRadius, damage, ogPos)
			degrees = degrees - angleDiff
			if degrees > 0 then 
				self:OnAbilityPhaseStart(belowHPThreshold, RotateVector2D(vDir, ToRadians(angleDiff)), ogPos)
				return 1 
			end
		end)
	end
end

function boss33b_shadowrazeF:CreateRazePattern(hpThreshold, position, radius, damage, ogPos)
	local caster = self:GetCaster()
	if hpThreshold and not caster:IsMinion() then
		local count = self:GetSpecialValueFor("phase2_raze_count")
		for i = -3, count do
			local newPos = position + CalculateDirection(position, ogPos or caster) * (self:GetSpecialValueFor("distance")/3) * i
			self:CreateRaze(newPos, radius, damage)
		end
	else
		self:CreateRaze(position, radius, damage)
	end
end

function boss33b_shadowrazeF:CreateRaze(position, radius, damage)
	local caster = self:GetCaster()
	ParticleManager:FireParticle("particles/units/heroes/hero_nevermore/nevermore_shadowraze.vpcf", PATTACH_ABSORIGIN, caster, {[0] = GetGroundPosition(position, caster), [3] = GetGroundPosition(position, caster)})
	EmitSoundOnLocationWithCaster(position, "Hero_Nevermore.Shadowraze", caster)
	local nearbyUnits = caster:FindEnemyUnitsInRadius(position, radius)
	for _, unit in ipairs(nearbyUnits) do
		if not unit:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, unit, damage)
		end
	end
endboss33b_shadowrazeM = class({})

function boss33b_shadowrazeM:OnAbilityPhaseStart(forceWarning, position)
	local caster = self:GetCaster()
	local distance = self:GetSpecialValueFor("distance")
	local radius = self:GetSpecialValueFor("radius")
	local belowHPThreshold = caster:GetHealthPercent() < 50 or forceWarning
	if not belowHPThreshold then
		ParticleManager:FireWarningParticle(GetGroundPosition( position or caster:GetAbsOrigin() + caster:GetForwardVector() * distance ,caster), radius)
	else
		local count = self:GetSpecialValueFor("phase2_raze_count")
		for i = 1, count do
			local newPos = (position or caster:GetAbsOrigin()) + RotateVector2D(caster:GetForwardVector(), ToRadians(360*i/count)) * distance
			ParticleManager:FireWarningParticle(GetGroundPosition(newPos, caster), radius)
		end
	end
	return true
end

function boss33b_shadowrazeM:OnSpellStart()
	local caster = self:GetCaster()
	
	local distance = self:GetSpecialValueFor("distance")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local razePos = caster:GetAbsOrigin() + caster:GetForwardVector() * distance
	
	local belowHPThreshold = caster:GetHealthPercent() < 50
	if belowHPThreshold then razePos = caster:GetAbsOrigin() end
	self:CreateRazePattern(belowHPThreshold, razePos, radius, damage)
	
	local sdDeath = not caster:IsTwinAlive()
	
	if sdDeath and not caster:IsMinion() then
		local duration = self:GetSpecialValueFor("sd_death_duration")
		local bonusRadius = self:GetSpecialValueFor("sd_death_bonus_radius")
		local cd = self:GetCooldownTimeRemaining()
		self:EndCooldown()
		self:StartCooldown( (cd + duration + self:GetCastPoint())*1.2 )
		self:OnAbilityPhaseStart(belowHPThreshold, razePos)
		Timers:CreateTimer(1, function()
			if duration > 0 then
				self:CreateRazePattern(belowHPThreshold, razePos, radius + bonusRadius, damage)
				self:OnAbilityPhaseStart(belowHPThreshold, razePos)
				duration = duration - 1
				return 1
			end
		end)
	end
end

function boss33b_shadowrazeM:CreateRazePattern(hpThreshold, position, radius, damage)
	local caster = self:GetCaster()
	if hpThreshold and not caster:IsMinion() then
		local count = self:GetSpecialValueFor("phase2_raze_count")
		for i = 1, count do
			local newPos = position + RotateVector2D(caster:GetForwardVector(), ToRadians(360*i/count)) * self:GetSpecialValueFor("distance")
			self:CreateRaze(newPos, radius, damage)
		end
	else
		self:CreateRaze(position, radius, damage)
	end
end

function boss33b_shadowrazeM:CreateRaze(position, radius, damage)
	local caster = self:GetCaster()
	ParticleManager:FireParticle("particles/units/heroes/hero_nevermore/nevermore_shadowraze.vpcf", PATTACH_ABSORIGIN, caster, {[0] = GetGroundPosition(position, caster), [3] = GetGroundPosition(position, caster)})
	EmitSoundOnLocationWithCaster(position, "Hero_Nevermore.Shadowraze", caster)
	local nearbyUnits = caster:FindEnemyUnitsInRadius(position, radius)
	for _, unit in ipairs(nearbyUnits) do
		if not unit:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, unit, damage)
		end
	end
endboss33b_shadowrazeN = class({})

function boss33b_shadowrazeN:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local distance = self:GetSpecialValueFor("distance")
	local radius = self:GetSpecialValueFor("radius")
	ParticleManager:FireWarningParticle(GetGroundPosition(caster:GetAbsOrigin() + caster:GetForwardVector() * distance, caster), radius)
	return true
end

function boss33b_shadowrazeN:OnSpellStart()
	local caster = self:GetCaster()
	
	local distance = self:GetSpecialValueFor("distance")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local razePos = caster:GetAbsOrigin() + caster:GetForwardVector() * distance
	
	local belowHPThreshold = caster:GetHealthPercent() < 50
	self:CreateRazePattern(belowHPThreshold, razePos, radius, damage)
	
	local sdDeath = not caster:IsTwinAlive()
	
	if sdDeath and not caster:IsMinion()  then
		local duration = self:GetSpecialValueFor("sd_death_duration")
		local ogPos = caster:GetAbsOrigin()
		
		local cd = self:GetCooldownTimeRemaining()
		self:EndCooldown()
		self:StartCooldown( (cd + duration + self:GetCastPoint())*1.2 )
		
		razePos = ogPos + RandomVector(distance * 3)
		ParticleManager:FireWarningParticle(GetGroundPosition(razePos, caster), radius)
		
		Timers:CreateTimer(self:GetCastPoint(), function()
			duration = duration - self:GetCastPoint()
			self:CreateRazePattern(belowHPThreshold, razePos, radius, damage)
			razePos = ogPos + ActualRandomVector(distance * 3)
			if duration > 0 then
				ParticleManager:FireWarningParticle(GetGroundPosition(razePos, caster), radius)
				return self:GetCastPoint()
			end
		end)
	end
end

function boss33b_shadowrazeN:CreateRazePattern(hpThreshold, position, radius, damage)
	local caster = self:GetCaster()
	if hpThreshold and not caster:IsMinion() then
		self:CreateRaze(position, radius, damage)
		for i = 1, self:GetSpecialValueFor("phase2_cross_count") do
			local newPos = position + RotateVector2D(caster:GetForwardVector(), ToRadians(90*i)) * self:GetSpecialValueFor("distance")
			ParticleManager:FireWarningParticle(newPos, radius)
			Timers:CreateTimer(self:GetCastPoint() * 1.5, function()
				self:CreateRaze(newPos, radius, damage)
			end)
		end
	else
		self:CreateRaze(position, radius, damage)
	end
end

function boss33b_shadowrazeN:CreateRaze(position, radius, damage)
	local caster = self:GetCaster()
	ParticleManager:FireParticle("particles/units/heroes/hero_nevermore/nevermore_shadowraze.vpcf", PATTACH_ABSORIGIN, caster, {[0] = GetGroundPosition(position, caster), [3] = GetGroundPosition(position, caster)})
	EmitSoundOnLocationWithCaster(position, "Hero_Nevermore.Shadowraze", caster)
	local nearbyUnits = caster:FindEnemyUnitsInRadius(position, radius)
	for _, unit in ipairs(nearbyUnits) do
		if not unit:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, unit, damage)
		end
	end
endboss33_eidolon_amp = class({})

boss3a_berserk = class({})

function boss3a_berserk:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle(self:GetCaster())
	EmitSoundOn("DOTA_Item.Armlet.Activate", self:GetCaster())
	EmitSoundOn("DOTA_Item.Armlet.DeActivate", self:GetCaster())
	return true
end

function boss3a_berserk:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_boss3a_berserk", {duration = self:GetSpecialValueFor("duration")})
end

modifier_boss3a_berserk = class({})
LinkLuaModifier("modifier_boss3a_berserk", "bosses/boss3a/boss3a_berserk.lua", 0)

function modifier_boss3a_berserk:OnCreated()
	self.ms = self:GetSpecialValueFor("bonus_movement_speed")
	self.as = self:GetSpecialValueFor("bonus_attack_speed")
end

function modifier_boss3a_berserk:CheckState()
	return {[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss3a_berserk:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_CONSTANT, }
end

function modifier_boss3a_berserk:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_boss3a_berserk:GetModifierMoveSpeedBonus_Constant()
	return self.ms
end

function modifier_boss3a_berserk:GetEffectName()
	return "particles/items2_fx/mask_of_madness.vpcf"
endboss3a_tombstone = class({})

function boss3a_tombstone:GetIntrinsicModifierName()
	return "modifier_boss3a_tombstone_passive"
end

function boss3a_tombstone:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_boss3a_tombstone_thinker", {duration = self:GetChannelTime()})
end

function boss3a_tombstone:OnChannelInterrupted(bInterrupted)
	local caster = self:GetCaster()
	caster:RemoveModifierByName("modifier_boss3a_tombstone_thinker")
end

modifier_boss3a_tombstone_passive = class({})
LinkLuaModifier("modifier_boss3a_tombstone_passive", "bosses/boss3a/boss3a_tombstone.lua", 0)

function modifier_boss3a_tombstone_passive:OnCreated()
	self.overkillThreshold = self:GetSpecialValueFor("overkill_threshold") / 100
end

function modifier_boss3a_tombstone_passive:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH}
end

function modifier_boss3a_tombstone_passive:OnDeath(params)
	if params.unit == self:GetParent() and params.unit:HasModifier("modifier_boss3a_tombstone_thinker") then
		local torso = CreateUnitByName("npc_dota_boss3a_b", params.unit:GetAbsOrigin(), true, nil, nil, params.unit:GetTeam())
		torso.unitIsRoundNecessary = true
	end
end

modifier_boss3a_tombstone_thinker = class({})
LinkLuaModifier("modifier_boss3a_tombstone_thinker", "bosses/boss3a/boss3a_tombstone.lua", 0)

function modifier_boss3a_tombstone_thinker:OnCreated()
	if IsServer() then 
		local caster = self:GetCaster()
		self.heal = caster:GetMaxHealth() * self:GetSpecialValueFor("regen_amount") * 0.01 / self:GetDuration()
		EmitSoundOn("Hero_Undying.Tombstone", caster)
		ParticleManager:FireParticle("particles/units/heroes/hero_undying/undying_tombstone.vpcf", PATTACH_ABSORIGIN_FOLLOW, caster)
		self:StartIntervalThink(0.3) 
	end
end

function modifier_boss3a_tombstone_thinker:OnIntervalThink()
	local parent = self:GetParent()
	parent:HealEvent(self.heal * 0.3, self:GetAbility(), parent)
end

function modifier_boss3a_tombstone_thinker:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss3a_tombstone_thinker:DeclareFunctions()
	return {MODIFIER_PROPERTY_MODEL_CHANGE, MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss3a_tombstone_thinker:GetModifierModelChange()
	return "models/props_gameplay/tombstoneb01.vmdl"
end

function modifier_boss3a_tombstone_thinker:OnTakeDamage(params)
	if params.unit == self:GetParent() then self:GetParent():Kill(params.inflictor, params.attacker) end
end

function modifier_boss3a_tombstone_thinker:GetEffectName()
	return "particles/frostivus_gameplay/frostivus_wraithking_tombstone_warmup_b.vpcf"
endboss3b_acid_interior = class({})

function boss3b_acid_interior:GetIntrinsicModifierName()
	return "modifier_boss3b_acid_interior_passive"
end

modifier_boss3b_acid_interior_passive = class({})
LinkLuaModifier("modifier_boss3b_acid_interior_passive", "bosses/boss3b/boss3b_acid_interior.lua", 0)

function modifier_boss3b_acid_interior_passive:OnCreated()
	self.stack_duration = self:GetSpecialValueFor("stack_duration")
	
	self.aoe_radius = self:GetSpecialValueFor("aoe_radius")
	self.aoe_damage = self:GetSpecialValueFor("aoe_damage")
	if IsServer() then
		local acidFX = ParticleManager:CreateParticle("particles/econ/generic/generic_buff_1/generic_buff_1.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
		ParticleManager:SetParticleControl(acidFX, 14, Vector(1,1,1))
		ParticleManager:SetParticleControl(acidFX, 15, Vector(28, 255, 28))
		self:AddEffect(acidFX)
	end
end

function modifier_boss3b_acid_interior_passive:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH, MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss3b_acid_interior_passive:OnDeath(params)
	if params.unit == self:GetParent() and not params.unit:PassivesDisabled() then
		local position = params.unit:GetAbsOrigin()
		ParticleManager:FireWarningParticle(position, self.aoe_radius)
		Timers:CreateTimer(0.75, function()
			ParticleManager:FireParticle("particles/bosses/boss_green_dragon/boss_green_dragon_rot_explosion.vpcf", PATTACH_ABSORIGIN, params.unit, {[1] = Vector(self.aoe_radius,self.aoe_radius,self.aoe_radius)})
			local enemies = self:GetParent():FindEnemyUnitsInRadius(position, self.aoe_radius)
			for _, enemy in ipairs(enemies) do
				self:GetAbility():DealDamage(self:GetParent(), enemy, self.aoe_damage)
				enemy:ApplyKnockBack(position, 0.5, 0.5, 250, 250, self:GetParent(), self:GetAbility())
				enemy:AddNewModifier(self:GetParent(), self:GetAbility(), "modifier_boss3b_acid_interior_boom", {duration = self.stack_duration * 1.5})
			end
		end)
	end
end

function modifier_boss3b_acid_interior_passive:OnAttackLanded(params)
	if params.attacker == self:GetParent() and not params.attacker:PassivesDisabled() then
		params.target:AddNewModifier(self:GetParent(), self:GetAbility(), "modifier_boss3b_acid_interior_attack", {duration = self.stack_duration})
	end
end

modifier_boss3b_acid_interior_boom = class({})
LinkLuaModifier("modifier_boss3b_acid_interior_boom", "bosses/boss3b/boss3b_acid_interior.lua", 0)

function modifier_boss3b_acid_interior_boom:OnCreated()
	self.armor = self:GetSpecialValueFor("aoe_armor_reduction")
end

function modifier_boss3b_acid_interior_boom:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_boss3b_acid_interior_boom:GetModifierPhysicalArmorBonus()
	return self.armor
end

function modifier_boss3b_acid_interior_boom:GetEffectName()
	return "particles/units/heroes/hero_alchemist/alchemist_acid_spray_debuff.vpcf"
end

function modifier_boss3b_acid_interior_boom:GetAttributes()
	return MODIFIER_ATTRIBUTE_MULTIPLE
end


modifier_boss3b_acid_interior_attack = class({})
LinkLuaModifier("modifier_boss3b_acid_interior_attack", "bosses/boss3b/boss3b_acid_interior.lua", 0)

function modifier_boss3b_acid_interior_attack:OnCreated()
	self.armor = self:GetSpecialValueFor("stack_armor_reduction")
	self.dot = self:GetSpecialValueFor("stack_dot")
	self:SetStackCount(1)
	if IsServer() then self:StartIntervalThink(1) end
end

function modifier_boss3b_acid_interior_attack:OnIntervalThink()
	self:GetAbility():DealDamage(self:GetCaster(), self:GetParent(), self.dot * self:GetStackCount())
end

function modifier_boss3b_acid_interior_attack:OnRefresh()
	self.armor = self:GetSpecialValueFor("stack_armor_reduction")
	self.dot = self:GetSpecialValueFor("stack_dot")
	self:IncrementStackCount()
	if IsServer() then Timers:CreateTimer(self:GetRemainingTime(), function() if self and not self:IsNull() then self:DecrementStackCount() end end) end
end

function modifier_boss3b_acid_interior_attack:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_boss3b_acid_interior_attack:GetModifierPhysicalArmorBonus()
	return self.armor * self:GetStackCount()
end

function modifier_boss3b_acid_interior_attack:GetEffectName()
	return "particles/units/heroes/hero_alchemist/alchemist_acid_spray_debuff.vpcf"
end
boss3b_acid_spit = class({})

function boss3b_acid_spit:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCursorPosition() , self:GetSpecialValueFor("radius") )
	self.fireFX = ParticleManager:CreateParticle("particles/units/heroes/hero_alchemist/alchemist_acid_spray_cast.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl(self.fireFX, 0, self:GetCaster():GetAbsOrigin())
	ParticleManager:SetParticleControl(self.fireFX, 1, self:GetCursorPosition() )
	ParticleManager:SetParticleControl(self.fireFX, 15, Vector(28, 120, 28) )
	ParticleManager:SetParticleControl(self.fireFX, 16, Vector(1, 0, 0) )
	return true
end

function boss3b_acid_spit:OnAbilityPhaseInterrupted()
	ParticleManager:DestroyParticle(self.fireFX, false)
	ParticleManager:ReleaseParticleIndex(self.fireFX)
end

function boss3b_acid_spit:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	local ability = self
	
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("dot")
	local duration = self:GetSpecialValueFor("duration")
	
	EmitSoundOn("Hero_Alchemist.AcidSpray", caster)
	
	local acidFX = ParticleManager:CreateParticle("particles/units/heroes/hero_alchemist/alchemist_acid_spray.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl(acidFX, 0, position)
	ParticleManager:SetParticleControl(acidFX, 1, Vector(radius, 1, 1) )
	ParticleManager:SetParticleControl(acidFX, 15, Vector(0, 200, 0) )
	ParticleManager:SetParticleControl(acidFX, 16, Vector(radius, 0, 0) )
	
	Timers:CreateTimer(function()
		if not caster or caster:IsNull() or not ability or ability:IsNull() then
			ParticleManager:ClearParticle(acidFX)
		end
		local enemies = caster:FindEnemyUnitsInRadius(position, radius)
		for _, enemy in ipairs(enemies) do
			ability:DealDamage(caster, enemy, damage)
			enemy:AddNewModifier(caster, ability, "modifier_boss3b_acid_spit", {duration = 1.5})
			EmitSoundOn("Hero_Alchemist.AcidSpray.Damage", enemy)
		end
		if duration > 0 then
			duration = duration - 1
			return 1
		else
			ParticleManager:DestroyParticle(acidFX, false)
			ParticleManager:ReleaseParticleIndex(acidFX)
		end
	end)
end

modifier_boss3b_acid_spit = class({})
LinkLuaModifier("modifier_boss3b_acid_spit", "bosses/boss3b/boss3b_acid_spit.lua", 0)

function modifier_boss3b_acid_spit:OnCreated()
	self.armor = self:GetSpecialValueFor("armor_reduction")
end


function modifier_boss3b_acid_spit:OnRefresh()
	self.armor = self:GetSpecialValueFor("armor_reduction")
end

function modifier_boss3b_acid_spit:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_boss3b_acid_spit:GetModifierPhysicalArmorBonus()
	return self.armor
end

function modifier_boss3b_acid_spit:GetEffectName()
	return "particles/units/heroes/hero_alchemist/alchemist_acid_spray_debuff.vpcf"
endboss4_death_ball = class({})

function boss4_death_ball:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local casterPos = caster:GetAbsOrigin()
	local direction = CalculateDirection(self:GetCursorPosition(), casterPos)
	ParticleManager:FireLinearWarningParticle(casterPos, casterPos + direction * self:GetSpecialValueFor("distance"), self:GetSpecialValueFor("radius"))
	EmitSoundOn("Hero_Undying.SoulRip.Cast", caster)
	return true
end

function boss4_death_ball:OnAbilityPhaseInterrupted()
	StopSoundOn("Hero_Undying.SoulRip.Cast", caster)
end

function boss4_death_ball:OnSpellStart()
	local caster = self:GetCaster()
	local direction = CalculateDirection(self:GetCursorPosition(), caster)
	
	local speed = self:GetSpecialValueFor("speed")
	local radius = self:GetSpecialValueFor("radius")
	local distance = self:GetSpecialValueFor("distance")
	local damageUnit = self:GetSpecialValueFor("damage_per_unit")
	local maxUnits = self:GetSpecialValueFor("max_units")
	local totalUnits = 0
	local damage = 0
	
	EmitSoundOn("Hero_Undying.SoulRip.Ally", caster)
	for _, ally in ipairs( caster:FindFriendlyUnitsInRadius(caster:GetAbsOrigin(), self:GetSpecialValueFor("search_radius") ) ) do
		if totalUnits <= maxUnits then
			damage = damage + damageUnit
			totalUnits = totalUnits + 1
		end
		self:DealDamage(caster, ally, damageUnit, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_NON_LETHAL})
		ParticleManager:FireRopeParticle("particles/units/heroes/hero_undying/undying_soul_rip_damage.vpcf", PATTACH_POINT_FOLLOW, caster, ally)
	end
	
	local ProjectileHit = function(self, target, position)
		if target then
			local caster = self:GetCaster()
			local ability = self:GetAbility()
			if not self.hitUnits[target:entindex()] then
				if target:TriggerSpellAbsorb(self) then return false end
				ability:DealDamage(caster, target, self.damage)
				caster:HealEvent(self.damage, ability, caster)
				EmitSoundOn("Hero_Undying.PreAttack", caster)
				ParticleManager:FireParticle("particles/econ/items/bloodseeker/bloodseeker_eztzhok_weapon/bloodseeker_bloodbath_eztzhok_burst.vpcf", PATTACH_POINT_FOLLOW, target)
				self.hitUnits[target:entindex()] = true
			end
		end
		return true
	end
	ProjectileHandler:CreateProjectile(PROJECTILE_LINEAR, ProjectileHit, {  FX = "particles/bosses/boss4/boss4_death_ball.vpcf",
																		  position = caster:GetAbsOrigin() + Vector(0,0,200),
																		  caster = caster,
																		  ability = self,
																		  speed = speed,
																		  radius = radius,
																		  velocity = speed * direction,
																		  distance = distance,
																		  hitUnits = {},
																		  damage = damage})
endboss4_sacrifice = class({})

function boss4_sacrifice:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_Undying.Decay.Cast", caster)
	self.warmUpFX = ParticleManager:CreateParticle("particles/generic_aoe_persistent_circle_1/death_timer_glow_rev.vpcf", PATTACH_OVERHEAD_FOLLOW, caster)
	self.zombies = caster:FindAbilityByName("boss4_summon_zombies").zombies or {}
	self.tickrate = self:GetChannelTime() / (caster:FindAbilityByName("boss4_summon_zombies"):GetZombieCount() + 1)
	StartAnimation(caster, {duration = self:GetChannelTime(), activity = ACT_DOTA_VICTORY})
	self.delay = 0
end


function boss4_sacrifice:OnChannelThink(flInterval)
	local caster = self:GetCaster()
	if self.delay > self.tickrate then
		self.delay = 0
		for zombie,_ in pairs(self.zombies) do
			if not zombie:IsNull() and zombie:IsAlive() then
				ParticleManager:FireRopeParticle("particles/units/heroes/hero_undying/undying_soul_rip_heal.vpcf", PATTACH_POINT_FOLLOW, zombie, caster)
				caster:HealEvent(zombie:GetHealth(), self, caster)
				EmitSoundOn("Hero_Undying.Decay.Target", zombie)
				EmitSoundOn("Hero_Undying.Decay.Transfer", caster)
				zombie:Kill(self, caster)
				break
			end
		end
	else
		self.delay = self.delay + flInterval
	end
end

function boss4_sacrifice:OnChannelFinish(bInterrupted)
	ParticleManager:ClearParticle(self.warmUpFX)
	EndAnimation(self:GetCaster())
endboss4_summon_zombies = class({})

function boss4_summon_zombies:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Creature.Scream", caster)
	self.warmUpFX = ParticleManager:CreateParticle("particles/bosses/boss4/boss4_summon_zombies_summon.vpcf", PATTACH_POINT_FOLLOW, caster)
	self.zombies = self.zombies or {}
end


function boss4_summon_zombies:OnChannelFinish(bInterrupted)
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmUpFX)
	if not bInterrupted then
		local zombieCount = self:GetSpecialValueFor("zombie_count")
		local zombieSpawnRadius = self:GetSpecialValueFor("spawn_radius")
		local maxZombies = self:GetSpecialValueFor("max_zombies")
		local currZombies = self:GetZombieCount()
		if maxZombies < (currZombies + zombieCount) then
			local toKill = (currZombies + zombieCount) - maxZombies
			for zombie,_ in pairs(self.zombies) do
				if zombie:IsNull() or not zombie:IsAlive() then
					self.zombies[zombie] = nil
				elseif toKill > 0 then
					toKill = toKill - 1
					zombie:ForceKill(false)
					self.zombies[zombie] = nil
				end
			end
		end
		Timers:CreateTimer(0.1, function()
			local zombiePos = caster:GetAbsOrigin() + ActualRandomVector(zombieSpawnRadius, 150)
			local zombie = CreateUnitByName("npc_dota_mini_boss1", zombiePos, true, caster, caster, caster:GetTeamNumber())
			zombie:AddNewModifier( zombie, self, "modifier_phased", {})
			self.zombies[zombie] = true
			EmitSoundOn("Creature.ZombieSpawn", zombie)
			zombieCount = zombieCount - 1
			if zombieCount > 0 then
				return 0.1
			end
		end)
	end
end

function boss4_summon_zombies:GetZombieCount()
	local zombies = 0
	self.zombies = self.zombies or {}
	for zombie,_ in pairs(self.zombies) do
		if zombie:IsNull() or not zombie:IsAlive() then
			self.zombies[zombie] = nil
		else
			zombies = zombies + 1
		end
	end
	return zombies
end

function boss4_summon_zombies:GetZombies()
	return self.zombies or {}
endboss4_tombstone = class({})

function boss4_tombstone:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local tombstone = CreateUnitByName("npc_dota_boss4_tomb", position, true, caster, caster, caster:GetTeamNumber())
	tombstone:AddNewModifier(caster, self, "modifier_boss4_tombstone_tomb", {})
	tombstone.hasBeenInitialized = true
	tombstone:StartGesture(ACT_DOTA_SPAWN)
	caster:AddNewModifier(tombstone, self, "modifier_boss4_tombstone_caster", {})
	
	ParticleManager:FireParticle("particles/units/heroes/hero_undying/undying_tombstone.vpcf", PATTACH_ABSORIGIN, tombstone)
	EmitSoundOn("Hero_Undying.Tombstone", tombstone)
end

modifier_boss4_tombstone_caster = class({})
LinkLuaModifier("modifier_boss4_tombstone_caster", "bosses/boss4/boss4_tombstone.lua", 0)

function modifier_boss4_tombstone_caster:OnCreated()
	self.reduction = self:GetSpecialValueFor("damage_reduction")
	if IsServer() then
		FX = ParticleManager:CreateParticle("particles/units/heroes/hero_pugna/pugna_life_drain_beam.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster() )
		ParticleManager:SetParticleControlEnt(FX, 0, self:GetParent(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetParent():GetAbsOrigin(), true)
		ParticleManager:SetParticleControlEnt(FX, 1, self:GetCaster(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetCaster():GetAbsOrigin(), true)
		self:AddEffect(FX)
	end
end

function modifier_boss4_tombstone_caster:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss4_tombstone_caster:GetModifierIncomingDamage_Percentage()
	return self.reduction
end


modifier_boss4_tombstone_tomb = class({})
LinkLuaModifier("modifier_boss4_tombstone_tomb", "bosses/boss4/boss4_tombstone.lua", 0)


function modifier_boss4_tombstone_tomb:OnCreated()
	self.breakDist = self:GetSpecialValueFor("break_distance")
	if IsServer() then self:StartIntervalThink(0) end
end
	

function modifier_boss4_tombstone_tomb:OnIntervalThink()
	if not self:GetCaster():IsAlive() or CalculateDistance(self:GetCaster(), self:GetParent()) > self.breakDist then 
		self:GetParent():StartGesture(ACT_DOTA_DIE)
		self:GetParent():Kill(self:GetAbility(), self:GetParent()) 
	end
end
	
function modifier_boss4_tombstone_tomb:OnRemoved()
	if IsServer() then
		self:GetCaster():RemoveModifierByName("modifier_boss4_tombstone_caster")
	end
end


function modifier_boss4_tombstone_tomb:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE, MODIFIER_PROPERTY_DISABLE_HEALING}
end

function modifier_boss4_tombstone_tomb:GetModifierIncomingDamage_Percentage(params)
	local parent = self:GetParent()
	if not params.attacker:IsSameTeam(parent) then params.attacker:ModifyThreat( 100 / parent:GetMaxHealth() ) end
	if params.inflictor then
		return -999
	else
		local hp = parent:GetHealth()
		local damage = 4
		if not params.attacker:IsRealHero() then damage = 1 end
		if damage < hp and params.inflictor ~= self:GetAbility() then
			parent:SetHealth( hp - damage )
			return -999
		elseif hp <= 1 then
			self:GetParent():StartGesture(ACT_DOTA_DIE)
			parent:Kill(params.inflictor, params.attacker)
		end
	end
end

function modifier_boss4_tombstone_tomb:GetDisableHealing()
	return 1
endboss_hail_of_arrows = class({})

function boss_hail_of_arrows:GetAOERadius()
	return self:GetTalentSpecialValueFor("radius")
end

function boss_hail_of_arrows:OnAbilityPhaseStart()
	if IsServer() then
		self.cast2 = ParticleManager:CreateParticle("particles/units/heroes/hero_legion_commander/legion_commander_odds_cast.vpcf", PATTACH_CUSTOMORIGIN_FOLLOW, self:GetCaster())
			ParticleManager:SetParticleControlEnt(self.cast2, 1, self:GetCaster(), PATTACH_CUSTOMORIGIN_FOLLOW, "attach_attack1", self:GetCaster():GetAbsOrigin(), true)
		self.cast = ParticleManager:CreateParticle("particles/units/heroes/hero_legion_commander/legion_commander_odds_cast.vpcf", PATTACH_CUSTOMORIGIN_FOLLOW, self:GetCaster())
			ParticleManager:SetParticleControlEnt(self.cast, 1, self:GetCaster(), PATTACH_CUSTOMORIGIN_FOLLOW, "attach_attack2", self:GetCaster():GetAbsOrigin(), true)
	end
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetTalentSpecialValueFor("radius") )
	EmitSoundOn("Hero_LegionCommander.Overwhelming.Cast",self:GetCaster())
	return true
end

function boss_hail_of_arrows:OnAbilityPhaseInterrupted()
	if IsServer() then
		ParticleManager:ClearParticle(self.cast)
		ParticleManager:ClearParticle(self.cast2)
	end
end

function boss_hail_of_arrows:OnSpellStart()
	if IsServer() then
		local caster = self:GetCaster()
		local target = self:GetCursorPosition()
		EmitSoundOn("Hero_LegionCommander.Overwhelming.Location",self:GetCaster())
		local radius = self:GetTalentSpecialValueFor("radius")
		local base_damage = self:GetTalentSpecialValueFor("damage")
		local bonus_damage = self:GetTalentSpecialValueFor("damage_per_unit")
		local duration = self:GetTalentSpecialValueFor("duration")
		local arrows = ParticleManager:CreateParticle("particles/units/heroes/hero_legion_commander/legion_commander_odds.vpcf", PATTACH_ABSORIGIN , caster)
				ParticleManager:SetParticleControl(arrows, 0, target)
				ParticleManager:SetParticleControl(arrows, 1, target)
				ParticleManager:SetParticleControl(arrows, 3, target)
				ParticleManager:SetParticleControl(arrows, 4, Vector(radius,0,0) )
				ParticleManager:SetParticleControl(arrows, 5, Vector(radius,0,0) )
				ParticleManager:SetParticleControl(arrows, 6, target)
				ParticleManager:SetParticleControl(arrows, 7, target)
				ParticleManager:SetParticleControl(arrows, 8, target)
		ParticleManager:ReleaseParticleIndex(arrows)
		local units = FindUnitsInRadius(caster:GetTeam(), target, nil, radius, DOTA_UNIT_TARGET_TEAM_BOTH, DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO, DOTA_UNIT_TARGET_FLAG_NONE, 0, false)
		local stacks = 1
		for _,unit in pairs(units) do -- check units
			if ((unit:IsHero() and unit:GetTeam() == caster:GetTeam()) or unit:GetTeam() ~= caster:GetTeam()) and unit ~= self:GetCaster() then
				base_damage = base_damage + bonus_damage
				stacks = stacks + 1
			end
		end
		for _,unit in pairs(units) do -- deal damage
			if unit:GetTeam() ~= caster:GetTeam() then
				ApplyDamage({victim = unit, attacker = caster, damage = base_damage, damage_type = self:GetAbilityDamageType(), ability = self})
				EmitSoundOn("Hero_LegionCommander.Overwhelming.Creep",unit)
			else
				-- unit:AddNewModifier(caster, self, "modifier_boss_hail_of_arrows_buff_visual", {duration = duration})
				unit:AddNewModifier(caster, self, "modifier_boss_hail_of_arrows_buff_stacks", {duration = duration})
				unit:SetModifierStackCount("modifier_boss_hail_of_arrows_buff_stacks", caster, stacks)
				EmitSoundOn("Hero_LegionCommander.Overwhelming.Hero",unit)
			end
		end
		caster:AddNewModifier(caster, self, "modifier_boss_hail_of_arrows_buff_stacks", {duration = duration})
		caster:SetModifierStackCount("modifier_boss_hail_of_arrows_buff_stacks", caster, stacks)
		
		ParticleManager:ClearParticle(self.cast)
		ParticleManager:ClearParticle(self.cast2)
	end
end

LinkLuaModifier( "modifier_boss_hail_of_arrows_buff_stacks", "bosses/boss5/boss_hail_of_arrows" ,LUA_MODIFIER_MOTION_NONE )
modifier_boss_hail_of_arrows_buff_stacks = class({})

function modifier_boss_hail_of_arrows_buff_stacks:OnCreated()
	self.armor_bonus = self:GetAbility():GetTalentSpecialValueFor("bonus_armor")
	self.speed_bonus = self:GetAbility():GetTalentSpecialValueFor("bonus_speed")
	if IsServer() then
		EmitSoundOn("Hero_LegionCommander.Overwhelming.Buff",self:GetParent())
	end
end

function modifier_boss_hail_of_arrows_buff_stacks:GetEffectName()
	return "particles/units/heroes/hero_legion_commander/legion_commander_odds_buff.vpcf"
end

function modifier_boss_hail_of_arrows_buff_stacks:DeclareFunctions()
	funcs = {
				MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS,
				MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE,
			}
	return funcs
end

function modifier_boss_hail_of_arrows_buff_stacks:GetModifierMoveSpeedBonus_Percentage()
	return self.speed_bonus * self:GetStackCount()
end

function modifier_boss_hail_of_arrows_buff_stacks:GetModifierPhysicalArmorBonus()
	return self.armor_bonus * self:GetStackCount()
endboss_aeon_chronal_sphere = class({})

function boss_aeon_chronal_sphere:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetSpecialValueFor("max_radius") )
	return true
end

function boss_aeon_chronal_sphere:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	CreateModifierThinker(caster, self, "modifier_boss_aeon_chronal_sphere_thinker", {duration = self:GetSpecialValueFor("duration")}, position, caster:GetTeamNumber(), false)
end

modifier_boss_aeon_chronal_sphere_thinker = class({})
LinkLuaModifier("modifier_boss_aeon_chronal_sphere_thinker", "bosses/boss_aeon/boss_aeon_chronal_sphere", LUA_MODIFIER_MOTION_NONE)


function modifier_boss_aeon_chronal_sphere_thinker:OnCreated()
	self.max_radius = self:GetSpecialValueFor("max_radius")
	self.radius = 125
	self.growth = (self.max_radius - self.radius) / self:GetRemainingTime()
	if IsServer() then
		self.nFX = ParticleManager:CreateParticle("particles/units/bosses/boss_aeon/boss_aeon_chronal_sphere.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
		ParticleManager:SetParticleControl(self.nFX, 1, (Vector(self.radius, self.radius, self.radius)))
		self:GetParent():EmitSound("Hero_FacelessVoid.Chronosphere")
		self:StartIntervalThink(FrameTime())
	end
end

function modifier_boss_aeon_chronal_sphere_thinker:OnIntervalThink()
	self.radius = self.radius + self.growth * FrameTime()
	ParticleManager:SetParticleControl(self.nFX, 1, (Vector(self.radius, self.radius, self.radius)))
end

function modifier_boss_aeon_chronal_sphere_thinker:OnDestroy()
	if IsServer() then
		ParticleManager:ClearParticle(self.nFX)
	end
end

function modifier_boss_aeon_chronal_sphere_thinker:IsAura()
	return true
end

function modifier_boss_aeon_chronal_sphere_thinker:GetModifierAura()
	return "modifier_boss_aeon_chronal_sphere_freeze"
end

function modifier_boss_aeon_chronal_sphere_thinker:GetAuraRadius()
	return self.radius
end

function modifier_boss_aeon_chronal_sphere_thinker:GetAuraDuration()
	return 0.5
end

function modifier_boss_aeon_chronal_sphere_thinker:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_aeon_chronal_sphere_thinker:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_aeon_chronal_sphere_thinker:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

modifier_boss_aeon_chronal_sphere_freeze = class({})
LinkLuaModifier("modifier_boss_aeon_chronal_sphere_freeze", "bosses/boss_aeon/boss_aeon_chronal_sphere", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_chronal_sphere_freeze:CheckState()
	return {[MODIFIER_STATE_FROZEN] = true,
			[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss_aeon_chronal_sphere_freeze:GetStatusEffectName()
	return "particles/status_fx/status_effect_faceless_chronosphere.vpcf"
end

function modifier_boss_aeon_chronal_sphere_freeze:StatusEffectPriority()
	return 10
end

function modifier_boss_aeon_chronal_sphere_freeze:IsPurgable()
	return true
end

function modifier_boss_aeon_chronal_sphere_freeze:IsStunDebuff()
	return true
end

function modifier_boss_aeon_chronal_sphere_freeze:IsPurgeException()
	return true
endboss_aeon_deteriorate = class({})

function boss_aeon_deteriorate:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCursorPosition(), self:GetSpecialValueFor("radius"))
	return true
end

function boss_aeon_deteriorate:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local radius = self:GetSpecialValueFor("radius")
	
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			enemy:AddNewModifier(caster, self, "modifier_boss_aeon_deteriorate", {duration = self:GetSpecialValueFor("duration")})
		end
	end
	
	caster:EmitSound("Hero_Dazzle.Weave")
	ParticleManager:FireParticle("particles/units/heroes/hero_dazzle/dazzle_weave.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius,1,1)})
end

modifier_boss_aeon_deteriorate = class({})
LinkLuaModifier("modifier_boss_aeon_deteriorate", "bosses/boss_aeon/boss_aeon_deteriorate", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_deteriorate:OnCreated()
	self.armor = 0
	self.loss = self:GetSpecialValueFor("total_armor_reduction") / self:GetRemainingTime()
	self:StartIntervalThink(1)
end

function modifier_boss_aeon_deteriorate:OnIntervalThink()
	self.armor = self.armor - self.loss
end

function modifier_boss_aeon_deteriorate:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_boss_aeon_deteriorate:GetModifierPhysicalArmorBonus()
	return self.armor
end

function modifier_boss_aeon_deteriorate:IsPurgable()
	return false
endboss_aeon_distortion_field = class({})

function boss_aeon_distortion_field:GetIntrinsicModifierName()
	return "modifier_boss_aeon_distortion_field"
end

modifier_boss_aeon_distortion_field = class({})
LinkLuaModifier("modifier_boss_aeon_distortion_field", "bosses/boss_aeon/boss_aeon_distortion_field", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_distortion_field:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_aeon_distortion_field:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_aeon_distortion_field:IsAura()
	return not self:GetCaster():PassivesDisabled()
end

function modifier_boss_aeon_distortion_field:GetModifierAura()
	return "modifier_boss_aeon_distortion_field_aura"
end

function modifier_boss_aeon_distortion_field:GetAuraRadius()
	return self.radius
end

function modifier_boss_aeon_distortion_field:GetAuraDuration()
	return 0.5
end

function modifier_boss_aeon_distortion_field:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_aeon_distortion_field:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_aeon_distortion_field:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

function modifier_boss_aeon_distortion_field:IsHidden()
	return true
end

modifier_boss_aeon_distortion_field_aura = class({})
LinkLuaModifier("modifier_boss_aeon_distortion_field_aura", "bosses/boss_aeon/boss_aeon_distortion_field", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_distortion_field_aura:OnCreated()
	self.as = self:GetSpecialValueFor("as_slow")
	self.cdr = self:GetSpecialValueFor("cdr_slow")
end

function modifier_boss_aeon_distortion_field_aura:OnRefresh()
	self.as = self:GetSpecialValueFor("as_slow")
	self.cdr = self:GetSpecialValueFor("cdr_slow")
end

function modifier_boss_aeon_distortion_field_aura:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOOLTIP, }
end

function modifier_boss_aeon_distortion_field_aura:OnTooltip()
	return self.cdr
end

function modifier_boss_aeon_distortion_field_aura:GetModifierAttackSpeedBonus()
	return self.as
endboss_aeon_fetal_syndrome = class({})

function boss_aeon_fetal_syndrome:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_aeon_fetal_syndrome:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	target:EmitSound("Hero_Bane.Enfeeble")
	if enemy:TriggerSpellAbsorb(self) then return end
	target:AddNewModifier(caster, self, "modifier_boss_aeon_fetal_syndrome", {duration = self:GetSpecialValueFor("duration")})
end

modifier_boss_aeon_fetal_syndrome = class({})
LinkLuaModifier("modifier_boss_aeon_fetal_syndrome", "bosses/boss_aeon/boss_aeon_fetal_syndrome", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_fetal_syndrome:OnCreated()
	self.reduction = self:GetSpecialValueFor("dmg_reduction")
	self.loss = self.reduction / self:GetRemainingTime()
	self:StartIntervalThink(0.2)
	self:SetStackCount( math.abs(self.reduction) )
end

function modifier_boss_aeon_fetal_syndrome:OnIntervalThink()
	self.reduction = self.reduction - self.loss * 0.2
	self:SetStackCount( math.abs(self.reduction) )
end

function modifier_boss_aeon_fetal_syndrome:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE}
end

function modifier_boss_aeon_fetal_syndrome:GetModifierTotalDamageOutgoing_Percentage()
	return self.reduction
end

function modifier_boss_aeon_fetal_syndrome:GetEffectName()
	return "particles/units/heroes/hero_bane/bane_enfeeble.vpcf"
endboss_aeon_flashback = class({})

function boss_aeon_flashback:GetIntrinsicModifierName()
	return "modifier_boss_aeon_flashback"
end

function boss_aeon_flashback:ShouldUseResources()
	return true
end

modifier_boss_aeon_flashback = class({})
LinkLuaModifier("modifier_boss_aeon_flashback", "bosses/boss_aeon/boss_aeon_flashback", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_flashback:OnCreated()
	self.currHP = self:GetSpecialValueFor("curr_hp_evade") / 100
end

function modifier_boss_aeon_flashback:OnRefresh()
	self.currHP = self:GetSpecialValueFor("curr_hp_evade") / 100
end

function modifier_boss_aeon_flashback:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK}
end

function modifier_boss_aeon_flashback:GetModifierTotal_ConstantBlock(params)
	if self:GetCaster():PassivesDisabled() then return end
	if self:GetAbility():IsCooldownReady() and params.damage >= self:GetParent():GetHealth() * self.currHP and params.attacker ~= self:GetParent() then
		self:GetAbility():SetCooldown()
		ParticleManager:FireParticle("particles/units/heroes/hero_faceless_void/faceless_void_backtrack.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
		return params.damage
	end
end

function modifier_boss_aeon_flashback:IsHidden()
	return true
endboss_aeon_rewind = class({})

POSSIBLE_BOSS_TABLE = {	"npc_dota_boss28", 
						"npc_dota_boss21", 
						"npc_dota_boss4", 
						"npc_dota_boss22", 
						"npc_dota_boss_troll_warlord",
						"npc_dota_boss23",
						"npc_dota_greymane",
						"npc_dota_boss16",}
						
function boss_aeon_rewind:OnAbilityPhaseStart()
	self.positions = {}
	local caster = self:GetCaster()
	for i = 1, self:GetSpecialValueFor("spawns") do
		local position = caster:GetAbsOrigin() + ActualRandomVector(600, 200)
		ParticleManager:FireWarningParticle(position, 128)
		table.insert( self.positions, position )
	end
	return true
end

function boss_aeon_rewind:OnSpellStart()
	local caster = self:GetCaster()
	
	for _, summon in ipairs(self.summons or {}) do
		if not summon:IsNull() and summon:IsAlive() then
			summon:ForceKill(false)
		end
	end
	
	self.summons = {}
	setmetatable(self.summons, {__mode = "v"})
	local hpMult = self:GetSpecialValueFor("curr_hp_mult") / 100
	for _, position in ipairs( self.positions ) do
		local spawnName = POSSIBLE_BOSS_TABLE[RandomInt(1, #POSSIBLE_BOSS_TABLE)]
		local spawnedUnit = CreateUnitByName( spawnName, position, true, nil, nil, caster:GetTeam() )
		spawnedUnit:SetCoreHealth( math.ceil( caster:GetHealth() * hpMult) )
		spawnedUnit:SetAverageBaseDamage(spawnedUnit:GetAverageBaseDamage() * 0.6, 20)
		
		if spawnName == "npc_dota_boss22" then
			spawnedUnit:FindAbilityByName("boss15_peel_the_veil"):SetActivated(false)
		elseif spawnName == "npc_dota_boss23" then
			spawnedUnit:FindAbilityByName("boss16_the_flock"):SetActivated(false)
		end
		
		spawnedUnit:AddNewModifier(self:GetCaster(), self, "modifier_spawn_immunity", {duration = 2})
		spawnedUnit:AddNewModifier(self:GetCaster(), self, "modifier_silence_generic", {duration = 5})
		spawnedUnit.hasBeenInitialized = true
		table.insert(self.summons, spawnedUnit)
	end
endboss_aeon_sins_of_the_past = class({})

function boss_aeon_sins_of_the_past:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_aeon_sins_of_the_past:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	if target:TriggerSpellAbsorb(self) or target:GetHealth() <= 0 then return end
	local illusion = self:ConjureImage( target )
	caster:AddNewModifier( caster, self, "modifier_boss_aeon_sins_of_the_past", {})
	Timers:CreateTimer(function()
		if not illusion:IsNull() and illusion:IsAlive() then
			illusion:MoveToPositionAggressive( illusion:GetAbsOrigin() )
			return 0.3
		else
			caster:RemoveModifierByName("modifier_boss_aeon_sins_of_the_past")
		end
	end)
end


function  boss_aeon_sins_of_the_past:ConjureImage( target )
	local caster = self:GetCaster()
	local unit_name = target:GetUnitName()
	local origin = target:GetAbsOrigin() + RandomVector(100)
	
	local illusion = CreateUnitByName("npc_illusion_template", origin, true, caster, caster, caster:GetTeamNumber())
		
	for abilitySlot=0,15 do
		local abilityillu = target:GetAbilityByIndex(abilitySlot)
		if abilityillu ~= nil then
			local abilityLevel = abilityillu:GetLevel()
			local abilityName = abilityillu:GetAbilityName()
			if illusion:FindAbilityByName(abilityName) ~= nil then
				local illusionAbility = illusion:FindAbilityByName(abilityName)
				illusionAbility:SetLevel(abilityLevel)
			else
				local illusionAbility = illusion:AddAbility(abilityName)
				illusionAbility:SetLevel(abilityLevel)
			end
		end
	end
	
	-- Make illusion look like owner
	illusion:SetBaseMaxHealth( target:GetMaxHealth() )
	illusion:SetMaxHealth( target:GetMaxHealth() )
	illusion:SetHealth( target:GetHealth() )
	
	illusion:SetAverageBaseDamage( target:GetAverageBaseDamage(), 15 )
	illusion:SetPhysicalArmorBaseValue( target:GetPhysicalArmorValue(false) )
	illusion:SetBaseAttackTime( target:GetBaseAttackTime() )
	illusion:SetBaseMoveSpeed( target:GetBaseMoveSpeed() )
	
	illusion:SetOriginalModel( target:GetModelName() )
	illusion:SetModel( target:GetModelName() )
	
	local moveCap = DOTA_UNIT_CAP_MOVE_NONE
	if target:HasMovementCapability() then
		moveCap = DOTA_UNIT_CAP_MOVE_GROUND
		if target:HasFlyMovementCapability() then
			moveCap = DOTA_UNIT_CAP_MOVE_FLY
		end
	end
	illusion:SetMoveCapability( moveCap )
	illusion:SetAttackCapability( target:GetAttackCapability() )
	illusion:SetUnitName( target:GetUnitName() )
	if target:IsRangedAttacker() then
		illusion:SetRangedProjectileName( target:GetRangedProjectileName() )
	end
	
	for _, modifier in ipairs( target:FindAllModifiers() ) do
		if modifier.AllowIllusionDuplicate and modifier:AllowIllusionDuplicate() then
			illusion:AddNewModifier( modifier:GetCaster(), modifier:GetAbility(), modifier:GetName(), { duration = modifier:GetRemainingTime() })
		end
	end
	
	illusion:AddNewModifier( target, self, "modifier_illusion_bonuses", { duration = duration })
	
	-- Recreate the items of the caster
	for itemSlot=0,5 do
		local item = target:GetItemInSlot(itemSlot)
		if item ~= nil then
			local itemName = item:GetName()
			local newItem = CreateItem(itemName, nil, nil)
			newItem:SetStacksWithOtherOwners(true)
			illusion:AddItem(newItem)
			newItem:SetPurchaser(nil)
			
		end
	end

	-- Set the unit as an illusion
	-- modifier_illusion controls many illusion properties like +Green damage not adding to the unit damage, not being able to cast spells and the team-only blue particle
	illusion:AddNewModifier(target, self, "modifier_illusion", { outgoing_damage = self:GetSpecialValueFor("illusion_out") - 100, incoming_damage = 100 - self:GetSpecialValueFor("illusion_inc") })
	
	for _, wearable in ipairs( target:GetChildren() ) do
		if wearable:GetClassname() == "dota_item_wearable" and wearable:GetModelName() ~= "" then
			local newWearable = SpawnEntityFromTableSynchronous("prop_dynamic", {model=wearable:GetModelName()})
			newWearable:SetParent(illusion, nil)
			newWearable:FollowEntity(illusion, true)
			newWearable:SetRenderColor(100,100,255)
			Timers:CreateTimer(1, function()
				if illusion and not illusion:IsNull() and illusion:IsAlive() then
					return 0.25
				else
					UTIL_Remove( newWearable )
				end
			end)
		end
	end
	
	illusion.hasBeenInitialized = true	
	-- Without MakeIllusion the unit counts as a hero, e.g. if it dies to neutrals it says killed by neutrals, it respawns, etc.
	illusion:MakeIllusion()
	illusion.isCustomIllusion = true
	return illusion
end

modifier_boss_aeon_sins_of_the_past = class({})
LinkLuaModifier("modifier_boss_aeon_sins_of_the_past", "bosses/boss_aeon/boss_aeon_sins_of_the_past", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_sins_of_the_past:OnCreated()
	self.reduction = self:GetSpecialValueFor("dmg_red")
end

function modifier_boss_aeon_sins_of_the_past:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_aeon_sins_of_the_past:GetModifierIncomingDamage_Percentage()
	return self.reduction
endboss_aeon_time_acceleration = class({})

function boss_aeon_time_acceleration:GetIntrinsicModifierName()
	return "modifier_boss_aeon_time_acceleration"
end

modifier_boss_aeon_time_acceleration = class({})
LinkLuaModifier("modifier_boss_aeon_time_acceleration", "bosses/boss_aeon/boss_aeon_time_acceleration", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aeon_time_acceleration:OnCreated()
	self.dmg = self:GetTalentSpecialValueFor("bonus_damage")
	self.ms = self:GetTalentSpecialValueFor("bonus_ms")
	if IsServer() then
		self:StartIntervalThink( self:GetTalentSpecialValueFor("growth_rate") )
	end
end

function modifier_boss_aeon_time_acceleration:OnRefresh()
	self.dmg = self:GetTalentSpecialValueFor("bonus_damage")
	self.ms = self:GetTalentSpecialValueFor("bonus_ms")
	if IsServer() then
		self:StartIntervalThink( self:GetTalentSpecialValueFor("growth_rate") )
	end
end

function modifier_boss_aeon_time_acceleration:OnIntervalThink()
	if self:GetCaster():PassivesDisabled() then return end
	self:IncrementStackCount()
end

function modifier_boss_aeon_time_acceleration:DeclareFunctions()
	return {MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE, MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_aeon_time_acceleration:GetModifierBaseDamageOutgoing_Percentage()
	return self.dmg * self:GetStackCount()
end

function modifier_boss_aeon_time_acceleration:GetModifierMoveSpeedBonus_Percentage()
	return self.ms * self:GetStackCount()
endboss_aether_entropy_pool = class({})

function boss_aether_entropy_pool:OnAbilityPhaseStart()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	return true
end

function boss_aether_entropy_pool:OnSpellStart()
	self.channelThink = 0
	self.channelDuration = 0
	self.channelDelay = self:GetTalentSpecialValueFor("pool_creation_time")
	self.poolTable = {}
	EmitSoundOn("Hero_Enigma.Midnight_Pulse", self:GetCaster() )
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetChannelTime() - 0.01})
end

function boss_aether_entropy_pool:OnChannelThink(dt)
	self.channelThink = self.channelThink + dt
	self.channelDuration = self.channelDuration + dt
	if self.channelThink > self.channelDelay then
		local caster = self:GetCaster()
		self.channelThink = 0
		local range = self:GetTalentSpecialValueFor("pool_spawn_range")
		local maxRadius = self:GetTalentSpecialValueFor("initial_radius") + self:GetChannelTime() * self:GetTalentSpecialValueFor("radius_growth") / FrameTime()
		local position = caster:GetAbsOrigin() + ActualRandomVector(range, maxRadius / 2)
		table.insert( self.poolTable, self:CreateEntropyPool(GetGroundPosition( position, caster), duration) )
	end
end

function boss_aether_entropy_pool:OnChannelFinish(bInterrupted)
	for _, dummy in ipairs(self.poolTable) do
		dummy:FindModifierByName("modifier_boss_aether_entropy_pool_aura"):SetDuration(5, true)
	end
	StopSoundOn("Hero_Enigma.Midnight_Pulse", self:GetCaster() )
end

function boss_aether_entropy_pool:CreateEntropyPool(position, duration)
	return CreateModifierThinker(self:GetCaster(), self, "modifier_boss_aether_entropy_pool_aura", {}, position, self:GetCaster():GetTeam(), false)
end

modifier_boss_aether_entropy_pool_aura = class({})
LinkLuaModifier("modifier_boss_aether_entropy_pool_aura", "bosses/boss_aether/boss_aether_entropy_pool", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_entropy_pool_aura:OnCreated()
	self.radius = self:GetTalentSpecialValueFor("initial_radius")
	self.rGrowth = self:GetTalentSpecialValueFor("radius_growth")
	if IsServer() then
		self.aFX = ParticleManager:CreateParticle("particles/bosses/boss_aether/boss_aether_entropy_pool.vpcf", PATTACH_POINT_FOLLOW, self:GetParent() )
		self:StartIntervalThink( FrameTime() )
	end
end

function modifier_boss_aether_entropy_pool_aura:OnIntervalThink()
	self.radius = self.radius + self.rGrowth
	if IsServer() then
		ParticleManager:SetParticleControl( self.aFX, 1, Vector(self.radius, 1, 1) )
	end
end

function modifier_boss_aether_entropy_pool_aura:OnDestroy()
	if IsServer() then 
		ParticleManager:ClearParticle( self.aFX )
		UTIL_Remove( self:GetParent() )
	end
end

function modifier_boss_aether_entropy_pool_aura:IsAura()
	return true
end

function modifier_boss_aether_entropy_pool_aura:GetModifierAura()
	return "modifier_boss_aether_entropy_pool_debuff"
end

function modifier_boss_aether_entropy_pool_aura:GetAuraRadius()
	return self.radius
end

function modifier_boss_aether_entropy_pool_aura:GetAuraDuration()
	return 0.2
end

function modifier_boss_aether_entropy_pool_aura:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_aether_entropy_pool_aura:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_aether_entropy_pool_aura:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

modifier_boss_aether_entropy_pool_debuff = class({})
LinkLuaModifier("modifier_boss_aether_entropy_pool_debuff", "bosses/boss_aether/boss_aether_entropy_pool", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_entropy_pool_debuff:OnCreated()
	self.damage = self:GetTalentSpecialValueFor("damage_per_second") * 0.25
	if IsServer() then
		self:StartIntervalThink(0.25)
	end
end

function modifier_boss_aether_entropy_pool_debuff:OnIntervalThink()
	if IsServer() then
		self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.damage )
	end
endboss_aether_event_horizon = class({})

function boss_aether_event_horizon:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetTalentSpecialValueFor("radius") )
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	return true
end

function boss_aether_event_horizon:OnSpellStart()
	local caster = self:GetCaster()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	if self.dummy then boss_aether_event_horizon:OnChannelFinish(true) end
	self.dummy = CreateModifierThinker(self:GetCaster(), self, "modifier_boss_aether_event_horizon_aura", {duration = self:GetChannelTime()}, caster:GetAbsOrigin(), self:GetCaster():GetTeam(), false)
end

function boss_aether_event_horizon:OnChannelFinish(bInterrupt)
	UTIL_Remove(self.dummy)
end


modifier_boss_aether_event_horizon_aura = class({})
LinkLuaModifier("modifier_boss_aether_event_horizon_aura", "bosses/boss_aether/boss_aether_event_horizon", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_event_horizon_aura:OnCreated()
	self.radius = self:GetTalentSpecialValueFor("radius")
	self.pull = self:GetTalentSpecialValueFor("pull")
	if IsServer() then
		self.aFX = ParticleManager:CreateParticle("particles/units/heroes/hero_enigma/enigma_blackhole.vpcf", PATTACH_POINT_FOLLOW, self:GetParent() )
		self:StartIntervalThink( FrameTime() )
	end
end

function modifier_boss_aether_event_horizon_aura:OnIntervalThink()
	if IsServer() then
		local caster = self:GetCaster()
		if not caster or caster:IsNull() then self:Destroy() end
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), -1 ) ) do
			enemy:SetAbsOrigin( GetGroundPosition(enemy:GetAbsOrigin() + CalculateDirection( caster, enemy ) * self.pull, enemy) )
		end
		ResolveNPCPositions(caster:GetAbsOrigin(), 9000)
	end
end

function modifier_boss_aether_event_horizon_aura:OnDestroy()
	if IsServer() then 
		ParticleManager:ClearParticle( self.aFX )
		UTIL_Remove( self:GetParent() )
	end
end

function modifier_boss_aether_event_horizon_aura:IsAura()
	return true
end

function modifier_boss_aether_event_horizon_aura:GetModifierAura()
	return "modifier_boss_aether_event_horizon_debuff"
end

function modifier_boss_aether_event_horizon_aura:GetAuraRadius()
	return self.radius
end

function modifier_boss_aether_event_horizon_aura:GetAuraDuration()
	return 0.5
end

function modifier_boss_aether_event_horizon_aura:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_aether_event_horizon_aura:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_aether_event_horizon_aura:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

modifier_boss_aether_event_horizon_debuff = class({})
LinkLuaModifier("modifier_boss_aether_event_horizon_debuff", "bosses/boss_aether/boss_aether_event_horizon", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_event_horizon_debuff:OnCreated()
	self.damage = (self:GetTalentSpecialValueFor("damage_per_second") * 0.25) / 100
	if IsServer() then
		self:StartIntervalThink(0.25)
	end
end

function modifier_boss_aether_event_horizon_debuff:OnIntervalThink()
	if IsServer() then
		local parent = self:GetParent()
		local caster = self:GetCaster()
		self:GetAbility():DealDamage( caster, parent, parent:GetMaxHealth() * self.damage, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
	end
endboss_aether_gravity_well = class({})

function boss_aether_gravity_well:GetIntrinsicModifierName()
	return "modifier_boss_aether_gravity_well"
end

modifier_boss_aether_gravity_well = class({})
LinkLuaModifier("modifier_boss_aether_gravity_well", "bosses/boss_aether/boss_aether_gravity_well", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_gravity_well:OnCreated()
	self.radius = self:GetTalentSpecialValueFor("aura_radius")
	if IsServer() then
		local auraFX = ParticleManager:CreateParticle("particles/bosses/boss_aether/boss_aether_gravity_well.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
		ParticleManager:SetParticleControl( auraFX, 1, Vector(self.radius, 1, 1) )
		self:AddEffect(auraFX)
	end
end

function modifier_boss_aether_gravity_well:CheckState()
	return {[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss_aether_gravity_well:IsAura()
	return not self:GetCaster():PassivesDisabled()
end

function modifier_boss_aether_gravity_well:GetModifierAura()
	return "modifier_boss_aether_gravity_well_debuff"
end

function modifier_boss_aether_gravity_well:GetAuraRadius()
	return self.radius
end

function modifier_boss_aether_gravity_well:GetAuraDuration()
	return 0.2
end

function modifier_boss_aether_gravity_well:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_aether_gravity_well:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_aether_gravity_well:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

function modifier_boss_aether_gravity_well:IsHidden()
	return true
end

modifier_boss_aether_gravity_well_debuff = class({})
LinkLuaModifier("modifier_boss_aether_gravity_well_debuff", "bosses/boss_aether/boss_aether_gravity_well", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_aether_gravity_well_debuff:OnCreated()
		self.max_dmg = self:GetTalentSpecialValueFor("max_damage")
		self.max_pull = self:GetTalentSpecialValueFor("max_pull")
		self.radius = self:GetTalentSpecialValueFor("aura_radius")
		self:StartIntervalThink( 0.25 )
	end
	
	function modifier_boss_aether_gravity_well_debuff:OnIntervalThink()
		local caster = self:GetCaster()
		local parent = self:GetParent()
		if not caster or caster:IsNull() then self:Destroy() end
		local direction = CalculateDirection( caster, parent )
		local distance = CalculateDistance( caster, parent )
		
		local strength = (self.radius - distance) / self.radius

		local tickDamage = (parent:GetMaxHealth() * strength * self.max_dmg / 100 ) * 0.25
		self:GetAbility():DealDamage( caster, parent, tickDamage, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_HPLOSS + DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
	end
endboss_aether_mass_effect = class({})

function boss_aether_mass_effect:OnAbilityPhaseStart()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	return true
end

function boss_aether_mass_effect:OnSpellStart()
	local caster = self:GetCaster()
	local mousePos = self:GetCursorPosition()
	
	local vDir = CalculateDirection(mousePos, caster) * Vector(1,1,0)
	local orbDuration = self:GetSpecialValueFor("orb_lifetime")
	local orbSpeed = self:GetSpecialValueFor("orb_speed")
	local orbRadius = self:GetSpecialValueFor("orb_radius")
	
	local position = caster:GetAbsOrigin()
	local vVelocity = vDir * orbSpeed * FrameTime() * 0.8
	
	EmitSoundOn("Hero_ElderTitan.AncestralSpirit.Cast", caster)
	
	local ProjectileThink = function(self, ... )
		local caster = self:GetCaster()
		local position = self:GetPosition()
		local orbRadius = self:GetRadius()
		local orbSpeed = self:GetSpeed()
		local orbVelocity = self:GetVelocity()
		local HOMING_FACTOR = 0.01
		
		local homeEnemies = caster:FindEnemyUnitsInRadius(position, orbRadius * 0.7, {order = FIND_CLOSEST})
		for _, enemy in ipairs(homeEnemies) do
			orbVelocity = orbVelocity + CalculateDirection(enemy, position) * orbSpeed * HOMING_FACTOR * FrameTime()
			if orbVelocity:Length2D() > orbSpeed * FrameTime() then orbVelocity = orbVelocity:Normalized() * orbSpeed * FrameTime() end
			if orbVelocity:Length2D() > CalculateDistance(position, enemy) then orbVelocity = orbVelocity:Normalized() * CalculateDistance(position, enemy) * FrameTime() end
			break
		end
		if #homeEnemies == 0 then
			orbVelocity = orbVelocity + CalculateDirection(mousePos, position) * orbSpeed * HOMING_FACTOR * FrameTime()
			if orbVelocity:Length2D() > orbSpeed * FrameTime() then orbVelocity = orbVelocity:Normalized() * orbSpeed * FrameTime() end
			if orbVelocity:Length2D() > CalculateDistance(position, mousePos) then orbVelocity = orbVelocity:Normalized() * CalculateDistance(position, mousePos) * FrameTime() end
		end

		self:SetVelocity( orbVelocity )
		self:SetPosition( GetGroundPosition(position, nil) + Vector(0,0,128) + orbVelocity )
		
		homeEnemies = nil
	end
	local ProjectileHit = function(self, target, position)
		if target and target:GetTeam() ~= self:GetCaster():GetTeam() then
			local caster = self:GetCaster()
			local ability = self:GetAbility()
			target:AddNewModifier(caster, ability, "modifier_boss_aether_mass_effect_debuff", {duration = 0.5})
		end
		return true
	end
	ProjectileHandler:CreateProjectile(ProjectileThink, ProjectileHit, {  FX = "particles/bosses/boss_aether/boss_aether_mass_effect.vpcf",
																		  position = position,
																		  caster = caster,
																		  ability = self,
																		  speed = orbSpeed,
																		  radius = orbRadius,
																		  velocity = vVelocity,
																		  duration = orbDuration})
end

modifier_boss_aether_mass_effect_debuff = class({})
LinkLuaModifier("modifier_boss_aether_mass_effect_debuff", "bosses/boss_aether/boss_aether_mass_effect", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_mass_effect_debuff:OnCreated()
	self.amp = self:GetSpecialValueFor("damage_amp")
end

function modifier_boss_aether_mass_effect_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end


function modifier_boss_aether_mass_effect_debuff:GetModifierIncomingDamage_Percentage(params)
	return self.amp
end

function modifier_boss_aether_mass_effect_debuff:GetEffectName()
	return "particles/units/heroes/hero_enigma/enigma_malefice.vpcf"
end


function modifier_boss_aether_mass_effect_debuff:GetStatusEffectName()
	return "particles/status_fx/status_effect_enigma_malefice.vpcf"
end

function modifier_boss_aether_mass_effect_debuff:StatusEffectPriority()
	return 2
endboss_aether_meteor_shower = class({})
function boss_aether_meteor_shower:OnAbilityPhaseStart()
	EmitSoundOn( "Hero_AbyssalUnderlord.Firestorm.Start", self:GetCaster() )
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	return true
end

function boss_aether_meteor_shower:OnAbilityPhaseInterrupted()
	StopSoundOn( "Hero_AbyssalUnderlord.Firestorm.Start", self:GetCaster() )
end

function boss_aether_meteor_shower:OnSpellStart()
	local caster = self:GetCaster()
	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), -1)
	
	EmitSoundOn( "Hero_AbyssalUnderlord.Firestorm.Cast", caster )
	for i = 0, self:GetTalentSpecialValueFor("meteor_count") do
		local randomInt = RandomInt(1, math.min(#enemies * 2.5) )
		local position = caster:GetAbsOrigin() + ActualRandomVector(1800, 500)
		if enemies[randomInt] then
			local enemy = enemies[randomInt]
			position = enemy:GetAbsOrigin() + ActualRandomVector(self:GetSpecialValueFor("impact_radius") * 2.5)
		end
		Timers:CreateTimer( RandomFloat(0.75, 3.5), function() self:CreateMeteor(position) end )
	end
end

function boss_aether_meteor_shower:CreateMeteor(endPos)
	local caster = self:GetCaster()
	local radius = self:GetTalentSpecialValueFor("impact_radius")
	local delay = self:GetTalentSpecialValueFor("impact_delay")
	local damage = self:GetTalentSpecialValueFor("impact_damage")
	local sDuration = self:GetTalentSpecialValueFor("slow_duration")
	
	ParticleManager:FireWarningParticle(endPos, radius)
	Timers:CreateTimer(delay, function()
		EmitSoundOn( "Hero_AbyssalUnderlord.Firestorm", caster )
		local meteorFX = ParticleManager:CreateParticle("particles/units/heroes/heroes_underlord/abyssal_underlord_firestorm_wave.vpcf", PATTACH_WORLDORIGIN, nil)
		ParticleManager:SetParticleControl(meteorFX, 0, endPos)
		ParticleManager:SetParticleControl(meteorFX, 4, Vector(radius, 0, 0))
		local enemies = caster:FindEnemyUnitsInRadius(endPos, radius)
		for _, enemy in ipairs( enemies ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage( caster, enemy, damage )
				enemy:AddNewModifier( caster, self, "modifier_boss_aether_meteor_shower_debuff", {duration = sDuration})
			end
		end
	end)
end

modifier_boss_aether_meteor_shower_debuff = class({})
LinkLuaModifier("modifier_boss_aether_meteor_shower_debuff", "bosses/boss_aether/boss_aether_meteor_shower", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_meteor_shower_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_aether_meteor_shower_debuff:GetModifierMoveSpeedBonus_Percentage()
	return self:GetTalentSpecialValueFor("impact_slow")
end

function modifier_boss_aether_meteor_shower_debuff:GetEffectName()
	return "particles/units/heroes/hero_skeletonking/wraith_king_reincarnate_slow_debuff.vpcf"
end

boss_aether_neutron_density = class({})

function boss_aether_neutron_density:GetIntrinsicModifierName()
	return "modifier_boss_aether_neutron_density_passive"
end

function boss_aether_neutron_density:LaunchOrb(position)
	local caster = self:GetCaster()
	
	local radius = self:GetTalentSpecialValueFor("orb_radius")
	local speed = self:GetTalentSpecialValueFor("orb_speed")
	local velocity = CalculateDirection( position, caster ) * speed
	local distance = CalculateDistance(position, caster )
	ParticleManager:FireWarningParticle(position, radius)
	self:FireLinearProjectile("particles/units/heroes/hero_puck/puck_illusory_orb.vpcf", velocity, distance, radius)
end

function boss_aether_neutron_density:OnProjectileHit(target, position)
	local radius = self:GetTalentSpecialValueFor("orb_radius")
	local damage = self:GetTalentSpecialValueFor("magic_damage")
	local stun = self:GetTalentSpecialValueFor("stun_duration")
	local caster = self:GetCaster()
	
	if target then
		self:DealDamage(self:GetCaster(), target, damage)
	elseif not target then
		local enemies = caster:FindEnemyUnitsInRadius(position, radius)
		for _, enemy in ipairs( enemies ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage(caster, enemy, damage)
				self:Stun(enemy, stun, false)
			end
		end
		
		ParticleManager:FireParticle("particles/units/heroes/hero_dark_seer/dark_seer_vacuum.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius, 0, 0)})
	end
end

modifier_boss_aether_neutron_density_passive = class({})
LinkLuaModifier("modifier_boss_aether_neutron_density_passive", "bosses/boss_aether/boss_aether_neutron_density", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_aether_neutron_density_passive:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_START}
end

function modifier_boss_aether_neutron_density_passive:IsHidden()
	return true
end

function modifier_boss_aether_neutron_density_passive:OnAttackStart( params )
	if params.attacker == self:GetParent() and params.target and self:GetAbility():IsCooldownReady() and not self:GetParent():PassivesDisabled() then
		self:GetAbility():LaunchOrb( params.target:GetAbsOrigin() )
		self:GetAbility():SetCooldown()
	end
endboss_aether_phase_shift = class({})

function boss_aether_phase_shift:GetIntrinsicModifierName()
	return "modifier_boss_aether_phase_shift_passive"
end

modifier_boss_aether_phase_shift_passive = class({})
LinkLuaModifier("modifier_boss_aether_phase_shift_passive", "bosses/boss_aether/boss_aether_phase_shift", LUA_MODIFIER_MOTION_NONE)


if IsServer() then
	function modifier_boss_aether_phase_shift_passive:OnCreated()
		self:StartIntervalThink( self:GetAbility():GetCooldown(-1) )
	end
	
	function modifier_boss_aether_phase_shift_passive:OnIntervalThink()
		local parent = self:GetParent()
		if parent:PassivesDisabled() then return end
		ProjectileManager:ProjectileDodge( parent )
		if parent:GetHealthPercent() < 75 then
			local belowFifty = parent:GetHealthPercent() < 50
			parent:Dispel(parent, belowFifty)
		end
		ParticleManager:FireParticle("particles/units/heroes/hero_puck/puck_phase_shift_c.vpcf", PATTACH_POINT_FOLLOW, parent)
	end
end

function modifier_boss_aether_phase_shift_passive:IsHidden()
	return true
endboss_aether_space_rift = class({})

function boss_aether_space_rift:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCursorPosition(), self:GetTalentSpecialValueFor("impact_radius"))
	self.riftFX = ParticleManager:CreateParticle("particles/units/heroes/heroes_underlord/abyssal_underlord_darkrift_target.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl(self.riftFX, 0, self:GetCursorPosition() + Vector(0,0,128) )
	ParticleManager:SetParticleControl(self.riftFX, 6, self:GetCursorPosition() + Vector(0,0,128) )
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	return true
end

function boss_aether_space_rift:OnAbilityPhaseInterrupted()
	ParticleManager:ClearParticle(self.riftFX)
end

function boss_aether_space_rift:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local damage = self:GetTalentSpecialValueFor("impact_curr_hp_damage") / 100
	local impactRad = self:GetTalentSpecialValueFor("impact_radius")
	local suckRad = self:GetTalentSpecialValueFor("pull_radius")
	local suckDuration = self:GetTalentSpecialValueFor("suck_duration")
	local enemies = caster:FindEnemyUnitsInRadius(target, suckRad)
	EmitSoundOn("Hero_Weaver.TimeLapse", caster)
	for _, enemy in ipairs( enemies ) do
		if not enemy:TriggerSpellAbsorb(self) then 
			enemy:AddNewModifier(caster, self, "modifier_boss_aether_space_rift_motion", {duration = suckDuration})
			if CalculateDistance(enemy, caster) <= impactRad then
				self:DealDamage( caster, enemy, damage * enemy:GetHealth(), {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
			end
		end
	end
	Timers:CreateTimer(suckDuration, function() ParticleManager:ClearParticle(self.riftFX) end)
end

modifier_boss_aether_space_rift_motion = class({})
LinkLuaModifier("modifier_boss_aether_space_rift_motion", "bosses/boss_aether/boss_aether_space_rift", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_aether_space_rift_motion:OnCreated()
		local parent = self:GetParent()
		self.endPos = self:GetAbility():GetCursorPosition()
		self.distance = CalculateDistance( self.endPos, parent )
		self.direction = CalculateDirection( self.endPos, parent )
		self.speed = self.distance / self:GetTalentSpecialValueFor("suck_duration") * FrameTime()
		self:StartMotionController()
	end
	
	
	function modifier_boss_aether_space_rift_motion:OnDestroy()
		local parent = self:GetParent()
		local parentPos = parent:GetAbsOrigin()
		local radius = self:GetTalentSpecialValueFor("radius")
		FindClearSpaceForUnit(parent, parentPos, true)
		self:StopMotionController()
	end
	
	function modifier_boss_aether_space_rift_motion:DoControlledMotion()
		if self:GetParent():IsNull() then return end
		local parent = self:GetParent()
		self.distanceTraveled =  self.distanceTraveled or 0
		if parent:IsAlive() and self.distanceTraveled < self.distance then
			local newPos = GetGroundPosition(parent:GetAbsOrigin() + self.direction * self.speed, parent) 
			parent:SetAbsOrigin( newPos )
			
			self.distanceTraveled = self.distanceTraveled + self.speed
		else
			FindClearSpaceForUnit(parent, parent:GetAbsOrigin(), true)
			self:Destroy()
			return nil
		end       
		
	end
endboss_aether_wormhole = class({})

function boss_aether_wormhole:OnSpellStart()
	local caster = self:GetCaster()
	self.targetPos = self:GetCursorPosition()
	
	self.pFX = ParticleManager:CreateParticle("particles/units/heroes/heroes_underlord/abbysal_underlord_darkrift_ambient.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl(self.pFX, 0, self.targetPos)
	ParticleManager:SetParticleControl(self.pFX, 1, Vector(450, 1, 1))
	ParticleManager:SetParticleControl(self.pFX, 2, self.targetPos)
	EmitSoundOn("Hero_AbyssalUnderlord.DarkRift.Cast", caster)
	EmitSoundOnLocationWithCaster(self.targetPos, "Hero_AbyssalUnderlord.DarkRift.Target", caster)
end

function boss_aether_wormhole:OnChannelFinish(bInterrupt)
	if not bInterrupt then
		ParticleManager:FireParticle("particles/units/heroes/heroes_underlord/abbysal_underlord_darkrift_ambient_end.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster() )
		FindClearSpaceForUnit(self:GetCaster(), self.targetPos, true)
		EmitSoundOn("Hero_AbyssalUnderlord.DarkRift.Complete", caster)
	else
		EmitSoundOn("Hero_AbyssalUnderlord.DarkRift.Cancel", caster)
	end
	ParticleManager:ClearParticle( self.pFX )
endboss_ammetot_death_is_lonely = class({})

function boss_ammetot_death_is_lonely:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_ammetot_death_is_lonely:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	target:AddNewModifier( caster, self, "modifier_boss_ammetot_death_is_lonely", {duration = self:GetSpecialValueFor("duration") + 0.1} )
	EmitSoundOn( "Hero_Necrolyte.ReapersScythe.Cast", target )
end

modifier_boss_ammetot_death_is_lonely = class({})
LinkLuaModifier( "modifier_boss_ammetot_death_is_lonely", "bosses/boss_ammetot/boss_ammetot_death_is_lonely", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_death_is_lonely:OnCreated()
	self.radius = self:GetSpecialValueFor("search_radius")
	self.hp_damage = self:GetSpecialValueFor("hp_damage")
	self:SetDuration( self:GetSpecialValueFor("death_timer") + 0.1, true)
	if IsServer() then
		self:StartIntervalThink( self:GetSpecialValueFor("death_timer") )
	end
end

function modifier_boss_ammetot_death_is_lonely:OnRefresh()
	self:OnCreated()
end

function modifier_boss_ammetot_death_is_lonely:OnIntervalThink()
	local parent = self:GetParent()
	for _, hero in ipairs( parent:FindFriendlyUnitsInRadius( parent:GetAbsOrigin(), self.radius ) ) do
		if hero ~= parent then
			return
		end
	end
	local damage = 0
	for _, hero in ipairs( parent:FindFriendlyUnitsInRadius( parent:GetAbsOrigin(), -1 ) ) do
		damage = damage + self.hp_damage
	end
	self:GetAbility():DealDamage( self:GetCaster(), parent, parent:GetMaxHealth() * damage / 100, { damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION } )
end

function modifier_boss_ammetot_death_is_lonely:GetEffectName()
	return "particles/units/heroes/hero_necrolyte/necrolyte_spirit.vpcf"
end

function modifier_boss_ammetot_death_is_lonely:GetStatusEffectName()
	return "particles/status_fx/status_effect_necrolyte_spirit.vpcf"
end

function modifier_boss_ammetot_death_is_lonely:StatusEffectPriority()
	return 10
endboss_ammetot_fate_acceptance = class({})

function boss_ammetot_fate_acceptance:GetIntrinsicModifierName()
	return "modifier_boss_ammetot_fate_acceptance"
end

modifier_boss_ammetot_fate_acceptance = class({})
LinkLuaModifier( "modifier_boss_ammetot_fate_acceptance", "bosses/boss_ammetot/boss_ammetot_fate_acceptance", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_fate_acceptance:OnCreated()
	self.timer = self:GetSpecialValueFor("death_timer")
	self:SetDuration( self.timer, true )
end

function modifier_boss_ammetot_fate_acceptance:OnRefresh()
	self:OnCreated()
end

function modifier_boss_ammetot_fate_acceptance:OnDestroy()
	if IsServer() then
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if caster:IsNull() or not caster:IsAlive() then return end
		EmitSoundOn( "Hero_Necrolyte.ReapersScythe.Target", caster )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do
			enemy:SetHealth( 1 )
			enemy:AttemptKill( ability , caster )
		end
	end
end

function modifier_boss_ammetot_fate_acceptance:IsPurgable()
	return false
endboss_ammetot_gatekeeper = class({})

function boss_ammetot_gatekeeper:GetIntrinsicModifierName()
	return "modifier_boss_ammetot_gatekeeper"
end

modifier_boss_ammetot_gatekeeper = class({})
LinkLuaModifier( "modifier_boss_ammetot_gatekeeper", "bosses/boss_ammetot/boss_ammetot_gatekeeper", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_gatekeeper:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_ammetot_gatekeeper:OnRefresh()
	self:OnCreated()
end

function modifier_boss_ammetot_gatekeeper:IsAura()
	return true
end

function modifier_boss_ammetot_gatekeeper:GetAuraRadius()
	return self.radius
end

function modifier_boss_ammetot_gatekeeper:GetAuraDuration()
	return 0.5
end

function modifier_boss_ammetot_gatekeeper:GetModifierAura()
	return "modifier_boss_ammetot_gatekeeper_debuff"
end

function modifier_boss_ammetot_gatekeeper:GetAuraSearchTeam()
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_ammetot_gatekeeper:GetAuraSearchType()
	return DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC
end

function modifier_boss_ammetot_gatekeeper:IsHidden()
	return true
end

modifier_boss_ammetot_gatekeeper_debuff = class({})
LinkLuaModifier( "modifier_boss_ammetot_gatekeeper_debuff", "bosses/boss_ammetot/boss_ammetot_gatekeeper", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_gatekeeper_debuff:OnCreated()
	self.amp = self:GetSpecialValueFor("amp_loss")
	self.dmg = self:GetSpecialValueFor("dmg_loss")
end

function modifier_boss_ammetot_gatekeeper_debuff:OnRefresh()
	self:OnCreated()
end

function modifier_boss_ammetot_gatekeeper_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_SPELL_AMPLIFY_PERCENTAGE, MODIFIER_PROPERTY_PREATTACK_BONUS_DAMAGE}
end

function modifier_boss_ammetot_gatekeeper_debuff:GetModifierSpellAmplify_Percentage()
	return self.amp
end

function modifier_boss_ammetot_gatekeeper_debuff:GetModifierPreAttack_BonusDamage()
	return self.dmg
endboss_ammetot_illusion_of_inevitability = class({})

function boss_ammetot_illusion_of_inevitability:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_ammetot_illusion_of_inevitability:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	target:AddNewModifier( caster, self, "modifier_boss_ammetot_illusion_of_inevitability", {duration = self:GetSpecialValueFor("duration")} )
	EmitSoundOn( "Hero_DoomBringer.InfernalBlade.Target", target )
	ParticleManager:FireParticle( "particles/units/heroes/hero_doom_bringer/doom_infernal_blade_impact.vpcf", PATTACH_POINT_FOLLOW, target )
end

modifier_boss_ammetot_illusion_of_inevitability = class({})
LinkLuaModifier( "modifier_boss_ammetot_illusion_of_inevitability", "bosses/boss_ammetot/boss_ammetot_illusion_of_inevitability", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_illusion_of_inevitability:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
	self.damage = self:GetSpecialValueFor("damage") / 100
	if IsServer() then
		self:StartIntervalThink(0.99)
	end
end

function modifier_boss_ammetot_illusion_of_inevitability:OnRefresh()
	self:OnCreated()
end

function modifier_boss_ammetot_illusion_of_inevitability:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self:GetParent():GetHealth() * self.damage, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
end

function modifier_boss_ammetot_illusion_of_inevitability:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_ammetot_illusion_of_inevitability:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end

function modifier_boss_ammetot_illusion_of_inevitability:GetEffectName()
	return "particles/units/heroes/hero_doom_bringer/doom_infernal_blade_debuff.vpcf"
endboss_ammetot_restless_warden = class({})

function boss_ammetot_restless_warden:OnSpellStart()
	local caster = self:GetCaster()
	
	caster:AddNewModifier( caster, self, "modifier_boss_ammetot_restless_warden", {duration = self:GetSpecialValueFor("duration")} )
	EmitSoundOn( "Hero_TrollWarlord.BattleTrance.Cast", caster )
	ParticleManager:FireParticle( "particles/units/heroes/hero_troll_warlord/troll_warlord_battletrance_cast.vpcf", PATTACH_POINT_FOLLOW, caster )
end

modifier_boss_ammetot_restless_warden = class({})
LinkLuaModifier( "modifier_boss_ammetot_restless_warden", "bosses/boss_ammetot/boss_ammetot_restless_warden", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_restless_warden:OnCreated()
	self.reduction = self:GetSpecialValueFor("reduction")
	self.as = self:GetSpecialValueFor("as")
end

function modifier_boss_ammetot_restless_warden:OnRefresh()
	self:OnCreated()
end

function modifier_boss_ammetot_restless_warden:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_ammetot_restless_warden:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_boss_ammetot_restless_warden:GetModifierIncomingDamage_Percentage()
	return self.reduction
end

function modifier_boss_ammetot_restless_warden:GetEffectName()
	return "particles/units/heroes/hero_troll_warlord/troll_warlord_battletrance_buff.vpcf"
end

function modifier_boss_ammetot_restless_warden:GetStatusEffectName()
	return "particles/status_fx/status_effect_repel.vpcf"
end

function modifier_boss_ammetot_restless_warden:StatusEffectPriority()
	return 10
endboss_ammetot_see_all = class({})

function boss_ammetot_see_all:GetIntrinsicModifierName()
	return "modifier_boss_ammetot_see_all"
end

modifier_boss_ammetot_see_all = class({})
LinkLuaModifier( "modifier_boss_ammetot_see_all", "bosses/boss_ammetot/boss_ammetot_see_all", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_see_all:DeclareFunctions()
	return {MODIFIER_PROPERTY_BONUS_DAY_VISION, MODIFIER_PROPERTY_BONUS_NIGHT_VISION}
end

function modifier_boss_ammetot_see_all:IsAura()
	return true
end

function modifier_boss_ammetot_see_all:GetAuraRadius()
	return -1
end

function modifier_boss_ammetot_see_all:GetAuraDuration()
	return 0.5
end

function modifier_boss_ammetot_see_all:GetModifierAura()
	return "modifier_boss_ammetot_see_all_sight"
end

function modifier_boss_ammetot_see_all:GetAuraSearchTeam()
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_ammetot_see_all:GetAuraSearchType()
	return DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC
end

function modifier_boss_ammetot_see_all:GetBonusDayVision()
	return 9999
end

function modifier_boss_ammetot_see_all:GetBonusNightVision()
	return 9999
end

function modifier_boss_ammetot_see_all:IsHidden()
	return true
end

modifier_boss_ammetot_see_all_sight = class({})
LinkLuaModifier( "modifier_boss_ammetot_see_all_sight", "bosses/boss_ammetot/boss_ammetot_see_all", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_see_all_sight:CheckState()
	return {[MODIFIER_STATE_INVISIBLE] = false}
end

function modifier_boss_ammetot_see_all_sight:GetPriority()
	return MODIFIER_PRIORITY_HIGH
end

function modifier_boss_ammetot_see_all_sight:IsHidden()
	return true
endboss_ammetot_unbound = class({})

function boss_ammetot_unbound:GetIntrinsicModifierName()
	return "modifier_boss_ammetot_unbound"
end

modifier_boss_ammetot_unbound = class({})
LinkLuaModifier( "modifier_boss_ammetot_unbound", "bosses/boss_ammetot/boss_ammetot_unbound", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_unbound:CheckState()
	return {[MODIFIER_STATE_ROOTED] = false,
			[MODIFIER_STATE_DISARMED] = false,
			[MODIFIER_STATE_SILENCED] = false,
			[MODIFIER_STATE_FLYING] = true,
			[MODIFIER_STATE_UNSLOWABLE] = true,
			}
end

function modifier_boss_ammetot_unbound:GetPriority()
	return MODIFIER_PRIORITY_HIGH
end

function modifier_boss_ammetot_unbound:IsHidden()
	return true
endboss_ammetot_willing_prisoner = class({})

function boss_ammetot_willing_prisoner:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	ParticleManager:FireWarningParticle( self:GetCursorTarget():GetAbsOrigin(), self:GetSpecialValueFor("radius") )
	return true
end

function boss_ammetot_willing_prisoner:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	target:AddNewModifier( target, self, "modifier_boss_ammetot_willing_prisoner", {duration = self:GetSpecialValueFor("duration")} )
	EmitSoundOn( "Hero_Winter_Wyvern.WintersCurse.Cast", target )
	ParticleManager:FireParticle( "particles/units/heroes/hero_winter_wyvern/wyvern_winters_curse_ground.vpcf", PATTACH_POINT_FOLLOW, target )
	ParticleManager:FireParticle( "particles/units/heroes/hero_winter_wyvern/wyvern_winters_curse_start.vpcf", PATTACH_POINT_FOLLOW, target )
end


modifier_boss_ammetot_willing_prisoner = class({})
LinkLuaModifier( "modifier_boss_ammetot_willing_prisoner", "bosses/boss_ammetot/boss_ammetot_willing_prisoner", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_ammetot_willing_prisoner:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
	self.amp = self:GetSpecialValueFor("damage_amp")
end

function modifier_boss_ammetot_willing_prisoner:OnRefresh()
	self:OnCreated()
end

function modifier_boss_ammetot_willing_prisoner:IsAura()
	return true
end

function modifier_boss_ammetot_willing_prisoner:GetAuraRadius()
	return self.radius
end

function modifier_boss_ammetot_willing_prisoner:GetAuraDuration()
	return 0.5
end

function modifier_boss_ammetot_willing_prisoner:GetModifierAura()
	return "modifier_boss_ammetot_willing_prisoner_debuff"
end

function modifier_boss_ammetot_willing_prisoner:GetAuraSearchTeam()
	return DOTA_UNIT_TARGET_TEAM_FRIENDLY
end

function modifier_boss_ammetot_willing_prisoner:GetAuraEntityReject(entity)
	return self:GetParent() == entity
end

function modifier_boss_ammetot_willing_prisoner:GetAuraSearchType()
	return DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC
end

function modifier_boss_ammetot_willing_prisoner:CheckState()
	return {[MODIFIER_STATE_SPECIALLY_DENIABLE] = true}
end

function modifier_boss_ammetot_willing_prisoner:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_ammetot_willing_prisoner:GetModifierIncomingDamage_Percentage()
	return self.amp
end

function modifier_boss_ammetot_willing_prisoner:IsDebuff()
	return true
end

function modifier_boss_ammetot_willing_prisoner:GetEffectName()
	return "particles/units/heroes/hero_winter_wyvern/wyvern_winters_curse_status.vpcf"
end

function modifier_boss_ammetot_willing_prisoner:GetStatusEffectName()
	return "particles/status_fx/status_effect_wyvern_curse_target.vpcf"
end

function modifier_boss_ammetot_willing_prisoner:StatusEffectPriority()
	return 10
end

modifier_boss_ammetot_willing_prisoner_debuff = class({})
LinkLuaModifier( "modifier_boss_ammetot_willing_prisoner_debuff", "bosses/boss_ammetot/boss_ammetot_willing_prisoner", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_ammetot_willing_prisoner_debuff:OnCreated()
		self:GetParent():SetForceAttackTargetAlly( self:GetCaster() )
		self:GetParent():SetAttacking( self:GetCaster() )
		self:GetParent():MoveToTargetToAttack( self:GetCaster() )
		self:StartIntervalThink( 0.25 )
		
		EmitSoundOn( "Hero_Winter_Wyvern.WintersCurse.Target", target )
	end
	
	function modifier_boss_ammetot_willing_prisoner_debuff:OnIntervalThink()
		self:GetParent():SetForceAttackTargetAlly( self:GetCaster() )
		self:GetParent():SetAttacking( self:GetCaster() )
		self:GetParent():MoveToTargetToAttack( self:GetCaster() )
	end

	function modifier_boss_ammetot_willing_prisoner_debuff:OnDestroy()
		self:GetParent():SetForceAttackTargetAlly( nil )
		self:GetParent():SetAttacking( nil ) 
		self:GetParent():MoveToTargetToAttack( nil )
	end
end

function modifier_boss_ammetot_willing_prisoner_debuff:IsDebuff()
	return true
end

function modifier_boss_ammetot_willing_prisoner_debuff:GetEffectName()
	return "particles/units/heroes/hero_winter_wyvern/wyvern_winters_curse_buff.vpcf"
end

function modifier_boss_ammetot_willing_prisoner_debuff:GetStatusEffectName()
	return "particles/status_fx/status_effect_wyvern_curse_buff.vpcf"
end

function modifier_boss_ammetot_willing_prisoner_debuff:StatusEffectPriority()
	return 10
endboss_apotheosis_blessed_being = class({})

function boss_apotheosis_blessed_being:GetIntrinsicModifierName()
	return "modifier_boss_apotheosis_blessed_being"
end

modifier_boss_apotheosis_blessed_being = class({})
LinkLuaModifier("modifier_boss_apotheosis_blessed_being", "bosses/boss_apotheosis/boss_apotheosis_blessed_being", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_apotheosis_blessed_being:OnCreated()
	self.interval = self:GetSpecialValueFor("debuff_limit")
	self.duration = self:GetSpecialValueFor("buff_duration")
	self.delay = 0
	if IsServer() then
		self:StartIntervalThink(0.33)
	end
end

function modifier_boss_apotheosis_blessed_being:OnRefresh()
	self.interval = self:GetSpecialValueFor("debuff_limit")
	self.duration = self:GetSpecialValueFor("buff_duration")
	self.delay = 0
	if IsServer() then
		self:StartIntervalThink(0.33)
	end
end

function modifier_boss_apotheosis_blessed_being:OnIntervalThink()
	local debuffFound = false
	local parent = self:GetParent()
	if parent:PassivesDisabled() then return end
	for _, modifier in ipairs( parent:FindAllModifiers() ) do
		if not modifier.IsDebuff then
			if modifier:GetCaster() and not modifier:GetCaster():IsSameTeam( parent ) then
				debuffFound = true
			end
		elseif modifier:IsDebuff() then
			debuffFound = true
		end
		if debuffFound then break end
	end
	if debuffFound then
		self.delay = self.delay + 0.33
	else
		self.delay = 0
	end
	if self.delay > self.interval then
		self.delay = 0
		parent:Dispel(parent, true)
		parent:AddNewModifier(parent, self:GetAbility(), "modifier_boss_apotheosis_blessed_being_immunity", {duration = self.duration})
		ParticleManager:FireParticle("particles/items_fx/immunity_sphere.vpcf", PATTACH_POINT_FOLLOW, parent)
	end
end

function modifier_boss_apotheosis_blessed_being:IsHidden()
	return true
end

function modifier_boss_apotheosis_blessed_being:IsPurgable()
	return false
end

modifier_boss_apotheosis_blessed_being_immunity = class({})
LinkLuaModifier("modifier_boss_apotheosis_blessed_being_immunity", "bosses/boss_apotheosis/boss_apotheosis_blessed_being", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_apotheosis_blessed_being_immunity:GetModifierStatusResistance()
	return 100
end

function modifier_boss_apotheosis_blessed_being_immunity:GetEffectName()
	return "particles/items3_fx/lotus_orb_shell.vpcf"
end
boss_apotheosis_decimate = class({})

function boss_apotheosis_decimate:OnSpellStart()
	local caster = self:GetCaster()
	
	self.nFX = ParticleManager:CreateParticle("particles/units/bosses/boss_apotheosis/boss_apotheosis_decimate_channel_dial.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl( self.nFX, 1, caster:GetAbsOrigin() + Vector(0,0,125) )
	ParticleManager:SetParticleControl( self.nFX, 9, Vector(150,1,1) )
	ParticleManager:SetParticleControl( self.nFX, 11, Vector( self:GetChannelTime() + 0.1,0,10 ) )
	ParticleManager:FireWarningParticle( caster:GetAbsOrigin(), 600 )
	caster:EmitSound("Hero_Invoker.SunStrike.Charge")
end

function boss_apotheosis_decimate:OnChannelFinish(bInterrupt)
	local caster = self:GetCaster()
	if not bInterrupt then
		local casterPos = caster:GetAbsOrigin()
		
		local min_beams = self:GetSpecialValueFor("min_sunstrikes")
		local radius = self:GetSpecialValueFor("radius")
		local hero_beams = self:GetSpecialValueFor("sunstrikes_per_hero")
		Timers:CreateTimer(0.1, function()	
			self:CreateFlare( casterPos + ActualRandomVector(1200, 150), radius )
			min_beams = min_beams - 1
			if min_beams > 0 then
				return 0.1
			end
		end)
		
		for _, hero in ipairs( caster:FindEnemyUnitsInRadius( casterPos, -1, {type = DOTA_UNIT_TARGET_HERO} ) ) do
			local heroPos = hero:GetAbsOrigin()
			for i = 1, hero_beams do
				self:CreateFlare( heroPos + ActualRandomVector(radius * 1.5), radius )
			end
		end
	end
	caster:StopSound("Hero_Invoker.Cataclysm.Charge")
	ParticleManager:DestroyParticle( self.nFX, true )
	ParticleManager:ReleaseParticleIndex( self.nFX )
end

function boss_apotheosis_decimate:CreateFlare(position, radius)
	local caster = self:GetCaster()
	local casterPos = caster:GetAbsOrigin()
	local damage = self:GetSpecialValueFor("damage")
	local delay = self:GetSpecialValueFor("delay")
	ParticleManager:FireParticle("particles/units/heroes/hero_invoker/invoker_sun_strike_team.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius,1,1)})
	Timers:CreateTimer(delay + RandomFloat( 0.1, 0.4 ), function()
		for _, hero in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
			self:DealDamage( caster, hero, damage )
		end
		ParticleManager:FireParticle("particles/invoker_sun_strikev2.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius,1,1)})
		EmitSoundOnLocationWithCaster( position, "Hero_Invoker.Cataclysm.Ignite", caster )
	end)
endboss_apotheosis_focused_beam = class({})

function boss_apotheosis_focused_beam:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local casterPos = caster:GetAbsOrigin()
	ParticleManager:FireLinearWarningParticle( casterPos, casterPos + caster:GetForwardVector() * self:GetTrueCastRange(), self:GetSpecialValueFor("width") * 2 )
	return true
end

function boss_apotheosis_focused_beam:OnSpellStart()
    local caster = self:GetCaster()
	
	local pathLength = self:GetTrueCastRange()
	local endPos = caster:GetAbsOrigin() + caster:GetForwardVector() * pathLength
	
	local duration = self:GetSpecialValueFor("duration")
	local width = self:GetSpecialValueFor("width")
	local damage = self:GetSpecialValueFor("damage")
	local thinker = 0
	local interval = self:GetSpecialValueFor("tick_interval")
	
	EmitSoundOn("Hero_Phoenix.SunRay.Cast", caster)
	pfx = ParticleManager:CreateParticle( "particles/units/heroes/hero_phoenix/phoenix_sunray.vpcf", PATTACH_ABSORIGIN, caster )
	ParticleManager:SetParticleControlEnt( pfx, 0, caster, PATTACH_POINT_FOLLOW, "attach_hitloc", caster:GetAbsOrigin(), true )
	ParticleManager:SetParticleControl( pfx, 1, endPos )
	caster:AddNewModifier(caster, self, "modifier_boss_apotheosis_focused_beam_root", {duration = duration})
	Timers:CreateTimer(0, function()
		if duration > 0 and caster:IsAlive() and caster:HasModifier("modifier_boss_apotheosis_focused_beam_root") then
			duration = duration - FrameTime()
			thinker = thinker + FrameTime()
			endPos = caster:GetAbsOrigin() + caster:GetForwardVector() * pathLength
			endPos = GetGroundPosition(endPos, nil)
			endPos.z = GetGroundHeight(caster:GetAbsOrigin(), caster) + 92
			ParticleManager:SetParticleControl( pfx, 1, endPos )
			if thinker >= interval then
				for _,enemy in pairs(caster:FindEnemyUnitsInLine(caster:GetAbsOrigin(), endPos, width, {})) do
					self:DealDamage( caster, enemy, damage * interval )
				end
				thinker = 0
			end
			GridNav:DestroyTreesAroundPoint(endPos, self:GetTalentSpecialValueFor("radius"), false)
			return 0
		else
			endPos = 0
			caster:RemoveModifierByName("modifier_boss_apotheosis_focused_beam_root")
			ParticleManager:DestroyParticle(pfx, false)
			return nil
		end
	end)
end

modifier_boss_apotheosis_focused_beam_root = class({})
LinkLuaModifier("modifier_boss_apotheosis_focused_beam_root", "bosses/boss_apotheosis/boss_apotheosis_focused_beam", LUA_MODIFIER_MOTION_NONE )
function modifier_boss_apotheosis_focused_beam_root:OnCreated()
	self.turnslow = self:GetSpecialValueFor("turn_slow")
	self.width = self:GetSpecialValueFor("width")
	if IsServer() then
		self.check = 0
		self.timer = self:GetSpecialValueFor("no_target_timer")
		self:StartIntervalThink(FrameTime()) 
	end
end

function modifier_boss_apotheosis_focused_beam_root:OnIntervalThink()
	local caster = self:GetCaster()
	local endPos = caster:GetAbsOrigin() + caster:GetForwardVector() * self:GetAbility():GetTrueCastRange()
	endPos = GetGroundPosition(endPos, nil)
	endPos.z = GetGroundHeight(caster:GetAbsOrigin(), caster) + 92
	for _,enemy in ipairs(caster:FindEnemyUnitsInLine(caster:GetAbsOrigin(), endPos, self.width * 2, {})) do
		local enemyVector = CalculateDirection( enemy, endPos )
		caster:SetForwardVector( RotateVector2D( caster:GetForwardVector(), 3.6 * FrameTime() * -enemyVector:Cross(caster:GetForwardVector()).z ) )
		return
	end
	for _,enemy in ipairs(caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), self:GetAbility():GetTrueCastRange()) ) do
		local enemyVector = CalculateDirection( enemy, endPos )
		caster:SetForwardVector( RotateVector2D( caster:GetForwardVector(), 3.6 * FrameTime() * -enemyVector:Cross(caster:GetForwardVector()).z ) )
		break
	end
	self.check = self.check + FrameTime()
	if self.check >= self.timer then
		self:Destroy()
	end
end

function modifier_boss_apotheosis_focused_beam_root:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss_apotheosis_focused_beam_root:DeclareFunctions()
	return {MODIFIER_PROPERTY_TURN_RATE_OVERRIDE}
end

function modifier_boss_apotheosis_focused_beam_root:GetModifierTurnRate_Override()
	return 0.01
endboss_apotheosis_impervious = class({})

function boss_apotheosis_impervious:GetIntrinsicModifierName()
	return "modifier_boss_apotheosis_impervious"
end

modifier_boss_apotheosis_impervious = class({})
LinkLuaModifier( "modifier_boss_apotheosis_impervious", "bosses/boss_apotheosis/boss_apotheosis_impervious", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_apotheosis_impervious:OnCreated()
	self.limit = self:GetSpecialValueFor("max_hp_dmg") / 100
	self.breakLim = self:GetSpecialValueFor("break_hp_dmg") / 100
	self.minBlock = self:GetSpecialValueFor("min_block")
end

function modifier_boss_apotheosis_impervious:OnRefresh()
	self.limit = self:GetSpecialValueFor("max_hp_dmg") / 100
	self.breakLim = self:GetSpecialValueFor("break_hp_dmg") / 100
	self.minBlock = self:GetSpecialValueFor("min_block")
end

function modifier_boss_apotheosis_impervious:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK, MODIFIER_EVENT_ON_DEATH}
end

function modifier_boss_apotheosis_impervious:GetModifierTotal_ConstantBlock(params)
	local limit = TernaryOperator( self.breakLim, self:GetParent():PassivesDisabled(), self.limit )
	local maxHPBlock = self:GetParent():GetMaxHealth() * limit * ( 1 + (GameRules.BasePlayers - HeroList:GetActiveHeroCount()) )
	local dmgPct = params.damage / params.original_damage
	if params.damage > maxHPBlock then
		return math.max( self.minBlock * dmgPct, params.damage - maxHPBlock )
	elseif not self:GetParent():PassivesDisabled() then
		return self.minBlock * dmgPct
	end
end

function modifier_boss_apotheosis_impervious:OnDeath(params)
	if params.unit == self:GetParent() then
		params.unit:EmitSound("Hero_ObsidianDestroyer.SanityEclipse.Cast")
		ParticleManager:FireParticle("particles/units/heroes/hero_obsidian_destroyer/obsidian_destroyer_sanity_eclipse_area.vpcf", PATTACH_ABSORIGIN, params.unit, {[1] = Vector(500,1,1)})
	end
end

function modifier_boss_apotheosis_impervious:IsHidden()
	return true
end

function modifier_boss_apotheosis_impervious:IsPurgable()
	return false
endboss_apotheosis_judge_the_cowards = class({})

function boss_apotheosis_judge_the_cowards:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCaster():GetAbsOrigin(), self:GetSpecialValueFor("radius") )
	return true
end

function boss_apotheosis_judge_the_cowards:OnSpellStart()
	local caster = self:GetCaster()
	local position = caster:GetAbsOrigin()
	
	local radius = self:GetSpecialValueFor("radius")
	local speed = self:GetSpecialValueFor("speed")
	local slowDur = self:GetSpecialValueFor("duration")
	local duration = 1
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
		local distance = math.min( speed * duration, CalculateDistance( caster, enemy ) - 150 )
		enemy:ApplyKnockBack(position, duration, duration, -450, 0, caster, self)
		enemy:AddNewModifier( caster, self, "modifier_boss_apotheosis_judge_the_cowards", {duration = slowDur + duration})
	end
	ParticleManager:FireParticle("particles/units/bosses/boss_apotheosis/boss_apotheosis_judge_the_cowards.vpcf", PATTACH_POINT_FOLLOW, caster, {[0] = "attach_attack1",
																																				 [1] = Vector(radius,1,1)})
	caster:EmitSound("Hero_Dark_Seer.Vacuum")
end

modifier_boss_apotheosis_judge_the_cowards = class({})
LinkLuaModifier( "modifier_boss_apotheosis_judge_the_cowards", "bosses/boss_apotheosis/boss_apotheosis_judge_the_cowards", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_apotheosis_judge_the_cowards:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_boss_apotheosis_judge_the_cowards:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_apotheosis_judge_the_cowards:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
endboss_apotheosis_latent_potential = class({})

function boss_apotheosis_latent_potential:GetIntrinsicModifierName()
	return "modifier_boss_apotheosis_latent_potential"
end

modifier_boss_apotheosis_latent_potential = class({})
LinkLuaModifier( "modifier_boss_apotheosis_latent_potential", "bosses/boss_apotheosis/boss_apotheosis_latent_potential", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_apotheosis_latent_potential:OnCreated()
	self.amp = self:GetSpecialValueFor("damage_amp")
	self.interval = self:GetSpecialValueFor("double_timer")
	self:SetStackCount( 1 )
	
	if IsServer() then
		self:StartIntervalThink( self.interval)
	end
end

function modifier_boss_apotheosis_latent_potential:OnRefresh()
	self.amp = self:GetSpecialValueFor("damage_amp")
	self.interval = self:GetSpecialValueFor("double_timer")
end

function modifier_boss_apotheosis_latent_potential:OnIntervalThink()
	if not self:GetParent():PassivesDisabled() then
		self:StartIntervalThink(self.interval)
		self:SetStackCount( math.min( 1000, self:GetStackCount() * 2 ) )
		if self:GetStackCount() >= 1000 then
			self:StartIntervalThink(-1)
		end
	else
		self:StartIntervalThink( 1 )
	end
end

function modifier_boss_apotheosis_latent_potential:DeclareFunctions()
	return { MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE }
end

function modifier_boss_apotheosis_latent_potential:GetModifierTotalDamageOutgoing_Percentage()
	return self:GetStackCount() * self.amp
end

function modifier_boss_apotheosis_latent_potential:IsPurgable()
	return false
endboss_apotheosis_purifier = class({})

function boss_apotheosis_purifier:GetIntrinsicModifierName()
	return "modifier_boss_apotheosis_purifier"
end

modifier_boss_apotheosis_purifier = class({})
LinkLuaModifier( "modifier_boss_apotheosis_purifier", "bosses/boss_apotheosis/boss_apotheosis_purifier", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_apotheosis_purifier:OnCreated()
	self.interval = self:GetSpecialValueFor("purge_interval")
	if IsServer() then
		self:StartIntervalThink( self.interval )
	end
end

function modifier_boss_apotheosis_purifier:OnRefresh()
	self.interval = self:GetSpecialValueFor("purge_interval")
	if IsServer() then
		self:StartIntervalThink( self.interval )
	end
end

function modifier_boss_apotheosis_purifier:OnIntervalThink()
	local parent = self:GetParent()
	if parent:PassivesDisabled() then
		self:StartIntervalThink(2)
	else
		for _, hero in ipairs( parent:FindEnemyUnitsInRadius( parent:GetAbsOrigin(), -1 ) ) do
			hero:Dispel(parent, true)
			hero:EmitSound("DOTA_Item.DiffusalBlade.Activate")
			ParticleManager:FireParticle("particles/generic_gameplay/generic_purge.vpcf", PATTACH_POINT_FOLLOW, hero)
		end
		self:StartIntervalThink( self.interval )
	end
end

function modifier_boss_apotheosis_purifier:IsHidden()
	return true
endboss_apotheosis_rampage = class({})

function boss_apotheosis_rampage:OnSpellStart()
	local caster = self:GetCaster()
	
	self.radius = self:GetSpecialValueFor("radius")
	self.damage = self:GetSpecialValueFor("damage")
	caster:AddNewModifier( caster, self, "modifier_boss_apotheosis_rampage", {duration = self:GetSpecialValueFor("duration")})
end

function boss_apotheosis_rampage:OnProjectileHit( target, position )
	if target then
		local caster = self:GetCaster()
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, self.radius ) ) do
			self:DealDamage( caster, enemy, self.damage )
		end
		target:EmitSound("Hero_ObsidianDestroyer.ArcaneOrb.Impact")
		UTIL_Remove(target)
	end
end

function boss_apotheosis_rampage:FireOrb(position)
	local dummy = self:CreateDummy(position)
	local projectile = {
		Target = dummy,
		Source = self:GetCaster(),
		Ability = self,
		EffectName = "particles/units/bosses/boss_apotheosis/boss_apotheosis_rampage.vpcf",
		bDodgable = false,
		bProvidesVision = false,
		iMoveSpeed = math.max( 100, CalculateDistance( self:GetCaster(), position ) / self:GetSpecialValueFor("orb_duration") ),
		iSourceAttachment = DOTA_PROJECTILE_ATTACHMENT_ATTACK_1,
	}
	ProjectileManager:CreateTrackingProjectile(projectile)
	EmitSoundOn("Hero_ObsidianDestroyer.ArcaneOrb", self:GetCaster())
	ParticleManager:FireWarningParticle( position, self:GetSpecialValueFor("radius") )
end

modifier_boss_apotheosis_rampage = class({})
LinkLuaModifier("modifier_boss_apotheosis_rampage", "bosses/boss_apotheosis/boss_apotheosis_rampage", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_apotheosis_rampage:OnCreated()
	self.speed = self:GetSpecialValueFor("orb_speed")
	self.interval = self:GetSpecialValueFor("orb_interval")
	self.orbsPerShot = 1 + math.floor( ( 100 - self:GetParent():GetHealthPercent() ) / 20)
	if IsServer() then
		self:StartIntervalThink(self.interval)
	end
end

function modifier_boss_apotheosis_rampage:OnIntervalThink()
	local orbsPerShot = self.orbsPerShot
	local caster = self:GetCaster()
	local ability = self:GetAbility()
	local casterPos = caster:GetAbsOrigin()
	for _, hero in ipairs( caster:FindEnemyUnitsInRadius( casterPos, -1 ) ) do
		if RollPercentage( 50 ) then
			self:GetAbility():FireOrb(hero:GetAbsOrigin(), self.speed)
		else
			self:GetAbility():FireOrb(casterPos + ActualRandomVector( 1200, 300 ), self.speed )
		end
		orbsPerShot = orbsPerShot - 1
		if orbsPerShot == 0 then
			break
		end
	end
	if orbsPerShot > 0 then
		for i = 1, orbsPerShot do
			self:GetAbility():FireOrb(casterPos + ActualRandomVector( 1200, 300 ), self.speed )
		end
	end
end

function modifier_boss_apotheosis_rampage:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss_apotheosis_rampage:DeclareFunctions()
	return {MODIFIER_PROPERTY_OVERRIDE_ANIMATION}
end

function modifier_boss_apotheosis_rampage:GetOverrideAnimation()
	return ACT_DOTA_GENERIC_CHANNEL_1
endboss_apotheosis_ruthless_hunter = class({})

function boss_apotheosis_ruthless_hunter:IsStealable()
    return true
end

function boss_apotheosis_ruthless_hunter:IsHiddenWhenStolen()
    return false
end

function boss_apotheosis_ruthless_hunter:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	ParticleManager:FireLinearWarningParticle( caster:GetAbsOrigin(), self:GetCursorPosition(), 100 * 2 )
	return true
end

function boss_apotheosis_ruthless_hunter:OnSpellStart()
	EmitSoundOn("Hero_Spirit_Breaker.ChargeOfDarkness", self:GetCaster())
    self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_boss_apotheosis_ruthless_hunter", {})
end

modifier_boss_apotheosis_ruthless_hunter = class({})
LinkLuaModifier( "modifier_boss_apotheosis_ruthless_hunter", "bosses/boss_apotheosis/boss_apotheosis_ruthless_hunter.lua" ,LUA_MODIFIER_MOTION_NONE )

function modifier_boss_apotheosis_ruthless_hunter:OnCreated(table)
	if IsServer() then
		local parent = self:GetParent()

		self.hitUnits = {}

		local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_spirit_breaker/spirit_breaker_charge.vpcf", PATTACH_POINT_FOLLOW, parent)
					ParticleManager:SetParticleControlEnt(nfx, 0, parent, PATTACH_ABSORIGIN_FOLLOW, "attach_hitloc", parent:GetAbsOrigin(), true)
		self:AttachEffect(nfx)
		
		self.dir = CalculateDirection(self:GetAbility():GetCursorPosition(), self:GetParent():GetAbsOrigin())
		self.distance = CalculateDistance( self:GetAbility():GetCursorPosition(), parent )
		self.damage = self:GetSpecialValueFor("damage")
		self.knockback = self:GetSpecialValueFor("knockback")
		self.stun = self:GetSpecialValueFor("duration")
		self.speed = self:GetSpecialValueFor("speed")
		self:StartMotionController()
	end
end

function modifier_boss_apotheosis_ruthless_hunter:DoControlledMotion()
	local parent = self:GetParent()
	local ability = self:GetAbility()
	if self.distance > 0 then
		local speed = self.speed * FrameTime()
		local radius = 100
		local position = parent:GetAbsOrigin()
		self.distance = self.distance - speed
		GridNav:DestroyTreesAroundPoint(position, radius, true)

		
		local enemies = parent:FindEnemyUnitsInRadius(position, radius)
		for _,enemy in pairs(enemies) do
			if not self.hitUnits[enemy:entindex()] then
				enemy:StopMotionControllers(false)
				local modifierKnockback = {
					center_x = position.x,
					center_y = position.y,
					center_z = position.z,
					duration = self.stun,
					knockback_duration = 0.5,
					knockback_distance = self.knockback,
					knockback_height = 125,
				}
				enemy:AddNewModifier( parent, ability, "modifier_knockback", modifierKnockback )
				ability:DealDamage( parent, enemy, self.damage )
				self.hitUnits[enemy:entindex()] = true
			end
		end
		
		parent:SetAbsOrigin(GetGroundPosition(position, parent) + self.dir*speed)
	else
		FindClearSpaceForUnit(parent, parent:GetAbsOrigin(), true)
		self:StopMotionController(true)
		self:Destroy()
	end
end



function modifier_boss_apotheosis_ruthless_hunter:CheckState()
	local state = { [MODIFIER_STATE_STUNNED] = true,
					[MODIFIER_STATE_NO_UNIT_COLLISION] = true,
					[MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY] = true}
	return state
end

function modifier_boss_apotheosis_ruthless_hunter:DeclareFunctions()
    local funcs = {
        MODIFIER_PROPERTY_OVERRIDE_ANIMATION,
    }
    return funcs
end

function modifier_boss_apotheosis_ruthless_hunter:GetOverrideAnimation()
	return ACT_DOTA_RUN
end

function modifier_boss_apotheosis_ruthless_hunter:OnRemoved()
	if IsServer() then
		EmitSoundOn("boss_apotheosis.Charge.Impact", self:GetParent())
		self:GetParent():StartGesture(ACT_DOTA_SPIRIT_BREAKER_CHARGE_END)
	end
endboss_apotheosis_shield_of_valhalla = class({})

function boss_apotheosis_shield_of_valhalla:OnAbilityPhaseStart()
	return true
end

function boss_apotheosis_shield_of_valhalla:OnSpellStart()
	local caster = self:GetCaster()
	
	caster:AddNewModifier( caster, self, "modifier_boss_apotheosis_shield_of_valhalla", {duration = self:GetSpecialValueFor("duration")})
	caster:EmitSound("DOTA_Item.BlackKingBar.Activate")
end

modifier_boss_apotheosis_shield_of_valhalla = class({})
LinkLuaModifier( "modifier_boss_apotheosis_shield_of_valhalla", "bosses/boss_apotheosis/boss_apotheosis_shield_of_valhalla", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_apotheosis_shield_of_valhalla:OnCreated()
		self.hp = self:GetCaster():GetHealth() * self:GetSpecialValueFor("curr_hp_limit") / 100
	end
	
	function modifier_boss_apotheosis_shield_of_valhalla:OnRefresh()
		self.hp = self:GetCaster():GetHealth() * self:GetSpecialValueFor("curr_hp_limit") / 100
	end
end

function modifier_boss_apotheosis_shield_of_valhalla:DeclareFunctions()
	return {MODIFIER_PROPERTY_MIN_HEALTH}
end

function modifier_boss_apotheosis_shield_of_valhalla:GetMinHealth()
	return self.hp
end

function modifier_boss_apotheosis_shield_of_valhalla:GetEffectName()
	return "particles/items_fx/black_king_bar_avatar.vpcf"
end

function modifier_boss_apotheosis_shield_of_valhalla:GetStatusEffectName()
	return "particles/status_fx/status_effect_avatar.vpcf"
end

function modifier_boss_apotheosis_shield_of_valhalla:StatusEffectPriority()
	return 20
endboss_apotheosis_the_end = class({})

function boss_apotheosis_the_end:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle(self:GetCursorTarget())
	return true
end

function boss_apotheosis_the_end:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	target:AddNewModifier( caster, self, "modifier_boss_apotheosis_the_end", {duration = self:GetSpecialValueFor("death_timer") + 0.1})
	ParticleManager:FireParticle("particles/bosses/boss_apotheosis/boss_apotheosis_the_end_effect.vpcf", PATTACH_POINT_FOLLOW, target, {[1] = Vector(900,1,1)})
	target:EmitSound("Hero_Necrolyte.ReapersScythe.Cast")
end

modifier_boss_apotheosis_the_end = class({})	
LinkLuaModifier( "modifier_boss_apotheosis_the_end", "bosses/boss_apotheosis/boss_apotheosis_the_end", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_apotheosis_the_end:OnCreated()
		self:SetDuration( self:GetSpecialValueFor("death_timer"), true )
		self:StartIntervalThink( self:GetSpecialValueFor("death_timer") - 0.1 )
	end
	
	function modifier_boss_apotheosis_the_end:OnIntervalThink()
		ParticleManager:FireParticle("particles/units/heroes/hero_obsidian_destroyer/obsidian_destroyer_prison_end.vpcf", PATTACH_POINT_FOLLOW, self:GetParent() )
		self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self:GetParent():GetMaxHealth() * 99, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_HPLOSS} )
		self:GetParent():EmitSound("Hero_Necrolyte.ReapersScythe.Target")
	end
end

function modifier_boss_apotheosis_the_end:CheckState()
	return {[MODIFIER_STATE_SPECIALLY_DENIABLE] = true}
end

function modifier_boss_apotheosis_the_end:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK}
end

function modifier_boss_apotheosis_the_end:OnAttack(params)
	if params.target == self:GetParent() and params.attacker:IsSameTeam(params.target) then
		params.attacker:EmitSound("Hero_Necrolyte.ReapersScythe.Cast")
		ParticleManager:FireParticle("particles/bosses/boss_apotheosis/boss_apotheosis_the_end_effect.vpcf", PATTACH_POINT_FOLLOW, params.attacker)
		params.attacker:AddNewModifier( self:GetCaster(), self:GetAbility(), "modifier_boss_apotheosis_the_end", {duration = self:GetSpecialValueFor("death_timer") + 0.1})
		self:Destroy()
	end
end

function modifier_boss_apotheosis_the_end:GetEffectName()
	return "particles/units/bosses/boss_apotheosis/boss_apotheosis_the_end_debufftrack_scroll.vpcf"
end

function modifier_boss_apotheosis_the_end:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
end

function modifier_boss_apotheosis_the_end:GetStatusEffectName()
	return "particles/status_fx/status_effect_wraithking_ghosts.vpcf"
end

function modifier_boss_apotheosis_the_end:GetStatusEffectPriority()
	return 20
end

function modifier_boss_apotheosis_the_end:IsPurgable()
	return false
endarchangel_divine_judgement = class({})

function archangel_divine_judgement:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function archangel_divine_judgement:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()

	local duration = self:GetSpecialValueFor("duration")
	if target:TriggerSpellAbsorb( self ) then return end
	target:EmitSound("Hero_SkywrathMage.AncientSeal.Target")
	target:AddNewModifier( caster, self, "modifier_archangel_divine_judgement", {duration = duration})
end

modifier_archangel_divine_judgement = class({})
LinkLuaModifier( "modifier_archangel_divine_judgement", "bosses/boss_archangel/archangel_divine_judgement.lua", LUA_MODIFIER_MOTION_NONE )

function modifier_archangel_divine_judgement:OnCreated()
	self.bonus_dmg = self:GetSpecialValueFor("bonus_magic_damage")
end

function modifier_archangel_divine_judgement:OnCreated()
	self.bonus_dmg = self:GetSpecialValueFor("bonus_magic_damage")
end

function modifier_archangel_divine_judgement:CheckState()
	return {[MODIFIER_STATE_SILENCED] = true}
end

function modifier_archangel_divine_judgement:DeclareFunctions()
	return {MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS}
end

function modifier_archangel_divine_judgement:GetModifierMagicalResistanceBonus()
	return self.bonus_dmg
end

function modifier_archangel_divine_judgement:GetEffectName()
	return "particles/units/heroes/hero_skywrath_mage/skywrath_mage_ancient_seal_debuff.vpcf"
end

function modifier_archangel_divine_judgement:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
endarchangel_fraternitas = class({})

function archangel_fraternitas:GetIntrinsicModifierName()
	return "modifier_archangel_fraternitas"
end

modifier_archangel_fraternitas = class({})
LinkLuaModifier("modifier_archangel_fraternitas", "bosses/boss_archangel/archangel_fraternitas", LUA_MODIFIER_MOTION_NONE)

function modifier_archangel_fraternitas:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_archangel_fraternitas:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_archangel_fraternitas:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH}
end

function modifier_archangel_fraternitas:OnDeath(params)
	if params.unit == self:GetParent() then
		params.unit:EmitSound("Hero_SkywrathMage.ConcussiveShot.Cast")
		for _, ally in ipairs( self:GetParent():FindFriendlyUnitsInRadius( self:GetParent():GetAbsOrigin(), 900 ) ) do
			ally:AddNewModifier( params.unit, self:GetAbility(), "modifier_archangel_fraternitas_buff", {duration = self.duration} )
			ally:RefreshAllCooldowns(false, false)
			ally:EmitSound("Hero_SkywrathMage.ConcussiveShot.Target")
		end
	end
end

function modifier_archangel_fraternitas:IsHidden()
	return true
end

modifier_archangel_fraternitas_buff = class({})
LinkLuaModifier("modifier_archangel_fraternitas_buff", "bosses/boss_archangel/archangel_fraternitas", LUA_MODIFIER_MOTION_NONE)

function modifier_archangel_fraternitas_buff:OnCreated()
	self.cdr = self:GetSpecialValueFor("cdr")
end

function modifier_archangel_fraternitas_buff:OnRefresh()
	self.cdr = self:GetSpecialValueFor("cdr")
end

function modifier_archangel_fraternitas_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING}
end

function modifier_archangel_fraternitas_buff:GetModifierPercentageCooldownStacking()
	return self.cdr
end

function modifier_archangel_fraternitas_buff:GetEffectName()
	return "skywrath_mage_concussive_shot_slow_debuff.vpcf"
endarchangel_holy_bolt = class({})

function archangel_holy_bolt:GetCastRange( target, position )
	return self:GetSpecialValueFor("distance")
end

function archangel_holy_bolt:OnAbilityPhaseStart()
	local startPos = self:GetCaster():GetAbsOrigin()
	local direction = self:GetCaster():GetForwardVector()
	
	local distance = self:GetSpecialValueFor("distance")
	local endPos = startPos + direction * distance
	ParticleManager:FireLinearWarningParticle( startPos, endPos )
	self.bolts = 1 + math.floor( (100 - self:GetCaster():GetHealthPercent()) / self:GetSpecialValueFor("extra_bolt_treshold") )
	local angle = 360 / self.bolts
	for i = 1, self.bolts - 1 do
		direction = RotateVector2D( direction, ToRadians( angle ) )
		local newPos = startPos + direction * distance
		ParticleManager:FireLinearWarningParticle( startPos, newPos )
	end
	
	return true
end

function archangel_holy_bolt:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local direction = caster:GetForwardVector()
	local distance = self:GetSpecialValueFor("distance")
	local speed = self:GetSpecialValueFor("speed")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local slow_duration = self:GetSpecialValueFor("slow_duration")
	
	local ProjectileHit = function(self, target, position)
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if target:TriggerSpellAbsorb(self) then return false end
		EmitSoundOn("Hero_SkywrathMage.ArcaneBolt.Impact", target)
		ability:DealDamage( caster, target, self.damage )
		target:AddNewModifier( caster, ability, "modifier_archangel_holy_bolt", {duration = slow_duration})
		return false
	end
	caster:EmitSound("Hero_SkywrathMage.ArcaneBolt.Cast")
	ProjectileHandler:CreateProjectile(PROJECTILE_LINEAR, ProjectileHit, {  FX = "particles/units/heroes/hero_skywrath_mage/skywrath_mage_arcane_bolt.vpcf",
																			position = caster:GetAbsOriginCenter(),
																			caster = caster,
																			ability = self,
																			speed = speed,
																			radius = radius,
																			velocity = speed * direction,
																			distance = distance,
																			damage = damage})
	local startPos = caster:GetAbsOrigin()
	self.bolts = 1 + math.floor( (100 - self:GetCaster():GetHealthPercent()) / self:GetSpecialValueFor("extra_bolt_treshold") )
	local angle = 360 / self.bolts
	for i = 1, self.bolts - 1 do
		direction = RotateVector2D( direction, ToRadians( angle ) )
		local newPos = startPos + direction * distance
		ProjectileHandler:CreateProjectile(PROJECTILE_LINEAR, ProjectileHit, {  FX = "particles/units/heroes/hero_skywrath_mage/skywrath_mage_arcane_bolt.vpcf",
																				position = GetGroundPosition( caster:GetAbsOrigin(), caster ) + Vector(0,0,caster:GetCenter().z/2),
																				caster = caster,
																				ability = self,
																				speed = speed,
																				radius = radius,
																				velocity = speed * direction,
																				distance = distance,
																				slow_duration = slow_duration,
																				damage = damage})
	end
end

modifier_archangel_holy_bolt = class({})
LinkLuaModifier( "modifier_archangel_holy_bolt", "bosses/boss_archangel/archangel_holy_bolt.lua", LUA_MODIFIER_MOTION_NONE )

function modifier_archangel_holy_bolt:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_archangel_holy_bolt:OnRefresh()
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_archangel_holy_bolt:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_archangel_holy_bolt:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end

function modifier_archangel_holy_bolt:GetEffectName()
	return "particles/units/heroes/hero_skywrath_mage/skywrath_mage_concussive_shot_slow_debuff.vpcf"
end

function modifier_archangel_holy_bolt:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
endarchangel_imperium_vici = class({})

function archangel_imperium_vici:GetIntrinsicModifierName()
	return "modifier_archangel_imperium_vici"
end

modifier_archangel_imperium_vici = class({})
LinkLuaModifier("modifier_archangel_imperium_vici", "bosses/boss_archangel/archangel_imperium_vici", LUA_MODIFIER_MOTION_NONE)

function modifier_archangel_imperium_vici:OnCreated()
	self.negSr = self:GetSpecialValueFor("neg_sr")
	self.ms = self:GetParent():GetIdealSpeedNoSlows()
	self:StartIntervalThink(0.5)
end

function modifier_archangel_imperium_vici:OnRefresh()
	self.negSr = self:GetSpecialValueFor("neg_sr")
	self.ms = self:GetParent():GetIdealSpeedNoSlows()
end

function modifier_archangel_imperium_vici:OnIntervalThink()
	self.ms = 0
	self.ms = self:GetParent():GetIdealSpeedNoSlows()
end

function modifier_archangel_imperium_vici:DeclareFunctions()
	return {MODIFIER_PROPERTY_STATUS_RESISTANCE, MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN}
end

function modifier_archangel_imperium_vici:CheckState()
	return {[MODIFIER_STATE_FLYING] = not self:GetCaster():PassivesDisabled()}
end

function modifier_archangel_imperium_vici:GetModifierStatusResistance()
	if not self:GetCaster():PassivesDisabled() then
		return self.negSr
	end
end

function modifier_archangel_imperium_vici:GetModifierMoveSpeed_AbsoluteMin()
	if not self:GetCaster():PassivesDisabled() then
		return self.ms
	end
end

function modifier_archangel_imperium_vici:IsHidden()
	return true
endarchangel_smite_the_earth = class({})

function archangel_smite_the_earth:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetSpecialValueFor("radius") )
	return true
end

function archangel_smite_the_earth:OnSpellStart()
	local caster = self:GetCaster()
	local point = self:GetCursorPosition()

	local radius = self:GetSpecialValueFor("radius")
	local tick_rate = self:GetSpecialValueFor("tick_interval")
	local duration = self:GetSpecialValueFor("duration")

	EmitSoundOn("Hero_SkywrathMage.MysticFlare.Cast", caster)

	ParticleManager:FireParticle("particles/units/heroes/hero_skywrath_mage/skywrath_mage_mystic_flare_ambient.vpcf", PATTACH_POINT, caster, {	[0]=point, 
																																				[1]=Vector(radius,duration,tick_rate)})
	CreateModifierThinker(caster, self, "modifier_archangel_smite_the_earth", {Duration = duration}, point, caster:GetTeam(), false)
end

modifier_archangel_smite_the_earth = class({})
LinkLuaModifier( "modifier_archangel_smite_the_earth", "bosses/boss_archangel/archangel_smite_the_earth.lua", LUA_MODIFIER_MOTION_NONE )

function modifier_archangel_smite_the_earth:OnCreated(table)
	self.tick = self:GetSpecialValueFor("tick_interval")
	self.damage = self:GetSpecialValueFor("damage")
	self.radius = self:GetSpecialValueFor("radius")
	if IsServer() then
		EmitSoundOn("Hero_SkywrathMage.MysticFlare", self:GetParent())
		self:StartIntervalThink( self.tick )
	end
end

function modifier_archangel_smite_the_earth:OnRemoved()
	if IsServer() then
		StopSoundOn("Hero_SkywrathMage.MysticFlare", self:GetParent())
	end
end

function modifier_archangel_smite_the_earth:OnIntervalThink()
	if not self:GetCaster() or self:GetCaster():IsNull() then self:GetParent():Destroy() end
    local enemies = self:GetCaster():FindEnemyUnitsInRadius(self:GetParent():GetAbsOrigin(), self.radius)
    for _,enemy in pairs(enemies) do
		if not enemy:TriggerSpellAbsorb( self:GetAbility() ) then
			EmitSoundOn("Hero_SkywrathMage.MysticFlare.Target", enemy)
			self:GetAbility():DealDamage(self:GetCaster(), enemy, self.damage / #enemies)
		end
    end
end

function modifier_archangel_smite_the_earth:IsHidden()
	return true
endboss_arthromos_dessicate = class({})

function boss_arthromos_dessicate:GetChannelTime()
	return self:GetSpecialValueFor("channel_time")
end

function boss_arthromos_dessicate:OnSpellStart()
	self.timer = self:GetSpecialValueFor("tick_time")
end

function boss_arthromos_dessicate:OnChannelThink(dt)
	self.timer = self.timer - dt
	if self.timer <= 0 then
		local caster = self:GetCaster()
		self.timer = self:GetSpecialValueFor("tick_time")
		local tickDamage = self:GetSpecialValueFor("channel_damage")
		EmitSoundOn( "hero_viper.poisonAttack.Cast", caster )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do
			self:FireTrackingProjectile("particles/units/heroes/hero_viper/viper_poison_attack.vpcf", enemy, 250, {extraData = {}})
		end
	end
end

function boss_arthromos_dessicate:OnChannelFinish(bInterrupt)
	if not bInterrupt then
		local caster = self:GetCaster()
		local endDamage = self:GetSpecialValueFor("end_damage")
		EmitSoundOn( "Hero_Dazzle.Poison_Cast", caster )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do
			self:FireTrackingProjectile("particles/units/heroes/hero_dazzle/dazzle_poison_touch.vpcf", enemy, 150, {extraData = {["end"] = 1}})
		end
	end
end

function boss_arthromos_dessicate:OnProjectileHit_ExtraData( target, location, extraData )
	if not self or not self:GetCaster() or self:IsNull() or self:GetCaster():IsNull() then 
		return
	end
	if target then
		local damage = self:GetSpecialValueFor("channel_damage")
		if extraData["end"] then
			damage = self:GetSpecialValueFor("end_damage")
		else
			EmitSoundOn( "Hero_Dazzle.Poison_Touch", target )
		end
		self:DealDamage( self:GetCaster(), target, damage )
	end
endboss_arthromos_hellraiser = class({})

function boss_arthromos_hellraiser:GetIntrinsicModifierName()
	return "modifier_boss_arthromos_hellraiser"
end

modifier_boss_arthromos_hellraiser = class({})
LinkLuaModifier( "modifier_boss_arthromos_hellraiser", "bosses/boss_arthromos/boss_arthromos_hellraiser", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_arthromos_hellraiser:OnCreated()
	self.incoming = self:GetSpecialValueFor("incoming") - 100
	self.outgoing = self:GetSpecialValueFor("outgoing") - 100
end

function modifier_boss_arthromos_hellraiser:OnRefresh()
	self:OnCreated()
end

function modifier_boss_arthromos_hellraiser:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH}
end

function modifier_boss_arthromos_hellraiser:OnDeath(params)
	if params.attacker == self:GetParent() then
		local callback = (function( illusion, parent, caster, ability )
			illusion:SetHealth( illusion:GetMaxHealth() )
			if not parent:IsRealHero() then
				illusion:SetRenderColor( 125, 125, 255 )
			end
			Timers:CreateTimer(0.5, function()
				illusion:MoveToPositionAggressive( caster:GetAbsOrigin() )
				if caster:IsNull() or not caster:IsAlive() then
					illusion:SetHealth( 1 )
					illusion:ForceKill(false)
					UTIL_Remove( illusion )
				end
			end)
		end)
		params.unit:ConjureImage( params.unit:GetAbsOrigin(), nil, self.outgoing, self.incoming, nil, self:GetAbility(), false, params.attacker, callback )
	end
end

function modifier_boss_arthromos_hellraiser:IsHidden()
	return true
endboss_arthromos_pestilence = class({})

function boss_arthromos_pestilence:OnAbilityPhaseStart()
	self.warmUp = ParticleManager:CreateParticle( "particles/units/heroes/hero_venomancer/venomancer_poison_nova_cast.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster() )
	ParticleManager:FireWarningParticle( self:GetAbsOrigin(), self:GetSpecialValueFor("radius") )
	return true
end

function boss_arthromos_pestilence:OnAbilityPhaseInterrupted()
	ParticleManager:ClearParticle(self.warmUp)
end

function boss_arthromos_pestilence:OnSpellStart()
	local caster = self:GetCaster()
	
	local radius = 50
	local maxRadius = self:GetTalentSpecialValueFor("radius")
	local radiusGrowth = 250 * 0.1
	
	local enemies = FindUnitsInRadius(caster:GetTeam(), caster:GetAbsOrigin(), nil, maxRadius, DOTA_UNIT_TARGET_TEAM_ENEMY, DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO, 0, 0, false)
	for _,enemy in pairs(enemies) do
		enemy:AddNewModifier(caster, self, "modifier_boss_arthromos_pestilence", {})
		EmitSoundOn( "Hero_Venomancer.PoisonNovaImpact", caster )
	end
	EmitSoundOn( "Hero_Venomancer.PoisonNova", caster )
	
	ParticleManager:ClearParticle(self.warmUp)
	
	local novaCloud = ParticleManager:CreateParticle( "particles/units/heroes/hero_venomancer/venomancer_poison_nova.vpcf", PATTACH_ABSORIGIN_FOLLOW, caster )
		ParticleManager:SetParticleControlEnt(novaCloud, 0, caster, PATTACH_POINT_FOLLOW, "attach_caster", caster:GetAbsOrigin(), true)
		ParticleManager:SetParticleControl(novaCloud, 1, Vector(maxRadius - 100,1,maxRadius - 100) )
		ParticleManager:SetParticleControl(novaCloud, 2, caster:GetAbsOrigin())
	ParticleManager:ReleaseParticleIndex(novaCloud)
end

modifier_boss_arthromos_pestilence = class({})
LinkLuaModifier( "modifier_boss_arthromos_pestilence", "bosses/boss_arthromos/boss_arthromos_pestilence", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_arthromos_pestilence:OnCreated()
		self.damage = self:GetSpecialValueFor("damage")
		self:SetStackCount(1)
		self:StartIntervalThink(1)
	end
	
	function modifier_boss_arthromos_pestilence:OnRefresh()
		self.damage = self:GetSpecialValueFor("damage")
		self:IncrementStackCount()
	end
	
	function modifier_boss_arthromos_pestilence:OnIntervalThink()
		if not self:GetAbility() or not self:GetCaster() or self:GetAbility():IsNull() or self:GetCaster():IsNull() then 
			self:Destroy()
			return
		end
		self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.damage * self:GetStackCount() )
	end
end
function modifier_boss_arthromos_pestilence:GetEffectName()
	return "particles/units/heroes/hero_venomancer/venomancer_poison_debuff_nova.vpcf"
endboss_arthromos_plague_aura = class({})

function boss_arthromos_plague_aura:GetIntrinsicModifierName()
	return "modifier_boss_arthromos_plague_aura"
end

modifier_boss_arthromos_plague_aura = class({})
LinkLuaModifier( "modifier_boss_arthromos_plague_aura", "bosses/boss_arthromos/boss_arthromos_plague_aura", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_arthromos_plague_aura:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_arthromos_plague_aura:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_arthromos_plague_aura:IsAura()
	return true
end

function modifier_boss_arthromos_plague_aura:GetModifierAura()
	return "modifier_boss_arthromos_plague_aura_debuff"
end

function modifier_boss_arthromos_plague_aura:GetAuraRadius()
	return self.radius
end

function modifier_boss_arthromos_plague_aura:GetAuraSearchTeam()
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_arthromos_plague_aura:GetAuraSearchType()
	return DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_CREEP 
end

function modifier_boss_arthromos_plague_aura:GetEffectName()
	return "particles/units/heroes/hero_necrolyte/necrolyte_spirit.vpcf"
end

function modifier_boss_arthromos_plague_aura:IsHidden()
	return true
end

modifier_boss_arthromos_plague_aura_debuff = class({})
LinkLuaModifier( "modifier_boss_arthromos_plague_aura_debuff", "bosses/boss_arthromos/boss_arthromos_plague_aura", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_arthromos_plague_aura_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_DISABLE_HEALING}
end

function modifier_boss_arthromos_plague_aura_debuff:GetDisableHealing()
	return 1
end

function modifier_boss_arthromos_plague_aura_debuff:GetEffectName()
	return "particles/units/heroes/hero_necrolyte/necrolyte_spirit_debuff.vpcf"
endboss_arthromos_touch_of_decay = class({})

function boss_arthromos_touch_of_decay:GetIntrinsicModifierName()
	return "modifier_boss_arthromos_touch_of_decay"
end

modifier_boss_arthromos_touch_of_decay = class({})
LinkLuaModifier( "modifier_boss_arthromos_touch_of_decay", "bosses/boss_arthromos/boss_arthromos_touch_of_decay", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_arthromos_touch_of_decay:OnCreated()
	self.duration = self:GetSpecialValueFor("debuff_duration")
end

function modifier_boss_arthromos_touch_of_decay:OnRefresh()
	self:OnCreated()
end

function modifier_boss_arthromos_touch_of_decay:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss_arthromos_touch_of_decay:OnAttackLanded(params)
	if not self:GetParent():PassivesDisabled() then
		if ( params.attacker == self:GetParent() and not params.target:IsMagicImmune() ) then
			params.target:AddNewModifier( params.attacker, self:GetAbility(), "modifier_boss_arthromos_touch_of_decay_debuff", {duration = self.duration} )
		elseif ( params.target == self:GetParent() and not params.attacker:IsMagicImmune() ) then
			params.attacker:AddNewModifier( params.target, self:GetAbility(), "modifier_boss_arthromos_touch_of_decay_debuff", {duration = self.duration} )
		end
	end
end

function modifier_boss_arthromos_touch_of_decay:IsHidden()
	return true
end

modifier_boss_arthromos_touch_of_decay_debuff = class({})
LinkLuaModifier( "modifier_boss_arthromos_touch_of_decay_debuff", "bosses/boss_arthromos/boss_arthromos_touch_of_decay", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_arthromos_touch_of_decay_debuff:OnCreated()
	self.regen = self:GetSpecialValueFor("hp_pct")
	if IsServer() then
		self:StartIntervalThink( 0.33 )
	end
end

function modifier_boss_arthromos_touch_of_decay_debuff:OnRefresh()
	self.regen = self:GetSpecialValueFor("hp_pct")
	if IsServer() then
		self:StartIntervalThink( 0.33 )
	end
end

function modifier_boss_arthromos_touch_of_decay_debuff:OnIntervalThink()
	if self:GetParent():GetHealthRegen() < 0 then
		self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), math.ceil( math.abs( self:GetParent():GetHealthRegen() ) * 0.33 ), {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_BYPASSES_INVULNERABILITY + DOTA_DAMAGE_FLAG_REFLECTION + DOTA_DAMAGE_FLAG_BYPASSES_BLOCK + DOTA_DAMAGE_FLAG_HPLOSS + DOTA_DAMAGE_FLAG_NON_LETHAL + DOTA_DAMAGE_FLAG_NO_DAMAGE_MULTIPLIERS + DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION + DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL} )
	end
end

function modifier_boss_arthromos_touch_of_decay_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE}
end

function modifier_boss_arthromos_touch_of_decay_debuff:GetModifierHealthRegenPercentage()
	return self.regen
end

function modifier_boss_arthromos_touch_of_decay_debuff:GetEffectName()
	return "particles/units/heroes/hero_viper/viper_poison_debuff.vpcf"
endboss_arthromos_virulent_swarm = class({})

function boss_arthromos_virulent_swarm:OnAbilityPhaseStart()
	local startPos = self:GetCaster():GetAbsOrigin()
	ParticleManager:FireLinearWarningParticle( startPos, startPos + CalculateDirection( self:GetCursorPosition(), startPos ) * self:GetTrueCastRange(), self:GetSpecialValueFor("width") )
	return true
end

function boss_arthromos_virulent_swarm:OnSpellStart()
	local caster = self:GetCaster()
	
	EmitSoundOn( "Hero_Venomancer.VenomousGale", caster )
	self:FireLinearProjectile("particles/units/heroes/hero_venomancer/venomancer_venomous_gale.vpcf", self:GetSpecialValueFor("speed") * CalculateDirection( self:GetCursorPosition(), caster ), self:GetTrueCastRange(), self:GetSpecialValueFor("width") )
end

function boss_arthromos_virulent_swarm:OnProjectileHit( hTarget, vLocation )
	if hTarget ~= nil and ( not hTarget:IsMagicImmune() ) and ( not hTarget:IsInvulnerable() ) then
		local caster = self:GetCaster()
		hTarget:AddNewModifier(caster, self, "modifier_boss_arthromos_virulent_swarm", {duration = self:GetSpecialValueFor("duration") + 0.1})
		EmitSoundOn( "Hero_Venomancer.VenomousGaleImpact", hTarget )
		
		local vDirection = vLocation - self:GetCaster():GetOrigin()
		vDirection.z = 0.0
		vDirection = vDirection:Normalized()
		
		local nFXIndex = ParticleManager:CreateParticle( "particles/units/heroes/hero_venomancer/venomancer_venomous_gale_impact.vpcf", PATTACH_ABSORIGIN_FOLLOW, hTarget )
		ParticleManager:SetParticleControlForward( nFXIndex, 1, vDirection )
		ParticleManager:ReleaseParticleIndex( nFXIndex )
		return false
	end
end

modifier_boss_arthromos_virulent_swarm = class({})
LinkLuaModifier( "modifier_boss_arthromos_virulent_swarm", "bosses/boss_arthromos/boss_arthromos_virulent_swarm", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_arthromos_virulent_swarm:OnCreated()
		self.damage = self:GetSpecialValueFor("damage")
		self.radius = self:GetSpecialValueFor("spread_radius")
		self.duration = self:GetSpecialValueFor("duration")
		self:StartIntervalThink(3)
	end
	
	function modifier_boss_arthromos_virulent_swarm:OnRefresh()
		self.damage = self:GetSpecialValueFor("damage")
		self.radius = self:GetSpecialValueFor("spread_radius")
		self.duration = self:GetSpecialValueFor("duration")
		self:StartIntervalThink(3)
	end
	
	function modifier_boss_arthromos_virulent_swarm:OnIntervalThink()
		if not self:GetAbility() or not self:GetCaster() or self:GetAbility():IsNull() or self:GetCaster():IsNull() then 
			self:Destroy()
			return
		end
		local ability = self:GetAbility()
		local parent = self:GetParent()
		local caster = self:GetCaster()
		ability:DealDamage( caster, parent, self.damage )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), self.radius) ) do
			if not enemy:HasModifier("modifier_boss_arthromos_virulent_swarm") then
				enemy:AddNewModifier(caster, ability, "modifier_boss_arthromos_virulent_swarm", {duration = self.duration + 0.1})
			end
		end
		local novaCloud = ParticleManager:CreateParticle( "particles/units/heroes/hero_venomancer/venomancer_poison_nova.vpcf", PATTACH_ABSORIGIN_FOLLOW, parent )
		ParticleManager:SetParticleControlEnt(novaCloud, 0, parent, PATTACH_POINT_FOLLOW, "attach_caster", parent:GetAbsOrigin(), true)
		ParticleManager:SetParticleControl(novaCloud, 1, Vector(self.radius - 100,1,self.radius - 100) )
		ParticleManager:SetParticleControl(novaCloud, 2, parent:GetAbsOrigin())
		ParticleManager:ReleaseParticleIndex(novaCloud)
	end
end

function modifier_boss_arthromos_virulent_swarm:GetEffectName()
	return "particles/units/heroes/hero_venomancer/venomancer_gale_poison_debuff.vpcf"
endboss_broodling_spawn_spiderling = class({})

function boss_broodling_spawn_spiderling:OnSpellStart()
	for i = 1, self:GetSpecialValueFor("spiders_spawned") do
		CreateUnitByName("npc_dota_creature_spiderling", self:GetCaster():GetAbsOrigin() + RandomVector(150), true, self, nil, self:GetCaster():GetTeam())
	end
endboss_broodmother_arachnids_hunger = class({})

function boss_broodmother_arachnids_hunger:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_status_immunity", {duration = self:GetCastPoint() + 0.01})
	caster:AddNewModifier(caster, self, "modifier_boss_broodmother_arachnids_hunger_active", {duration = self:GetCastPoint()})
	ParticleManager:FireTargetWarningParticle(caster)
	return true
end

function boss_broodmother_arachnids_hunger:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_boss_broodmother_arachnids_hunger_active", {duration = self:GetSpecialValueFor("duration")})
end

modifier_boss_broodmother_arachnids_hunger_active = class({})
LinkLuaModifier("modifier_boss_broodmother_arachnids_hunger_active", "bosses/boss_broodmother/boss_broodmother_arachnids_hunger", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_arachnids_hunger_active:OnCreated()
	self.dmg = self:GetSpecialValueFor("damage")
	self.as = self:GetSpecialValueFor("attack_speed")
	self.lifesteal = self:GetSpecialValueFor("lifesteal") / 100
	self.ms = self:GetParent():GetIdealSpeedNoSlows()
	self:StartIntervalThink(0.5)
	if IsServer() then
		local hFX = ParticleManager:CreateParticle("particles/bosses/boss_broodmother/boss_broodmother_hunger_buff.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
		ParticleManager:SetParticleControlEnt(hFX, 0, self:GetParent(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetParent():GetAbsOrigin(), true)
		self:AddEffect(hFX)
	end
end

function modifier_boss_broodmother_arachnids_hunger_active:OnIntervalThink()
	self.ms = self:GetParent():GetIdealSpeedNoSlows()
end

function modifier_boss_broodmother_arachnids_hunger_active:OnRefresh()
	self.dmg = self:GetSpecialValueFor("damage")
	self.as = self:GetSpecialValueFor("attack_speed")
	self.lifesteal = self:GetSpecialValueFor("lifesteal") / 100
end

function modifier_boss_broodmother_arachnids_hunger_active:CheckState()
	return {[MODIFIER_STATE_ROOTED] = false,
			[MODIFIER_STATE_DISARMED] = false,
			[MODIFIER_STATE_SILENCED] = false,
			[MODIFIER_STATE_MUTED] = false,
			[MODIFIER_STATE_STUNNED] = false,
			[MODIFIER_STATE_HEXED] = false,
			[MODIFIER_STATE_FROZEN] = false,
			[MODIFIER_STATE_PASSIVES_DISABLED] = false}
end

function modifier_boss_broodmother_arachnids_hunger_active:GetPriority()
	return MODIFIER_PRIORITY_SUPER_ULTRA
end

function modifier_boss_broodmother_arachnids_hunger_active:DeclareFunctions()
	funcs = {
				MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE,
				
				MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN,
				MODIFIER_EVENT_ON_TAKEDAMAGE
			}
	return funcs
end

function modifier_boss_broodmother_arachnids_hunger_active:GetModifierDamageOutgoing_Percentage()
	return self.dmg
end

function modifier_boss_broodmother_arachnids_hunger_active:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_boss_broodmother_arachnids_hunger_active:GetModifierMoveSpeed_AbsoluteMin()
	return self.ms
end

function modifier_boss_broodmother_arachnids_hunger_active:OnTakeDamage(params)
	if IsServer() then
		if params.attacker == self:GetParent() and not params.inflictor then
			local flHeal = params.damage * self.lifesteal
			params.attacker:HealEvent(flHeal, self:GetAbility(), params.attacker)
		end
	end
end

function modifier_boss_broodmother_arachnids_hunger_active:GetHeroEffectName()
	return "particles/units/heroes/hero_broodmother/broodmother_hunger_hero_effect.vpcf"
end

function modifier_boss_broodmother_arachnids_hunger_active:HeroEffectPriority()
	return 10
endboss_broodmother_clipped_fate = class({})

function boss_broodmother_clipped_fate:GetIntrinsicModifierName()
	return "modifier_boss_broodmother_clipped_fate_passive"
end

modifier_boss_broodmother_clipped_fate_passive = class({})
LinkLuaModifier("modifier_boss_broodmother_clipped_fate_passive", "bosses/boss_broodmother/boss_broodmother_clipped_fate", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_clipped_fate_passive:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_broodmother_clipped_fate_passive:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_broodmother_clipped_fate_passive:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss_broodmother_clipped_fate_passive:OnAttackLanded(params)
	if params.attacker == self:GetParent() and params.target and params.target.AddAbility and not params.attacker:PassivesDisabled() then
		params.target:AddNewModifier(params.attacker, self:GetAbility(), "modifier_boss_broodmother_clipped_fate_debuff", {duration = self.duration})
	end
end

function modifier_boss_broodmother_clipped_fate_passive:IsHidden()
	return true
end

modifier_boss_broodmother_clipped_fate_debuff = class({})
LinkLuaModifier("modifier_boss_broodmother_clipped_fate_debuff", "bosses/boss_broodmother/boss_broodmother_clipped_fate", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_clipped_fate_debuff:OnCreated()
	self.evasion_reduction = self:GetSpecialValueFor("evasion_reduction")
	self.heal_reduction = self:GetSpecialValueFor("heal_reduction")
end

function modifier_boss_broodmother_clipped_fate_debuff:OnRefresh()
	self.evasion_reduction = self:GetSpecialValueFor("evasion_reduction")
	self.heal_reduction = self:GetSpecialValueFor("heal_reduction")
end

function modifier_boss_broodmother_clipped_fate_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_EVASION_CONSTANT}
end

function modifier_boss_broodmother_clipped_fate_debuff:GetModifierEvasion_Constant()
	return self.evasion_reduction
end

function modifier_boss_broodmother_clipped_fate_debuff:GetModifierHealAmplify_Percentage()
	return self.heal_reduction
end

function modifier_boss_broodmother_clipped_fate_debuff:GetEffectName()
	return "particles/units/heroes/hero_broodmother/broodmother_incapacitatingbite_debuff.vpcf"
endboss_broodmother_egg_sack = class({})

function boss_broodmother_egg_sack:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	return true
end

function boss_broodmother_egg_sack:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local eggs = self:GetSpecialValueFor("eggs")
	for i = 1, eggs do
		local egg = CreateUnitByName("npc_dota_creature_broodmother_egg", position + ActualRandomVector(650), true, self, nil, self:GetCaster():GetTeam())
		egg:AddNewModifier(caster, self, "modifier_boss_broodmother_egg_sack_handler", {})
	end
	
	EmitSoundOn("Hero_Broodmother.SpawnSpiderlingsCast", caster)
end

modifier_boss_broodmother_egg_sack_handler = class({})
LinkLuaModifier("modifier_boss_broodmother_egg_sack_handler", "bosses/boss_broodmother/boss_broodmother_egg_sack", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_broodmother_egg_sack_handler:OnCreated()
		self.threat = self:GetSpecialValueFor("destroy_threat")
		self:StartIntervalThink(0.15)
	end
	
	function modifier_boss_broodmother_egg_sack_handler:OnIntervalThink()
		local parent = self:GetParent()
		local steppedOn = parent:FindEnemyUnitsInRadius( parent:GetAbsOrigin(), 80, {flag = DOTA_UNIT_TARGET_FLAG_INVULNERABLE + DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES})
		for _, enemy in ipairs(steppedOn) do
			EmitSoundOn("Hero_Broodmother.SpawnSpiderlings", enemy)
			enemy:ModifyThreat(self.threat)
			parent:ForceKill(false)
			UTIL_Remove(parent)
			break
		end
	end
end

function modifier_boss_broodmother_egg_sack_handler:CheckState()
	return {[MODIFIER_STATE_MAGIC_IMMUNE] = true,
			[MODIFIER_STATE_ATTACK_IMMUNE] = true,
			[MODIFIER_STATE_UNSELECTABLE] = true,
			[MODIFIER_STATE_NO_HEALTH_BAR] = true,}
endboss_broodmother_fates_web = class({})

function boss_broodmother_fates_web:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local dummy = CreateUnitByName("npc_dummy_unit", target, false, nil, nil, caster:GetTeam())
	dummy:AddNewModifier(caster, self, "modifier_boss_broodmother_fates_web_web", {})
	dummy:SetBaseMaxHealth( self:GetSpecialValueFor("hits_to_kill") )
	dummy:SetMaxHealth( self:GetSpecialValueFor("hits_to_kill") )
	dummy:SetHealth( self:GetSpecialValueFor("hits_to_kill") )
end


modifier_boss_broodmother_fates_web_web = class({})
LinkLuaModifier("modifier_boss_broodmother_fates_web_web", "bosses/boss_broodmother/boss_broodmother_fates_web", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_fates_web_web:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
	if IsServer() then
		local wFX = ParticleManager:CreateParticle("particles/units/heroes/hero_broodmother/broodmother_web.vpcf", PATTACH_ABSORIGIN, self:GetParent())
		ParticleManager:SetParticleControl(wFX, 1, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 2, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 3, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 4, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 5, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 10, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 11, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 12, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 13, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 14, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 15, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 16, Vector(self.radius, self.radius, self.radius))
		ParticleManager:SetParticleControl(wFX, 17, Vector(self.radius, self.radius, self.radius))
		self:AddEffect(wFX)
	end
end


function modifier_boss_broodmother_fates_web_web:IsHidden()
	return true
end

function modifier_boss_broodmother_fates_web_web:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_broodmother_fates_web_web:CheckState()
	return {[MODIFIER_STATE_MAGIC_IMMUNE] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION ] = true,
			[MODIFIER_STATE_FLYING ] = true,}
end

function modifier_boss_broodmother_fates_web_web:GetModifierIncomingDamage_Percentage( params )
	local parent = self:GetParent()
	if params.inflictor then return -999 end
	if parent:GetHealth() > 1 then
		parent:SetHealth( math.max(1, parent:GetHealth() - 1) )
		return -999
	elseif parent:IsAlive() then
		self:ForceKill(false)
	end
end

--------------------------------------------------------------------------------

function modifier_boss_broodmother_fates_web_web:IsAura()
	return true
end

--------------------------------------------------------------------------------

function modifier_boss_broodmother_fates_web_web:GetModifierAura()
	return "modifier_boss_broodmother_fates_web_handler"
end

--------------------------------------------------------------------------------

function modifier_boss_broodmother_fates_web_web:GetAuraSearchTeam()
	return DOTA_UNIT_TARGET_TEAM_BOTH
end

--------------------------------------------------------------------------------

function modifier_boss_broodmother_fates_web_web:GetAuraSearchType()
	return DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC
end

--------------------------------------------------------------------------------

function modifier_boss_broodmother_fates_web_web:GetAuraRadius()
	return self.radius
end

--------------------------------------------------------------------------------
function modifier_boss_broodmother_fates_web_web:IsPurgable()
    return false
end



modifier_boss_broodmother_fates_web_handler = class({})
LinkLuaModifier("modifier_boss_broodmother_fates_web_handler", "bosses/boss_broodmother/boss_broodmother_fates_web", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_fates_web_handler:OnCreated()
	local caster = self:GetCaster()
	local parent = self:GetParent()
	
	self.sameTeam = caster:IsSameTeam(parent)
	if self.sameTeam then
		self.ms = self:GetSpecialValueFor("bonus_ms")
	else
		self.ms = self:GetSpecialValueFor("slow")
	end
end

function modifier_boss_broodmother_fates_web_handler:OnRefresh()
	local caster = self:GetCaster()
	local parent = self:GetParent()
	
	self.sameTeam = caster:IsSameTeam(parent)
	if self.sameTeam then
		self.ms = self:GetSpecialValueFor("bonus_ms")
	else
		self.ms = self:GetSpecialValueFor("slow")
	end
end

function modifier_boss_broodmother_fates_web_handler:CheckState()
	if self.sameTeam then
		return {[MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY] = true,}
	end
end

function modifier_boss_broodmother_fates_web_handler:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_broodmother_fates_web_handler:GetModifierMoveSpeedBonus_Percentage()
	return self.ms
endboss_broodmother_hatch_broodling = class({})

function boss_broodmother_hatch_broodling:GetIntrinsicModifierName()
	return "modifier_boss_broodmother_hatch_broodling_handler"
end

modifier_boss_broodmother_hatch_broodling_handler = class({})
LinkLuaModifier("modifier_boss_broodmother_hatch_broodling_handler", "bosses/boss_broodmother/boss_broodmother_hatch_broodling", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_broodmother_hatch_broodling_handler:OnCreated()
		self:StartIntervalThink( self:GetSpecialValueFor("hatch_delay") + RandomFloat(-1, 1) )
	end
	
	function modifier_boss_broodmother_hatch_broodling_handler:OnIntervalThink()
		EmitSoundOn( "Hero_Broodmother.SpawnSpiderlingsDeath", self:GetParent() )
		self:GetParent():ForceKill( false )
		UTIL_Remove(self:GetParent())
		CreateUnitByName("npc_dota_creature_broodmother", self:GetParent():GetAbsOrigin(), true, self, nil, self:GetCaster():GetTeam())
	end
endboss_broodmother_infest = class({})

function boss_broodmother_infest:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCaster():GetAbsOrigin() + CalculateDirection( self:GetCursorPosition(), self:GetCaster():GetAbsOrigin() ) * self:GetTrueCastRange(), self:GetSpecialValueFor("width"))
	return true
end

function boss_broodmother_infest:OnSpellStart()
	local caster = self:GetCaster()
	
	local vDir = CalculateDirection(self:GetCursorPosition(), caster)
	local distance = self:GetSpecialValueFor("distance")
	local speed = self:GetSpecialValueFor("speed")
	local width = self:GetSpecialValueFor("width")
	local endPos = caster:GetAbsOrigin() + vDir * distance
	
	local projFX = ParticleManager:CreateParticle("particles/units/heroes/hero_broodmother/broodmother_web_cast.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl( projFX, 0, caster:GetAbsOrigin() )
	ParticleManager:SetParticleControl( projFX, 1, endPos )
	ParticleManager:SetParticleControl( projFX, 2, Vector(speed, 0, 0) )
	
	local position = caster:GetAbsOrigin()
	local distTraveled = 0
	local speedTick = speed * FrameTime()
	
	EmitSoundOn("Hero_Broodmother.SpawnSpiderlingsCast", caster)
	
	Timers:CreateTimer(FrameTime(), function()
		distTraveled = distTraveled + speedTick
		position = position + vDir * speedTick
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(position, width) ) do
			if enemy:TriggerSpellAbsorb(self) then return end
			self:OnInfestHit(enemy)
			ParticleManager:ClearParticle(projFX)
			return nil
		end
		if distTraveled < distance then
			return FrameTime()
		else
			self:OnInfestMiss(position)
			ParticleManager:ClearParticle(projFX)
			return nil
		end
	end)
end

function boss_broodmother_infest:OnInfestHit(target)
	local caster = self:GetCaster()
	local damage = self:GetSpecialValueFor("damage_on_hit")
	local spidersHit = self:GetSpecialValueFor("spiders_on_hit")
	self:SpawnSpiderlings( spidersHit, target:GetAbsOrigin() )
	self:DealDamage( caster, target, damage )
	EmitSoundOn("Hero_Broodmother.SpawnSpiderlingsImpact", target)
end

function boss_broodmother_infest:OnInfestMiss(position)
	local spidersMiss = self:GetSpecialValueFor("spiders_on_miss")
	self:SpawnSpiderlings( spidersMiss, position )
end

function boss_broodmother_infest:SpawnSpiderlings(amount, position)
	if amount > 0 then
		for i = 1, amount do
			local spiderling = CreateUnitByName("npc_dota_creature_spiderling", position + RandomVector(150), true, self, nil, self:GetCaster():GetTeam())
		end
	end
endboss_broodmother_parasitic_injection = class({})

function boss_broodmother_parasitic_injection:GetIntrinsicModifierName()
	return "modifier_boss_broodmother_parasitic_injection_passive"
end

function boss_broodmother_parasitic_injection:SpawnSpiderlings(amount, position)
	if amount > 0 then
		for i = 1, amount do
			local spiderling = CreateUnitByName("npc_dota_creature_spiderling", position + RandomVector(150), true, self, nil, self:GetCaster():GetTeam())
		end
	end
end

modifier_boss_broodmother_parasitic_injection_passive = class({})
LinkLuaModifier("modifier_boss_broodmother_parasitic_injection_passive", "bosses/boss_broodmother/boss_broodmother_parasitic_injection", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_parasitic_injection_passive:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_broodmother_parasitic_injection_passive:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_broodmother_parasitic_injection_passive:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss_broodmother_parasitic_injection_passive:OnAttackLanded(params)
	if params.attacker == self:GetParent() and params.target and params.target.AddAbility and not params.attacker:PassivesDisabled() then
		params.target:AddNewModifier(params.attacker, self:GetAbility(), "modifier_boss_broodmother_parasitic_injection_debuff", {duration = self.duration})
	end
end

function modifier_boss_broodmother_parasitic_injection_passive:IsHidden()
	return true
end

modifier_boss_broodmother_parasitic_injection_debuff = class({})
LinkLuaModifier("modifier_boss_broodmother_parasitic_injection_debuff", "bosses/boss_broodmother/boss_broodmother_parasitic_injection", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_parasitic_injection_debuff:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
	self.spiders_on_death = self:GetSpecialValueFor("spiders_on_death")
end

function modifier_boss_broodmother_parasitic_injection_debuff:OnRefresh()
	self.slow = self:GetSpecialValueFor("slow")
	self.spiders_on_death = self:GetSpecialValueFor("spiders_on_death")
end

function modifier_boss_broodmother_parasitic_injection_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, MODIFIER_EVENT_ON_DEATH}
end

function modifier_boss_broodmother_parasitic_injection_debuff:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end

function modifier_boss_broodmother_parasitic_injection_debuff:OnDeath(params)
	if params.unit == self:GetParent() then
		self:GetAbility():SpawnSpiderlings(self.spiders_on_death, params.unit:GetAbsOrigin())
	end
end

function modifier_boss_broodmother_parasitic_injection_debuff:GetEffectName()
	return "particles/units/heroes/hero_broodmother/broodmother_spiderlings_debuff.vpcf"
endboss_broodmother_strength_of_the_brood = class({})

function boss_broodmother_strength_of_the_brood:GetIntrinsicModifierName()
	return "modifier_boss_broodmother_strength_of_the_brood_passive"
end

modifier_boss_broodmother_strength_of_the_brood_passive = class({})
LinkLuaModifier("modifier_boss_broodmother_strength_of_the_brood_passive", "bosses/boss_broodmother/boss_broodmother_strength_of_the_brood", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_strength_of_the_brood_passive:OnCreated()
	self.bonusdamage = self:GetSpecialValueFor("str_per_unit")
	if IsServer() then
		self:StartIntervalThink(0.5)
	end
end

function modifier_boss_broodmother_strength_of_the_brood_passive:OnRefresh()
	self.bonusdamage = self:GetSpecialValueFor("str_per_unit")
	self.radius = self:GetSpecialValueFor("aura_radius")
end

function modifier_boss_broodmother_strength_of_the_brood_passive:OnIntervalThink()
	local parent = self:GetParent()
	local allies = parent:FindFriendlyUnitsInRadius( parent:GetAbsOrigin(), self.radius )
	self:SetStackCount( #allies )
end

function modifier_boss_broodmother_strength_of_the_brood_passive:DeclareFunctions()
	return {MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE}
end

function modifier_boss_broodmother_strength_of_the_brood_passive:GetModifierDamageOutgoing_Percentage(params)
	if self:GetParent():PassivesDisabled() then return end
	return self.bonusdamage * (self:GetStackCount() - 1)
end
boss_broodmother_web_shot = class({})

function boss_broodmother_web_shot:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCaster():GetAbsOrigin() + CalculateDirection( self:GetCursorPosition(), self:GetCaster():GetAbsOrigin() ) * self:GetTrueCastRange(), self:GetSpecialValueFor("width"))
	return true
end

function boss_broodmother_web_shot:OnSpellStart()
	local caster = self:GetCaster()
	local position = caster:GetAbsOrigin() + Vector(0,0,128)
	
	local direction = CalculateDirection( self:GetCursorPosition(), position )
	
	local hookFX = ParticleManager:CreateParticle("particles/bosses/boss_broodmother/boss_broodmother_web_shot.vpcf", PATTACH_ABSORIGIN, caster)
	ParticleManager:SetParticleControl( hookFX, 0, caster:GetAbsOrigin() )
	ParticleManager:SetParticleControlEnt(hookFX, 3, caster, PATTACH_POINT_FOLLOW, "attach_attack1", caster:GetAbsOrigin(), true)
	
	local maxDistance = self:GetTrueCastRange()
	local speed = self:GetSpecialValueFor("speed") * FrameTime()
	local radius = self:GetSpecialValueFor("width")
	local distance = 0
	local grabTarget
	
	caster:AddNewModifier(caster, self, "modifier_boss_broodmother_web_shot_pulling", {duration = (maxDistance * 2) / (speed / FrameTime()) + 0.5 })
	Timers:CreateTimer(FrameTime(), function()
		if not grabTarget then
			distance = distance + speed
			position = position + direction * speed
			ParticleManager:SetParticleControl( hookFX, 0, position )
			for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(position, radius) ) do
				if enemy:TriggerSpellAbsorb(self) then
					ParticleManager:ClearParticle( hookFX )
					return 
				end
				grabTarget = enemy
				grabTarget:SetAbsOrigin( position )
				grabTarget:AddNewModifier(caster, self, "modifier_boss_broodmother_web_shot_pull", {duration = CalculateDistance(grabTarget, caster) / (speed / FrameTime()) + 0.5 })
				break
			end
			if distance < maxDistance then
				return FrameTime()
			else
				grabTarget = {}
				return FrameTime()
			end
		else
			distance = distance - speed
			position = position - direction * speed
			if grabTarget.SetAbsOrigin then grabTarget:SetAbsOrigin( position ) end
			ParticleManager:SetParticleControl( hookFX, 0, position )
			if distance > 0 then
				return FrameTime()
			else
				if grabTarget.RemoveModifierByName then 
					grabTarget:RemoveModifierByName( "modifier_boss_broodmother_web_shot_pull" ) 
					caster:Taunt(self, grabTarget, self:GetSpecialValueFor("taunt_duration"))
				end
				ParticleManager:ClearParticle( hookFX )
				caster:RemoveModifierByName("modifier_boss_broodmother_web_shot_pulling")
				ResolveNPCPositions(position, 5000)
			end
		end
	end)
end

modifier_boss_broodmother_web_shot_pull = class({})
LinkLuaModifier("modifier_boss_broodmother_web_shot_pull", "bosses/boss_broodmother/boss_broodmother_web_shot", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_web_shot_pull:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true,}
end

function modifier_boss_broodmother_web_shot_pull:IsHidden()
	return false
end

modifier_boss_broodmother_web_shot_pulling = class({})
LinkLuaModifier("modifier_boss_broodmother_web_shot_pulling", "bosses/boss_broodmother/boss_broodmother_web_shot", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_broodmother_web_shot_pulling:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss_broodmother_web_shot_pulling:IsHidden()
	return false
endboss_spiderling_spider_bite = class({})

function boss_spiderling_spider_bite:GetIntrinsicModifierName()
	return "modifier_boss_spiderling_spider_bite_passive"
end

modifier_boss_spiderling_spider_bite_passive = class({})
LinkLuaModifier("modifier_boss_spiderling_spider_bite_passive", "bosses/boss_broodmother/boss_spiderling_spider_bite", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_spiderling_spider_bite_passive:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss_spiderling_spider_bite_passive:OnAttackLanded(params)
	if params.attacker == self:GetParent() then
		params.target:AddNewModifier(params.attacker, self:GetAbility(), "modifier_boss_spiderling_spider_bite_debuff", {duration = self:GetSpecialValueFor("duration")})
	end
end

modifier_boss_spiderling_spider_bite_debuff = class({})
LinkLuaModifier("modifier_boss_spiderling_spider_bite_debuff", "bosses/boss_broodmother/boss_spiderling_spider_bite", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_spiderling_spider_bite_debuff:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
	self.damage = self:GetSpecialValueFor("damage")
	self:SetStackCount(1)
	if IsServer() then
		self:StartIntervalThink(0.5)
	end
end

function modifier_boss_spiderling_spider_bite_debuff:OnRefresh()	
	self.slow = self:GetSpecialValueFor("slow")
	self.damage = self:GetSpecialValueFor("damage")
	self:IncrementStackCount()
end

function modifier_boss_spiderling_spider_bite_debuff:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.damage * 0.5 * self:GetStackCount() )
end

function modifier_boss_spiderling_spider_bite_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_spiderling_spider_bite_debuff:GetModifierMoveSpeedBonus_Percentage(oarams)
	return self.slow * self:GetStackCount()
endboss_clockwerk_spear = class({})

function boss_clockwerk_spear:OnAbilityPhaseStart()
	local startPos = self:GetCaster():GetAbsOrigin()
	local endPos = startPos + CalculateDirection( self:GetCursorPosition(), startPos ) * self:GetTrueCastRange()
	ParticleManager:FireLinearWarningParticle( startPos, endPos, 150 )
	return true
end

function boss_clockwerk_spear:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local distance = self:GetTrueCastRange( )
	local direction = CalculateDirection( self:GetCursorPosition(), caster:GetAbsOrigin() )
	self:FireLinearProjectile("particles/light_spear.vpcf", direction * 600, distance, 75, {}, true, true, 350)
end

function boss_clockwerk_spear:OnProjectileHit( target, position )
	local caster = self:GetCaster()
	if target then
		self:DealDamage( caster, target, self:GetSpecialValueFor("damage") )
		self:Stun(target, self:GetSpecialValueFor("duration"))
	end
	return true
endboss_doom_blood_is_power = class({})

function boss_doom_blood_is_power:GetIntrinsicModifierName()
	return "modifier_boss_doom_blood_is_power"
end

modifier_boss_doom_blood_is_power = class({})
LinkLuaModifier("modifier_boss_doom_blood_is_power", "bosses/boss_doom/boss_doom_blood_is_power", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_doom_blood_is_power:OnCreated()
	self.max_cdr = self:GetSpecialValueFor("max_cdr")
end

function modifier_boss_doom_blood_is_power:DeclareFunctions()
	return {MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE}
end

function modifier_boss_doom_blood_is_power:GetModifierPercentageCooldown()
	if self:GetParent():PassivesDisabled() then return end
	return math.min( self.max_cdr, 100 - self:GetParent():GetHealthPercent() )
end

function modifier_boss_doom_blood_is_power:IsHidden()
	return true
endboss_doom_demonic_servants = class({})

function boss_doom_demonic_servants:GetIntrinsicModifierName()
	return "modifier_boss_doom_demonic_servants_handler"
end

function boss_doom_demonic_servants:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle(self:GetCaster())
	return true
end

function boss_doom_demonic_servants:OnSpellStart()
	self.servants = self:GetSpecialValueFor("servants")
	self.servant_delay = self:GetChannelTime() / self.servants
	self.channelThink = self.servant_delay
	self.angle = 0
	self.radians = 360 / self.servants
end

function boss_doom_demonic_servants:OnChannelThink(dt)
	self.channelThink = self.channelThink + dt
	if self.channelThink > self.servant_delay then
		local caster = self:GetCaster()
		local range = self:GetSpecialValueFor("break_radius") / 2
		self.channelThink = 0
		local position = caster:GetAbsOrigin() + RotateVector2D( caster:GetRightVector(), ToRadians(self.angle) ) * range
		self.angle = self.angle + self.radians
		self:CreateServant(position)
	end
end

function boss_doom_demonic_servants:CreateServant(position)
	local caster = self:GetCaster()
	local servant = CreateUnitByName( "npc_dota_boss35b", position, true, self:GetCaster(), self:GetCaster(), self:GetCaster():GetTeamNumber() )
	servant.doom = caster
	EmitSoundOn("Hero_DragonKnight.ElderDragonForm", servant)
	ParticleManager:FireParticle("particles/units/heroes/hero_dragon_knight/dragon_knight_transform_red.vpcf", PATTACH_POINT_FOLLOW, servant)
end

modifier_boss_doom_demonic_servants_handler = class({})
LinkLuaModifier("modifier_boss_doom_demonic_servants_handler", "bosses/boss_doom/boss_doom_demonic_servants", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_doom_demonic_servants_handler:OnCreated()
	self.dmg = self:GetSpecialValueFor("max_bonus_damage") / self:GetSpecialValueFor("servants")
	self.red = self:GetSpecialValueFor("max_damage_reduction") / self:GetSpecialValueFor("servants")
	
	self.max_dmg = self:GetSpecialValueFor("max_bonus_damage")
	self.max_red = self:GetSpecialValueFor("max_damage_reduction")
	
	self.range = self:GetSpecialValueFor("break_radius")
	if IsServer() then
		self:StartIntervalThink(0.3)
	end
end

function modifier_boss_doom_demonic_servants_handler:OnRefresh()
	self.dmg = self:GetSpecialValueFor("max_bonus_damage") / self:GetSpecialValueFor("servants")
	self.red = self:GetSpecialValueFor("max_damage_reduction") / self:GetSpecialValueFor("servants")
	
	self.max_dmg = self:GetSpecialValueFor("max_bonus_damage")
	self.max_red = self:GetSpecialValueFor("max_damage_reduction")
	
	self.range = self:GetSpecialValueFor("break_radius")
end

function modifier_boss_doom_demonic_servants_handler:OnIntervalThink()
	local caster = self:GetCaster()
	local servants = 0
	for _, servant in ipairs( caster:FindFriendlyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do
		if servant:GetUnitName() == "npc_dota_boss35b" and servant:HasModifier("modifier_boss_doom_demonic_servants_checker") then
			servants = servants + 1
		end
	end
	self:SetStackCount(servants)
end

function modifier_boss_doom_demonic_servants_handler:IsAura()
	return true
end

--------------------------------------------------------------------------------

function modifier_boss_doom_demonic_servants_handler:GetModifierAura()
	return "modifier_boss_doom_demonic_servants_checker"
end

--------------------------------------------------------------------------------

function modifier_boss_doom_demonic_servants_handler:GetAuraSearchTeam()
	return DOTA_UNIT_TARGET_TEAM_FRIENDLY
end

--------------------------------------------------------------------------------

function modifier_boss_doom_demonic_servants_handler:GetAuraSearchType()
	return DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC
end

function modifier_boss_doom_demonic_servants_handler:GetAuraEntityReject(entity)
	return entity == self:GetCaster()
end

--------------------------------------------------------------------------------

function modifier_boss_doom_demonic_servants_handler:GetAuraRadius()
	return self.range
end

function modifier_boss_doom_demonic_servants_handler:GetAuraDuration()
	return 0.5
end

--------------------------------------------------------------------------------
function modifier_boss_doom_demonic_servants_handler:IsPurgeable()
    return false
end

function modifier_boss_doom_demonic_servants_handler:DeclareFunctions()
	return {MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE,
			MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_doom_demonic_servants_handler:GetModifierDamageOutgoing_Percentage()
	return self.dmg * self:GetStackCount()
end

function modifier_boss_doom_demonic_servants_handler:GetModifierIncomingDamage_Percentage()
	return self.red * self:GetStackCount() * (-1)
end

function modifier_boss_doom_demonic_servants_handler:IsHidden()
    return self:GetStackCount() == 0
end


modifier_boss_doom_demonic_servants_checker = class({})
LinkLuaModifier("modifier_boss_doom_demonic_servants_checker", "bosses/boss_doom/boss_doom_demonic_servants", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_doom_demonic_servants_checker:OnCreated()
	if IsServer() then
		local FX = ParticleManager:CreateParticle("particles/bosses/boss_doom/boss_doom_demonic_servants_link.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster())
		ParticleManager:SetParticleControlEnt(FX, 0, self:GetCaster(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetCaster():GetAbsOrigin(), true)
		
		ParticleManager:SetParticleControlEnt(FX, 1, self:GetParent(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetParent():GetAbsOrigin(), true)
		self:AddEffect(FX)
	end
endboss_doom_hell_tempest = class({})

function boss_doom_hell_tempest:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCaster():GetAbsOrigin(), 900)
	return true
end

function boss_doom_hell_tempest:OnSpellStart()
	self.tornado_radius = self:GetSpecialValueFor("radius")
	self.tornado_per_sec = self:GetSpecialValueFor("tornadoes_per_second")
	self.tornado_speed = self:GetSpecialValueFor("tornado_speed")
	self.tornado_damage = self:GetSpecialValueFor("tornado_damage")
	self.tornado_delay = 1 / self.tornado_per_sec
	self.tornado_think = 0
	self.tornadoes = self.tornadoes or {}
end

function boss_doom_hell_tempest:OnChannelThink(dt)
	self.tornado_think = self.tornado_think + dt
	local caster = self:GetCaster()
	if self.tornado_think > self.tornado_delay then
		self.tornado_think = 0
		local projID = self:FireLinearProjectile("", self.tornado_speed * RandomVector(1), self:GetSpecialValueFor("tornado_speed") * self:GetChannelTime(), self.tornado_radius)
		local fxID = ParticleManager:CreateParticle("particles/bosses/boss_doom/hell_tempest_tornado.vpcf", PATTACH_WORLDORIGIN, nil)
		self.tornadoes[projID] = fxID
		ParticleManager:SetParticleControl( self.tornadoes[projID], 0, caster:GetAbsOrigin() )
		EmitSoundOn("Brewmaster_Storm.ProjectileImpact", caster)
		Timers:CreateTimer(15, function() ParticleManager:ClearParticle(fxID) end)
	end
end

function boss_doom_hell_tempest:OnProjectileThinkHandle( projID )
	local caster = self:GetCaster()
	if RollPercentage( 10 ) then
		local vVelocity = RotateVector2D( ProjectileManager:GetLinearProjectileVelocity(projID), ToRadians( RandomFloat(-20, 20) ) ) * self.tornado_speed
		ProjectileManager:UpdateLinearProjectileDirection( projID, vVelocity, self:GetSpecialValueFor("tornado_speed") * self:GetChannelTime() )
	end
	local position = ProjectileManager:GetLinearProjectileLocation( projID )
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, self.tornado_radius ) ) do
		local damage = self.tornado_damage
		if enemy:HasModifier("modifier_in_water") then damage = damage * 0.01 end
		self:DealDamage( caster, enemy, self.tornado_damage * 0.03 )
		EmitSoundOn("Brewmaster_Storm.Attack", enemy)
		
	end
	ParticleManager:SetParticleControl( self.tornadoes[projID], 0, position )
end

function boss_doom_hell_tempest:OnProjectileHitHandle( target, position, projID )
	if not target then
		ParticleManager:ClearParticle( self.tornadoes[projID] )
		self.tornadoes[projID] = nil
	end
	if target and target:TriggerSpellAbsorb(self) then
		ParticleManager:ClearParticle( self.tornadoes[projID] )
		self.tornadoes[projID] = nil
		return true
	end
endboss_doom_ill_fated = class({})

function boss_doom_ill_fated:OnSpellStart()
	local caster = self:GetCaster()
	if self:GetCursorTarget():TriggerSpellAbsorb(self) then return end
	self:GetCursorTarget():AddNewModifier(caster, self, "modifier_boss_doom_ill_fated", {duration = self:GetSpecialValueFor("duration")})
end

modifier_boss_doom_ill_fated = class({})
LinkLuaModifier("modifier_boss_doom_ill_fated", "bosses/boss_doom/boss_doom_ill_fated", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_doom_ill_fated:OnCreated()
	self.damage = self:GetSpecialValueFor("curr_hp_damage") / 100
	if IsServer() then 
		self:StartIntervalThink(0.1)
		EmitSoundOn( "Hero_DoomBringer.Doom", self:GetParent() )
	end
end

function modifier_boss_doom_ill_fated:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self:GetParent():GetHealth() * self.damage * 0.1, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
end

function modifier_boss_doom_ill_fated:OnDestroy()
	if IsServer() then StopSoundOn( "Hero_DoomBringer.Doom", self:GetParent() ) end
end

function modifier_boss_doom_ill_fated:CheckState()
	return {[MODIFIER_STATE_SILENCED] = true,
			[MODIFIER_STATE_PASSIVES_DISABLED] = true,
			[MODIFIER_STATE_MUTED] = true,
			}
end

function modifier_boss_doom_ill_fated:GetEffectName()
	return "particles/units/heroes/hero_doom_bringer/doom_bringer_doom.vpcf"
end

function modifier_boss_doom_ill_fated:GetStatusEffectName()
	return "particles/status_fx/status_effect_doom.vpcf"
end

function modifier_boss_doom_ill_fated:StatusEffectPriority()
	return 20
end

function modifier_boss_doom_ill_fated:IsPurgable()
	return true
end

function modifier_boss_doom_ill_fated:IsStunDebuff()
	return true
end

function modifier_boss_doom_ill_fated:IsPurgeException()
	return true
endboss_doom_infernal_wave = class({})

function boss_doom_infernal_wave:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local ogPos = caster:GetAbsOrigin() + caster:GetForwardVector() * self:GetSpecialValueFor("radius")
	local rightPos = ogPos + caster:GetRightVector() * self:GetSpecialValueFor("raze_spacing") * (self:GetSpecialValueFor("razes_per_line") - 1) / 2
	local leftPos = ogPos - caster:GetRightVector() * self:GetSpecialValueFor("raze_spacing") * (self:GetSpecialValueFor("razes_per_line") - 1) / 2
	ParticleManager:FireLinearWarningParticle( leftPos, rightPos, self:GetSpecialValueFor("radius") * 2 )
	return true
end

function boss_doom_infernal_wave:OnSpellStart()
	local caster = self:GetCaster()

	local waves = self:GetSpecialValueFor("waves")
	local damage = self:GetSpecialValueFor("damage")
	local radius = self:GetSpecialValueFor("radius")
	local rSpacing = self:GetSpecialValueFor("raze_spacing")
	local rPerLine = self:GetSpecialValueFor("razes_per_line")
	local wSpacing = self:GetSpecialValueFor("wave_spacing")
	local wDelay = self:GetCastPoint()
	
	local direction = caster:GetForwardVector()
	local normal = GetPerpendicularVector(direction)
	local ogPos = caster:GetAbsOrigin() + direction * radius
	local startPos = ogPos + normal * rSpacing * ( rPerLine - 1) / 2
	local endPos = ogPos - normal * rSpacing * ( rPerLine - 1 ) / 2

	
	local ability = self
	Timers:CreateTimer(0, function()
		waves = waves - 1
		
		if not ability or ability:IsNull() then return end
		ability:CreateRazeLine(ogPos, normal)
		ogPos = ogPos + direction * wSpacing
		startPos = startPos + direction * wSpacing
		endPos = endPos + direction * wSpacing
		ParticleManager:FireLinearWarningParticle(startPos, endPos, radius * 2)
		
		if waves > 0 then
			return wDelay
		end
	end)
end

function boss_doom_infernal_wave:CreateRazeLine(ogPos, normal)
	local caster = self:GetCaster()

	local rSpacing = self:GetSpecialValueFor("raze_spacing")
	local razes = self:GetSpecialValueFor("razes_per_line")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	
	EmitSoundOnLocationWithCaster(ogPos, "Hero_Nevermore.Shadowraze.Arcana", caster)
	for i = 0, razes - 1 do
		local position = ogPos + normal * math.floor(i/2) * (-1)^(i) * rSpacing
		ParticleManager:FireParticle("particles/econ/items/shadow_fiend/sf_fire_arcana/sf_fire_arcana_shadowraze.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position})

		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(position, radius) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage( caster, enemy, damage )
			end
		end
	end
endboss_doom_pillar_of_hell = class({})

function boss_doom_pillar_of_hell:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	ParticleManager:FireLinearWarningParticle(caster:GetAbsOrigin(), caster:GetAbsOrigin() + CalculateDirection( self:GetCursorPosition(), caster ) * self:GetSpecialValueFor("range"), self:GetSpecialValueFor("radius") * 2 )
	return true
end

function boss_doom_pillar_of_hell:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local radius = self:GetSpecialValueFor("radius")
	local range = self:GetSpecialValueFor("range")
	local damage = self:GetSpecialValueFor("damage")
	local delay = self:GetSpecialValueFor("raze_delay")
	
	local direction = CalculateDirection( target, caster )
	local position = caster:GetAbsOrigin() + direction * radius / 2
	local distanceTraveled = 0
	Timers:CreateTimer(0, function()
		
		local blocked = self:CreateRaze(position, damage)
		if blocked then return end
		position = position + direction * radius / 2
		distanceTraveled = distanceTraveled + radius / 2
		if distanceTraveled < range then
			return delay
		end
	end)
end

function boss_doom_pillar_of_hell:CreateRaze(position, damage)
	local caster = self:GetCaster()
	local radius = self:GetSpecialValueFor("radius")
	ParticleManager:FireParticle("particles/econ/items/shadow_fiend/sf_fire_arcana/sf_fire_arcana_shadowraze.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position})
	EmitSoundOnLocationWithCaster(position, "Hero_Nevermore.RequiemOfSouls.Damage", caster)
	local blocked = false
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(position, radius) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:DealDamage( caster, enemy, damage )
		else
			blocked = true
		end
	end
	return blocked
endboss_doom_sacrificial_rite = class({})

function boss_doom_sacrificial_rite:GetIntrinsicModifierName()
	return "modifier_boss_doom_sacrificial_rite"
end

function boss_doom_sacrificial_rite:ShouldUseResources()
	return true
end

modifier_boss_doom_sacrificial_rite = class({})
LinkLuaModifier("modifier_boss_doom_sacrificial_rite", "bosses/boss_doom/boss_doom_sacrificial_rite", LUA_MODIFIER_MOTION_NONE)


function modifier_boss_doom_sacrificial_rite:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
	self.delay = self:GetSpecialValueFor("delay")
	self.damage = self:GetSpecialValueFor("damage")
	self.duration = self:GetSpecialValueFor("duration")
	self.threshold = self:GetSpecialValueFor("hp_threshold") / 100
end

function modifier_boss_doom_sacrificial_rite:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
	self.delay = self:GetSpecialValueFor("delay")
	self.damage = self:GetSpecialValueFor("damage")
	self.duration = self:GetSpecialValueFor("duration")
	self.threshold = self:GetSpecialValueFor("hp_threshold") / 100
end

function modifier_boss_doom_sacrificial_rite:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_doom_sacrificial_rite:OnTakeDamage(params)
	if params.unit == self:GetParent() and self:GetAbility():IsActivated() then
		self.dmgTaken = (self.dmgTaken or 0) + params.damage
		if self.dmgTaken > params.unit:GetMaxHealth() * self.threshold and not self:GetParent():PassivesDisabled() then
			self.dmgTaken = 0
			local caster = self:GetCaster()
			local ability = self:GetAbility()
			local position = caster:GetAbsOrigin()
			local doomFX = ParticleManager:CreateParticle("particles/units/heroes/hero_bloodseeker/bloodseeker_bloodritual_ring.vpcf", PATTACH_WORLDORIGIN, nil)
			EmitSoundOn("Hero_Bloodseeker.BloodRite.Cast", caster)
			ParticleManager:SetParticleControl(doomFX, 0, position)
			ParticleManager:SetParticleControl(doomFX, 1, Vector(self.radius, 1, 1))
			params.unit:FindAbilityByName("boss_doom_unstoppable"):StartCooldown(self.delay)
			caster:AddNewModifier(caster, nil, "modifier_spawn_immunity", {duration = self.delay})
			Timers:CreateTimer(self.delay, function()
				ParticleManager:ClearParticle(doomFX)
				EmitSoundOn("hero_bloodseeker.bloodRite", caster)
				for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, self.radius ) ) do
					if not enemy:TriggerSpellAbsorb(self) then
						ability:DealDamage( caster, enemy, self.damage )
						ability:Stun( enemy, self.duration )
						caster:RefreshAllCooldowns()
						EmitSoundOn("hero_bloodseeker.bloodRite.silence", enemy)
						ParticleManager:FireParticle("particles/units/heroes/hero_bloodseeker/bloodseeker_bloodritual_impact.vpcf", PATTACH_POINT_FOLLOW, enemy)
					end
				end
			end)
		end
	end
end

function modifier_boss_doom_sacrificial_rite:IsHidden()
	return true
endboss_doom_unstoppable = class({})

function boss_doom_unstoppable:GetIntrinsicModifierName()
	return "modifier_boss_doom_unstoppable"
end

function boss_doom_unstoppable:ShouldUseResources()
	return true
end

modifier_boss_doom_unstoppable = class({})
LinkLuaModifier("modifier_boss_doom_unstoppable", "bosses/boss_doom/boss_doom_unstoppable", LUA_MODIFIER_MOTION_NONE)


function modifier_boss_doom_unstoppable:OnCreated()
	if IsServer() then 
		self:StartIntervalThink(0.1) 
	end
end

function modifier_boss_doom_unstoppable:OnIntervalThink()
	if self:GetParent():IsDisabled(true) and self:GetAbility():IsCooldownReady() and not self:GetParent():HasModifier("modifier_spawn_immunity") and not self:GetParent():PassivesDisabled() then
		self:GetParent():AddNewModifier(self:GetParent(), self:GetAbility(), "modifier_boss_doom_unstoppable_effect", {duration = self:GetSpecialValueFor("duration")})
		self:GetParent():AddNewModifier(self:GetParent(), self:GetAbility(), "modifier_status_immunity", {duration = self:GetSpecialValueFor("duration")})
	end
end
function modifier_boss_doom_unstoppable:IsHidden()
	return true
end

modifier_boss_doom_unstoppable_effect = class({})
LinkLuaModifier("modifier_boss_doom_unstoppable_effect", "bosses/boss_doom/boss_doom_unstoppable", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_doom_unstoppable_effect:OnCreated()
	self.dmg = self:GetSpecialValueFor("bonus_damage")
	self.as = self:GetSpecialValueFor("bonus_attackspeed")
	self.red = self:GetSpecialValueFor("damage_reduction")
	if IsServer() then
		self:GetAbility():StartDelayedCooldown()
	end
end

function modifier_boss_doom_unstoppable_effect:OnDestroy()
	if IsServer() then self:GetAbility():EndDelayedCooldown() end
end

function modifier_boss_doom_unstoppable_effect:DeclareFunctions()
	return {MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE,
			
			MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_doom_unstoppable_effect:GetPriority()
	return MODIFIER_PRIORITY_SUPER_ULTRA
end

function modifier_boss_doom_unstoppable_effect:GetModifierIncomingDamage_Percentage()
	return self.red
end

function modifier_boss_doom_unstoppable_effect:GetModifierDamageOutgoing_Percentage()
	return self.dmg
end

function modifier_boss_doom_unstoppable_effect:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_boss_doom_unstoppable_effect:GetEffectName()
	return "particles/units/heroes/hero_ogre_magi/ogre_magi_bloodlust_buff.vpcf"
end

function modifier_boss_doom_unstoppable_effect:GetStatusEffectName()
	return "particles/status_fx/status_effect_doom.vpcf"
end

function modifier_boss_doom_unstoppable_effect:StatusEffectPriority()
	return 50
endboss_durva_all_is_linked = class({})

function boss_durva_all_is_linked:GetIntrinsicModifierName()
	return "modifier_boss_durva_all_is_linked"
end

modifier_boss_durva_all_is_linked = class({})
LinkLuaModifier( "modifier_boss_durva_all_is_linked", "bosses/boss_durva/boss_durva_all_is_linked", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_durva_all_is_linked:OnCreated()
	self.dmg_spread = self:GetSpecialValueFor("damage_spread") / 100
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_durva_all_is_linked:OnRefresh()
	self:OnCreated()
end

function modifier_boss_durva_all_is_linked:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_durva_all_is_linked:OnTakeDamage(params)
	local ability = self:GetAbility()
	if params.attacker == self:GetParent() and not params.inflictor == ability then
		local damage = params.original_damage * self.dmg_spread
		for _, enemy in ipairs( params.attacker:FindEnemyUnitsInRadius( params.unit:GetAbsOrigin(), self.radius ) ) do
			if enemy ~= params.unit then
				ability:DealDamage( params.attacker, enemy, damage, { damage_type = params.damage_type, damage_flags = params.damage_flags } )
				ParticleManager:FireRopeParticle( "particles/units/heroes/hero_warlock/warlock_fatal_bonds_pulse.vpcf", PATTACH_POINT_FOLLOW, params.unit, enemy )
			end
		end
	end
end

function modifier_boss_durva_all_is_linked:IsHidden()
	return true
endboss_durva_consume_soul = class({})

function boss_durva_consume_soul:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local casterPos = caster:GetAbsOrigin()
	ParticleManager:FireLinearWarningParticle( casterPos, casterPos + CalculateDirection( self:GetCursorPosition(), caster ) * self:GetTrueCastRange(), self:GetSpecialValueFor("width") * 2 )
	return true
end

function boss_durva_consume_soul:OnSpellStart()
	local caster = self:GetCaster()
	
	EmitSoundOn( "Hero_ShadowDemon.ShadowPoison.Cast", caster )
	self:FireLinearProjectile( "particles/units/heroes/hero_shadow_demon/shadow_demon_shadow_poison_projectile.vpcf", CalculateDirection( self:GetCursorPosition(), caster ) * self:GetSpecialValueFor("speed"), self:GetTrueCastRange(), self:GetSpecialValueFor("width") * 2 )
end

function boss_durva_consume_soul:OnProjectileHit( target, position )
	if target then
		local caster = self:GetCaster()
		
		EmitSoundOn( "Hero_Bane.BrainSap.Target", target )
		ParticleManager:FireRopeParticle("particles/units/heroes/hero_bane/bane_sap.vpcf", PATTACH_POINT_FOLLOW, caster, target)
		
		local damage = target:GetHealth() * self:GetSpecialValueFor("sap_damage") / 100
		local heal = self:DealDamage( caster, target, damage, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
		caster:HealEvent( heal, self, caster )
	end
endboss_durva_feast_on_their_eyes = class({})

function boss_durva_feast_on_their_eyes:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCaster():GetAbsOrigin(), self:GetSpecialValueFor("radius") )
	ParticleManager:FireParticle( "particles/econ/items/nightstalker/nightstalker_black_nihility/ns_bn_void_cast.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster() )
	return true
end

function boss_durva_feast_on_their_eyes:OnSpellStart()
	local caster = self:GetCaster()
	
	local duration = self:GetSpecialValueFor("duration")
	EmitSoundOn( "Hero_Nightstalker.Void", caster )
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), self:GetSpecialValueFor("radius") ) ) do
		ParticleManager:FireParticle( "particles/units/heroes/hero_night_stalker/nightstalker_void_hit.vpcf", PATTACH_POINT_FOLLOW, enemy )
		enemy:AddNewModifier( caster, self, "modifier_boss_durva_feast_on_their_eyes", {duration = duration})
	end
end

modifier_boss_durva_feast_on_their_eyes = class({})
LinkLuaModifier( "modifier_boss_durva_feast_on_their_eyes", "bosses/boss_durva/boss_durva_feast_on_their_eyes", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_durva_feast_on_their_eyes:OnCreated()
	self.vision = self:GetSpecialValueFor("vision")
	self.blind = self:GetSpecialValueFor("blind")
end

function modifier_boss_durva_feast_on_their_eyes:OnRefresh()
	self:OnCreated()
end

function modifier_boss_durva_feast_on_their_eyes:DeclareFunctions()
	return {MODIFIER_PROPERTY_BONUS_VISION_PERCENTAGE, MODIFIER_PROPERTY_MISS_PERCENTAGE }
end

function modifier_boss_durva_feast_on_their_eyes:GetBonusVisionPercentage()
	return -self.vision
end

function modifier_boss_durva_feast_on_their_eyes:GetModifierMiss_Percentage()
	return self.blind
end

function modifier_boss_durva_feast_on_their_eyes:GetEffectName()
	return "particles/units/heroes/hero_night_stalker/nightstalker_void.vpcf"
endboss_durva_filled_to_burst = class({})

function boss_durva_filled_to_burst:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCaster():GetAbsOrigin(), self:GetTrueCastRange() )
	EmitSoundOn("Hero_Nevermore.RequiemOfSoulsCast", self:GetCaster())
	ParticleManager:FireParticle("particles/units/heroes/hero_nevermore/nevermore_wings.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster(), {[5]="attach_attack1", [6]="attach_attack2", [7]="attach_hitloc"})
	return true
end

function boss_durva_filled_to_burst:OnSpellStart()
	local caster = self:GetCaster()
	
	local direction = caster:GetForwardVector()
	local projectiles = self:GetSpecialValueFor("projectile_count")
	local speed = self:GetSpecialValueFor("speed")
	local distance = self:GetTrueCastRange()
	local width = self:GetSpecialValueFor("radius")
	local angle = 360 / projectiles
	
	ParticleManager:FireParticle("particles/units/heroes/hero_nevermore/nevermore_requiemofsouls_a.vpcf", PATTACH_ABSORIGIN, caster, {[1]=Vector(projectiles, 0, 0),[2]=caster:GetAbsOrigin()})
	ParticleManager:FireParticle("particles/units/heroes/hero_nevermore/nevermore_requiemofsouls.vpcf", PATTACH_ABSORIGIN, caster, {[1]=Vector(projectiles, 0, 0)})
	EmitSoundOn("Hero_Nevermore.RequiemOfSouls", caster)
	
	for i=0, projectiles do
		direction = RotateVector2D(direction, ToRadians( angle ) )
		
		local particle_lines_fx = ParticleManager:CreateParticle("particles/units/heroes/hero_nevermore/nevermore_requiemofsouls_line.vpcf", PATTACH_ABSORIGIN, caster)
		ParticleManager:SetParticleControl(particle_lines_fx, 0, caster:GetAbsOrigin())
		ParticleManager:SetParticleControl(particle_lines_fx, 1, direction*speed)
		ParticleManager:SetParticleControl(particle_lines_fx, 2, Vector(0, distance/speed, 0))
		ParticleManager:ReleaseParticleIndex(particle_lines_fx)

		self:FireLinearProjectile("", direction*speed, distance, width)
	end
end

function boss_durva_filled_to_burst:OnProjectileHit( target, position )
	if target then
		local caster = self:GetCaster()
		
		self:DealDamage( caster, target, self:GetSpecialValueFor("projectile_damage") )
		target:AddNewModifier( caster, self, "modifier_boss_durva_filled_to_burst", {duration = self:GetSpecialValueFor("duration")})
	end
end


modifier_boss_durva_filled_to_burst = class({})
LinkLuaModifier("modifier_boss_durva_filled_to_burst", "bosses/boss_durva/boss_durva_filled_to_burst", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_durva_filled_to_burst:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_boss_durva_filled_to_burst:OnRefresh()
	self:OnCreated()
end

function modifier_boss_durva_filled_to_burst:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_durva_filled_to_burst:GetModifierMoveSpeedBonus_Percentage()
	return -self.slow
endboss_durva_gorged_core = class({})

function boss_durva_gorged_core:GetIntrinsicModifierName()
	return "modifier_boss_durva_gorged_core"
end

modifier_boss_durva_gorged_core = class({})
LinkLuaModifier( "modifier_boss_durva_gorged_core", "bosses/boss_durva/boss_durva_gorged_core", LUA_MODIFIER_MOTION_NONE )

function boss_durva_gorged_core:OnCreated()
	self.dmg = self:GetSpecialValueFor("stack_dmg")
	self.as = self:GetSpecialValueFor("stack_as")
	self.ms = self:GetSpecialValueFor("stack_ms")
	self.heroStacks = self:GetSpecialValueFor("hero_stacks")
	self:SetStackCount( 0 )
end

function boss_durva_gorged_core:OnRefresh()
	self:OnCreated()
end

function boss_durva_gorged_core:DeclareFunctions()
	return { MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE, MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, MODIFIER_EVENT_ON_DEATH }
end

function boss_durva_gorged_core:GetModifierBaseDamageOutgoing_Percentage()
	return self.dmg * self:GetStackCount()
end

function boss_durva_gorged_core:GetModifierAttackSpeedBonus()
	return self.as * self:GetStackCount()
end

function boss_durva_gorged_core:GetModifierMoveSpeedBonus_Percentage()
	return self.ms * self:GetStackCount()
end

function boss_durva_gorged_core:OnDeath(params)
	if params.attacker == self:GetParent() then
		local stacks = 1
		if params.unit:IsRealHero() then
			stacks = self.heroStacks
		end
		self:SetStackCount( self:GetStackCount() + stacks )
	end
endboss_durva_purgatory = class({})

function boss_durva_purgatory:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_durva_purgatory:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	target:AddNewModifier(caster, self, "modifier_boss_durva_purgatory", {duration = self:GetSpecialValueFor("duration")})
	EmitSoundOn("Hero_Bane.Nightmare", target)
end


modifier_boss_durva_purgatory = class({})
LinkLuaModifier("modifier_boss_durva_purgatory", "bosses/boss_durva/boss_durva_purgatory", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_durva_purgatory:OnCreated()
	if IsServer() then 
		EmitSoundOn("Hero_Bane.Nightmare.Loop", self:GetParent())
	end
end

function modifier_boss_durva_purgatory:OnDestroy()
	if IsServer() then
		StopSoundOn("Hero_Bane.Nightmare.Loop", self:GetParent())
		EmitSoundOn("Hero_Bane.Nightmare.End", self:GetParent())
	end
end

function modifier_boss_durva_purgatory:DeclareFunctions()
	return {MODIFIER_PROPERTY_OVERRIDE_ANIMATION,
			MODIFIER_PROPERTY_OVERRIDE_ANIMATION_RATE}
end

function modifier_boss_durva_purgatory:GetOverrideAnimation()
	return ACT_DOTA_FLAIL
end

function modifier_boss_durva_purgatory:GetOverrideAnimationRate()
	return 0.2
end

function modifier_boss_durva_purgatory:GetEffectName()
	return "particles/units/heroes/hero_bane/bane_nightmare.vpcf"
end

function modifier_boss_durva_purgatory:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
end

function modifier_boss_durva_purgatory:GetStatusEffectName()
	return "particles/status_fx/status_effect_nightmare.vpcf"
end

function modifier_boss_durva_purgatory:StatusEffectPriority()
	return 10
end

function modifier_boss_durva_purgatory:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_NIGHTMARED] = true,
			[MODIFIER_STATE_INVULNERABLE] = true,
			[MODIFIER_STATE_LOW_ATTACK_PRIORITY] = true}
end
boss_durva_soul_barrier = class({})

function boss_durva_soul_barrier:GetIntrinsicModifierName()
	return "modifier_boss_durva_soul_barrier"
end

modifier_boss_durva_soul_barrier = class({})
LinkLuaModifier( "modifier_boss_durva_soul_barrier", "bosses/boss_durva/boss_durva_soul_barrier", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_durva_soul_barrier:OnCreated()
	self.reduction = self:GetSpecialValueFor("dmg_reduction")
	self.min = self:GetSpecialValueFor("min_reduction")
	self.max = self:GetSpecialValueFor("max_reduction")
	self:SetStackCount( self.reduction * 10 )
	if IsServer() then
		self:StartIntervalThink( 0.25 )
	end
end

function modifier_boss_durva_soul_barrier:OnRefresh()
	self:OnCreated()
end

function modifier_boss_durva_soul_barrier:OnIntervalThink()
	local maxHP = 0
	local currHP = 0
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		maxHP = maxHP + hero:GetMaxHealth()
		currHP = currHP + hero:GetHealth()
	end
	local hpPCT = ( currHP / maxHP ) * 100
	local stacks = math.floor( self.reduction * math.min(1, 1 - (100 - hpPCT) / (100 - self.min) ) * 10 ) / 10
	stacks = math.min( stacks, self.reduction ) * 10
	if self:GetStackCount() ~= stacks then self:SetStackCount( stacks ) end
end

function modifier_boss_durva_soul_barrier:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end


function modifier_boss_durva_soul_barrier:GetModifierIncomingDamage_Percentage()
	return -( self:GetStackCount() / 10 )
end

function modifier_boss_durva_soul_barrier:IsHidden()
	return true
endboss_evil_core_passive = class({})

function boss_evil_core_passive:GetIntrinsicModifierName()
	return "modifier_boss_evil_core_passive"
end

modifier_boss_evil_core_passive = class({})
LinkLuaModifier("modifier_boss_evil_core_passive", "bosses/boss_evil_core/boss_evil_core_passive", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	POSSIBLE_BOSSES = {	["npc_dota_boss_warlock_demon"] = 175, 
						["npc_dota_boss_warlock_true_form"] = 120,
						["npc_dota_boss33_a"] = 80, 
						["npc_dota_boss33_b"] = 80, 
						["npc_dota_boss34"] = 60, 
						["npc_dota_boss35"] = 25,}

	function modifier_boss_evil_core_passive:OnCreated()
		self.manaCharge = self:GetParent():GetMaxMana()
		self.manaChargeRegen = ( self.manaCharge / self:GetTalentSpecialValueFor("recharge_time") ) * 0.3
		self.damageTaken = self:GetTalentSpecialValueFor("damage_per_hit")
		self.limit = 6
		
		
		self:GetParent().hasBeenInitialized = true
		self:GetParent():SetCoreHealth( math.min( ( GameRules:GetGameDifficulty() * 125 + 25 * RoundManager:GetRaidsFinished() + 250 * RoundManager:GetZonesFinished() ) * HeroList:GetActiveHeroCount(), 15000 ) )
		
		self:StartIntervalThink(0.3)
	end
	
	function modifier_boss_evil_core_passive:OnRemoved()
		self:DestroyShield()
	end
	
	function modifier_boss_evil_core_passive:OnIntervalThink()
		local parent = self:GetParent()
		self.startPosition = self.startPosition or self:GetParent():GetAbsOrigin()
		FindClearSpaceForUnit(parent, self.startPosition, true)
		parent:SetBaseHealthRegen(0)
		if not self.asuraSpawn then
			parent:SetMana(self.manaCharge)
			if not self.shield then
				local demons = parent:FindFriendlyUnitsInRadius( parent:GetAbsOrigin(), -1 ) or {}
				if self.manaCharge < parent:GetMaxMana() then
					self.manaCharge = math.min(parent:GetMaxMana(), self.manaCharge + self.manaChargeRegen)
				elseif self:GetAbility():IsCooldownReady() and self.limit - 2 >= (#demons-1) then -- guarantee a minimum of time between casts
					self:ActivateShield()
				end
			else
				if self.manaCharge >= parent:GetMaxMana() then
					self:DestroyShield()
				else
					self.manaCharge = math.min(parent:GetMaxMana(), self.manaCharge + self.manaChargeRegen)
				end
			end
		end
	end
	
	function modifier_boss_evil_core_passive:ActivateShield(bInit)
		local parent = self:GetParent()
		self.shield = ParticleManager:CreateParticle("particles/units/heroes/hero_faceless_void/faceless_void_chronosphere.vpcf", PATTACH_POINT_FOLLOW, parent)
		ParticleManager:SetParticleControl(self.shield, 1, Vector(200,200,0))
		local count = (2 + math.floor((100 - parent:GetHealthPercent()) / 25))
		
		local demons = parent:FindFriendlyUnitsInRadius( parent:GetAbsOrigin(), -1 )	
		local spawnCount = math.min((self.limit - #demons + 1), count)
		
		self:GetAbility():SetCooldown()
		self.manaCharge = 0
		parent:SetMana(self.manaCharge)
		for i = 1, spawnCount do
			self:SpawnRandomUnit( parent:GetAbsOrigin() + ActualRandomVector(800, 450) )
		end
	end
	
	function modifier_boss_evil_core_passive:DestroyShield()
		ParticleManager:ClearParticle(self.shield)
		self.shield = nil
	end
	
	function modifier_boss_evil_core_passive:SpawnAsura(position)
		local caster = self:GetCaster()
		caster:ForceKill(false)
		return true
	end
	
	function modifier_boss_evil_core_passive:SpawnRandomUnit(position)
		local spawnName = "npc_dota_boss31"
		local range = 0
		for name, weight in pairs( POSSIBLE_BOSSES ) do -- very rough weighted randoming, no idea how close to accurate it is
			range = range + weight
		end
		local picker = RandomInt(1, range)
		for name, weight in pairs ( POSSIBLE_BOSSES ) do
			if picker <= weight then -- falls into the weighted slot
				spawnName = name
				break
			else
				picker = picker - weight
			end
		end
		
		local spawnedUnit = CreateUnitByName( spawnName, position, true, nil, nil, self:GetCaster():GetTeam() )
		spawnedUnit:SetCoreHealth(150*GameRules.gameDifficulty)
		spawnedUnit:SetAverageBaseDamage(spawnedUnit:GetAverageBaseDamage() / 1.5, 20)
		
		if spawnName == "npc_dota_boss_warlock_true_form" then
			spawnedUnit:FindAbilityByName("boss_warlock_rain_of_fire"):SetActivated(false)
		elseif spawnName == "npc_dota_boss35" then
			spawnedUnit:FindAbilityByName("boss_doom_hell_tempest"):SetActivated(false)
			spawnedUnit:FindAbilityByName("boss_doom_demonic_servants"):SetActivated(false)
			spawnedUnit:FindAbilityByName("boss_doom_sacrificial_rite"):SetActivated(false)
		elseif spawnName == "npc_dota_boss34" then
			spawnedUnit:FindAbilityByName("boss_necro_swans_song"):SetActivated(false)
			spawnedUnit:FindAbilityByName("boss_necro_weaken"):SetActivated(false)
		end
		
		spawnedUnit:AddNewModifier(self:GetCaster(), self:GetAbility(), "modifier_spawn_immunity", {duration = 2})
		spawnedUnit:AddNewModifier(self:GetCaster(), self:GetAbility(), "modifier_silence_generic", {duration = 2 + RandomInt(4,6)})
	end
end

function modifier_boss_evil_core_passive:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_evil_core_passive:GetModifierIncomingDamage_Percentage( params )
	local parent = self:GetParent()
	if params.damage <= 0 then return end
	local damage = self.damageTaken
	if self.shield and not parent:PassivesDisabled() then damage = 1 end
	if parent:GetHealth() > damage then
		parent:SetHealth( math.max(1, parent:GetHealth() - damage) )
	elseif not self.asuraSpawn then
		self.asuraSpawn = self:SpawnAsura(self:GetParent():GetAbsOrigin())
	end
	return -999
endboss_evil_guardian_annihilation = class({})

function boss_evil_guardian_annihilation:OnAbilityPhaseStart()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	ParticleManager:FireWarningParticle( GetGroundPosition(self:GetCaster():GetAbsOrigin(), self:GetCaster()), 600)
	return true
end

function boss_evil_guardian_annihilation:OnSpellStart()
	local caster = self:GetCaster()
	local direction = caster:GetForwardVector()
	
	local inward = true
	if RollPercentage(50) then inward = false end
	local distance = TernaryOperator( 1500, inward, 150 )
	local radius = self:GetSpecialValueFor("raze_radius")
	local damage = self:GetSpecialValueFor("raze_damage")
	local delay =  self:GetSpecialValueFor("raze_delay")
	
	local razeFactor = caster:GetHealthPercent()
	caster.getRazingFactor = caster.getRazingFactor + razeFactor
	
	local ogPos = caster:GetAbsOrigin() + distance * direction
	Timers:CreateTimer(1, function() 
		if not caster or caster:IsNull() then return end
		local circumference = 2 * math.pi * distance
		local razes = math.min( math.ceil(circumference / radius), 15 )
		local radVel = 360/razes
		for i = 0, razes - 1 do
			local newPos =  caster:GetAbsOrigin() + RotateVector2D(direction, ToRadians(radVel)*i) * distance
			self:CreateRaze(newPos, damage, radius, delay)
		end
		if inward then 
			distance = math.max(150, distance - radius*1.5)
			if distance > 150 then return 1 end
		else
			distance = math.min(1200, distance + radius*1.5) 
			if distance < 1200 then return 1 end
		end
		caster.getRazingFactor = caster.getRazingFactor - razeFactor
	end)
end

function boss_evil_guardian_annihilation:CreateRaze(position, damage, radius, delay)
	local razeFX = ParticleManager:CreateParticle("particles/doom_ring.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl( razeFX, 0, GetGroundPosition(position, self:GetCaster()) )
	local caster = self:GetCaster()
	Timers:CreateTimer(delay, function()
		ParticleManager:ClearParticle( razeFX )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage(caster, enemy, damage)
			end
		end
	end)
end
boss_evil_guardian_apocalypse = class({})

function boss_evil_guardian_apocalypse:OnAbilityPhaseStart()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	ParticleManager:FireWarningParticle( GetGroundPosition(self:GetCaster():GetAbsOrigin(), self:GetCaster()), 600)
	return true
end

function boss_evil_guardian_apocalypse:OnSpellStart()
	local caster = self:GetCaster()
	local direction = caster:GetForwardVector()
	
	local inward = true
	if RollPercentage(50) then inward = false end
	local distance = TernaryOperator( 1500, inward, 150 )
	local radius = self:GetSpecialValueFor("raze_radius")
	local damage = self:GetSpecialValueFor("raze_damage")
	local delay =  self:GetSpecialValueFor("raze_delay")
	
	local razeFactor = caster:GetHealthPercent()
	caster.getRazingFactor = caster.getRazingFactor + razeFactor
	
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), -1, {type = DOTA_UNIT_TARGET_HERO} ) ) do
		local newPos = enemy:GetAbsOrigin()
		if not inward then 
			newPos = caster:GetAbsOrigin() 
		end
		
		Timers:CreateTimer(0.2, function() 
			self:CreateRaze(newPos, damage, radius, delay)
			if inward then 
				distance = math.max(150, distance - radius*1.5)
				newPos = newPos + CalculateDirection(caster, enemy) * radius*1.5
				if distance > 150 then return 0.2 end
			else
				distance = math.min(1500, distance + radius*1.5) 
				newPos = newPos + CalculateDirection(enemy, caster) * radius*1.5
				if distance < 1500 then return 0.2 end
			end
			caster.getRazingFactor = caster.getRazingFactor - razeFactor
		end)
	end
end

function boss_evil_guardian_apocalypse:CreateRaze(position, damage, radius, delay)
	local razeFX = ParticleManager:CreateParticle("particles/doom_ring.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl( razeFX, 0, position )
	local caster = self:GetCaster()
	Timers:CreateTimer(delay, function()
		ParticleManager:ClearParticle( razeFX )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage(caster, enemy, damage)
			end
		end
	end)
endboss_evil_guardian_destruction = class({})

function boss_evil_guardian_destruction:OnAbilityPhaseStart()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	ParticleManager:FireWarningParticle(self:GetCaster():GetAbsOrigin(), 600)
	return true
end

function boss_evil_guardian_destruction:OnSpellStart()
	local caster = self:GetCaster()
	local direction = caster:GetForwardVector()
	
	local inward = TernaryOperator(true, RollPercentage(50), false)
	local distance = TernaryOperator( 1200, inward, 150 )
	local radius = self:GetSpecialValueFor("raze_radius")
	local damage = self:GetSpecialValueFor("raze_damage")
	local delay =  self:GetSpecialValueFor("raze_delay")
	local lines =  self:GetSpecialValueFor("lines")
	local duration = self:GetSpecialValueFor("duration")
	
	local razeFactor = caster:GetHealthPercent()
	caster.getRazingFactor = caster.getRazingFactor + razeFactor
	
	for i = 1, lines do
		local vDir = RotateVector2D(caster:GetForwardVector(), ToRadians(RandomInt(1, 360)))
		local newPos = caster:GetAbsOrigin() + vDir * radius
		Timers:CreateTimer(0.2, function()
			self:CreateRaze(newPos, damage, radius, delay)
			vDir = RotateVector2D(vDir, ToRadians(RandomInt(-15, 15)))
			newPos = newPos + vDir * radius
			if duration > 0 then
				duration = duration - 0.2
				return 0.2
			end
		end)
	end
	Timers:CreateTimer(duration, function() 
		caster.getRazingFactor = caster.getRazingFactor - razeFactor
	end)
end

function boss_evil_guardian_destruction:CreateRaze(position, damage, radius, delay)
	local caster = self:GetCaster()
	local razeFX = ParticleManager:CreateParticle("particles/doom_ring.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl( razeFX, 0, GetGroundPosition(position, caster) )
	Timers:CreateTimer(delay, function()
		ParticleManager:ClearParticle( razeFX )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage(caster, enemy, damage)
			end
		end
	end)
endboss_evil_guardian_end_of_days = class({})

function boss_evil_guardian_end_of_days:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	return true
end

function boss_evil_guardian_end_of_days:OnSpellStart()
	local caster = self:GetCaster()

	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), -1, {type = DOTA_UNIT_TARGET_HERO} ) ) do
		self:CreateTrap(enemy:GetAbsOrigin())
	end
end

function boss_evil_guardian_end_of_days:CreateTrap(position)
	
	local caster = self:GetCaster()
	local vPos = GetGroundPosition( position, caster ) + Vector(0,0,22)
	
	local razeFX = ParticleManager:CreateParticle("particles/doom_ring_D.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl( razeFX, 0, GetGroundPosition(vPos, nil) )
	
	local duration = self:GetSpecialValueFor("stun_duration")
	local radius = self:GetSpecialValueFor("raze_radius")
	local delay = self:GetSpecialValueFor("raze_delay")
	Timers:CreateTimer(delay, function()
		ParticleManager:ClearParticle( razeFX )
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( vPos, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				enemy:AddNewModifier(caster, self, "modifier_boss_evil_guardian_end_of_days_stun", {duration = duration})
			end
		end
	end)
end

modifier_boss_evil_guardian_end_of_days_stun = class({})
LinkLuaModifier("modifier_boss_evil_guardian_end_of_days_stun", "bosses/boss_evil_guardian/boss_evil_guardian_end_of_days", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_evil_guardian_end_of_days_stun:GetEffectName()
	return "particles/units/heroes/hero_doom_bringer/doom_bringer_doom_ring.vpcf"
end

function modifier_boss_evil_guardian_end_of_days_stun:CheckState()
	local state = { [MODIFIER_STATE_STUNNED] = true}
	return state
end

function modifier_boss_evil_guardian_end_of_days_stun:IsPurgable()
	return true
end

function modifier_boss_evil_guardian_end_of_days_stun:IsStunDebuff()
	return true
end

function modifier_boss_evil_guardian_end_of_days_stun:IsPurgeException()
	return true
endboss_evil_guardian_fire_shield = class({})

function boss_evil_guardian_fire_shield:GetIntrinsicModifierName()
	return "modifier_boss_evil_guardian_fire_shield_handler"
end

modifier_boss_evil_guardian_fire_shield_handler = class({})
LinkLuaModifier("modifier_boss_evil_guardian_fire_shield_handler", "bosses/boss_evil_guardian/boss_evil_guardian_fire_shield", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_evil_guardian_fire_shield_handler:OnCreated()
		self.isActive = self:GetParent():HasModifier("modifier_boss_evil_guardian_fire_shield_active")
		local parent = self:GetParent()
		parent.manaCharge = parent:GetMaxMana()
		self.manaChargeDecrease = ( parent.manaCharge / self:GetTalentSpecialValueFor("time_to_lose_shield") ) * 0.2
		self.manaChargeIncrease = ( parent.manaCharge / self:GetTalentSpecialValueFor("recharge_time") ) * 0.2
		self:StartIntervalThink(0.2)
	end
	
	function modifier_boss_evil_guardian_fire_shield_handler:OnIntervalThink()
		local parent = self:GetParent()
		parent:SetMana(parent.manaCharge)
		if not self.isActive then
			if parent.manaCharge == parent:GetMaxMana() then
				parent:AddNewModifier(parent, self:GetAbility(), "modifier_boss_evil_guardian_fire_shield_active", {})
			else
				parent.manaCharge = math.min(parent:GetMaxMana(), parent.manaCharge + self.manaChargeIncrease)
			end
		else
			if parent.manaCharge == 0 then
				parent:RemoveModifierByName("modifier_boss_evil_guardian_fire_shield_active")
			else
				parent.manaCharge = math.max(0, parent.manaCharge - self.manaChargeDecrease)
			end
		end
		self.isActive = parent:HasModifier("modifier_boss_evil_guardian_fire_shield_active")
	end
end

function modifier_boss_evil_guardian_fire_shield_handler:IsHidden()
	return true
end

modifier_boss_evil_guardian_fire_shield_active = class({})
LinkLuaModifier("modifier_boss_evil_guardian_fire_shield_active", "bosses/boss_evil_guardian/boss_evil_guardian_fire_shield", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_evil_guardian_fire_shield_active:OnCreated()
		self.damageTaken = self:GetTalentSpecialValueFor("damage_to_mana_loss") / 100
		self.damageTaken = self.damageTaken / HeroList:GetActiveHeroCount()
		fireFX = ParticleManager:CreateParticle("particles/demon_shield.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
		local size = Vector(300,300,0)
		ParticleManager:SetParticleControl(fireFX, 1, size)
		self:AddEffect(fireFX)
	end
end

function modifier_boss_evil_guardian_fire_shield_active:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_evil_guardian_fire_shield_active:GetModifierIncomingDamage_Percentage( params )
	local parent = self:GetParent()
	if params.damage <= 0 or parent:PassivesDisabled() then return end
	local damage = params.damage * self.damageTaken
	parent.manaCharge = math.max( 0, parent.manaCharge - damage )
	return -999
end

function modifier_boss_evil_guardian_fire_shield_active:IsPurgable()
	return false
endboss_evil_guardian_hell_on_earth = class({})

function boss_evil_guardian_hell_on_earth:GetIntrinsicModifierName()
	return "modifier_boss_evil_guardian_hell_on_earth_handler"
end

function boss_evil_guardian_hell_on_earth:CreateEvilPool(position, radius, damage, duration)
	local caster = self:GetCaster()
	local tPos = position
	local tRadius = radius
	local tDur = duration
	local tDmg = damage

	local pFX = ParticleManager:CreateParticle("particles/units/bosses/boss_evil_guardian/boss_evil_guardian_hell_on_earth.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl(pFX, 0, GetGroundPosition(tPos, caster) )
	ParticleManager:SetParticleControl(pFX, 1, Vector(radius,1,1) )
	
	Timers:CreateTimer(function()
		if not caster or caster:IsNull() then ParticleManager:ClearParticle(pFX) end
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius(tPos, tRadius) ) do
			self:DealDamage(caster, enemy, enemy:GetMaxHealth() * tDmg, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
		end
		if tDur > 0 then
			tDur = tDur - 1
			return 1
		else
			ParticleManager:ClearParticle(pFX)
		end
	end)
end

modifier_boss_evil_guardian_hell_on_earth_handler = class({})
LinkLuaModifier("modifier_boss_evil_guardian_hell_on_earth_handler", "bosses/boss_evil_guardian/boss_evil_guardian_hell_on_earth", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_evil_guardian_hell_on_earth_handler:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
	self.delay = self:GetSpecialValueFor("pool_creation_delay")
	self.radius = self:GetSpecialValueFor("radius")
	self.damagePct = self:GetSpecialValueFor("hp_pct_damage") / 100
	if IsServer() then self:StartIntervalThink(self.delay) end
end

function modifier_boss_evil_guardian_hell_on_earth_handler:OnIntervalThink()
	local parent = self:GetParent()
	if not self:GetAbility():IsActivated() or parent:PassivesDisabled() then return end
	for _, enemy in ipairs( parent:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), -1, {type = DOTA_UNIT_TARGET_HERO, flag = DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES})) do
		if not enemy:IsFakeHero() and not enemy:TriggerSpellAbsorb(self) then
			local position = enemy:GetAbsOrigin()
			ParticleManager:FireWarningParticle(position, self.radius)
			Timers:CreateTimer(1, function()
				if not self:GetAbility():IsNull() then
					self:GetAbility():CreateEvilPool(position, self.radius, self.damagePct, self.duration)
				end
			end)
		end
	end
end

function modifier_boss_evil_guardian_hell_on_earth_handler:IsHidden()
	return true
end
boss_evil_guardian_purge_their_sin = class({})

function boss_evil_guardian_purge_their_sin:GetIntrinsicModifierName()
	return "modifier_boss_evil_guardian_purge_their_sin_handler"
end

modifier_boss_evil_guardian_purge_their_sin_handler = class({})
LinkLuaModifier("modifier_boss_evil_guardian_purge_their_sin_handler", "bosses/boss_evil_guardian/boss_evil_guardian_purge_their_sin", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_evil_guardian_purge_their_sin_handler:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end


function modifier_boss_evil_guardian_purge_their_sin_handler:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_evil_guardian_purge_their_sin_handler:OnTakeDamage( params )
	if params.attacker == self:GetParent() then
		params.unit:AddNewModifier(params.attacker, self:GetAbility(), "modifier_boss_evil_guardian_purge_their_sin_debuff", {duration = self.duration})
		ParticleManager:FireParticle("particles/units/heroes/hero_jakiro/jakiro_macropyre_firehit.vpcf", PATTACH_POINT_FOLLOW, params.unit)
	end
end

function modifier_boss_evil_guardian_purge_their_sin_handler:IsHidden()
	return true
end

function modifier_boss_evil_guardian_purge_their_sin_handler:GetEffectName()
	return "particles/econ/items/warlock/warlock_hellsworn_construct/golem_hellsworn_ambient.vpcf"
end

modifier_boss_evil_guardian_purge_their_sin_debuff = class({})
LinkLuaModifier("modifier_boss_evil_guardian_purge_their_sin_debuff", "bosses/boss_evil_guardian/boss_evil_guardian_purge_their_sin", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_evil_guardian_purge_their_sin_debuff:OnCreated()
	self.amp = self:GetSpecialValueFor("damage_amp")
	self:SetStackCount(1)
end

function modifier_boss_evil_guardian_purge_their_sin_debuff:OnRefresh()
	self.amp = self:GetSpecialValueFor("damage_amp")
	self:IncrementStackCount()
end

function modifier_boss_evil_guardian_purge_their_sin_debuff:GetEffectName()
	return "particles/units/bosses/boss_evil_guardian/boss_evil_guardian_purge_their_sin_debuff.vpcf"
end

function modifier_boss_evil_guardian_purge_their_sin_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_evil_guardian_purge_their_sin_debuff:GetModifierIncomingDamage_Percentage( params )
	return self.amp * self:GetStackCount()
endboss_evil_guardian_rise_of_hell = class({})

function boss_evil_guardian_rise_of_hell:OnAbilityPhaseStart()
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_status_immunity", {duration = self:GetCastPoint() - 0.01})
	ParticleManager:FireWarningParticle(GetGroundPosition(self:GetCursorPosition(), self:GetCaster()), self:GetSpecialValueFor("radius"))
	return true
end

function boss_evil_guardian_rise_of_hell:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	caster:StartGesture(ACT_DOTA_ATTACK)
	EmitSoundOn("Hero_EmberSpirit.SleightOfFist.Cast", caster)
	local threatTarget
	local currentTarget = caster
	local hitUnits = {}
	caster:AddNewModifier(caster, self, "modifier_boss_evil_guardian_rise_of_hell_punch", {duration = 0.15})
	Timers:CreateTimer(0.1, function()
		local enemies = caster:FindEnemyUnitsInRadius( position, self:GetSpecialValueFor("radius") )
		for id, enemy in ipairs(enemies) do
			caster:AddNewModifier(caster, self, "modifier_boss_evil_guardian_rise_of_hell_punch", {duration = 0.15})
			if enemy and not enemy:IsNull() and not enemy:TriggerSpellAbsorb(self) and not hitUnits[enemy] then
				FindClearSpaceForUnit( caster, enemy:GetAbsOrigin() + RandomVector(175), true )
				caster:PerformGenericAttack(enemy, true)
				caster:StartGesture(ACT_DOTA_ATTACK)
				EmitSoundOn("Hero_EmberSpirit.SleightOfFist.Damage", enemy)
				if not threatTarget then threatTarget = enemy end
				if enemy:GetThreat() > threatTarget:GetThreat() then threatTarget = enemy end
				currentTarget = enemy
				hitUnits[enemy] = true
				return 0.1
			end
		end
		caster:RemoveModifierByName("modifier_boss_evil_guardian_rise_of_hell_punch")
		threatTarget = threatTarget or caster
		if currentTarget ~= threatTarget then
			FindClearSpaceForUnit( caster, threatTarget:GetAbsOrigin() + RandomVector(175), true )
		end
	end)
end

modifier_boss_evil_guardian_rise_of_hell_punch = class({})
LinkLuaModifier("modifier_boss_evil_guardian_rise_of_hell_punch", "bosses/boss_evil_guardian/boss_evil_guardian_rise_of_hell", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_evil_guardian_rise_of_hell_punch:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_MAGIC_IMMUNE] = true,
			[MODIFIER_STATE_CANNOT_MISS] = true,
			[MODIFIER_STATE_ATTACK_IMMUNE] = true,}
end
function modifier_boss_evil_guardian_rise_of_hell_punch:DeclareFunctions()
	return {MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE}
end

function modifier_boss_evil_guardian_rise_of_hell_punch:GetModifierPreAttack_CriticalStrike()
	return self:GetSpecialValueFor("crit")
endfallen_one_aura_of_war = class({})

function fallen_one_aura_of_war:GetIntrinsicModifierName()
	return "modifier_fallen_one_aura_of_war"
end

modifier_fallen_one_aura_of_war = class({})
LinkLuaModifier("modifier_fallen_one_aura_of_war", "bosses/boss_fallen_one/fallen_one_aura_of_war", LUA_MODIFIER_MOTION_NONE)
function modifier_fallen_one_aura_of_war:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_fallen_one_aura_of_war:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_fallen_one_aura_of_war:IsAura()
	return not self:GetParent():PassivesDisabled()
end

function modifier_fallen_one_aura_of_war:GetAuraEntityReject(entity)
	return entity == self:GetParent()
end

function modifier_fallen_one_aura_of_war:GetModifierAura()
	return "modifier_fallen_one_aura_of_war_buff"
end

function modifier_fallen_one_aura_of_war:GetAuraRadius()
	return self.radius
end

function modifier_fallen_one_aura_of_war:GetAuraDuration()
	return 0.5
end

function modifier_fallen_one_aura_of_war:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_FRIENDLY
end

function modifier_fallen_one_aura_of_war:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_fallen_one_aura_of_war:IsHidden()
	return true
end

modifier_fallen_one_aura_of_war_buff = class({})
LinkLuaModifier("modifier_fallen_one_aura_of_war_buff", "bosses/boss_fallen_one/fallen_one_aura_of_war", LUA_MODIFIER_MOTION_NONE)

function modifier_fallen_one_aura_of_war_buff:OnCreated()
	self.damage = self:GetSpecialValueFor("bonus_damage")
end

function modifier_fallen_one_aura_of_war_buff:OnRefresh()
	self.damage = self:GetSpecialValueFor("bonus_damage")
end

function modifier_fallen_one_aura_of_war_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE}
end

function modifier_fallen_one_aura_of_war_buff:GetModifierBaseDamageOutgoing_Percentage()
	return self.damage
end

function modifier_fallen_one_aura_of_war_buff:GetAttributes()
	return MODIFIER_ATTRIBUTE_MULTIPLE
endfallen_one_debilitate = class({})


function fallen_one_debilitate:OnAbilityPhaseStart()
	local startPos = self:GetCaster():GetAbsOrigin()
	local endPos = startPos + CalculateDirection( self:GetCursorPosition(), startPos ) * self:GetSpecialValueFor("distance")
	ParticleManager:FireLinearWarningParticle( startPos, endPos, self:GetSpecialValueFor("radius") )
	return true
end

function fallen_one_debilitate:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local direction = CalculateDirection( target, caster )
	local speed = self:GetSpecialValueFor("speed")
	local width = self:GetSpecialValueFor("radius")
	local distance = self:GetSpecialValueFor("distance")
	caster:EmitSound("Hero_VengefulSpirit.WaveOfTerror")
	self:FireLinearProjectile("particles/units/heroes/hero_vengeful/vengeful_wave_of_terror.vpcf", direction * speed, distance, width)
end

function fallen_one_debilitate:OnProjectileHit( target, position )
	if target then
		local caster = self:GetCaster()
		if target:TriggerSpellAbsorb( self ) then return true end
		local damage = self:GetSpecialValueFor("damage")
		local duration = self:GetSpecialValueFor("duration")
		self:DealDamage( caster, target, damage )
		target:AddNewModifier( caster, self, "modifier_fallen_one_debilitate", {duration = duration})
	end
end

modifier_fallen_one_debilitate = class({})
LinkLuaModifier( "modifier_fallen_one_debilitate", "bosses/boss_fallen_one/fallen_one_debilitate", LUA_MODIFIER_MOTION_NONE )

function modifier_fallen_one_debilitate:OnCreated()
	self.armor = self:GetSpecialValueFor("minus_armor")
	if IsServer() then
		self:SetStackCount(1)
	end
end

function modifier_fallen_one_debilitate:OnRefresh()
	self.armor = self:GetSpecialValueFor("minus_armor")
	if IsServer() then
		self:AddIndependentStack()
	end
end

function modifier_fallen_one_debilitate:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_fallen_one_debilitate:GetModifierPhysicalArmorBonus()
	return self.armor * self:GetStackCount()
endfallen_one_fade_out = class({})

function fallen_one_fade_out:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function fallen_one_fade_out:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	caster:EmitSound("Hero_VengefulSpirit.NetherSwap")
	if target:TriggerSpellAbsorb( self ) then return end
	local duration = self:GetSpecialValueFor("illu_duration")
	
	local callback = (function( illusion, parent, caster, ability )
		illusion.hasBeenInitialized = true
		Timers:CreateTimer(0.5, function()
			illusion:MoveToPositionAggressive( parent:GetAbsOrigin() )
			caster:SetAbsOrigin( illusion:GetAbsOrigin() )
			if not illusion or illusion:IsNull() or not illusion:IsAlive() and invuln then
				invuln:Destroy()
			end
		end)
	end)
	
	local illusion = target:ConjureImage( caster:GetAbsOrigin(), duration, self:GetSpecialValueFor("illu_out") - 100, self:GetSpecialValueFor("illu_inc") - 100, nil, self, false, caster, callback )
	local invuln = caster:AddNewModifier(caster, self, "modifier_fallen_one_fade_out", {duration = duration})
end

modifier_fallen_one_fade_out = class({})
LinkLuaModifier("modifier_fallen_one_fade_out", "bosses/boss_fallen_one/fallen_one_fade_out", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_fallen_one_fade_out:OnCreated()
		self:GetParent():AddNoDraw( ) 
	end
	
	function modifier_fallen_one_fade_out:OnDestroy()
		self:GetParent():StartGesture( ACT_DOTA_CHANNEL_END_ABILITY_4 )
		self:GetParent():RemoveNoDraw( )
	end
end

function modifier_fallen_one_fade_out:CheckState()
	return {[MODIFIER_STATE_INVULNERABLE] = true,
			[MODIFIER_STATE_INVISIBLE] = true,
			[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_UNSELECTABLE] = true,
			[MODIFIER_STATE_COMMAND_RESTRICTED] = true,
			[MODIFIER_STATE_NO_HEALTH_BAR] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true,
			[MODIFIER_STATE_UNTARGETABLE] = true,}
end

function modifier_fallen_one_fade_out:IsHidden()
	return true
endfallen_one_sinister_bolt = class({})

function fallen_one_sinister_bolt:OnAbilityPhaseStart()
	local startPos = self:GetCaster():GetAbsOrigin()
	local endPos = startPos + CalculateDirection( self:GetCursorPosition(), startPos ) * self:GetSpecialValueFor("distance")
	ParticleManager:FireLinearWarningParticle( startPos, endPos, self:GetSpecialValueFor("radius") * 2 )
	return true
end

function fallen_one_sinister_bolt:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local direction = CalculateDirection( target, caster )
	local distance = self:GetSpecialValueFor("distance")
	local speed = self:GetSpecialValueFor("speed")
	local radius = self:GetSpecialValueFor("radius")
	
	local ProjectileHit = function(self, target, position)
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if target then
			if target:TriggerSpellAbsorb(ability) then return false end
			EmitSoundOn("Hero_VengefulSpirit.MagicMissileImpact", target)
			ability:Stun( target, ability:GetSpecialValueFor("stun_duration") )
		end
		local expRadius = ability:GetSpecialValueFor("explosion_radius") 
		ParticleManager:FireWarningParticle( position, expRadius )
		Timers:CreateTimer( 0.5, function()
			ParticleManager:FireParticle("particles/units/heroes/hero_dark_seer/dark_seer_vacuum.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(expRadius,1,1)})
			local damage = ability:GetSpecialValueFor("damage")
			for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, expRadius ) ) do
				if not enemy:TriggerSpellAbsorb(ability) then
					ability:DealDamage( caster, enemy, damage )
				end
			end
		end)
		return false
	end
	caster:EmitSound("Hero_VengefulSpirit.MagicMissile")
	ProjectileHandler:CreateProjectile(PROJECTILE_LINEAR, ProjectileHit, {  FX = "particles/econ/items/vengeful/vs_ti8_immortal_shoulder/vs_ti8_immortal_magic_missle.vpcf",
																		  position = caster:GetAbsOriginCenter(),
																		  caster = caster,
																		  ability = self,
																		  speed = speed,
																		  radius = radius,
																		  velocity = speed * direction,
																		  distance = distance })
endboss_flesh_behemoth_decay = class({})

function boss_flesh_behemoth_decay:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetSpecialValueFor("radius") )
	return true
end

function boss_flesh_behemoth_decay:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local duration = self:GetSpecialValueFor("duration")
	
	ParticleManager:FireParticle("particles/units/heroes/hero_undying/undying_decay.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius,radius,radius)})
	caster:EmitSound("Hero_Undying.Decay.Cast")
	for _,enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
		if not enemy:TriggerSpellAbsorb( self ) then
			caster:Lifesteal(self, 100, damage, enemy, DAMAGE_TYPE_MAGICAL, 2, true)
			enemy:AddNewModifier( caster, self, "modifier_boss_flesh_behemoth_decay_debuff", {duration = duration})
			local hpPct = caster:GetHealth() / caster:GetMaxHealth()
			caster:AddNewModifier( caster, self, "modifier_boss_flesh_behemoth_decay_buff", {duration = duration} )
			caster:SetHealth( hpPct * caster:GetMaxHealth() )
			enemy:EmitSound("Hero_Undying.Decay.Target")
		end
	end
end

modifier_boss_flesh_behemoth_decay_debuff = class({})
LinkLuaModifier("modifier_boss_flesh_behemoth_decay_debuff", "bosses/boss_flesh_behemoth/boss_flesh_behemoth_decay", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_flesh_behemoth_decay_debuff:OnCreated()
	self.loss = self:GetSpecialValueFor("str_loss")
	if IsServer() then
		self:SetStackCount(1)
	end
end

function modifier_boss_flesh_behemoth_decay_debuff:OnRefresh()
	self.loss = self:GetSpecialValueFor("str_loss")
	if IsServer() then
		self:AddIndependentStack()
	end
end

function modifier_boss_flesh_behemoth_decay_debuff:DeclareFunctions()
	return { MODIFIER_PROPERTY_STATS_STRENGTH_BONUS }
end

function modifier_boss_flesh_behemoth_decay_debuff:GetModifierBonusStats_Strength()
	return self.loss * self:GetStackCount() * (-1)
end


modifier_boss_flesh_behemoth_decay_buff = class({})
LinkLuaModifier("modifier_boss_flesh_behemoth_decay_buff", "bosses/boss_flesh_behemoth/boss_flesh_behemoth_decay", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_flesh_behemoth_decay_buff:OnCreated()
	self.loss = self:GetSpecialValueFor("str_loss") * 20
	if IsServer() then
		self:AddIndependentStack()
	end
end

function modifier_boss_flesh_behemoth_decay_buff:OnRefresh()
	self.loss = self:GetSpecialValueFor("str_loss") * 20
	if IsServer() then
		self:AddIndependentStack()
	end
end

function modifier_boss_flesh_behemoth_decay_buff:OnStackCountChanged(stacks)

end

function modifier_boss_flesh_behemoth_decay_buff:DeclareFunctions()
	return { MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS }
end

function modifier_boss_flesh_behemoth_decay_buff:GetModifierExtraHealthBonus()
	return self.loss * self:GetStackCount()
endboss_flesh_behemoth_meat_pile = class({})

function boss_flesh_behemoth_meat_pile:GetIntrinsicModifierName()
	return "modifier_boss_flesh_behemoth_meat_pile"
end

function boss_flesh_behemoth_meat_pile:ShouldUseResources()
	return true
end

modifier_boss_flesh_behemoth_meat_pile = class({})
LinkLuaModifier("modifier_boss_flesh_behemoth_meat_pile", "bosses/boss_flesh_behemoth/boss_flesh_behemoth_meat_pile", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_flesh_behemoth_meat_pile:OnCreated()
	self.hp = self:GetSpecialValueFor("zombie_health")
	self.chance = self:GetSpecialValueFor("zombie_chance")
end

function modifier_boss_flesh_behemoth_meat_pile:OnRefresh()
	self.hp = self:GetSpecialValueFor("zombie_health")
	self.chance = self:GetSpecialValueFor("zombie_chance")
end

function modifier_boss_flesh_behemoth_meat_pile:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_flesh_behemoth_meat_pile:OnTakeDamage(params)
	if params.unit == self:GetParent() and self:GetAbility():IsCooldownReady() and not params.unit:PassivesDisabled() and self:RollPRNG( self.chance ) then
		local zombie = CreateUnitByName("npc_dota_boss3a_b", params.unit:GetAbsOrigin() + RandomVector(150), true, nil, nil, params.unit:GetTeamNumber() )
		local bonusHP = 0
		if self:GetParent():HasModifier("modifier_boss_flesh_behemoth_decay_buff") then
			local buff = self:GetParent():FindModifierByName("modifier_boss_flesh_behemoth_decay_buff")
			if buff then
				bonusHP = buff:GetModifierExtraHealthBonus()
			end
		end
		zombie:SetCoreHealth( self.hp + bonusHP )
		zombie:SetModelScale( 0.7 )
		zombie:SetAverageBaseDamage( 110, 35 )
		self:GetAbility():SetCooldown()
	end
end

function modifier_boss_flesh_behemoth_meat_pile:IsHidden()
	return true
endboss_genesis_crumple = class({})

function boss_genesis_crumple:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetSpecialValueFor("radius") )
	return true
end

function boss_genesis_crumple:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local radius = self:GetSpecialValueFor("radius")
	local damage = caster:GetAttackDamage() * self:GetSpecialValueFor("damage") / 100
	local stunDur = self:GetSpecialValueFor("stun")
	
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:DealDamage( caster, enemy, damage, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
			self:Stun( enemy, stunDur )
		end
	end
	ParticleManager:FireParticle("particles/test_particle/ogre_melee_smash.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius, 1, 1) })
	EmitSoundOnLocationWithCaster(position, "Hero_Leshrac.Split_Earth", caster)
endboss_genesis_deconstruction = class({})

function boss_genesis_deconstruction:GetIntrinsicModifierName()
	return "modifier_boss_genesis_deconstruction"
end

modifier_boss_genesis_deconstruction = class({})
LinkLuaModifier( "modifier_boss_genesis_deconstruction", "bosses/boss_genesis/boss_genesis_deconstruction", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_genesis_deconstruction:IsAura()
	return true
end

function modifier_boss_genesis_deconstruction:GetModifierAura()
	return "modifier_boss_genesis_deconstruction_debuff"
end

function modifier_boss_genesis_deconstruction:GetAuraRadius()
	return self:GetSpecialValueFor("radius")
end

function modifier_boss_genesis_deconstruction:GetAuraDuration()
	return 0.5
end

function modifier_boss_genesis_deconstruction:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_genesis_deconstruction:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_genesis_deconstruction:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

function modifier_boss_genesis_deconstruction:IsHidden()
	return true
end

modifier_boss_genesis_deconstruction_debuff = class({})
LinkLuaModifier( "modifier_boss_genesis_deconstruction_debuff", "bosses/boss_genesis/boss_genesis_deconstruction", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_genesis_deconstruction_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE}
end

function modifier_boss_genesis_deconstruction_debuff:GetModifierHealthRegenPercentage()
	if self:GetCaster():HasModifier("modifier_boss_genesis_strengthen_resolve") then
		return self:GetSpecialValueFor("regen_buff")
	elseif not self:GetCaster():PassivesDisabled() then
		return self:GetSpecialValueFor("regen")
	end
endboss_genesis_dominion = class({})

function boss_genesis_dominion:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier( caster, self, "modifier_boss_genesis_dominion", {duration = self:GetSpecialValueFor("duration")} )
	caster:EmitSound("Hero_Omniknight.GuardianAngel")
end

modifier_boss_genesis_dominion = class({})
LinkLuaModifier( "modifier_boss_genesis_dominion", "bosses/boss_genesis/boss_genesis_dominion", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_genesis_dominion:DeclareFunctions()
	return {MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_PHYSICAL}
end

function modifier_boss_genesis_dominion:GetAbsoluteNoDamagePhysical()
	return 1
end

function modifier_boss_genesis_dominion:GetEffectName()
	return "particles/units/heroes/hero_omniknight/omniknight_guardian_angel_ally.vpcf"
endboss_genesis_pacifism = class({})

function boss_genesis_pacifism:GetIntrinsicModifierName()
	return "modifier_boss_genesis_pacifism"
end

function boss_genesis_pacifism:ShouldUseResources()
	return true
end

modifier_boss_genesis_pacifism = class({})
LinkLuaModifier( "modifier_boss_genesis_pacifism", "bosses/boss_genesis/boss_genesis_pacifism", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_genesis_pacifism:OnCreated()
	if IsServer() then self:StartIntervalThink(0.5) end
end
function modifier_boss_genesis_pacifism:OnIntervalThink()
	if self:GetAbility():IsCooldownReady() then
		self:SetStackCount(0)
	else
		self:SetStackCount(1)
	end
end

function modifier_boss_genesis_pacifism:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_genesis_pacifism:OnTakeDamage(params)
	local ability = self:GetAbility()
	if params.unit == self:GetParent() and ability:IsCooldownReady() and not self:GetParent():PassivesDisabled() then
		local duration = self:GetSpecialValueFor("duration")
		params.attacker:Disarm( params.unit, ability, duration)
		params.attacker:Silence( params.unit, ability, duration)
		ability:SetCooldown( self:GetAbility():GetCooldown(-1) )
		params.unit:Dispel( params.unit, true )
	end
end

function modifier_boss_genesis_pacifism:IsHidden()
	return self:GetStackCount() == 1
endboss_genesis_purify = class({})

function boss_genesis_purify:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_genesis_purify:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	if not target:TriggerSpellAbsorb(self) then return end
	target:Dispel(caster, true)
	ParticleManager:FireParticle("particles/units/heroes/hero_omniknight/omniknight_purification.vpcf", PATTACH_POINT_FOLLOW, target)
	target:EmitSound("Hero_Omniknight.Purification")
endboss_genesis_reconstruction = class({})

function boss_genesis_reconstruction:GetIntrinsicModifierName()
	return "modifier_boss_genesis_reconstruction"
end

modifier_boss_genesis_reconstruction = class({})
LinkLuaModifier( "modifier_boss_genesis_reconstruction", "bosses/boss_genesis/boss_genesis_reconstruction", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_genesis_reconstruction:DeclareFunctions()
	return {MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE}
end

function modifier_boss_genesis_reconstruction:GetModifierHealthRegenPercentage()
	if self:GetCaster():HasModifier("modifier_boss_genesis_strengthen_resolve") then
		return self:GetSpecialValueFor("regen_buff")
	elseif not self:GetCaster():PassivesDisabled() then
		return self:GetSpecialValueFor("regen")
	end
end

function modifier_boss_genesis_reconstruction:IsHidden()
	return true
end
boss_genesis_return_to_life = class({})

function boss_genesis_return_to_life:OnAbilityPhaseStart()
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		ParticleManager:FireWarningParticle( hero:GetAbsOrigin(), 150 )
	end
	return true
end

function boss_genesis_return_to_life:OnSpellStart()
	local caster = self:GetCaster()
	local heroes = HeroList:GetActiveHeroes()
	
	for _, hero in ipairs( heroes ) do
		if not hero:TriggerSpellAbsorb(self) and hero:IsAlive() and hero:GetHealth() > 0 then
			self:ConjureImage( hero )
			hero:EmitSound("Hero_Omniknight.Attack.Post")
		end
	end
end

function  boss_genesis_return_to_life:ConjureImage( target )
	local caster = self:GetCaster()
	local unit_name = target:GetUnitName()
	local origin = target:GetAbsOrigin() + RandomVector(150)
	
	local illusion = CreateUnitByName("npc_illusion_template", origin, true, caster, caster, caster:GetTeamNumber())
		
	for abilitySlot=0,15 do
		local abilityillu = target:GetAbilityByIndex(abilitySlot)
		if abilityillu ~= nil then
			local abilityLevel = abilityillu:GetLevel()
			local abilityName = abilityillu:GetAbilityName()
			if illusion:FindAbilityByName(abilityName) ~= nil then
				local illusionAbility = illusion:FindAbilityByName(abilityName)
				illusionAbility:SetLevel(abilityLevel)
			else
				local illusionAbility = illusion:AddAbility(abilityName)
				illusionAbility:SetLevel(abilityLevel)
			end
		end
	end
	
	-- Make illusion look like owner
	illusion:SetBaseMaxHealth( target:GetMaxHealth() )
	illusion:SetMaxHealth( target:GetMaxHealth() )
	illusion:SetHealth( target:GetHealth() )
	
	illusion:SetAverageBaseDamage( target:GetAverageBaseDamage(), 15 )
	illusion:SetPhysicalArmorBaseValue( target:GetPhysicalArmorValue(false) )
	illusion:SetBaseAttackTime( target:GetBaseAttackTime() )
	illusion:SetBaseMoveSpeed( target:GetBaseMoveSpeed() )
	
	illusion:SetOriginalModel( target:GetModelName() )
	illusion:SetModel( target:GetModelName() )
	
	local moveCap = DOTA_UNIT_CAP_MOVE_NONE
	if target:HasMovementCapability() then
		moveCap = DOTA_UNIT_CAP_MOVE_GROUND
		if target:HasFlyMovementCapability() then
			moveCap = DOTA_UNIT_CAP_MOVE_FLY
		end
	end
	illusion:SetMoveCapability( moveCap )
	illusion:SetAttackCapability( target:GetAttackCapability() )
	illusion:SetUnitName( target:GetUnitName() )
	if target:IsRangedAttacker() then
		illusion:SetRangedProjectileName( target:GetRangedProjectileName() )
	end
	
	for _, modifier in ipairs( target:FindAllModifiers() ) do
		if modifier.AllowIllusionDuplicate and modifier:AllowIllusionDuplicate() then
			illusion:AddNewModifier( modifier:GetCaster(), modifier:GetAbility(), modifier:GetName(), { duration = modifier:GetRemainingTime() })
		end
	end
	
	illusion:AddNewModifier( target, self, "modifier_illusion_bonuses", { duration = duration })
	-- Set the unit as an illusion
	-- modifier_illusion controls many illusion properties like +Green damage not adding to the unit damage, not being able to cast spells and the team-only blue particle
	illusion:AddNewModifier(target, self, "modifier_illusion", { outgoing_damage = self:GetSpecialValueFor("outgoing") - 100, incoming_damage = self:GetSpecialValueFor("incoming") - 100 })
	
	for _, wearable in ipairs( target:GetChildren() ) do
		if wearable:GetClassname() == "dota_item_wearable" and wearable:GetModelName() ~= "" then
			local newWearable = SpawnEntityFromTableSynchronous("prop_dynamic", {model=wearable:GetModelName()})
			newWearable:SetParent(illusion, nil)
			newWearable:FollowEntity(illusion, true)
			newWearable:SetRenderColor(100,100,255)
			Timers:CreateTimer(1, function()
				if illusion and not illusion:IsNull() and illusion:IsAlive() then
					return 0.25
				else
					UTIL_Remove( newWearable )
				end
			end)
		end
	end
	
	illusion.hasBeenInitialized = true	
	-- Without MakeIllusion the unit counts as a hero, e.g. if it dies to neutrals it says killed by neutrals, it respawns, etc.
	illusion.isCustomIllusion = true
	return illusion
endboss_genesis_sanctuary = class({})

function boss_genesis_sanctuary:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier( caster, self, "modifier_boss_genesis_sanctuary", {duration = self:GetSpecialValueFor("duration")} )
	caster:EmitSound("Hero_Omniknight.Repel")
end

modifier_boss_genesis_sanctuary = class({})
LinkLuaModifier( "modifier_boss_genesis_sanctuary", "bosses/boss_genesis/boss_genesis_sanctuary", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_genesis_sanctuary:DeclareFunctions()
	return {MODIFIER_PROPERTY_ABSOLUTE_NO_DAMAGE_MAGICAL}
end

function modifier_boss_genesis_sanctuary:GetAbsoluteNoDamageMagical()
	return 1
end

function modifier_boss_genesis_sanctuary:GetEffectName()
	return "particles/units/heroes/hero_omniknight/omniknight_repel_buff.vpcf"
endboss_genesis_strengthen_resolve = class({})

function boss_genesis_strengthen_resolve:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier( caster, self, "modifier_boss_genesis_strengthen_resolve", {duration = self:GetSpecialValueFor("duration")} )
end

modifier_boss_genesis_strengthen_resolve = class({})
LinkLuaModifier( "modifier_boss_genesis_strengthen_resolve", "bosses/boss_genesis/boss_genesis_strengthen_resolve", LUA_MODIFIER_MOTION_NONE )boss_golem_cracked_mass = class({})

function boss_golem_cracked_mass:GetIntrinsicModifierName()
	return "modifier_boss_golem_cracked_mass"
end

modifier_boss_golem_cracked_mass = class({})
LinkLuaModifier( "modifier_boss_golem_cracked_mass", "bosses/boss_golem/boss_golem_cracked_mass", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_golem_cracked_mass:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_golem_cracked_mass:OnTakeDamage(params)
	if params.unit == self:GetParent() and not ( HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_HPLOSS) or HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_REFLECTION) ) and self:GetAbility():IsActivated() and not self:GetParent():PassivesDisabled() then 
		local chance = math.min( self:GetSpecialValueFor("shard_chance") * self:GetParent():GetModelScale(), math.max(1, (params.original_damage / params.unit:GetMaxHealth()) * 100 ) )
		if RollPercentage( chance ) then
			local hp = math.min( self:GetParent():GetMaxHealth() * 0.5, math.max( params.original_damage * self:GetSpecialValueFor("shard_damage_mult"), self:GetSpecialValueFor("shard_min_hp")) )
			local scale = self:GetParent():GetModelScale()
			
			shardling = CreateUnitByName("npc_dota_boss12_shardling", self:GetParent():GetAbsOrigin() + RandomVector(250), false, nil, nil, self:GetParent():GetTeam())
			shardling:SetModelScale( math.max(shardling:GetModelScale() * scale, 0.4 ) )
			shardling:SetAverageBaseDamage( shardling:GetAverageBaseDamage() * math.min(scale * 2, 1), 25 )
			shardling:SetCoreHealth( math.max(1, hp) )
			shardling.hasBeenInitialized = true
			shardling:SetBaseMoveSpeed( math.min( 350, self:GetParent():GetBaseMoveSpeed() / scale ) )
		end
	end
endboss_golem_golem_leap = class({})

function boss_golem_golem_leap:OnAbilityPhaseStart()
	return true
end

function boss_golem_golem_leap:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Ability.TossThrow", caster)
	caster:AddNewModifier( caster, self, "modifier_boss_golem_golem_leap_movement", {})
end



modifier_boss_golem_golem_leap_movement = class({})
LinkLuaModifier("modifier_boss_golem_golem_leap_movement", "bosses/boss_golem/boss_golem_golem_leap", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_golem_golem_leap_movement:OnCreated()
		local parent = self:GetParent()
		self.endPos = self:GetAbility():GetCursorPosition()
		self.distance = CalculateDistance( self.endPos, parent )
		self.direction = CalculateDirection( self.endPos, parent )
		self.speed = self.distance / self:GetSpecialValueFor("leap_duration") * FrameTime()
		self.initHeight = GetGroundHeight(parent:GetAbsOrigin(), parent)
		self.height = self.initHeight
		self.maxHeight = 650
		self:StartMotionController()
		local radius = math.max( 175, math.min( self:GetSpecialValueFor("base_radius"), self:GetSpecialValueFor("base_radius") * parent:GetModelScale() / 1.8 ) )
		ParticleManager:FireWarningParticle( self.endPos, radius )
	end
	
	
	function modifier_boss_golem_golem_leap_movement:OnDestroy()
		local parent = self:GetParent()
		local parentPos = parent:GetAbsOrigin()

		FindClearSpaceForUnit(parent, parentPos, true)
		if parent:IsFrozen() then return end
		local ability = self:GetAbility()
		local damage = math.max( 75, math.min( self:GetSpecialValueFor("base_damage"), self:GetSpecialValueFor("base_damage") * parent:GetModelScale() / 1.8 ) )
		local radius = math.max( 175, math.min( self:GetSpecialValueFor("base_radius"), self:GetSpecialValueFor("base_radius") * parent:GetModelScale() / 1.8 ) )
		ParticleManager:FireParticle("particles/units/heroes/hero_centaur/centaur_warstomp.vpcf", PATTACH_ABSORIGIN, parent, {[1] = Vector(radius, 1, 1)})
		for _, enemy in ipairs( parent:FindEnemyUnitsInRadius( parentPos, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				ability:DealDamage(parent, enemy, damage)
			end
		end
		EmitSoundOn("Ability.TossImpact", parent)
		self:StopMotionController()
		ResolveNPCPositions( self:GetParent():GetAbsOrigin(), 500 ) 
	end
	
	function modifier_boss_golem_golem_leap_movement:DoControlledMotion()
		if self:GetParent():IsNull() then return end
		local parent = self:GetParent()
		self.distanceTraveled =  self.distanceTraveled or 0
		if parent:IsAlive() and self.distanceTraveled < self.distance and not parent:IsFrozen() then
			local newPos = GetGroundPosition(parent:GetAbsOrigin(), parent) + self.direction * self.speed
			newPos.z = self.height + self.maxHeight * math.sin( (self.distanceTraveled/self.distance) * math.pi )
			parent:SetAbsOrigin( newPos )
			
			self.distanceTraveled = self.distanceTraveled + self.speed
		else
			FindClearSpaceForUnit(parent, parent:GetAbsOrigin(), true)
			self:Destroy()
			return nil
		end       
		
	end
end

function modifier_boss_golem_golem_leap_movement:GetEffectName()
	return "particles/units/heroes/hero_tiny/tiny_toss_blur.vpcf"
end

function modifier_boss_golem_golem_leap_movement:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss_golem_golem_leap_movement:DeclareFunctions()
	return {MODIFIER_PROPERTY_OVERRIDE_ANIMATION}
end

function modifier_boss_golem_golem_leap_movement:GetOverrideAnimation()
	return ACT_DOTA_FLAIL
endboss_golem_golem_smash = class({})

function boss_golem_golem_smash:GetCastPoint( )
	local castPoint = math.max( 1, math.min( self.BaseClass.GetCastPoint( self ), self.BaseClass.GetCastPoint( self ) * self:GetCaster():GetModelScale() / 1.8 ) )
	return castPoint
end

function boss_golem_golem_smash:OnAbilityPhaseStart()
	local radius = math.max( 175, math.min( self:GetSpecialValueFor("base_radius"), self:GetSpecialValueFor("base_radius") * self:GetCaster():GetModelScale() / 1.8 ) )
	ParticleManager:FireWarningParticle( self:GetCaster():GetAbsOrigin(), radius )
	return true
end

function boss_golem_golem_smash:OnSpellStart()
	local caster = self:GetCaster()
	
	local damage = math.max( 75, math.min( self:GetSpecialValueFor("base_damage"), self:GetSpecialValueFor("base_damage") * caster:GetModelScale() / 1.8 ) )
	local radius = math.max( 175, math.min( self:GetSpecialValueFor("base_radius"), self:GetSpecialValueFor("base_radius") * caster:GetModelScale() / 1.8 ) )
	ParticleManager:FireParticle("particles/units/heroes/hero_centaur/centaur_warstomp.vpcf", PATTACH_ABSORIGIN, caster, {[1] = Vector(radius, 1, 1)})
	EmitSoundOn("Ability.TossImpact", caster)
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), radius ) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, enemy, damage)
		end
	end
end

boss_golem_golem_toss = class({})

function boss_golem_golem_toss:OnAbilityPhaseStart()
	return true
end

function boss_golem_golem_toss:OnSpellStart()
	local caster = self:GetCaster()
	
	golem = CreateUnitByName("npc_dota_boss12_golem", caster:GetAbsOrigin(), false, nil, nil, caster:GetTeamNumber())
	EmitSoundOn("Ability.TossThrow", golem)
	local hp = caster:GetMaxHealth()
	local golemHP = math.max(10, hp * self:GetSpecialValueFor("max_health_cost") / 100)
	
	local scale = caster:GetModelScale()
	local golemScale = caster:GetModelScale() * 0.6
	
	golem:SetModelScale( math.max(golemScale, self:GetSpecialValueFor("minimum_scale") ) )
	golem:SetBaseMoveSpeed( math.min( 300, golem:GetBaseMoveSpeed() / ( scale / 1.8 ) ) )
	golem:SetAverageBaseDamage( caster:GetAverageBaseDamage() * 0.8, 25 )
	golem.unitIsRoundNecessary = true
	golem:SetCoreHealth( math.max(1, golemHP) )
	if golem:GetModelScale() <= self:GetSpecialValueFor("minimum_scale") then
		golem:FindAbilityByName("boss_golem_golem_toss"):SetActivated(false)
	else
		golem:FindAbilityByName("boss_golem_golem_toss"):SetCooldown()
	end
	
	if caster:GetModelScale() <= self:GetSpecialValueFor("minimum_scale") then
		caster:FindAbilityByName("boss_golem_golem_toss"):SetActivated(false)
	end
	golem:FindAbilityByName("boss_golem_split"):SetActivated(false)
	golem:FindAbilityByName("boss_golem_cracked_mass"):SetActivated(false)
	
	golem.unitIsRoundNecessary = true
	golem.hasBeenInitialized = true
	
	caster:SetModelScale( math.max( scale * 0.9, self:GetSpecialValueFor("minimum_scale") ) )
	caster:SetBaseMaxHealth( math.max(1, hp - golemHP) )
	caster:SetMaxHealth( math.max(1, hp - golemHP) )
	caster:SetBaseMoveSpeed( caster:GetBaseMoveSpeed() / scale )
	
	golem:AddNewModifier( caster, self, "modifier_boss_golem_golem_toss_movement", {})
end



modifier_boss_golem_golem_toss_movement = class({})
LinkLuaModifier("modifier_boss_golem_golem_toss_movement", "bosses/boss_golem/boss_golem_golem_toss", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_golem_golem_toss_movement:OnCreated()
		local parent = self:GetParent()
		self.endPos = self:GetAbility():GetCursorPosition()
		self.distance = CalculateDistance( self.endPos, parent )
		self.direction = CalculateDirection( self.endPos, parent )
		self.speed = self.distance / self:GetSpecialValueFor("toss_duration") * FrameTime()
		self.initHeight = GetGroundHeight(parent:GetAbsOrigin(), parent)
		self.height = self.initHeight
		self.maxHeight = 650
		self:StartMotionController()
		local radius = math.max( 175, math.min( self:GetSpecialValueFor("base_radius"), self:GetSpecialValueFor("base_radius") * parent:GetModelScale() / 1.8 ) )
		ParticleManager:FireWarningParticle( self.endPos, radius )
	end
	
	
	function modifier_boss_golem_golem_toss_movement:OnDestroy()
		local parent = self:GetParent()
		local parentPos = parent:GetAbsOrigin()

		FindClearSpaceForUnit(parent, parentPos, true)
		if parent:IsFrozen() then return end
		local ability = self:GetAbility()
		local damage = math.max( 75, math.min( self:GetSpecialValueFor("base_damage"), self:GetSpecialValueFor("base_damage") * parent:GetModelScale() / 1.8 ) )
		local radius = math.max( 175, math.min( self:GetSpecialValueFor("base_radius"), self:GetSpecialValueFor("base_radius") * parent:GetModelScale() / 1.8 ) )
		ParticleManager:FireParticle("particles/units/heroes/hero_centaur/centaur_warstomp.vpcf", PATTACH_ABSORIGIN, parent, {[1] = Vector(radius, 1, 1)})
		for _, enemy in ipairs( parent:FindEnemyUnitsInRadius( parentPos, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				ability:DealDamage(parent, enemy, damage)
			end
		end
		EmitSoundOn("Ability.TossImpact", parent)
		self:StopMotionController()
		ResolveNPCPositions( self:GetParent():GetAbsOrigin(), 500 ) 
	end
	
	function modifier_boss_golem_golem_toss_movement:DoControlledMotion()
		if self:GetParent():IsNull() then return end
		local parent = self:GetParent()
		self.distanceTraveled =  self.distanceTraveled or 0
		
		if parent:IsAlive() and self.distanceTraveled < self.distance and not parent:IsFrozen() then
			local newPos = GetGroundPosition(parent:GetAbsOrigin(), parent) + self.direction * self.speed
			newPos.z = self.height + self.maxHeight * math.sin( (self.distanceTraveled/self.distance) * math.pi )
			parent:SetAbsOrigin( newPos )
			
			self.distanceTraveled = self.distanceTraveled + self.speed
		else
			FindClearSpaceForUnit(parent, parent:GetAbsOrigin(), true)
			self:Destroy()
			return nil
		end       
		
	end
end

function modifier_boss_golem_golem_toss_movement:GetEffectName()
	return "particles/units/heroes/hero_tiny/tiny_toss_blur.vpcf"
end

function modifier_boss_golem_golem_toss_movement:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss_golem_golem_toss_movement:DeclareFunctions()
	return {MODIFIER_PROPERTY_OVERRIDE_ANIMATION}
end

function modifier_boss_golem_golem_toss_movement:GetOverrideAnimation()
	return ACT_DOTA_FLAIL
endboss_golem_split = class({})

function boss_golem_split:GetIntrinsicModifierName()
	return "modifier_boss_golem_split"
end

modifier_boss_golem_split = class({})
LinkLuaModifier( "modifier_boss_golem_split", "bosses/boss_golem/boss_golem_split", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_golem_split:OnCreated()
	if IsServer() then
		self:StartIntervalThink(0.25)
	end
end

function modifier_boss_golem_split:OnIntervalThink()
	self:SetStackCount( self:GetParent():GetModelScale() * 100 )
end

function modifier_boss_golem_split:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH,
			MODIFIER_PROPERTY_ATTACK_RANGE_BASE_OVERRIDE}
end

function modifier_boss_golem_split:OnDeath(params)
	if params.unit == self:GetParent() and self:GetParent():GetModelScale() > self:GetSpecialValueFor("minimum_scale") and self:GetAbility():IsActivated() then
		local divider = self:GetSpecialValueFor("golem_hp") / 100
		local hp = self:GetParent():GetMaxHealth() * divider
		local scale = math.max( self:GetParent():GetModelScale() * 0.75, self:GetSpecialValueFor("minimum_scale") - 0.01 )
		for i = 1, self:GetSpecialValueFor("split_count") do
			golem = CreateUnitByName("npc_dota_boss12_golem", self:GetParent():GetAbsOrigin() + RandomVector(250), true, nil, nil, self:GetParent():GetTeamNumber())
			
			golem:SetModelScale( scale )
			golem:SetBaseMoveSpeed( math.min( 300, golem:GetBaseMoveSpeed() / ( scale / 1.8 )) )
			golem:SetAverageBaseDamage( golem:GetAverageBaseDamage() * 0.8, 25 )
			
			golem:SetCoreHealth( math.max(1, hp) )
			
			golem.unitIsRoundNecessary = true
			golem.hasBeenInitialized = true
		end
		ResolveNPCPositions( self:GetParent():GetAbsOrigin(), 500 ) 
	end
end

function modifier_boss_golem_split:GetModifierAttackRangeOverride()
	return 150 * self:GetStackCount() / 100
end

function modifier_boss_golem_split:IsHidden()
	return true
endgreen_dragon_bug_explode = class({})
LinkLuaModifier( "modifier_green_dragon_bug_explode_handle", "bosses/boss_green_dragon/green_dragon_bug_explode", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_toxic_pool", "bosses/boss_green_dragon/green_dragon_toxic_pool", LUA_MODIFIER_MOTION_NONE )

function green_dragon_bug_explode:GetIntrinsicModifierName()
	return "modifier_green_dragon_bug_explode_handle"
end

modifier_green_dragon_bug_explode_handle = class({})
function modifier_green_dragon_bug_explode_handle:OnCreated(table)
	if IsServer() then
		self:StartIntervalThink(0.1)
	end
end

function modifier_green_dragon_bug_explode_handle:OnIntervalThink()
	local caster = self:GetCaster()
	local radius = self:GetSpecialValueFor("radius")
	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), 150)
	if not caster:IsAlive() then return end
	if #enemies > 0 then 
		self:StartIntervalThink(-1)
		self:GetAbility():Stun(caster, 1.5)
		ParticleManager:FireParticle("particles/bosses/boss_green_dragon/boss_green_dragon_explosion_prep.vpcf", PATTACH_POINT_FOLLOW, caster)
		Timers:CreateTimer(self:GetAbility():GetCastPoint(), function()
			if not caster:IsAlive() then return end
			EmitSoundOn("Hero_Broodmother.SpawnSpiderlings", caster)
			local nfx = ParticleManager:CreateParticle("particles/bosses/boss_green_dragon/boss_green_dragon_rot_explosion.vpcf", PATTACH_POINT_FOLLOW, caster)
						ParticleManager:SetParticleControlEnt(nfx, 0, caster, PATTACH_POINT_FOLLOW, "attach_hitloc", caster:GetAbsOrigin(), true)
						ParticleManager:SetParticleControl(nfx, 1, Vector(radius,radius,radius))
						ParticleManager:ReleaseParticleIndex(nfx)

			enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), radius)
			for _,enemy in pairs(enemies) do
				if not enemy:IsMagicImmune() and not enemy:IsInvulnerable() and not enemy:TriggerSpellAbsorb(self) then
					enemy:ApplyKnockBack(caster:GetAbsOrigin(), 0.1, 0.1, 100, 350, caster, self:GetAbility())
					self:GetAbility():DealDamage(caster, enemy, self:GetSpecialValueFor("damage"), {}, 0)
				end
			end
			local ability = caster:GetOwner():FindAbilityByName("green_dragon_toxic_pool")

			ability:CreateToxicPool( caster:GetAbsOrigin() )
			caster:ForceKill(false)
			self:Destroy()
		end)
	end
end

function modifier_green_dragon_bug_explode_handle:IsHidden()
	return true
endgreen_dragon_etheral_armor = class({})
LinkLuaModifier( "modifier_green_dragon_etheral_armor_handle", "bosses/boss_green_dragon/green_dragon_etheral_armor", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_etheral_armor", "bosses/boss_green_dragon/green_dragon_etheral_armor", LUA_MODIFIER_MOTION_NONE )

function green_dragon_etheral_armor:GetIntrinsicModifierName()
	return "modifier_green_dragon_etheral_armor_handle"
end

function green_dragon_etheral_armor:ShouldUseResources()
	return true
end

modifier_green_dragon_etheral_armor_handle = class({})
function modifier_green_dragon_etheral_armor_handle:OnCreated(table)
	if IsServer() then
		self:StartIntervalThink(1)
	end
end

function modifier_green_dragon_etheral_armor_handle:OnIntervalThink()
	local caster = self:GetCaster()
	if not caster:HasModifier("modifier_green_dragon_etheral_armor") 
	and not caster:HasModifier("modifier_green_dragon_toxic_pool_handle")
	and self:GetAbility():IsCooldownReady()
	and caster:GetMana() <= 1 then
		caster:AddNewModifier(caster, self:GetAbility(), "modifier_green_dragon_etheral_armor", {Duration = self:GetSpecialValueFor("duration")})
		self:GetAbility():SetCooldown()
	end
end

function modifier_green_dragon_etheral_armor_handle:IsHidden()
	return true
end

modifier_green_dragon_etheral_armor = class({})
function modifier_green_dragon_etheral_armor:OnCreated(table)
	if IsServer() then
		local caster = self:GetCaster()
		local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_skeletonking/wraith_king_ghosts_ambient.vpcf", PATTACH_POINT_FOLLOW, caster)
					ParticleManager:SetParticleControlEnt(nfx, 0, caster, PATTACH_POINT_FOLLOW, "attach_hitloc", caster:GetAbsOrigin(), true)
					ParticleManager:SetParticleControlEnt(nfx, 2, caster, PATTACH_POINT_FOLLOW, "attach_hitloc", caster:GetAbsOrigin(), true)
		self:AttachEffect(nfx)
		self:StartIntervalThink(0.1)
	end
end

function modifier_green_dragon_etheral_armor:OnIntervalThink()
	local caster = self:GetCaster()
	caster:RestoreMana(caster:GetMaxMana()*0.1/self:GetSpecialValueFor("duration"))
	if caster:IsAlive() then
		if RollPercentage(25) then
			ProjectileManager:ProjectileDodge(caster)
		end

		if RollPercentage(10) then
			local pos = RoundManager:PickRandomSpawn()
			local bug = CreateUnitByName("npc_dota_green_dragon_bug", pos, true, caster, caster, caster:GetTeam())
			bug:FindAbilityByName("green_dragon_bug_explode"):SetLevel( self:GetAbility():GetLevel() )
			
		end
	end
end

function modifier_green_dragon_etheral_armor:CheckState()
    local state = { [MODIFIER_STATE_NO_UNIT_COLLISION] = true,
                    [MODIFIER_STATE_INVULNERABLE] = true,
                	[MODIFIER_STATE_STUNNED] = true,
                	[MODIFIER_STATE_SILENCED] = true}
    return state
end

function modifier_green_dragon_etheral_armor:GetEffectName()
    return "particles/units/heroes/hero_pugna/pugna_decrepify.vpcf"
end

function modifier_green_dragon_etheral_armor:GetStatusEffectName()
    return "particles/status_fx/status_effect_wraithking_ghosts.vpcf"
end

function modifier_green_dragon_etheral_armor:StatusEffectPriority()
    return 20
end

function modifier_green_dragon_etheral_armor:DeclareFunctions()
	return {MODIFIER_PROPERTY_INVISIBILITY_LEVEL}
end

function modifier_green_dragon_etheral_armor:GetModifierInvisibilityLevel()
	return 1
end

function modifier_green_dragon_etheral_armor:IsDebuff()
	return false
end

function modifier_green_dragon_etheral_armor:IsPurgable()
	return false
end

function modifier_green_dragon_etheral_armor:IsPurgeException()
	return false
endgreen_dragon_rot = class({})
LinkLuaModifier( "modifier_green_dragon_rot_handle", "bosses/boss_green_dragon/green_dragon_rot", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_rot", "bosses/boss_green_dragon/green_dragon_rot", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_toxic_pool", "bosses/boss_green_dragon/green_dragon_toxic_pool", LUA_MODIFIER_MOTION_NONE )

function green_dragon_rot:GetIntrinsicModifierName()
	return "modifier_green_dragon_rot_handle"
end

modifier_green_dragon_rot_handle = class({})
function modifier_green_dragon_rot_handle:OnCreated(table)
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_green_dragon_rot_handle:IsHidden()
	return true
end

function modifier_green_dragon_rot_handle:CheckState()
	local state = { [MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY] = true}
	return state
end

function modifier_green_dragon_rot_handle:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_green_dragon_rot_handle:OnAttackLanded(params)
	local caster = self:GetCaster()
	if params.attacker ~= caster or not self:GetAbility():IsCooldownReady() or caster:PassivesDisabled() then return end
	local enemy = params.target
	if enemy:IsHero() and (not enemy:IsMagicImmune()) and (not enemy:IsInvulnerable()) and (not enemy:HasModifier("modifier_green_dragon_rot")) then
		if not enemy:TriggerSpellAbsorb(self) then
			enemy:AddNewModifier(caster, self:GetAbility(), "modifier_green_dragon_rot", {Duration = self.duration})
		end
		caster:SpendMana(33)
		self:GetAbility():StartCooldown(self.duration+math.random(1,3))
	end
end

modifier_green_dragon_rot = class({})
function modifier_green_dragon_rot:OnCreated(table)
	self.duration = self:GetRemainingTime()
	self.lifetime = 0
	self.tick = 0
	self.tickProc = self:GetSpecialValueFor("tick_rate")
	if IsServer() then
		self:StartIntervalThink(0.1)
	end
end

function modifier_green_dragon_rot:OnIntervalThink()
	self.tick = self.tick + 0.1
	self.lifetime = self.lifetime + 0.1
	if self.tick >= self.tickProc then
		self.tick = 0
		self:Poison()
	end
	if self:GetRemainingTime() <= self.duration - 0.15 then
		self:OnExpire()
	end
end

function modifier_green_dragon_rot:Poison()
	local caster = self:GetCaster()
	local parent = self:GetParent()
	if not caster or caster:IsNull() then return end
	EmitSoundOn("Hero_Venomancer.Plague_Ward", parent)
	local radius = self:GetSpecialValueFor("radius")
	local nfx = ParticleManager:CreateParticle("particles/bosses/boss_green_dragon/boss_green_dragon_rot_explosion.vpcf", PATTACH_POINT_FOLLOW, parent)
				ParticleManager:SetParticleControlEnt(nfx, 0, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin(), true)
				ParticleManager:SetParticleControl(nfx, 1, Vector(radius,radius,radius))
				ParticleManager:ReleaseParticleIndex(nfx)

	local enemies = caster:FindEnemyUnitsInRadius(self:GetParent():GetAbsOrigin(), self:GetSpecialValueFor("radius"))
	for _,enemy in pairs(enemies) do
		self:GetAbility():DealDamage(caster, enemy, self:GetSpecialValueFor("damage"), {}, OVERHEAD_ALERT_BONUS_POISON_DAMAGE)
	end
end

function modifier_green_dragon_rot:OnExpire()
    if IsServer() then
    	local caster = self:GetCaster()
    	local parent = self:GetParent()
    	local ability = caster:FindAbilityByName("green_dragon_toxic_pool")
    	ability:CreateToxicPool( parent:GetAbsOrigin() )
		self:Poison()
		self:Destroy()
    end
end

function modifier_green_dragon_rot:IsDebuff()
	return true
end

function modifier_green_dragon_rot:IsPurgable()
	return true
end

function modifier_green_dragon_rot:IsPurgeException()
	return true
endgreen_dragon_toxic_pool = class({})
LinkLuaModifier( "modifier_green_dragon_toxic_pool", "bosses/boss_green_dragon/green_dragon_toxic_pool", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_toxic_pool_handle", "bosses/boss_green_dragon/green_dragon_toxic_pool", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_toxic_pool_debuff", "bosses/boss_green_dragon/green_dragon_toxic_pool", LUA_MODIFIER_MOTION_NONE )

function green_dragon_toxic_pool:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCaster():GetAbsOrigin() + CalculateDirection( self:GetCursorPosition(), self:GetCaster():GetAbsOrigin() ) * self:GetTrueCastRange(), self:GetSpecialValueFor("width"))
	return true
end

function green_dragon_toxic_pool:GetChannelTime()
	return self:GetSpecialValueFor("channel_duration")
end

function green_dragon_toxic_pool:GetChannelAnimation()
	return ACT_DOTA_CAST_ABILITY_1
end

function green_dragon_toxic_pool:OnChannelFinish(bInterrupted)
	if bInterrupted then
		self:RefundManaCost()
		self:EndCooldown()
	end
end

function green_dragon_toxic_pool:OnSpellStart()	
	self:GetCaster():AddNewModifier(self:GetCaster(), self, "modifier_green_dragon_toxic_pool_handle", {Duration = self:GetSpecialValueFor("channel_duration")})
end

function green_dragon_toxic_pool:OnProjectileHit( hTarget, vLocation )
	if hTarget ~= nil and ( not hTarget:IsMagicImmune() ) and ( not hTarget:IsInvulnerable() ) then
		local caster = self:GetCaster()
		if hTarget:TriggerSpellAbsorb(self) then return true end
		hTarget:AddNewModifier(self:GetCaster(), self, "modifier_green_dragon_toxic_pool_debuff", {Duration = self:GetSpecialValueFor("debuff_duration")})
		EmitSoundOn( "Hero_Venomancer.VenomousGaleImpact", hTarget )
		
		local vDirection = CalculateDirection(vLocation, self:GetCaster():GetOrigin())
		
		local nFXIndex = ParticleManager:CreateParticle( "particles/units/heroes/hero_venomancer/venomancer_venomous_gale_impact.vpcf", PATTACH_ABSORIGIN_FOLLOW, hTarget )
		ParticleManager:SetParticleControlForward( nFXIndex, 1, vDirection )
		ParticleManager:ReleaseParticleIndex( nFXIndex )
	else
		if RollPercentage(25) then
			EmitSoundOnLocationWithCaster(vLocation, "soundName", hCaster)
			self:CreateToxicPool(vLocation)
		end
	end
	return false
end

function green_dragon_toxic_pool:CreateToxicPool(position)
	ParticleManager:FireWarningParticle( position, self:GetSpecialValueFor("radius") )
	Timers:CreateTimer( 0.5, function()
		if not self or self:IsNull() then return end
		if not self:GetCaster() or self:GetCaster():IsNull() then return end
		CreateModifierThinker(self:GetCaster(), self, "modifier_green_dragon_toxic_pool", {Duration = self:GetSpecialValueFor("pool_duration")}, position, self:GetCaster():GetTeam(), false)
	end)
end

modifier_green_dragon_toxic_pool_handle = class({})
function modifier_green_dragon_toxic_pool_handle:OnCreated(table)
	if IsServer() then self:StartIntervalThink(0.1) end
end

function modifier_green_dragon_toxic_pool_handle:OnIntervalThink()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_Viper.Nethertoxin.Cast", caster)
	caster:StartGesture(ACT_DOTA_CAST_ABILITY_1)
	local fDir = caster:GetForwardVector()
	local rndAng = math.rad( RandomInt( -self:GetTalentSpecialValueFor("spread"), self:GetTalentSpecialValueFor("spread") ) )
	local dirX = fDir.x * math.cos(rndAng) - fDir.y * math.sin(rndAng); 
	local dirY = fDir.x * math.sin(rndAng) + fDir.y * math.cos(rndAng);
	local direction = Vector( dirX, dirY, 0 )

	self:GetAbility():FireLinearProjectile("particles/units/heroes/hero_venomancer/venomancer_venomous_gale.vpcf", direction*self:GetSpecialValueFor("speed"), math.random(250, self:GetAbility():GetTrueCastRange()), self:GetTalentSpecialValueFor("width"), {}, false, true, 300)
end

modifier_green_dragon_toxic_pool = class({})
function modifier_green_dragon_toxic_pool:OnCreated(table)
	if IsServer() then
		local caster = self:GetCaster()
		local parent = self:GetParent()
		local radius = self:GetSpecialValueFor("radius")

		EmitSoundOn("Hero_Viper.NetherToxin", parent)
		local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_viper/viper_nethertoxin.vpcf", PATTACH_POINT, caster)
					ParticleManager:SetParticleControl(nfx, 0, parent:GetAbsOrigin())
					ParticleManager:SetParticleControl(nfx, 1, Vector(radius,radius,radius))
					ParticleManager:SetParticleControl(nfx, 3, parent:GetAbsOrigin())
		self:AttachEffect(nfx)
	end
end

function modifier_green_dragon_toxic_pool:OnRemoved()
    if IsServer() then
    	StopSoundOn("Hero_Viper.NetherToxin", self:GetParent())
    end
end

function modifier_green_dragon_toxic_pool:IsAura()
    return true
end

function modifier_green_dragon_toxic_pool:GetAuraDuration()
    return self:GetSpecialValueFor("debuff_duration")
end

function modifier_green_dragon_toxic_pool:GetAuraRadius()
    return self:GetSpecialValueFor("radius")
end

function modifier_green_dragon_toxic_pool:GetAuraSearchFlags()
    return DOTA_UNIT_TARGET_FLAG_NONE
end

function modifier_green_dragon_toxic_pool:GetAuraSearchTeam()
    return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_green_dragon_toxic_pool:GetAuraSearchType()
    return DOTA_UNIT_TARGET_ALL
end

function modifier_green_dragon_toxic_pool:GetModifierAura()
    return "modifier_green_dragon_toxic_pool_debuff"
end

modifier_green_dragon_toxic_pool_debuff = class({})

function modifier_green_dragon_toxic_pool_debuff:OnCreated()
	if IsServer() then
		self:StartIntervalThink(self:GetSpecialValueFor("tick_rate"))
	end
end

function modifier_green_dragon_toxic_pool_debuff:OnIntervalThink()
	self:GetAbility():DealDamage(self:GetCaster(), self:GetParent(), self:GetSpecialValueFor("damage")*self:GetSpecialValueFor("tick_rate"), {}, OVERHEAD_ALERT_BONUS_POISON_DAMAGE)
end

function modifier_green_dragon_toxic_pool_debuff:GetEffectName()
	return "particles/units/heroes/hero_venomancer/venomancer_gale_poison_debuff.vpcf"
end

function modifier_green_dragon_toxic_pool_debuff:IsPurgable()
	return true
end

function modifier_green_dragon_toxic_pool_debuff:IsPurgeException()
	return true
endgreen_dragon_volatile_rot = class({})
LinkLuaModifier( "modifier_green_dragon_volatile_rot_handle", "bosses/boss_green_dragon/green_dragon_volatile_rot", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_volatile_rot", "bosses/boss_green_dragon/green_dragon_volatile_rot", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_green_dragon_toxic_pool", "bosses/boss_green_dragon/green_dragon_toxic_pool", LUA_MODIFIER_MOTION_NONE )

ROT_RADIUS = 100
ROT_DISTANCE = 900
ROT_SPEED = 600

function green_dragon_volatile_rot:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local startPos = caster:GetAbsOrigin()
	local endPos = startPos + CalculateDirection( self:GetCursorPosition(), caster ) * ROT_DISTANCE
	ParticleManager:FireLinearWarningParticle(startPos, endPos, ROT_RADIUS * 2)
	return true
end

function green_dragon_volatile_rot:OnSpellStart()
	local caster = self:GetCaster()
	local direction = CalculateDirection( self:GetCursorPosition(), caster )
	self:FireLinearProjectile("particles/econ/items/venomancer/veno_ti8_immortal_head/veno_ti8_immortal_gale.vpcf", ROT_SPEED * direction, ROT_DISTANCE, ROT_RADIUS)
end

function green_dragon_volatile_rot:OnProjectileHit(target, position)
	local caster = self:GetCaster()
	if target and not target:TriggerSpellAbsorb(self) then
		target:AddNewModifier(caster, self, "modifier_green_dragon_volatile_rot", {Duration = self:GetSpecialValueFor("duration")})
	end
end

modifier_green_dragon_volatile_rot = class({})

function modifier_green_dragon_volatile_rot:OnCreated()
	if IsServer() then
		self:StartIntervalThink( self:GetRemainingTime() - 0.05 )
	end
end

function modifier_green_dragon_volatile_rot:OnIntervalThink()
    if IsServer() then
    	local caster = self:GetCaster()
    	local parent = self:GetParent()
    	local ability = caster:FindAbilityByName("green_dragon_toxic_pool")

    	EmitSoundOn("Hero_Venomancer.PoisonNova", parent)
		for i=1,2 do
			local pos = parent:GetAbsOrigin() + ActualRandomVector(500, 250)
			ability:CreateToxicPool(pos)
		end
    	
    	local radius = self:GetSpecialValueFor("radius")
    	local enemies = caster:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), radius)
    	for _,enemy in pairs(enemies) do
			local nfx = ParticleManager:CreateParticle("particles/bosses/boss_green_dragon/boss_green_dragon_volatile_rot.vpcf", PATTACH_POINT_FOLLOW, enemy)
						ParticleManager:SetParticleControlEnt(nfx, 0, enemy, PATTACH_POINT_FOLLOW, "attach_hitloc", enemy:GetAbsOrigin(), true)
						ParticleManager:SetParticleControl(nfx, 1, enemy:GetAbsOrigin())
						ParticleManager:ReleaseParticleIndex(nfx)

			local distance = CalculateDistance(enemy, parent)
    		self:GetAbility():DealDamage(caster, enemy, self:GetSpecialValueFor("damage") * ( (500 - distance)/500 ), {damage_type = DAMAGE_TYPE_MAGICAL}, OVERHEAD_ALERT_BONUS_POISON_DAMAGE)
    	end
    end
end

function modifier_green_dragon_volatile_rot:IsDebuff()
	return true
end

function modifier_green_dragon_volatile_rot:IsPurgable()
	return true
end

function modifier_green_dragon_volatile_rot:IsPurgeException()
	return true
end

function modifier_green_dragon_volatile_rot:GetEffectName()
	return "particles/econ/items/viper/viper_ti7_immortal/viper_poison_crimson_debuff_ti7.vpcf"
endboss_greymane_battle_cry = class({})


function boss_greymane_battle_cry:OnSpellStart()
	local caster = self:GetCaster()
	
	for _, ally in ipairs( caster:FindFriendlyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do	
		ally:AddNewModifier( caster, self, "modifier_boss_greymane_battle_cry", {})
	end
	
	ParticleManager:FireParticle("particles/units/heroes/hero_lycan/lycan_howl_cast.vpcf", PATTACH_POINT_FOLLOW, caster)
	caster:EmitSound("Hero_Lycan.Howl")
end

modifier_boss_greymane_battle_cry = class({})
LinkLuaModifier( "modifier_boss_greymane_battle_cry", "bosses/boss_greymane/boss_greymane_battle_cry", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_greymane_battle_cry:OnCreated()
	self.bonus_damage = self:GetSpecialValueFor("bonus_damage")
	self.dispel_pct = self:GetSpecialValueFor("dispel_pct")
	if IsServer() then
		self.hPct = self:GetParent():GetHealthPercent()
		self:SetStackCount(1)
	end
end

function modifier_boss_greymane_battle_cry:OnRefresh()
	self.bonus_damage = self:GetSpecialValueFor("bonus_damage")
	self.dispel_pct = self:GetSpecialValueFor("dispel_pct")
	if IsServer() then
		self.hPct = self:GetParent():GetHealthPercent()
		self:IncrementStackCount()
	end
end

function modifier_boss_greymane_battle_cry:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE, MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE}
end

function modifier_boss_greymane_battle_cry:OnTakeDamage(params)
	if params.unit == self:GetParent() then
		if self:GetParent():GetHealthPercent() <= self.hPct - self.dispel_pct then
			self:Destroy()
		end
	end
end

function modifier_boss_greymane_battle_cry:GetModifierBaseDamageOutgoing_Percentage()
	return self.bonus_damage * self:GetStackCount()
end

function modifier_boss_greymane_battle_cry:GetEffectName()
	return "particles/units/heroes/hero_lycan/lycan_howl_buff.vpcf"
endboss_greymane_call_of_the_alpha = class({})

function boss_greymane_call_of_the_alpha:GetIntrinsicModifierName()
	return "modifier_boss_greymane_call_of_the_alpha"
end

modifier_boss_greymane_call_of_the_alpha = class({})
LinkLuaModifier("modifier_boss_greymane_call_of_the_alpha", "bosses/boss_greymane/boss_greymane_call_of_the_alpha", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_greymane_call_of_the_alpha:OnCreated()
		self.wolf = self:GetSpecialValueFor("wolf_interval")
		self.alpha = self:GetSpecialValueFor("alpha_interval")
		
		self.wolfCounter = self.wolf
		self.alphaCounter = self.alpha
		self:StartIntervalThink(1)
		self:SetDuration( math.min(self.wolfCounter, self.alphaCounter), true )
	end

	function modifier_boss_greymane_call_of_the_alpha:OnIntervalThink()
		self.wolfCounter = self.wolfCounter - 1
		self.alphaCounter = self.alphaCounter - 1
		local spawn = false
		if self.wolfCounter <= 0 then
			local wolf = CreateUnitByName("npc_dota_boss_wolf", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
			wolf:SetCoreHealth(750)
			self.wolfCounter = self.wolf
			spawn = true
		end
		if self.alphaCounter <= 0 then
			local alpha = CreateUnitByName("npc_dota_boss_alpha_wolf", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
			alpha:SetCoreHealth(1000)
			self.alphaCounter = self.alpha
			spawn = true
		end
		if spawn then
			self:SetDuration( math.min(self.wolfCounter, self.alphaCounter), true )
		end
	end
end

function modifier_boss_greymane_call_of_the_alpha:DestroyOnExpire()
	return false
endboss_greymane_frenzied_blows = class({})

function boss_greymane_frenzied_blows:OnAbilityPhaseStart()
	local origPos = self:GetCaster():GetAbsOrigin()
	ParticleManager:FireLinearWarningParticle( origPos, origPos + CalculateDirection( self:GetCursorPosition(), origPos ) * self:GetTrueCastRange(), self:GetSpecialValueFor("width") )
	return true
end

function boss_greymane_frenzied_blows:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier( caster, self, "modifier_boss_greymane_frenzied_blows", {duration = math.max(GridNav:FindPathLength(caster:GetAbsOrigin(), self:GetCursorPosition() ), self:GetTrueCastRange() ) / self:GetSpecialValueFor("speed") })
end

modifier_boss_greymane_frenzied_blows = class({})
LinkLuaModifier( "modifier_boss_greymane_frenzied_blows", "bosses/boss_greymane/boss_greymane_frenzied_blows", LUA_MODIFIER_MOTION_NONE )


function modifier_boss_greymane_frenzied_blows:OnCreated()
	local parent = self:GetParent()
	self.speed = self:GetSpecialValueFor("speed")
	if IsServer() then
		self.width = self:GetSpecialValueFor("width")
		local origPos = self:GetCaster():GetAbsOrigin()
		self.endPos = origPos + CalculateDirection( self:GetAbility():GetCursorPosition(), origPos ) * self:GetAbility():GetTrueCastRange()
		parent:MoveToPosition(self.endPos)
		self:StartIntervalThink( self:GetSpecialValueFor("attack_interval") )
	end
end

if IsServer() then	
	function modifier_boss_greymane_frenzied_blows:OnIntervalThink()
		local caster = self:GetCaster()
		local direction = caster:GetForwardVector()
		local attackFX = ParticleManager:CreateParticle("particles/bosses/boss_greymane/boss_greymane_frenzied_blows.vpcf", PATTACH_POINT_FOLLOW, caster)
		ParticleManager:SetParticleControlForward(attackFX, 0, direction)
		ParticleManager:SetParticleControlForward(attackFX, 1, direction)
		ParticleManager:SetParticleControlForward(attackFX, 3, direction)
		ParticleManager:ReleaseParticleIndex( attackFX )
		caster:StartGestureWithPlaybackRate( ACT_DOTA_ATTACK, 6 )
		
		local startPos = caster:GetAbsOrigin()
		caster:EmitSound("Hero_Pangolier.Swashbuckle")
		for _, enemy in ipairs( caster:FindEnemyUnitsInLine( startPos, startPos + direction * caster:GetAttackRange(), self.width ) ) do
			caster:PerformGenericAttack(enemy, true)
		end
	end
end

function modifier_boss_greymane_frenzied_blows:CheckState()
	return {[MODIFIER_STATE_COMMAND_RESTRICTED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss_greymane_frenzied_blows:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN}
end

function modifier_boss_greymane_frenzied_blows:GetModifierMoveSpeed_AbsoluteMin()
	return self.speed
end

function modifier_boss_greymane_frenzied_blows:IsHidden()
	return true
endboss_greymane_furious_swipe = class({})

function boss_greymane_furious_swipe:OnAbilityPhaseStart()
	ParticleManager:FireLinearWarningParticle(	self:GetCaster():GetAbsOrigin(), 
												self:GetCaster():GetAbsOrigin() + CalculateDirection( self:GetCursorPosition(), self:GetCaster() ) * self:GetCaster():GetAttackRange() * 2,
												self:GetSpecialValueFor("cone_angle") * 2)
	return true
end

function boss_greymane_furious_swipe:OnSpellStart()
	local caster = self:GetCaster()
	local direction = CalculateDirection( self:GetCursorPosition(), caster )
	
	local duration = self:GetSpecialValueFor("duration")
	
	caster:EmitSound("Hero_Riki.Backstab")
	for _, enemy in ipairs( caster:FindEnemyUnitsInCone(direction, caster:GetAbsOrigin(), self:GetSpecialValueFor("cone_angle"), self:GetCaster():GetAttackRange() * 2) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			ParticleManager:FireParticle("particles/units/heroes/hero_riki/riki_backstab.vpcf", PATTACH_POINT_FOLLOW, enemy)
			caster:PerformGenericAttack( enemy, true )
			enemy:AddNewModifier( caster, self, "modifier_boss_greymane_furious_swipe", {duration = duration})
		end
	end
end

modifier_boss_greymane_furious_swipe = class({})
LinkLuaModifier("modifier_boss_greymane_furious_swipe", "bosses/boss_greymane/boss_greymane_furious_swipe", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_greymane_furious_swipe:OnCreated()
	self.as = self:GetSpecialValueFor("as_slow")
	self.ms = self:GetSpecialValueFor("ms_slow")
	self.bleed = self:GetSpecialValueFor("bleed")
	if self.bleed > 0 then
		self:StartIntervalThink(1)
	end
end

function modifier_boss_greymane_furious_swipe:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.bleed, {damage_type = DAMAGE_TYPE_PHYSICAL} )
end

function modifier_boss_greymane_furious_swipe:DeclareFunctions()
	return { MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_greymane_furious_swipe:GetModifierMoveSpeedBonus_Percentage()
	return self.ms
end

function modifier_boss_greymane_furious_swipe:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_boss_greymane_furious_swipe:GetAttributes()
	return MODIFIER_ATTRIBUTE_MULTIPLE
endboss_greymane_leaders_inspiration = class({})

function boss_greymane_leaders_inspiration:GetIntrinsicModifierName()
	return "modifier_boss_greymane_leaders_inspiration"
end

modifier_boss_greymane_leaders_inspiration = class({})
LinkLuaModifier( "modifier_boss_greymane_leaders_inspiration", "bosses/boss_greymane/boss_greymane_leaders_inspiration", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_greymane_leaders_inspiration:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_greymane_leaders_inspiration:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_greymane_leaders_inspiration:IsAura()
	return not self:GetCaster():PassivesDisabled()
end

function modifier_boss_greymane_leaders_inspiration:GetModifierAura()
	return "modifier_boss_greymane_leaders_inspiration_buff"
end

function modifier_boss_greymane_leaders_inspiration:GetAuraRadius()
	return self.radius
end

function modifier_boss_greymane_leaders_inspiration:GetAuraDuration()
	return 0.5
end

function modifier_boss_greymane_leaders_inspiration:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_FRIENDLY
end

function modifier_boss_greymane_leaders_inspiration:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_greymane_leaders_inspiration:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

function modifier_boss_greymane_leaders_inspiration:IsHidden()
	return true
end

modifier_boss_greymane_leaders_inspiration_buff = class({})
LinkLuaModifier( "modifier_boss_greymane_leaders_inspiration_buff", "bosses/boss_greymane/boss_greymane_leaders_inspiration", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_greymane_leaders_inspiration_buff:OnCreated()
	self.as = self:GetSpecialValueFor("as_per_hp")
	self.boss_as = self:GetSpecialValueFor("greymane_as_per_hp")
end

function modifier_boss_greymane_leaders_inspiration_buff:OnRefresh()
	self.as = self:GetSpecialValueFor("as_per_hp")
	self.boss_as = self:GetSpecialValueFor("greymane_as_per_hp")
end

function modifier_boss_greymane_leaders_inspiration_buff:DeclareFunctions()
	return { }
end

function modifier_boss_greymane_leaders_inspiration_buff:GetModifierAttackSpeedBonus()
	local hpPct = (100 - self:GetCaster():GetHealthPercent())
	local attackspeed = 0
	if self:GetParent() == self:GetCaster() then
		attackspeed = hpPct * self.boss_as
	else
		attackspeed = hpPct * self.as
	end
	return attackspeed
endboss_greymane_pounce = class({})

function boss_greymane_pounce:OnAbilityPhaseStart()
	local origPos = self:GetCaster():GetAbsOrigin()
	ParticleManager:FireLinearWarningParticle( origPos, self:GetCursorPosition(), 120 )
	return true
end

function boss_greymane_pounce:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Ability.Leap", caster)
	caster:StartGesture(ACT_DOTA_SPAWN)
	caster:AddNewModifier( caster, self, "modifier_boss_greymane_pounce", {duration = self:GetSpecialValueFor("jump_duration")} )
end

function boss_greymane_pounce:OnChannelFinish()
	if self.capturedTarget then
		self.capturedTarget:RemoveModifierByName("modifier_boss_greymane_pounce_stun")
	end
end

modifier_boss_greymane_pounce = class({})
LinkLuaModifier("modifier_boss_greymane_pounce", "bosses/boss_greymane/boss_greymane_pounce", LUA_MODIFIER_MOTION_NONE)


if IsServer() then
	function modifier_boss_greymane_pounce:OnCreated()
		local parent = self:GetParent()
		self.endPos = self:GetAbility():GetCursorPosition()
		self.distance = CalculateDistance( self.endPos, parent )
		self.direction = CalculateDirection( self.endPos, parent )
		self.speed = self.distance / self:GetSpecialValueFor("jump_duration") * FrameTime()
		self.initHeight = GetGroundHeight(parent:GetAbsOrigin(), parent)
		self.height = self.initHeight
		self.maxHeight = 125
		
		self.radius = 120
		self:StartMotionController()
	end
	
	
	function modifier_boss_greymane_pounce:OnDestroy()
		local parent = self:GetParent()
		local parentPos = parent:GetAbsOrigin()
		ResolveNPCPositions(parentPos, parent:GetHullRadius() + parent:GetCollisionPadding())
		self:StopMotionController()
	end
	
	function modifier_boss_greymane_pounce:DoControlledMotion()
		if self:GetParent():IsNull() then return end
		local parent = self:GetParent()
		self.distanceTraveled =  self.distanceTraveled or 0
		if parent:IsAlive() and self.distanceTraveled < self.distance then
			local newPos = GetGroundPosition(parent:GetAbsOrigin(), parent) + self.direction * self.speed
			newPos.z = self.height + self.maxHeight * math.sin( (self.distanceTraveled/self.distance) * math.pi )
			parent:SetAbsOrigin( newPos )
			
			self.distanceTraveled = self.distanceTraveled + self.speed
		else
			parent:SetAbsOrigin( self.endPos )
			parent:Interrupt()
			self:Destroy()
			return
		end
		for _, enemy in ipairs( parent:FindEnemyUnitsInRadius( parent:GetAbsOrigin(), self.radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				local caster = self:GetCaster()
				local ability = self:GetAbility()
				local remainingTime = math.min( ability:GetChannelTime(), ability:GetChannelTime() - (ability:GetChannelStartTime() - GameRules:GetGameTime()) )
				enemy:AddNewModifier(caster, ability, "modifier_boss_greymane_pounce_stun", {duration = remainingTime})
				ability.capturedTarget = enemy
			else
				parent:Interrupt()
			end
			EmitSoundOn("Hero_Slark.Pounce.Impact", enemy)
			self:Destroy()
			break
		end
	end
end

function modifier_boss_greymane_pounce:CheckState()
	return {[MODIFIER_STATE_COMMAND_RESTRICTED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss_greymane_pounce:IsHidden()
	return true
end

modifier_boss_greymane_pounce_stun = class({})
LinkLuaModifier("modifier_boss_greymane_pounce_stun", "bosses/boss_greymane/boss_greymane_pounce", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_greymane_pounce_stun:OnCreated()
	self.damage = self:GetSpecialValueFor("damage_per_second")
	if IsServer() then self:StartIntervalThink( self:GetSpecialValueFor("damage_interval") ) end
end

function modifier_boss_greymane_pounce_stun:OnIntervalThink()
	local caster = self:GetCaster()
	if not caster:IsAlive() or not caster:IsChanneling() then self:Destroy() end
	local ability = self:GetAbility()
	local parent = self:GetParent()
	ParticleManager:FireParticle("particles/units/heroes/hero_riki/riki_backstab_hit_blood.vpcf", PATTACH_POINT_FOLLOW, parent)
	parent:EmitSound("Hero_Riki.Backstab")
	ability:DealDamage( caster, parent, self.damage )
	caster:StartGesture(ACT_DOTA_ATTACK)
end

function modifier_boss_greymane_pounce_stun:OnDestroy()
	if IsServer() then self:GetCaster():Interrupt() end
end

function modifier_boss_greymane_pounce_stun:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss_greymane_pounce_stun:DeclareFunctions()
	return {MODIFIER_PROPERTY_OVERRIDE_ANIMATION}
end

function modifier_boss_greymane_pounce_stun:GetOverrideAnimation()
	return ACT_DOTA_DISABLED
end

function modifier_boss_greymane_pounce_stun:IsPurgable()
	return true
end

function modifier_boss_greymane_pounce_stun:IsStunDebuff()
	return true
end

function modifier_boss_greymane_pounce_stun:IsPurgeException()
	return true
endboss_leshrac_erupt = class({})

function boss_leshrac_erupt:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetSpecialValueFor("impact_radius") )
	return true
end

function boss_leshrac_erupt:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local damage = self:GetSpecialValueFor("damage")
	local delay = self:GetCastPoint()
	local stun = self:GetSpecialValueFor("duration_stun")
	local radius = self:GetSpecialValueFor("impact_radius")
	local eruptions = self:GetSpecialValueFor("eruptions")
	
	Timers:CreateTimer( function()
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
			self:DealDamage( caster, enemy, damage )
			self:Stun(enemy, stun)
		end
		ParticleManager:FireParticle("particles/units/heroes/hero_leshrac/leshrac_split_earth.vpcf", PATTACH_CUSTOMORIGIN, caster, {[0] = position, [1] = Vector( radius,1,1) } )
		EmitSoundOnLocationWithCaster( position, "Hero_Leshrac.Split_Earth", caster )
		eruptions = eruptions - 1
		if eruptions > 0 then
			return delay
		end
	end)
endboss_necro_deathbringer = class({})

function boss_necro_deathbringer:GetIntrinsicModifierName()
	return "modifier_boss_necro_deathbringer"
end

modifier_boss_necro_deathbringer = class({})
LinkLuaModifier("modifier_boss_necro_deathbringer", "bosses/boss_necro/boss_necro_deathbringer", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_necro_deathbringer:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH}
end

function modifier_boss_necro_deathbringer:OnDeath(params)
	if params.attacker == self:GetParent() and not params.attacker:PassivesDisabled() then
		self:GetParent():AddNewModifier( self:GetParent(), self:GetAbility(), "modifier_boss_necro_deathbringer_damage", {} )
	end
end

function modifier_boss_necro_deathbringer:IsHidden()
	return true
end

modifier_boss_necro_deathbringer_damage = class({})
LinkLuaModifier("modifier_boss_necro_deathbringer_damage", "bosses/boss_necro/boss_necro_deathbringer", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_necro_deathbringer_damage:OnCreated()
	self.amp = self:GetSpecialValueFor("bonus_damage")
end

function modifier_boss_necro_deathbringer_damage:OnRefresh()
	self.amp = self:GetSpecialValueFor("bonus_damage")
end

function modifier_boss_necro_deathbringer_damage:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE}
end

function modifier_boss_necro_deathbringer_damage:GetModifierTotalDamageOutgoing_Percentage()
	self:Destroy()
	return self.amp
end
boss_necro_fear_the_reaper = class({})

function boss_necro_fear_the_reaper:OnAbilityPhaseStart()
	EmitSoundOn("Hero_Necrolyte.ReapersScythe.Caster", self:GetCaster() )
	return true
end

function boss_necro_fear_the_reaper:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	self:CreateReaper(target)
	
	Timers:CreateTimer(RandomFloat(0.75, 1.5), function()
		if caster:GetHealthPercent() <= 50 then
			for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), self:GetTrueCastRange() ) ) do
				if not enemy:TriggerSpellAbsorb(self) then
					self:CreateReaper( enemy:GetAbsOrigin() )
				end
				break
			end
		end
	end)
end

function boss_necro_fear_the_reaper:CreateReaper(target)
	local caster = self:GetCaster()
	ParticleManager:FireWarningParticle(target, self:GetSpecialValueFor("radius"))
	
	local sFX = ParticleManager:CreateParticle("particles/econ/items/necrolyte/necro_sullen_harvest/necro_sullen_harvest_scythe_model.vpcf", PATTACH_WORLDORIGIN, caster)
	ParticleManager:SetParticleControl(sFX, 1, target)
	
	local damage = self:GetSpecialValueFor("damage")
	local radius = self:GetSpecialValueFor("radius")
	Timers:CreateTimer(1.5, function()
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( target, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage(caster, enemy, damage )
			end
		end
	end)
endboss_necro_guillotine = class({})

function boss_necro_guillotine:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	EmitSoundOn("Hero_Necrolyte.ReapersScythe.Cast.ti7", caster)
	local bonusTargets = 5 - math.ceil(caster:GetHealthPercent() / 20)
	
	
	self:CreateGuillotine( target )
	
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), -1 , {type = DOTA_UNIT_TARGET_HERO} ) ) do
		if enemy ~= target then
			if bonusTargets <= 0 then return end
			self:CreateGuillotine( enemy )
			bonusTargets = bonusTargets - 1
		end
	end
	
end

function boss_necro_guillotine:CreateGuillotine( enemy )
	local caster = self:GetCaster()
	local position = enemy:GetAbsOrigin()

	local damage = (100 - self:GetSpecialValueFor("hp_set")) / 100
	local radius = self:GetSpecialValueFor("radius")
	local kill_threshold = self:GetSpecialValueFor("kill_threshold")
	local duration = self:GetSpecialValueFor("duration")
	
	ParticleManager:FireParticle("particles/units/heroes/hero_necrolyte/necrolyte_scythe_start.vpcf", PATTACH_WORLDORIGIN, caster, {[1] = position})

	ParticleManager:FireWarningParticle(position, radius)
	
	Timers:CreateTimer(1.5, function()
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius, {type = DOTA_UNIT_TARGET_HERO} ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				if enemy:GetHealthPercent() <= kill_threshold then
					enemy.tombstoneDisabled = true
					enemy:AttemptKill(self, caster)
				else
					self:DealDamage( caster, enemy, enemy:GetHealth() * damage, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_HPLOSS + DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
					enemy:DisableHealing( duration )
				end
			end
		end
	end)
endboss_necro_plague_wave = class({})

function boss_necro_plague_wave:OnAbilityPhaseStart()
	self.direction = self:GetCaster():GetForwardVector()
	local forward = RollPercentage(50)
	if not forward then self.direction = self.direction * -1 end
	ParticleManager:FireLinearWarningParticle(self:GetCaster():GetAbsOrigin(), self:GetCaster():GetAbsOrigin() + self.direction * self:GetTrueCastRange(), self:GetSpecialValueFor("bolt_radius"))
	return true
end

function boss_necro_plague_wave:OnSpellStart()
	local caster = self:GetCaster()
	
	local direction = self.direction
	local speed = self:GetSpecialValueFor("bolt_speed")
	local radius = self:GetSpecialValueFor("bolt_radius")
	local distance = self:GetTrueCastRange()
	local spread = self:GetSpecialValueFor("bolt_angle")
	local angle = 0
	local delay = self:GetSpecialValueFor("bolt_delay")
	local endAngle = 180
	if caster:GetHealthPercent() <= 50 then endAngle = 360 end
	
	Timers:CreateTimer(function()
		EmitSoundOn("Hero_Necrolyte.Attack", caster)
		self:FireLinearProjectile("particles/death_spear.vpcf", RotateVector2D(direction, ToRadians(angle) ) * speed, distance, radius)
		self:FireLinearProjectile("particles/death_spear.vpcf", RotateVector2D(direction,  ToRadians(360-angle) ) * speed, distance, radius)
		if angle < endAngle then
			angle = angle + spread
			return delay
		end
	end)
end

function boss_necro_plague_wave:OnProjectileHit( target, position )
	if target then
		local caster = self:GetCaster()
		
		self:DealDamage( caster, target, math.max( self:GetSpecialValueFor("max_hp_damage") * target:GetHealth() / 100, 100), {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_HPLOSS + DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
		target:DisableHealing( self:GetSpecialValueFor("duration") )
		if target:TriggerSpellAbsorb(self) then return true end
		if target:IsNull() then
			if target:IsRealHero() then
				return true
			else
				return false
			end
		end
		return true
	end
end

boss_necro_swans_song = class({})

function boss_necro_swans_song:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_necro_swans_song:OnSpellStart()
	if self:GetCursorTarget():TriggerSpellAbsorb(self) then return end
	self:GetCursorTarget():AddNewModifier( self:GetCaster(), self, "modifier_boss_necro_swans_song", {duration = self:GetSpecialValueFor("duration")} )
end

modifier_boss_necro_swans_song = class({})
LinkLuaModifier("modifier_boss_necro_swans_song", "bosses/boss_necro/boss_necro_swans_song", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_necro_swans_song:OnCreated()
	self.damage = self:GetSpecialValueFor("max_hp_damage") / 100
	if IsServer() then 
		EmitSoundOn( "Hero_Necrolyte.SpiritForm.Cast", self:GetParent() )
		self:StartIntervalThink(1) 
	end
end

function modifier_boss_necro_swans_song:OnIntervalThink()
	local caster = self:GetCaster()
	local heroes = caster:FindEnemyUnitsInRadius( self:GetParent():GetAbsOrigin(), self:GetSpecialValueFor("radius") , {type = DOTA_UNIT_TARGET_HERO} )
	local heroMult = HeroList:GetActiveHeroCount() / #heroes
	for _, hero in ipairs( heroes ) do
		self:GetAbility():DealDamage( self:GetCaster(), hero, hero:GetMaxHealth() * self.damage * heroMult, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
	end
end

function modifier_boss_necro_swans_song:GetEffectName()
	return "particles/units/heroes/hero_necrolyte/necrolyte_spirit.vpcf"
endboss_necro_take_the_weak = class({})

function boss_necro_take_the_weak:GetIntrinsicModifierName()
	return "modifier_boss_necro_take_the_weak"
end

modifier_boss_necro_take_the_weak = class({})
LinkLuaModifier("modifier_boss_necro_take_the_weak", "bosses/boss_necro/boss_necro_take_the_weak", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_necro_take_the_weak:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_necro_take_the_weak:OnTakeDamage(params)
	if self:GetParent():PassivesDisabled() then return end
	if params.attacker == self:GetParent() and params.unit ~= self:GetParent() and not params.unit:IsHero() and not HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_HPLOSS) and params.inflictor ~= self:GetAbility() then
		params.unit:AttemptKill(self:GetAbility(), params.attacker)
	end
end

function modifier_boss_necro_take_the_weak:IsHidden()
	return true
endboss_necro_vile_aura = class({})

function boss_necro_vile_aura:GetIntrinsicModifierName()
	return "modifier_boss_necro_vile_aura"
end

modifier_boss_necro_vile_aura = class({})
LinkLuaModifier("modifier_boss_necro_vile_aura", "bosses/boss_necro/boss_necro_vile_aura", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_necro_vile_aura:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
	if IsServer() then self:StartIntervalThink( self:GetSpecialValueFor("blink_rate") ) end
end

function modifier_boss_necro_vile_aura:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
	if IsServer() then self:StartIntervalThink( self:GetSpecialValueFor("blink_rate") ) end
end

function modifier_boss_necro_vile_aura:OnIntervalThink()
	local parent = self:GetParent()
	local position = parent:GetAbsOrigin() + ActualRandomVector(600, 250)
	if RoundManager:GetBoundingBox() then
		position = RoundManager:GetBoundingBox():GetAbsOrigin() + ActualRandomVector( FindRadius( RoundManager:GetBoundingBox() ) * 0.75, 150 )
	end
	if parent:IsStunned() or parent:IsSilenced() or parent:IsRooted() then
		return
	end
	if RollPercentage(80) then -- random position
		for _, enemy in ipairs( parent:FindEnemyUnitsInRadius( parent:GetAbsOrigin(), -1 ) ) do
			if RollPercentage(75) then
				position = enemy:GetAbsOrigin() + ActualRandomVector(600, 250)
				break
			end
		end
	end
	if parent:GetTauntTarget() then
		position = parent:GetTauntTarget():GetAbsOrigin() + ActualRandomVector(600, 250)
	end
	self:StartIntervalThink( -1 )
	ParticleManager:FireWarningParticle( position, self:GetParent():GetHullRadius() * 2.5 )
	local modifier = self
	Timers:CreateTimer(1.5, function()
		if parent:IsStunned() or parent:IsSilenced() or parent:IsRooted() then return end
		parent:Blink(position)
		AddFOWViewer( DOTA_TEAM_GOODGUYS, position, 256, 3, false )
		GridNav:DestroyTreesAroundPoint( position, 256, true)
		if not modifier or modifier:IsNull() then return end
		if IsServer() then modifier:StartIntervalThink( modifier:GetAbility():GetSpecialValueFor("blink_rate") ) end
	end)
end

function modifier_boss_necro_vile_aura:IsAura()
	return not self:GetCaster():PassivesDisabled()
end

function modifier_boss_necro_vile_aura:GetModifierAura()
	return "modifier_boss_necro_vile_aura_effect"
end

function modifier_boss_necro_vile_aura:GetAuraRadius()
	return self.radius
end

function modifier_boss_necro_vile_aura:GetAuraDuration()
	return 0.5
end

function modifier_boss_necro_vile_aura:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_necro_vile_aura:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_necro_vile_aura:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

function modifier_boss_necro_vile_aura:IsHidden()
	return true
end

modifier_boss_necro_vile_aura_effect = class({})
LinkLuaModifier("modifier_boss_necro_vile_aura_effect", "bosses/boss_necro/boss_necro_vile_aura", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_necro_vile_aura_effect:OnCreated()
	self.healRed = self:GetSpecialValueFor("heal_reduction")
end

function modifier_boss_necro_vile_aura_effect:GetModifierHealAmplify_Percentage()
	return self.healRed
endboss_necro_weaken = class({})

function boss_necro_weaken:OnAbilityPhaseStart()
	ParticleManager:FireTargetWarningParticle( self:GetCursorTarget() )
	return true
end

function boss_necro_weaken:OnSpellStart()
	if self:GetCursorTarget():TriggerSpellAbsorb(self) then return end
	self:GetCursorTarget():AddNewModifier( self:GetCaster(), self, "modifier_boss_necro_weaken", {duration = self:GetSpecialValueFor("duration")} )
end

modifier_boss_necro_weaken = class({})
LinkLuaModifier("modifier_boss_necro_weaken", "bosses/boss_necro/boss_necro_weaken", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_necro_weaken:OnCreated()
	self.reduction = self:GetSpecialValueFor("damage_reduction")
	if IsServer() then
		EmitSoundOn("Hero_Necrolyte.DeathPulse", self:GetParent())
		self:GetCaster():Taunt( self:GetAbility(), self:GetParent(), self:GetRemainingTime() )
	end
end

function modifier_boss_necro_weaken:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTALDAMAGEOUTGOING_PERCENTAGE}
end

function modifier_boss_necro_weaken:GetModifierTotalDamageOutgoing_Percentage()
	return self.reduction
end

function modifier_boss_necro_weaken:GetStatusEffectName()
	return "particles/status_fx/status_effect_necrolyte_spirit.vpcf"
end

function modifier_boss_necro_weaken:StatusEffectPriority()
	return 20
endboss_ogre_smash = class({})

function boss_ogre_smash:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( GetGroundPosition(self:GetCursorPosition(), self:GetCaster()), self:GetSpecialValueFor("radius"))
	return true
end

function boss_ogre_smash:OnSpellStart()
	local caster = self:GetCaster()
	local point = self:GetCursorPosition()
	local radius = self:GetSpecialValueFor("radius")

	EmitSoundOnLocationWithCaster(point, "Ability.MeleeSmashLand", caster)
	ParticleManager:FireParticle("particles/test_particle/ogre_melee_smash.vpcf", PATTACH_POINT, caster, {[0]=point, [1]=Vector(radius, 0, 0)})

	CutTreesInRadius(point, radius)

	local enemies = caster:FindEnemyUnitsInRadius(point, radius)
	for _,enemy in pairs(enemies) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:Stun(enemy, self:GetSpecialValueFor("duration"), false)
			self:DealDamage(caster, enemy, self:GetSpecialValueFor("damage"), {}, OVERHEAD_ALERT_DAMAGE)
		end
	end
endboss_ogre_smash_king = class({})

function boss_ogre_smash_king:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( GetGroundPosition(self:GetCursorPosition(), self:GetCaster()), self:GetSpecialValueFor("radius"))
	return true
end

function boss_ogre_smash_king:OnSpellStart()
	local caster = self:GetCaster()
	local point = self:GetCursorPosition()
	local radius = self:GetSpecialValueFor("radius")

	EmitSoundOnLocationWithCaster(point, "Ability.MeleeSmashLand", caster)
	ParticleManager:FireParticle("particles/test_particle/ogre_melee_smash.vpcf", PATTACH_POINT, caster, {[0]=point, [1]=Vector(radius, 0, 0)})

	CutTreesInRadius(point, radius)

	local enemies = caster:FindEnemyUnitsInRadius(point, radius)
	for _,enemy in pairs(enemies) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:Stun(enemy, self:GetSpecialValueFor("duration"), false)
			self:DealDamage(caster, enemy, self:GetSpecialValueFor("damage"), {}, OVERHEAD_ALERT_DAMAGE)
		end
	end
endboss_phantom_banshee_wail = class({})

function boss_phantom_banshee_wail:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCaster():GetAbsOrigin(), self:GetSpecialValueFor("radius") )
	return true
end

function boss_phantom_banshee_wail:OnSpellStart()
	local caster = self:GetCaster()
	
	local duration = self:GetSpecialValueFor("duration")
	local damage = self:GetSpecialValueFor("damage")
	ParticleManager:FireParticle("particles/units/bosses/boss_phantom/boss_phantom_banshee_wailpain_owner.vpcf", PATTACH_ABSORIGIN_FOLLOW, caster)
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), self:GetSpecialValueFor("radius") ) ) do
		if not enemy:TriggerSpellAbsorb( self ) then
			self:DealDamage( caster, enemy, damage )
			enemy:AddNewModifier( caster, self, "modifier_boss_phantom_banshee_wail", {duration = duration})
		end
	end
end

modifier_boss_phantom_banshee_wail = class({})
LinkLuaModifier("modifier_boss_phantom_banshee_wail", "bosses/boss_phantom/boss_phantom_banshee_wail", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_phantom_banshee_wail:OnCreated()
	self.miss = self:GetSpecialValueFor("blind")
end

function modifier_boss_phantom_banshee_wail:OnRefresh()
	self.miss = self:GetSpecialValueFor("blind")
end

function modifier_boss_phantom_banshee_wail:DeclareFunctions()
	return { MODIFIER_PROPERTY_MISS_PERCENTAGE }
end

function modifier_boss_phantom_banshee_wail:GetModifierMiss_Percentage()
	return self.miss
end

function modifier_boss_phantom_banshee_wail:GetAttributes()
	return MODIFIER_ATTRIBUTE_MULTIPLE
endboss_phantom_cold_touch = class({})

function boss_phantom_cold_touch:GetIntrinsicModifierName()
	return "modifier_boss_phantom_cold_touch"
end

modifier_boss_phantom_cold_touch = class({})
LinkLuaModifier("modifier_boss_phantom_cold_touch", "bosses/boss_phantom/boss_phantom_cold_touch", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_phantom_cold_touch:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_phantom_cold_touch:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_phantom_cold_touch:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss_phantom_cold_touch:OnAttackLanded(params)
	if params.attacker == self:GetParent() and not params.attacker:PassivesDisabled() and not params.target:IsMagicImmune() then
		if not params.target:FindModifierByNameAndCaster("modifier_boss_phantom_cold_touch_debuff", params.attacker) then
			params.target:AddNewModifier( params.attacker, self:GetAbility(), "modifier_boss_phantom_cold_touch_debuff", {duration = self.duration} )
		else
			params.target:FindModifierByNameAndCaster("modifier_boss_phantom_cold_touch_debuff", params.attacker):SetDuration( self.duration, true )
		end
	end
end

function modifier_boss_phantom_cold_touch:IsHidden()
	return false
end


modifier_boss_phantom_cold_touch_debuff = class({})
LinkLuaModifier("modifier_boss_phantom_cold_touch_debuff", "bosses/boss_phantom/boss_phantom_cold_touch", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_phantom_cold_touch_debuff:OnCreated()
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_boss_phantom_cold_touch_debuff:OnRefresh()
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_boss_phantom_cold_touch_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_phantom_cold_touch_debuff:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end

function modifier_boss_phantom_cold_touch_debuff:GetEffectName()
	return "particles/units/heroes/hero_lich/lich_slowed_cold.vpcf"
end

function modifier_boss_phantom_cold_touch_debuff:GetAttributes()
	return MODIFIER_ATTRIBUTE_MULTIPLE
endsatyr_champion_mana_combustion = class({})

function satyr_champion_mana_combustion:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetSpecialValueFor("radius") )
	return true
end

function satyr_champion_mana_combustion:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local radius = self:GetSpecialValueFor("radius")
	local burn = self:GetSpecialValueFor("mana_burn")
	local damage = self:GetSpecialValueFor("burn_damage") / 100
	local delay = self:GetSpecialValueFor("delay")
	
	local warmUp = ParticleManager:CreateParticle("particles/units/heroes/hero_invoker/invoker_emp_charge.vpcf", PATTACH_WORLDORIGIN, nil)
	ParticleManager:SetParticleControl( warmUp, 0, position )
	
	caster:EmitSound("Hero_Invoker.EMP.Charge")
	
	Timers:CreateTimer(delay, function()
			if caster:IsNull() then return end
			ParticleManager:ClearParticle( warmUp )
			caster:StopSound("Hero_Invoker.EMP.Charge")
			EmitSoundOnLocationWithCaster(position, "Hero_Invoker.EMP.Discharge", caster)
			ParticleManager:FireParticle("particles/units/heroes/hero_invoker/invoker_emp_explode.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius,radius,radius)})
			for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
				if not enemy:TriggerSpellAbsorb(self) then
					local manaLoss = math.min( burn, enemy:GetMana() )
					enemy:ReduceMana( manaLoss )
					self:DealDamage( caster, enemy, manaLoss * damage )
				end
			end
		end
	)
endsatyr_champion_occult_aura = class({})

function satyr_champion_occult_aura:GetIntrinsicModifierName()
	return "modifier_satyr_champion_occult_aura"
end

modifier_satyr_champion_occult_aura = class({})
LinkLuaModifier("modifier_satyr_champion_occult_aura", "bosses/boss_satyrs/satyr_champion_occult_aura", LUA_MODIFIER_MOTION_NONE)
function modifier_satyr_champion_occult_aura:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_satyr_champion_occult_aura:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_satyr_champion_occult_aura:IsAura()
	return not self:GetParent():PassivesDisabled()
end

function modifier_satyr_champion_occult_aura:GetAuraEntityReject(entity)
	return entity == self:GetParent()
end

function modifier_satyr_champion_occult_aura:GetModifierAura()
	return "modifier_satyr_champion_occult_aura_buff"
end

function modifier_satyr_champion_occult_aura:GetAuraRadius()
	return self.radius
end

function modifier_satyr_champion_occult_aura:GetAuraDuration()
	return 0.5
end

function modifier_satyr_champion_occult_aura:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_FRIENDLY
end

function modifier_satyr_champion_occult_aura:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_satyr_champion_occult_aura:IsHidden()
	return true
end

modifier_satyr_champion_occult_aura_buff = class({})
LinkLuaModifier("modifier_satyr_champion_occult_aura_buff", "bosses/boss_satyrs/satyr_champion_occult_aura", LUA_MODIFIER_MOTION_NONE)

function modifier_satyr_champion_occult_aura_buff:OnCreated()
	self.regen = self:GetSpecialValueFor("hp_regen")
end

function modifier_satyr_champion_occult_aura_buff:OnRefresh()
	self.regen = self:GetSpecialValueFor("hp_regen")
end

function modifier_satyr_champion_occult_aura_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_HEALTH_REGEN_CONSTANT}
end

function modifier_satyr_champion_occult_aura_buff:GetModifierConstantHealthRegen()
	return self.regen
endsatyr_champion_shockwave = class({})

function satyr_champion_shockwave:OnAbilityPhaseStart()
	local ogPos = self:GetCaster():GetAbsOrigin()
	ParticleManager:FireParticle("particles/neutral_fx/satyr_hellcaller_cast.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster() )
	ParticleManager:FireLinearWarningParticle( ogPos, ogPos + CalculateDirection( self:GetCursorPosition(), ogPos ) * self:GetSpecialValueFor("distance"), self:GetSpecialValueFor("width") )
	return true
end

function satyr_champion_shockwave:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local width = self:GetSpecialValueFor("width")
	local distance = self:GetSpecialValueFor("distance")
	local speed = self:GetSpecialValueFor("speed")
	
	caster:EmitSound("n_creep_SatyrHellcaller.Shockwave")
	self:FireLinearProjectile("particles/neutral_fx/satyr_hellcaller.vpcf", speed * CalculateDirection( position, caster ), distance, width)
end

function satyr_champion_shockwave:OnProjectileHit(target, position)
	if target then
		if target:TriggerSpellAbsorb(self) then return true end
		local caster = self:GetCaster()
		local damage = self:GetSpecialValueFor("damage")
		self:DealDamage( caster, target, damage )
		target:EmitSound("n_creep_SatyrHellcaller.Shockwave.Damage")
	end
endsatyr_mage_lightning = class({})

function satyr_mage_lightning:OnAbilityPhaseStart()
	self:GetCaster():EmitSound("n_creep_HarpyStorm.Shoot")
	return true
end

function satyr_mage_lightning:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	local prevTarget = caster
	local damage = self:GetSpecialValueFor("damage")
	local bounces = self:GetSpecialValueFor("bounces")
	local radius = self:GetSpecialValueFor("search_radius")
	
	local hitUnits = {}
	Timers:CreateTimer(function()
		if target and caster and not caster:IsNull() then
			if target:TriggerSpellAbsorb(self) then return end
			target:EmitSound("n_creep_HarpyStorm.ChainLighting")
			self:DealDamage( caster, target, damage )
			ParticleManager:FireRopeParticle("particles/neutral_fx/harpy_chain_lightning.vpcf", PATTACH_POINT_FOLLOW, prevTarget, target)
			prevTarget = target
			hitUnits[target:entindex()] = true
			target = nil
			for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( prevTarget:GetAbsOrigin(), radius ) ) do
				if not hitUnits[enemy:entindex()] then
					target = enemy
					break
				end
			end
			if bounces > 0 then
				bounces = bounces - 1
				return 0.35
			end
		end
	end)
end
satyr_mage_revitalize = class({})

function satyr_mage_revitalize:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	self.voodoo = ParticleManager:CreateParticle( "particles/units/heroes/hero_witchdoctor/witchdoctor_voodoo_restoration.vpcf", PATTACH_POINT_FOLLOW, caster )
	ParticleManager:SetParticleControl( self.voodoo, 1, Vector(600,600,600) )
	caster:EmitSound("n_creep_ForestTrollHighPriest.Heal")
	return true
end

function satyr_mage_revitalize:OnSpellStart()
	local caster = self:GetCaster()
	
	self.charge = ParticleManager:CreateParticle( "particles/units/bosses/boss_satyrs/satyr_mage_revitalize_charge.vpcf", PATTACH_POINT_FOLLOW, self:GetCaster() )
	ParticleManager:SetParticleControlEnt(self.charge, 0, caster, PATTACH_POINT_FOLLOW, "attach_hitloc", caster:GetAbsOrigin(), true)
	Timers:CreateTimer(1, function()
		if self:IsChanneling() then
			caster:EmitSound("n_creep_ForestTrollHighPriest.Heal")
			return 1
		end
	end)
end

function satyr_mage_revitalize:OnChannelFinish(bInterrupt)
	if not bInterrupt then
		local caster = self:GetCaster()
		local heal = self:GetSpecialValueFor("heal_pct") / 100
		for _, ally in ipairs( caster:FindFriendlyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do
			ally:HealEvent( ally:GetMaxHealth() * heal, self, caster )
			ParticleManager:FireParticle("particles/neutral_fx/troll_heal.vpcf", PATTACH_POINT_FOLLOW, ally)
		end
	end
	ParticleManager:ClearParticle( self.voodoo )
	ParticleManager:ClearParticle( self.charge )
endboss_sloth_demon_slime_cocoon = class({})

function boss_sloth_demon_slime_cocoon:OnSpellStart()
	local caster = self:GetCaster()
	
	local duration = self:GetSpecialValueFor("max_heal") / self:GetSpecialValueFor("heal_per_second")
	caster:AddNewModifier( caster, self, "modifier_boss_sloth_demon_slime_cocoon", {duration = duration})
end

modifier_boss_sloth_demon_slime_cocoon = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_cocoon", "bosses/boss_sloth_demon/boss_sloth_demon_slime_cocoon", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_sloth_demon_slime_cocoon:OnCreated()
	self.heal = self:GetSpecialValueFor("heal_per_second")
	if IsServer() then
		self.attacks = self:GetSpecialValueFor("attacks_per_hero") * HeroList:GetActiveHeroCount()
		self:SetStackCount( self.attacks )
	end
end

function modifier_boss_sloth_demon_slime_cocoon:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED, MODIFIER_PROPERTY_HEALTH_REGEN_PERCENTAGE}
end

function modifier_boss_sloth_demon_slime_cocoon:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true}
end

function modifier_boss_sloth_demon_slime_cocoon:GetPriority()
	return MODIFIER_PRIORITY_SUPER_ULTRA
end

function modifier_boss_sloth_demon_slime_cocoon:OnAttackLanded(params)
	if params.target == self:GetParent() then
		self.attacks = self.attacks - 1
		self:SetStackCount( self.attacks )
		if self.attacks <= 0 then
			self:Destroy()
		end
	end
end

function modifier_boss_sloth_demon_slime_cocoon:GetModifierHealthRegenPercentage()
	return self.heal
end

function modifier_boss_sloth_demon_slime_cocoon:GetEffectName()
	return "particles/econ/items/winter_wyvern/winter_wyvern_ti7/wyvern_cold_embrace_ti7buff.vpcf"
endboss_sloth_demon_slime_hide = class({})

function boss_sloth_demon_slime_hide:GetIntrinsicModifierName()
	return "modifier_boss_sloth_demon_slime_hide"
end

modifier_boss_sloth_demon_slime_hide = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_hide", "bosses/boss_sloth_demon/boss_sloth_demon_slime_hide", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_sloth_demon_slime_hide:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_sloth_demon_slime_hide:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_sloth_demon_slime_hide:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_sloth_demon_slime_hide:OnTakeDamage(params)
	if params.attacker == self:GetParent() and not params.attacker:PassivesDisabled() then
		params.unit:AddNewModifier( params.attacker, self:GetAbility(), "modifier_boss_sloth_demon_slime_hide_debuff", {duration = self.duration} )
	end
end

function modifier_boss_sloth_demon_slime_hide:IsHidden()
	return true
end

modifier_boss_sloth_demon_slime_hide_debuff = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_hide_debuff", "bosses/boss_sloth_demon/boss_sloth_demon_slime_hide", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_sloth_demon_slime_hide_debuff:OnCreated()
	self.as = self:GetSpecialValueFor("attack_slow")
	self.cdr = self:GetSpecialValueFor("cdr_slow")
	if IsServer() then
		self:SetStackCount(1)
	end
end

function modifier_boss_sloth_demon_slime_hide_debuff:OnRefresh()
	self.as = self:GetSpecialValueFor("attack_slow")
	self.cdr = self:GetSpecialValueFor("cdr_slow")
	if IsServer() then
		self:IncrementStackCount()
	end
end

function modifier_boss_sloth_demon_slime_hide_debuff:DeclareFunctions()
	return {}
end

function modifier_boss_sloth_demon_slime_hide_debuff:GetModifierAttackSpeedBonus()
	return self.as * self:GetStackCount()
end

function modifier_boss_sloth_demon_slime_hide_debuff:GetCooldownReduction()
	return self.cdr * self:GetStackCount()
endboss_sloth_demon_slime_tendrils = class({})

function boss_sloth_demon_slime_tendrils:GetIntrinsicModifierName()
	return "modifier_boss_sloth_demon_slime_tendrils"
end

modifier_boss_sloth_demon_slime_tendrils = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_tendrils", "bosses/boss_sloth_demon/boss_sloth_demon_slime_tendrils", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_sloth_demon_slime_tendrils:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_sloth_demon_slime_tendrils:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_sloth_demon_slime_tendrils:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_sloth_demon_slime_tendrils:OnTakeDamage(params)
	if params.unit == self:GetParent() and not params.unit:PassivesDisabled() then
		params.attacker:AddNewModifier( params.unit, self:GetAbility(), "modifier_boss_sloth_demon_slime_tendrils_debuff", {duration = self.duration} )
	end
end

function modifier_boss_sloth_demon_slime_tendrils:IsHidden()
	return true
end

modifier_boss_sloth_demon_slime_tendrils_debuff = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_tendrils_debuff", "bosses/boss_sloth_demon/boss_sloth_demon_slime_tendrils", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_sloth_demon_slime_tendrils_debuff:OnCreated()
	self.ms = self:GetSpecialValueFor("move_slow")
	self.ts = self:GetSpecialValueFor("turn_slow")
	if IsServer() then
		self:SetStackCount(1)
	end
end

function modifier_boss_sloth_demon_slime_tendrils_debuff:OnRefresh()
	self.ms = self:GetSpecialValueFor("move_slow")
	self.ts = self:GetSpecialValueFor("turn_slow")
	if IsServer() then
		self:IncrementStackCount()
	end
end

function modifier_boss_sloth_demon_slime_tendrils_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE, MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_sloth_demon_slime_tendrils_debuff:GetModifierTurnRate_Percentage()
	return self.ts * self:GetStackCount()
end

function modifier_boss_sloth_demon_slime_tendrils_debuff:GetModifierMoveSpeedBonus_Percentage()
	return self.ms * self:GetStackCount()
endboss_sloth_demon_slime_trail = class({})

function boss_sloth_demon_slime_trail:GetIntrinsicModifierName()
	return "modifier_boss_sloth_demon_slime_trail"
end

modifier_boss_sloth_demon_slime_trail = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_trail", "bosses/boss_sloth_demon/boss_sloth_demon_slime_trail", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_sloth_demon_slime_trail:OnCreated()
		self:GetAbility().slimePoolTable = {}
		self:StartIntervalThink(0.2)
	end
	
	function modifier_boss_sloth_demon_slime_trail:OnIntervalThink()
		local caster = self:GetCaster()
		if caster:PassivesDisabled() then return end
		for _, pool in ipairs( self:GetAbility().slimePoolTable ) do
			if CalculateDistance( pool, caster ) < pool.radius * 0.9 then
				return
			end
		end
		CreateModifierThinker(caster, self:GetAbility(), "modifier_boss_sloth_demon_slime_trail_pool", {}, caster:GetAbsOrigin(), caster:GetTeamNumber(), false)
	end
end

modifier_boss_sloth_demon_slime_trail_pool = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_trail_pool", "bosses/boss_sloth_demon/boss_sloth_demon_slime_trail", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_sloth_demon_slime_trail_pool:OnCreated()
	self.min_radius = self:GetSpecialValueFor("min_radius")
	self.max_radius = self:GetSpecialValueFor("max_radius")
	self.duration = self:GetSpecialValueFor("duration")
	self.growth = ( ( self.max_radius - self.min_radius ) / self.duration ) * FrameTime()
	self:GetParent().radius = self.min_radius
	if IsServer() then
		table.insert( self:GetAbility().slimePoolTable, self:GetParent() )
		self:StartIntervalThink( 0 )
		self.trailFX = ParticleManager:CreateParticle("particles/bosses/boss_sloth_demon/boss_sloth_demon_slime_trail.vpcf", PATTACH_ABSORIGIN, self:GetParent() )
		ParticleManager:SetParticleControl( self.trailFX, 1, Vector( self:GetParent().radius, 0, 0 ) )
		ParticleManager:SetParticleControl( self.trailFX, 15, Vector( 0, 175, 75 ) )
		self:AddEffect( self.trailFX )
	end
end

function modifier_boss_sloth_demon_slime_trail_pool:OnIntervalThink()
	local parent = self:GetParent()
	local caster = self:GetCaster()
	if not caster or caster:IsNull() then
		self:Destroy()
		parent:ForceKill(false)
		return
	end
	if parent.radius < self.max_radius and CalculateDistance( parent, self:GetCaster() ) <= parent.radius and caster:IsAlive() then
		parent.radius = math.min(parent.radius + self.growth, self.max_radius)
	elseif parent.radius >= self.min_radius and CalculateDistance( parent, self:GetCaster() ) > parent.radius or not caster:IsAlive() then
		parent.radius = parent.radius - self.growth
	elseif parent.radius < self.min_radius and self:GetElapsedTime() > 5 then
		for id, pool in ipairs( self:GetAbility().slimePoolTable ) do
			if pool == self:GetParent() then
				table.remove( self:GetAbility().slimePoolTable, id)
			end
		end
		self:Destroy()
		self:GetParent():ForceKill(false)
	end
	ParticleManager:SetParticleControl( self.trailFX, 1, Vector( parent.radius, 0, 0 ) )
end

function modifier_boss_sloth_demon_slime_trail_pool:IsAura()
	return true
end

function modifier_boss_sloth_demon_slime_trail_pool:GetModifierAura()
	return "modifier_boss_sloth_demon_slime_trail_debuff"
end

function modifier_boss_sloth_demon_slime_trail_pool:GetAuraRadius()
	return self:GetParent().radius
end

function modifier_boss_sloth_demon_slime_trail_pool:GetAuraDuration()
	return 0.5
end

function modifier_boss_sloth_demon_slime_trail_pool:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_sloth_demon_slime_trail_pool:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_sloth_demon_slime_trail_pool:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

modifier_boss_sloth_demon_slime_trail_debuff = class({})
LinkLuaModifier( "modifier_boss_sloth_demon_slime_trail_debuff", "bosses/boss_sloth_demon/boss_sloth_demon_slime_trail", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_sloth_demon_slime_trail_debuff:OnCreated()
		self.base = self:GetSpecialValueFor("base_damage")
		self.stack = self:GetSpecialValueFor("stack_damage")
		self:StartIntervalThink(1)
	end
	
	function modifier_boss_sloth_demon_slime_trail_debuff:OnIntervalThink()
		self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.base + self.stack * self:GetStackCount() )
		self:IncrementStackCount()
	end
endboss_troll_warlord_axe_fury = boss_troll_warlord_axe_fury or class({})
LinkLuaModifier( "modifier_boss_troll_warlord_axe_fury", "bosses/boss_troll_warlord/boss_troll_warlord_axe_fury.lua", LUA_MODIFIER_MOTION_NONE )

function boss_troll_warlord_axe_fury:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local start = caster:GetAbsOrigin()
	local distance = self:GetTalentSpecialValueFor("range")
	local direction = caster:GetForwardVector()

	EmitSoundOn("Ability.AssassinateLoad", self:GetCaster())
	ParticleManager:FireLinearWarningParticle(start, start + direction * distance, self:GetTalentSpecialValueFor("width"))
	return true
end

function boss_troll_warlord_axe_fury:OnSpellStart()
	local caster = self:GetCaster()

	caster:AddNewModifier(caster, self, "modifier_boss_troll_warlord_axe_fury", {Duration = self:GetTalentSpecialValueFor("duration")})
end

function boss_troll_warlord_axe_fury:OnProjectileHit(hTarget, vLocation)
	local caster = self:GetCaster()

	if hTarget then
		EmitSoundOn("Hero_TrollWarlord.WhirlingAxes.Target", hTarget)
		self:DealDamage(caster, hTarget, self:GetSpecialValueFor("damage"), {}, 0)
		return true
	end
end

modifier_boss_troll_warlord_axe_fury = class({})
function modifier_boss_troll_warlord_axe_fury:OnCreated(table)
	if IsServer() then
		self:GetCaster():FindAbilityByName("boss_troll_warlord_savage_leap"):SetActivated(false)
		self:StartIntervalThink(0.33)
	end
end

function modifier_boss_troll_warlord_axe_fury:OnRemoved(table)
	if IsServer() then
		self:GetCaster():FindAbilityByName("boss_troll_warlord_savage_leap"):SetActivated(true)
	end
end

function modifier_boss_troll_warlord_axe_fury:OnIntervalThink()
	local caster = self:GetCaster()
	if caster:IsDisarmed() or caster:IsStunned() then return end
	local fDir = caster:GetForwardVector()
	local rndAng = math.rad(RandomInt(-self:GetTalentSpecialValueFor("spread_rad")/2, self:GetTalentSpecialValueFor("spread_rad")/2))
	local dirX = fDir.x * math.cos(rndAng) - fDir.y * math.sin(rndAng); 
	local dirY = fDir.x * math.sin(rndAng) + fDir.y * math.cos(rndAng);
	local direction = Vector( dirX, dirY, 0 )
	caster:StartGestureWithPlaybackRate(ACT_DOTA_WHIRLING_AXES_RANGED, 1)
	EmitSoundOn( "Hero_TrollWarlord.WhirlingAxes.Ranged", caster)

	self:GetAbility():FireLinearProjectile("particles/units/heroes/hero_troll_warlord/troll_warlord_whirling_axe_ranged.vpcf", direction*1500, self:GetTalentSpecialValueFor("range"), self:GetTalentSpecialValueFor("width"), {}, true, true, 100)
	self:StartIntervalThink(self:GetTalentSpecialValueFor("firerate"))
end

function modifier_boss_troll_warlord_axe_fury:IsHidden()
	return false
end

function modifier_boss_troll_warlord_axe_fury:CheckState()
	local state = { [MODIFIER_STATE_ROOTED] = true}
	return state
end

function modifier_boss_troll_warlord_axe_fury:DeclareFunctions()
	return {MODIFIER_PROPERTY_TURN_RATE_PERCENTAGE}
end

function modifier_boss_troll_warlord_axe_fury:GetModifierTurnRate_Percentage()
	return -95
endboss_troll_warlord_enrage = class({})
LinkLuaModifier( "modifier_boss_troll_warlord_enrage_handle", "bosses/boss_troll_warlord/boss_troll_warlord_enrage.lua", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_boss_troll_warlord_enrage", "bosses/boss_troll_warlord/boss_troll_warlord_enrage.lua", LUA_MODIFIER_MOTION_NONE )

function boss_troll_warlord_enrage:GetIntrinsicModifierName()
	return "modifier_boss_troll_warlord_enrage_handle"
end

modifier_boss_troll_warlord_enrage_handle = class({})
function modifier_boss_troll_warlord_enrage_handle:OnCreated(table)
	if IsServer() then 
		
		AddAnimationTranslate(self:GetParent(), "melee")
		AddAnimationTranslate(self:GetParent(), "run")
		self:StartIntervalThink(0.1)
	end
end

function modifier_boss_troll_warlord_enrage_handle:OnIntervalThink()
	if self:GetParent():GetHealthPercent() < 50 then
		if not self:GetParent():HasModifier("modifier_boss_troll_warlord_enrage") then
			EmitSoundOn("Hero_OgreMagi.Bloodlust.Target", handle_2)
			self:GetParent():AddNewModifier(self:GetParent(), self:GetAbility(), "modifier_boss_troll_warlord_enrage", {duration = 10})
			self:StartIntervalThink(15)
			--self:Destroy()
		end
	end
end

function modifier_boss_troll_warlord_enrage_handle:IsPurgeException()
	return false
end

function modifier_boss_troll_warlord_enrage_handle:IsPurgable()
	return false
end

function modifier_boss_troll_warlord_enrage_handle:IsHidden()
	return true
end

modifier_boss_troll_warlord_enrage = class({})
function modifier_boss_troll_warlord_enrage:OnCreated(table)
	if IsServer() then AddAnimationTranslate(self:GetParent(), "melee")	end
end

function modifier_boss_troll_warlord_enrage:DeclareFunctions()
    local funcs = {
        
        MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE,
        MODIFIER_PROPERTY_MODEL_SCALE
    }
    return funcs
end

function modifier_boss_troll_warlord_enrage:GetModifierAttackSpeedBonus()
	if self:GetParent():PassivesDisabled() then return end
    return self:GetSpecialValueFor("bonus_as")
end

function modifier_boss_troll_warlord_enrage:GetModifierMoveSpeedBonus_Percentage()
	if self:GetParent():PassivesDisabled() then return end
    return self:GetSpecialValueFor("bonus_ms")
end

function modifier_boss_troll_warlord_enrage:GetBaseAttackTime_Bonus()
	if self:GetParent():PassivesDisabled() then return end
    return self:GetSpecialValueFor("bonus_at")
end

function modifier_boss_troll_warlord_enrage:GetModifierModelScale()
    return 25
end

function modifier_boss_troll_warlord_enrage:GetEffectName()
	return "particles/units/heroes/hero_ogre_magi/ogre_magi_bloodlust_buff.vpcf"
end

function modifier_boss_troll_warlord_enrage:IsHidden()
	return true
end

function modifier_boss_troll_warlord_enrage:IsPurgeException()
	return false
end

function modifier_boss_troll_warlord_enrage:IsPurgable()
	return false
endboss_troll_warlord_ensare = boss_troll_warlord_ensare or class({})
LinkLuaModifier( "modifier_boss_troll_warlord_ensare", "bosses/boss_troll_warlord/boss_troll_warlord_ensare.lua", LUA_MODIFIER_MOTION_NONE )

function boss_troll_warlord_ensare:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local maxTargets = self:GetSpecialValueFor("max_targets")
	local currentTargets = 0
	self.locations = {}
	
	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), self:GetSpecialValueFor("range"))
	for _,enemy in pairs(enemies) do
		if currentTargets < maxTargets then
			ParticleManager:FireWarningParticle(enemy:GetAbsOrigin(), self:GetSpecialValueFor("radius"))
			table.insert(self.locations, enemy:GetAbsOrigin())
			currentTargets = currentTargets + 1
		end
	end
	return true
end

function boss_troll_warlord_ensare:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_Meepo.Earthbind.Cast", caster)

	for _,point in pairs(self.locations) do
		local dummy = caster:CreateDummy(point)
		self:FireTrackingProjectile("particles/units/heroes/hero_meepo/meepo_earthbind_projectile_fx.vpcf", dummy, 500, {}, DOTA_PROJECTILE_ATTACHMENT_ATTACK_1, false, false, 0)
		dummy:ForceKill(false)
	end
end

function boss_troll_warlord_ensare:OnProjectileHit(hTarget, vLocation)
	local caster = self:GetCaster()

	local enemies = caster:FindEnemyUnitsInRadius(vLocation, self:GetSpecialValueFor("radius"))
	for _,enemy in pairs(enemies) do
		if not enemy:TriggerSpellAbsorb(self) then
			EmitSoundOn("Hero_Meepo.Earthbind.Target", enemy)
			enemy:AddNewModifier(caster, self, "modifier_boss_troll_warlord_ensare", {Duration = self:GetSpecialValueFor("duration")})
		end
	end
end

modifier_boss_troll_warlord_ensare = class({})
function modifier_boss_troll_warlord_ensare:IsDebuff()
	return true
end

function modifier_boss_troll_warlord_ensare:CheckState()
	local state = { [MODIFIER_STATE_ROOTED] = true,
					[MODIFIER_STATE_INVISIBLE] = false}
	return state
end

function modifier_boss_troll_warlord_ensare:GetEffectName()
	return "particles/units/heroes/hero_meepo/meepo_earthbind.vpcf"
endboss_troll_warlord_mystic_axes = class({})
LinkLuaModifier( "modifier_boss_troll_warlord_mystic_axes", "bosses/boss_troll_warlord/boss_troll_warlord_mystic_axes.lua", LUA_MODIFIER_MOTION_NONE )

function boss_troll_warlord_mystic_axes:OnSpellStart()
	local caster = self:GetCaster()
	local maxAxe = self:GetSpecialValueFor("axe_number")
	local currentAxe = 0

	Timers:CreateTimer(FrameTime(), function()
		if currentAxe < maxAxe then
			local axe = CreateUnitByName("npc_dota_boss_troll_warlord_mystic_axe", caster:GetAbsOrigin() + ActualRandomVector(500, 250), true, caster, caster, caster:GetTeam())
			EmitSoundOn("Hero_TrollWarlord.WhirlingAxes.Melee", axe)
			axe:AddNewModifier(caster, self, "modifier_boss_troll_warlord_mystic_axes", {duration = self:GetSpecialValueFor("duration")})
			currentAxe = currentAxe + 1
			return 0.1
		else
			return nil
		end
	end)
end

modifier_boss_troll_warlord_mystic_axes = class({})
function modifier_boss_troll_warlord_mystic_axes:OnCreated(table)
	self.damage = self:GetSpecialValueFor("damage") * 0.1
	if IsServer() then
		local parent = self:GetParent()
		local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_troll_warlord/troll_warlord_whirling_axe_melee.vpcf", PATTACH_POINT_FOLLOW, parent)
					ParticleManager:SetParticleControlEnt(nfx, 0, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin()+Vector(0,0,150), true)
					ParticleManager:SetParticleControlEnt(nfx, 1, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin()+Vector(0,0,150), true)
					ParticleManager:SetParticleControlEnt(nfx, 3, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin()+Vector(0,0,150), true)
					ParticleManager:SetParticleControl(nfx, 4, Vector(500, 0, 0))
		self:AddEffect(nfx)
		self:StartIntervalThink(1)
	end
end

function modifier_boss_troll_warlord_mystic_axes:OnIntervalThink()
	local caster = self:GetCaster()
	local parent = self:GetParent()
	if not self.init then
		self.init = true
		self:StartIntervalThink(0.1)
	end
	local enemies = caster:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), self:GetSpecialValueFor("axe_radius"))
	for _,enemy in pairs(enemies) do
		self:GetAbility():DealDamage(parent, enemy, self.damage, {damage_flags = DOTA_DAMAGE_FLAG_BYPASSES_BLOCK}, 0)
	end
	if not caster:IsAlive() then
		parent:Destroy()
		self:Destroy()
	end
end

function modifier_boss_troll_warlord_mystic_axes:OnRemoved()
	if IsServer() then
		self:GetParent():ForceKill(false)
		UTIL_Remove( self:GetParent() )
	end
end

function modifier_boss_troll_warlord_mystic_axes:CheckState()
	local state = { [MODIFIER_STATE_INVULNERABLE] = true,
					[MODIFIER_STATE_UNSELECTABLE] = true,
					[MODIFIER_STATE_UNTARGETABLE] = true,
					[MODIFIER_STATE_ATTACK_IMMUNE] = true,
					[MODIFIER_STATE_MAGIC_IMMUNE] = true,
					[MODIFIER_STATE_NO_HEALTH_BAR] = true,
					[MODIFIER_STATE_NO_UNIT_COLLISION] = true,
					[MODIFIER_STATE_NO_TEAM_SELECT] = true,}
	return state
endboss_troll_warlord_mystic_axes_charge = class({})
LinkLuaModifier( "modifier_boss_troll_warlord_mystic_axes_charge", "bosses/boss_troll_warlord/boss_troll_warlord_mystic_axes_charge.lua" ,LUA_MODIFIER_MOTION_NONE )

function boss_troll_warlord_mystic_axes_charge:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	local start = caster:GetAbsOrigin()
	local distance = self:GetTalentSpecialValueFor("range")
	self.direction = CalculateDirection(target, caster)
	self.hitTargets = {}
	EmitSoundOn("Ability.AssassinateLoad", self:GetCaster())
	ParticleManager:FireLinearWarningParticle(start, start + self.direction * distance, self:GetTalentSpecialValueFor("radius"))
	-- Timers:CreateTimer( self:GetCastPoint(), function() self:OnSpellStart() end )
	return true
end

function boss_troll_warlord_mystic_axes_charge:OnSpellStart()
    local caster = self:GetCaster()
	local start = caster:GetAbsOrigin()
	self.distance = self:GetSpecialValueFor("range")
	local endPoint = start + caster:GetForwardVector() * self.distance
	local speed = self:GetSpecialValueFor("speed")*FrameTime()
	local damage = self:GetSpecialValueFor("damage")
	Timers:CreateTimer(function()
		if self:IsNull() then return end
		if self.distance > 0 then
			self.distance = self.distance - speed
			GridNav:DestroyTreesAroundPoint(caster:GetAbsOrigin(), self:GetTalentSpecialValueFor("radius"), true)
			caster:SetAbsOrigin(GetGroundPosition(caster:GetAbsOrigin(), caster) + self.direction*speed)
			local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), self:GetSpecialValueFor("axe_radius"))
			for _,enemy in pairs(enemies) do
				if not self.hitTargets[enemy:entindex()] then
					self:DealDamage(caster, enemy, damage, {}, 0)
					self.hitTargets[enemy:entindex()] = true
				end
			end
			return 0
		else
			FindClearSpaceForUnit(caster, caster:GetAbsOrigin(), false)
		end
	end)
endboss_troll_warlord_savage_leap = class({})
LinkLuaModifier("modifier_boss_troll_warlord_savage_leap_movement", "bosses/boss_troll_warlord/boss_troll_warlord_savage_leap", LUA_MODIFIER_MOTION_NONE)
LinkLuaModifier("modifier_boss_troll_warlord_savage_leap_ride", "bosses/boss_troll_warlord/boss_troll_warlord_savage_leap", LUA_MODIFIER_MOTION_NONE)

function boss_troll_warlord_savage_leap:OnAbilityPhaseStart()
	self.pos = self:GetCursorTarget():GetAbsOrigin()
	ParticleManager:FireWarningParticle( self.pos, self:GetSpecialValueFor("radius"))
	return true
end

function boss_troll_warlord_savage_leap:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Ability.Leap", caster)
	caster:AddNewModifier( caster, self, "modifier_boss_troll_warlord_savage_leap_movement", {})
end

modifier_boss_troll_warlord_savage_leap_movement = class({})

if IsServer() then
	function modifier_boss_troll_warlord_savage_leap_movement:OnCreated()
		local parent = self:GetParent()
		self.endPos = self:GetAbility().pos
		self.distance = CalculateDistance( self.endPos, parent )
		self.direction = CalculateDirection( self.endPos, parent )
		self.speed = self.distance / self:GetSpecialValueFor("leap_duration") * FrameTime()
		self.initHeight = GetGroundHeight(parent:GetAbsOrigin(), parent)
		self.height = self.initHeight
		self.maxHeight = 350
		self:StartMotionController()
	end
	
	
	function modifier_boss_troll_warlord_savage_leap_movement:OnDestroy()
		local parent = self:GetParent()
		local parentPos = parent:GetAbsOrigin()

		FindClearSpaceForUnit(parent, parentPos, true)
		if parent:IsFrozen() then return end
		local ability = self:GetAbility()
		local damage = self:GetSpecialValueFor("damage") * parent:GetModelScale()
		local radius = self:GetSpecialValueFor("radius") * parent:GetModelScale()
		
		ParticleManager:FireParticle("particles/units/heroes/hero_centaur/centaur_warstomp.vpcf", PATTACH_ABSORIGIN, parent, {[1] = Vector(radius, 1, 1)})
		for _, enemy in ipairs( parent:FindEnemyUnitsInRadius( parentPos, radius ) ) do
			ability:DealDamage(parent, enemy, damage)
		end
		EmitSoundOn("Ability.TossImpact", parent)
		self:StopMotionController()
	end
	
	function modifier_boss_troll_warlord_savage_leap_movement:DoControlledMotion()
		if self:GetParent():IsNull() then return end
		local parent = self:GetParent()
		self.distanceTraveled =  self.distanceTraveled or 0
		if parent:IsAlive() and self.distanceTraveled < self.distance and not parent:IsFrozen() then
			local newPos = GetGroundPosition(parent:GetAbsOrigin(), parent) + self.direction * self.speed
			newPos.z = self.height + self.maxHeight * math.sin( (self.distanceTraveled/self.distance) * math.pi )
			parent:SetAbsOrigin( newPos )
			
			self.distanceTraveled = self.distanceTraveled + self.speed
		else
			FindClearSpaceForUnit(parent, parent:GetAbsOrigin(), true)
			local enemies = parent:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), self:GetSpecialValueFor("radius"))
			for _,enemy in pairs(enemies) do
				if enemy:IsHero() then
					if not enemy:TriggerSpellAbsorb(self) then
						self:GetAbility().enemy = enemy
						parent:AddNewModifier(parent, self:GetAbility(), "modifier_boss_troll_warlord_savage_leap_ride", {Duration = self:GetSpecialValueFor("duration")})
						self:GetAbility().enemy:Daze(self:GetAbility(), self:GetCaster(), self:GetSpecialValueFor("duration"))
					end
					break
				end
			end
			self:Destroy()
			return nil
		end       
		
	end
end

function modifier_boss_troll_warlord_savage_leap_movement:GetEffectName()
	return "particles/units/heroes/hero_tiny/tiny_toss_blur.vpcf"
end

function modifier_boss_troll_warlord_savage_leap_movement:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true}
end

function modifier_boss_troll_warlord_savage_leap_movement:DeclareFunctions()
	return {MODIFIER_PROPERTY_OVERRIDE_ANIMATION}
end

function modifier_boss_troll_warlord_savage_leap_movement:GetOverrideAnimation()
	return ACT_DOTA_CAST_ABILITY_3
end

modifier_boss_troll_warlord_savage_leap_ride = class({})
function modifier_boss_troll_warlord_savage_leap_ride:OnCreated(table)
	if IsServer() then 
		self:StartIntervalThink(FrameTime())
		self:GetParent():FindAbilityByName("boss_troll_warlord_axe_fury"):SetActivated(true)
	end
end

function modifier_boss_troll_warlord_savage_leap_ride:OnIntervalThink()
	if self:GetAbility().enemy:IsAlive() then
		self:GetParent():SetAbsOrigin(self:GetAbility().enemy:GetAbsOrigin())
		self:GetParent():SetForceAttackTarget(self:GetAbility().enemy)
	else
		self:Destroy()
	end
end

function modifier_boss_troll_warlord_savage_leap_ride:OnRemoved()
	if IsServer() then
		FindClearSpaceForUnit(self:GetParent(), self:GetParent():GetAbsOrigin(), false)
		self:GetAbility().enemy = nil
		self:GetParent():SetForceAttackTarget(nil)
		self:GetParent():FindAbilityByName("boss_troll_warlord_axe_fury"):SetActivated(false)
	end
end

function modifier_boss_troll_warlord_savage_leap_ride:CheckState()
    local state = { [MODIFIER_STATE_NO_UNIT_COLLISION] = true,
                    [MODIFIER_STATE_ROOTED] = true,
                    [MODIFIER_STATE_SILENCED] = true}
    return state
endboss_valgraduth_bomb_spores = class({})

function boss_valgraduth_bomb_spores:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCaster():GetAbsOrigin(), self:GetSpecialValueFor("spore_max_distance") )
	return true
end

function boss_valgraduth_bomb_spores:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier( caster, self, "modifier_boss_valgraduth_bomb_spores", {duration = self:GetSpecialValueFor("spore_duration")} )
end

modifier_boss_valgraduth_bomb_spores = class({})
LinkLuaModifier("modifier_boss_valgraduth_bomb_spores", "bosses/boss_valgraduth/boss_valgraduth_bomb_spores", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_valgraduth_bomb_spores:OnCreated()
		self.spores_per_sec = self:GetSpecialValueFor("spores_per_second")
		self.spore_speed = self:GetSpecialValueFor("spore_speed")
		self.spore_max_distance = self:GetSpecialValueFor("spore_max_distance")
		self.spore_min_distance = self:GetSpecialValueFor("spore_min_distance")
		self.linger_duration = self:GetSpecialValueFor("linger_duration")
		self:StartIntervalThink( 1 / self.spores_per_sec )
	end

	function modifier_boss_valgraduth_bomb_spores:OnRefresh()
		self:OnCreated()
	end
	
	function modifier_boss_valgraduth_bomb_spores:OnIntervalThink()
		local caster = self:GetCaster()
		caster:StartGestureWithPlaybackRate( ACT_DOTA_CAST_ABILITY_4, 2 )
		local spawn = CreateUnitByName( "npc_dota_techies_land_mine", caster:GetAbsOrigin() + RandomVector( 15 ), true, nil, nil, DOTA_TEAM_BADGUYS)
		local distance = RandomInt( self.spore_min_distance, self.spore_max_distance )
		local duration = distance / self.spore_speed
		spawn:ApplyKnockBack(caster:GetAbsOrigin(), duration, duration, distance, 600, caster, self, false)
		spawn:AddNewModifier( caster, self:GetAbility(), "modifier_boss_valgraduth_bomb_spores_bomb", {duration = self.linger_duration})
	end
end

function modifier_boss_valgraduth_bomb_spores:CheckState()
	return {[MODIFIER_STATE_DISARMED] = true}
end

modifier_boss_valgraduth_bomb_spores_bomb = class({})
LinkLuaModifier("modifier_boss_valgraduth_bomb_spores_bomb", "bosses/boss_valgraduth/boss_valgraduth_bomb_spores", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_valgraduth_bomb_spores_bomb:OnCreated()
		self.trigger_radius = self:GetSpecialValueFor("trigger_radius")
		self.explosion_radius = self:GetSpecialValueFor("explosion_radius")
		self.damage = self:GetSpecialValueFor("damage")
		self:StartIntervalThink(0.1)
	end
	
	function modifier_boss_valgraduth_bomb_spores_bomb:OnIntervalThink()
		local parent = self:GetParent()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		local position = parent:GetAbsOrigin()
		local foundInTriggerRange = false
		if not caster or not ability or caster:IsNull() or ability:IsNull() then
			self:Destroy()
			return
		end
		for _, enemy in ipairs( parent:FindEnemyUnitsInRadius( position, self.trigger_radius ) ) do
			if CalculateDistance(parent, enemy, true) <= self.trigger_radius then
				foundInTriggerRange = true
				break
			end
		end
		if foundInTriggerRange then
			for _, enemy in ipairs( parent:FindEnemyUnitsInRadius( position, self.explosion_radius ) ) do
				ability:DealDamage( caster, enemy, self.damage )
			end
			EmitSoundOn( "Hero_Techies.LandMine.Detonate", parent )
			ParticleManager:FireParticle( "particles/units/heroes/hero_techies/techies_land_mine_explode.vpcf", PATTACH_ABSORIGIN, parent )
			self:Destroy()
		end
	end
	
	function modifier_boss_valgraduth_bomb_spores_bomb:OnDestroy()
		self:GetParent():ForceKill(false)
		UTIL_Remove( self:GetParent() )
	end
end

function modifier_boss_valgraduth_bomb_spores_bomb:CheckState()
	return {[MODIFIER_STATE_INVULNERABLE] = true,
			[MODIFIER_STATE_UNSELECTABLE] = true,
			[MODIFIER_STATE_NO_HEALTH_BAR] = true,
			[MODIFIER_STATE_NO_UNIT_COLLISION] = true,
			[MODIFIER_STATE_UNTARGETABLE] = true}
end

function modifier_boss_valgraduth_bomb_spores_bomb:IsHidden()
	return true
endboss_valgraduth_breath_of_the_wild = class({})

function boss_valgraduth_breath_of_the_wild:GetIntrinsicModifierName()
	return "modifier_boss_valgraduth_breath_of_the_wild"
end

modifier_boss_valgraduth_breath_of_the_wild = class({})
LinkLuaModifier( "modifier_boss_valgraduth_breath_of_the_wild", "bosses/boss_valgraduth/boss_valgraduth_breath_of_the_wild", LUA_MODIFIER_MOTION_NONE )

if IsServer() then
	function modifier_boss_valgraduth_breath_of_the_wild:OnCreated()
		self.possibleSpawns = {	"npc_dota_boss26_mini", "npc_dota_boss6", "npc_dota_creature_broodmother", "npc_dota_boss_wolf", "npc_dota_boss26", "npc_dota_boss18", "npc_dota_boss23_m", "npc_dota_boss10"}
		self.health = self:GetSpecialValueFor("base_health")
		self.damage = self:GetSpecialValueFor("base_damage")
		self:StartIntervalThink( 1 )
	end
	
	function modifier_boss_valgraduth_breath_of_the_wild:OnRefresh()
		self:OnCreated()
	end
	
	function modifier_boss_valgraduth_breath_of_the_wild:OnIntervalThink()
		if not self:GetParent():IsAlive() then return end
		self:StartIntervalThink( self:GetSpecialValueFor("spawn_rate") )
		self:SetDuration( self:GetSpecialValueFor("spawn_rate") + 0.1, true )
		local spawn = CreateUnitByName( self.possibleSpawns[RandomInt(1, #self.possibleSpawns)], self:GetParent():GetAbsOrigin() + RandomVector( 150 ), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn:SetCoreHealth( self.health )
		spawn:SetAverageBaseDamage( self.damage, 25 )
		EmitSoundOn( "Hero_Treant.NaturesGuise.On", self:GetParent() )
	end
endboss_valgraduth_entangling_grip = class({})

function boss_valgraduth_entangling_grip:GetIntrinsicModifierName()
	return "modifier_boss_valgraduth_entangling_grip"
end

modifier_boss_valgraduth_entangling_grip = class({})
LinkLuaModifier( "modifier_boss_valgraduth_entangling_grip", "bosses/boss_valgraduth/boss_valgraduth_entangling_grip", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_valgraduth_entangling_grip:OnCreated()
	self.chance = self:GetSpecialValueFor("entangle_chance")
	self.duration = self:GetSpecialValueFor("entangle_duration")
end

function modifier_boss_valgraduth_entangling_grip:OnRefresh()
	self:OnCreated()
end

function modifier_boss_valgraduth_entangling_grip:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_boss_valgraduth_entangling_grip:OnAttackLanded(params)
	if self:GetAbility():IsCooldownReady() and params.attacker == self:GetParent() and self:RollPRNG( self.chance ) then
		params.target:Root( self:GetAbility(), params.attacker, self.duration )
		self:GetAbility():StartCooldown( self:GetAbility():GetCooldown( -1 ) )
		EmitSoundOn( "Hero_Treant.LeechSeed.Target", self:GetParent() )
	end
end

function modifier_boss_valgraduth_entangling_grip:IsHidden()
	return true
endboss_valgraduth_forests_protection = class({})

function boss_valgraduth_forests_protection:OnSpellStart()
	local caster = self:GetCaster()
	
	EmitSoundOn( "Hero_Treant.LivingArmor.Cast", caster )
	for _, ally in ipairs( caster:FindFriendlyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do
		ally:AddNewModifier( caster, self, "modifier_boss_valgraduth_forests_protection", {})
		EmitSoundOn( "Hero_Treant.LivingArmor.Target", ally )
	end
end

modifier_boss_valgraduth_forests_protection = class({})
LinkLuaModifier( "modifier_boss_valgraduth_forests_protection", "bosses/boss_valgraduth/boss_valgraduth_forests_protection", LUA_MODIFIER_MOTION_NONE )

function modifier_boss_valgraduth_forests_protection:OnCreated()
	self.instances = self:GetSpecialValueFor("block_count")
	if self:GetParent() == self:GetCaster() then
		self.instances = self.instances * 2
	end
	self.block = self:GetSpecialValueFor("block_amount")
	if IsServer() then
		self:SetStackCount( self.instances )
		
		local target = self:GetParent()
		local treeFX = ParticleManager:CreateParticle("particles/units/heroes/hero_treant/treant_livingarmor.vpcf", PATTACH_POINT_FOLLOW, target)
		ParticleManager:SetParticleControlEnt(treeFX, 0, target, PATTACH_POINT_FOLLOW, "attach_feet", target:GetAbsOrigin(), true)
		ParticleManager:SetParticleControlEnt(treeFX, 1, target, PATTACH_POINT_FOLLOW, "attach_feet", target:GetAbsOrigin(), true)
		self:AddEffect(treeFX)
	end
end

function modifier_boss_valgraduth_forests_protection:OnRefresh()
	self.instances = self:GetSpecialValueFor("block_count")
	if self:GetParent() == self:GetCaster() then
		self.instances = self.instances * 2
	end
	self.block = self:GetSpecialValueFor("block_amount")
	if IsServer() then
		self:SetStackCount( self.instances )
	end
end

function modifier_boss_valgraduth_forests_protection:DeclareFunctions()
	return {MODIFIER_PROPERTY_TOTAL_CONSTANT_BLOCK}
end

function modifier_boss_valgraduth_forests_protection:GetModifierTotal_ConstantBlock(params)
	self:SetStackCount( self:GetStackCount() - 1)
	if self:GetStackCount() <= 0 then
		self:Destroy()
	end
	return self.block
endboss_valgraduth_roots_grip = class({})

function boss_valgraduth_roots_grip:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	caster:EmitSound("Hero_Treant.Overgrowth.Cast")
	
	local duration = self:GetSpecialValueFor("root_duration")
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), self:GetTrueCastRange() ) ) do
		enemy:AddNewModifier(caster, self, "modifier_boss_valgraduth_roots_grip_root", {duration = duration})
		ParticleManager:FireRopeParticle("particles/units/heroes/hero_treant/treant_overgrowth_trails.vpcf", PATTACH_POINT_FOLLOW, caster, enemy)
		enemy:EmitSound("Hero_Treant.Overgrowth.Target")
	end
end

modifier_boss_valgraduth_roots_grip_root = class({})
LinkLuaModifier("modifier_boss_valgraduth_roots_grip_root", "bosses/boss_valgraduth/boss_valgraduth_roots_grip", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_valgraduth_roots_grip_root:OnCreated()
		self.damage = self:GetSpecialValueFor("root_damage")
		self.pull = self:GetSpecialValueFor("root_pull") * FrameTime()
		self.damageTick = 1
		self:StartIntervalThink(0)
	end
	
	function modifier_boss_valgraduth_roots_grip_root:OnRefresh()
		self:OnCreated()
	end
	
	function modifier_boss_valgraduth_roots_grip_root:OnIntervalThink()
		self.damageTick = self.damageTick - FrameTime()
		if CalculateDistance( self:GetCaster(), self:GetParent() ) >= 250 + self:GetParent():GetHullRadius() + self:GetCaster():GetHullRadius() + self:GetParent():GetCollisionPadding() + self:GetCaster():GetCollisionPadding() then
			self:GetParent():SetAbsOrigin( self:GetParent():GetAbsOrigin() + CalculateDirection( self:GetCaster(), self:GetParent() ) * self.pull )
		else
			self:Destroy()
		end
		if self.damageTick <= 0 then
			self:GetAbility():DealDamage( self:GetCaster(), self:GetCaster(), self.damage )
			self.damageTick = 1
		end
	end
	
	function modifier_boss_valgraduth_roots_grip_root:OnDestroy()
		ResolveNPCPositions( self:GetParent():GetAbsOrigin(), 128 )
	end
end

function modifier_boss_valgraduth_roots_grip_root:CheckState()
	return {[MODIFIER_STATE_ROOTED] = true,
			[MODIFIER_STATE_DISARMED] = true,
			[MODIFIER_STATE_INVISIBLE] = false}
end

function modifier_boss_valgraduth_roots_grip_root:GetEffectName()
	return "particles/econ/items/dark_willow/dark_willow_chakram_immortal/dark_willow_chakram_immortal_bramble_root.vpcf"
endvile_archmage_ethereal_blow = class({})

function vile_archmage_ethereal_blow:OnSpellStart()
	local caster = self:GetCaster()
	local hTarget = self:GetCursorTarget()
	if hTarget:TriggerSpellAbsorb(self) then return end
	hTarget:AddNewModifier(caster, self, "modifier_vile_archmage_ethereal_blow", {duration = self:GetTalentSpecialValueFor("duration")})
	EmitSoundOn("Hero_Pugna.Decrepify", hTarget)
end

LinkLuaModifier( "modifier_vile_archmage_ethereal_blow", "bosses/boss_vile_archmage/vile_archmage_ethereal_blow" ,LUA_MODIFIER_MOTION_NONE )
modifier_vile_archmage_ethereal_blow = class({})

function modifier_vile_archmage_ethereal_blow:OnCreated()
	self.magic_damage = self:GetAbility():GetTalentSpecialValueFor("mr_loss")
	self.slow = self:GetAbility():GetTalentSpecialValueFor("slow")
	if IsServer() then self:GetAbility():StartDelayedCooldown() end
end

function modifier_vile_archmage_ethereal_blow:OnRefresh()
	self.magic_damage = self:GetAbility():GetTalentSpecialValueFor("mr_loss")
	self.slow = self:GetAbility():GetTalentSpecialValueFor("slow")
	if IsServer() then self:GetAbility():StartDelayedCooldown() end
end

function modifier_vile_archmage_ethereal_blow:OnDestroy()
	if IsServer() then self:GetAbility():EndDelayedCooldown() end
end

function modifier_vile_archmage_ethereal_blow:CheckState()
    local state = {
		[MODIFIER_STATE_NO_UNIT_COLLISION] = true,
		[MODIFIER_STATE_DISARMED] = true,
	}
	return state
end

function modifier_vile_archmage_ethereal_blow:DeclareFunctions()
	funcs = {
				MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE,
				MODIFIER_PROPERTY_MAGICAL_RESISTANCE_BONUS
			}
	return funcs
end

function modifier_vile_archmage_ethereal_blow:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end

function modifier_vile_archmage_ethereal_blow:GetModifierMagicalResistanceBonus()
	return self.magic_damage
end

function modifier_vile_archmage_ethereal_blow:GetEffectName()
	return "particles/units/heroes/hero_pugna/pugna_decrepify.vpcf"
end

function modifier_vile_archmage_ethereal_blow:GetStatusEffectName()
	return "particles/status_fx/status_effect_ghost.vpcf"
end

function modifier_vile_archmage_ethereal_blow:StatusEffectPriority()
	return 15
endvile_archmage_runic_coil = class({})

if IsServer() then
	function vile_archmage_runic_coil:OnSpellStart()
		local caster = self:GetCaster()
		local point =  self:GetCursorPosition()
		local netherward = CreateUnitByName( "npc_dota_pugna_nether_ward_1", point, false, nil, nil, caster:GetTeamNumber() )
		netherward:AddNewModifier(self:GetCaster(), self, "modifier_vile_archmage_runic_coil_thinker", {duration = self:GetSpecialValueFor("duration")})
		netherward.particle = ParticleManager:CreateParticle("particles/units/heroes/hero_pugna/pugna_ward_ambient.vpcf", PATTACH_ABSORIGIN_FOLLOW, netherward)
			ParticleManager:SetParticleControl(netherward.particle, 0, netherward:GetAbsOrigin())
		netherward:SetCoreHealth( self:GetSpecialValueFor("hits") * 4 )
		EmitSoundOn("Hero_Pugna.NetherWard", netherward)
	end
end

LinkLuaModifier( "modifier_vile_archmage_runic_coil_thinker", "bosses/boss_vile_archmage/vile_archmage_runic_coil" ,LUA_MODIFIER_MOTION_NONE )
modifier_vile_archmage_runic_coil_thinker = class({})

function modifier_vile_archmage_runic_coil_thinker:OnCreated( kv )
	self.radius = self:GetAbility():GetSpecialValueFor( "radius" )
	self.dmg_mult = self:GetAbility():GetSpecialValueFor( "dmg_mult" )
end

function modifier_vile_archmage_runic_coil_thinker:OnDestroy( kv )
	if IsServer() then
		ParticleManager:DestroyParticle(self:GetParent().particle, false)
		ParticleManager:ReleaseParticleIndex(self:GetParent().particle)
		self:GetParent():RemoveSelf()
	end
end


function modifier_vile_archmage_runic_coil_thinker:DeclareFunctions()
	funcs = {
				MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE,
				MODIFIER_EVENT_ON_SPENT_MANA,
			}
	return funcs
end

function modifier_vile_archmage_runic_coil_thinker:GetModifierIncomingDamage_Percentage(params)
	if params.inflictor then return -999 end
	if params.damage <= 0 then return end
	local damage = 1
	if params.attacker:IsRealHero() then
		damage = 4
	end
	local hp = self:GetParent():GetHealth()
	if damage < hp then
		self:GetParent():SetHealth( hp - damage )
	else
		return nil
	end
	return -999
end

function modifier_vile_archmage_runic_coil_thinker:OnSpentMana(params)
	if IsServer() then
		if params and params.cost then
			local ward = self:GetParent()
			if not self:GetCaster() or self:GetCaster():IsNull() then
				ward:ForceKill(false)
				return
			end
			if params.unit:GetTeam() ~= ward:GetTeam() and CalculateDistance( params.unit, ward ) <= self.radius then
				ParticleManager:FireRopeParticle("particles/units/heroes/hero_pugna/pugna_ward_attack.vpcf", PATTACH_ABSORIGIN_FOLLOW, params.unit, ward)
				
				params.unit:EmitSound("Hero_Pugna.NetherWard.Target")
				ward:EmitSound("Hero_Pugna.NetherWard.Attack")
				self:GetAbility():DealDamage( self:GetCaster(), params.unit, params.cost*self.dmg_mult, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION + DOTA_DAMAGE_FLAG_REFLECTION })
			end
		end
	end
end

function modifier_vile_archmage_runic_coil_thinker:IsHidden()
	return true
end

function modifier_vile_archmage_runic_coil_thinker:IsPurgable()
    return false
end

function modifier_vile_archmage_runic_coil_thinker:CheckState()
    local state = {
		[MODIFIER_STATE_ROOTED] = true,
		[MODIFIER_STATE_MAGIC_IMMUNE] = true,
		[MODIFIER_STATE_DISARMED] = true,
	}
	return state
endvile_archmage_unstable_wand = class({})

function vile_archmage_unstable_wand:GetIntrinsicModifierName()
	return "modifier_vile_archmage_unstable_wand"
end

modifier_vile_archmage_unstable_wand = class({})
LinkLuaModifier("modifier_vile_archmage_unstable_wand", "bosses/boss_vile_archmage/vile_archmage_unstable_wand", LUA_MODIFIER_MOTION_NONE)

function modifier_vile_archmage_unstable_wand:OnCreated()
	self.dmg = self:GetTalentSpecialValueFor("damage_pct") / 100
end

function modifier_vile_archmage_unstable_wand:OnRefresh()
	self.dmg = self:GetTalentSpecialValueFor("damage_pct") / 100
end

function modifier_vile_archmage_unstable_wand:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_vile_archmage_unstable_wand:OnTakeDamage(params)
	if params.attacker == self:GetParent() 
	and params.unit ~= self:GetParent() 
	and not params.unit:PassivesDisabled()
	and self:GetParent():GetHealth() > 0 
	and not ( HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_HPLOSS) or HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_REFLECTION) or HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL) )
	and not params.inflictor then
		self:GetAbility():DealDamage( params.attacker, params.unit, params.original_damage * self.dmg, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
	end
end

function modifier_vile_archmage_unstable_wand:IsHidden()
	return true
endvile_archmage_vile_archon = class({})

function vile_archmage_vile_archon:GetIntrinsicModifierName()
	return "modifier_vile_archmage_vile_archon"
end

modifier_vile_archmage_vile_archon = class({})
LinkLuaModifier("modifier_vile_archmage_vile_archon", "bosses/boss_vile_archmage/vile_archmage_vile_archon", LUA_MODIFIER_MOTION_NONE)

function modifier_vile_archmage_vile_archon:OnCreated()
	self.interval = self:GetSpecialValueFor("interval")
	self.duration = self:GetSpecialValueFor("duration")
	if IsServer() then
		self:StartIntervalThink(self.interval)
	end
end

function modifier_vile_archmage_vile_archon:OnRefresh()
	self.boss = self:GetSpecialValueFor("interval")
	self.duration = self:GetSpecialValueFor("duration")
	if IsServer() then
		self:StartIntervalThink(self.interval)
	end
end

function modifier_vile_archmage_vile_archon:OnIntervalThink()
	if not self:GetCaster():PassivesDisabled() then
		self:GetCaster():AddNewModifier( self:GetCaster(), self:GetAbility(), "modifier_vile_archmage_vile_archon_buff", {duration = self.duration} )
	end
end

function modifier_vile_archmage_vile_archon:IsHidden()
	return true
end

modifier_vile_archmage_vile_archon_buff = class({})
LinkLuaModifier("modifier_vile_archmage_vile_archon_buff", "bosses/boss_vile_archmage/vile_archmage_vile_archon", LUA_MODIFIER_MOTION_NONE)

function modifier_vile_archmage_vile_archon_buff:OnCreated()
	self.cdr = self:GetSpecialValueFor("cooldown_reduction")
end

function modifier_vile_archmage_vile_archon_buff:OnRefresh()
	self.cr = self:GetSpecialValueFor("cooldown_reduction")
end

function modifier_vile_archmage_vile_archon_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_COOLDOWN_PERCENTAGE_STACKING}
end

function modifier_vile_archmage_vile_archon_buff:GetModifierPercentageCooldownStacking(params)
	return self.cdr
end

function modifier_vile_archmage_vile_archon_buff:GetEffectName()
	return "particles/units/heroes/hero_pugna/pugna_decrepify.vpcf"
endvile_archmage_vile_explosion = class({})

function vile_archmage_vile_explosion:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCursorPosition(), self:GetSpecialValueFor("radius") )
	return true
end

function vile_archmage_vile_explosion:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	
	local delay = self:GetSpecialValueFor("delay")
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	
	EmitSoundOnLocationWithCaster(position, "Hero_Pugna.NetherBlastPreCast", caster)
	ParticleManager:FireParticle("particles/units/heroes/hero_pugna/pugna_netherblast_pre.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius,1,1)})
	Timers:CreateTimer(delay, function()
		ParticleManager:FireParticle("particles/units/heroes/hero_pugna/pugna_netherblast.vpcf", PATTACH_WORLDORIGIN, nil, {[0] = position, [1] = Vector(radius,1,1)})
		EmitSoundOnLocationWithCaster(position, "Hero_Pugna.NetherBlast", caster)
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
			if not enemy:TriggerSpellAbsorb(self) then
				self:DealDamage( caster, enemy, damage )
			end
		end
	end)
endboss_warlock_conflagration = class({})
LinkLuaModifier( "modifier_boss_warlock_conflagration", "bosses/boss_warlock/boss_warlock_conflagration", LUA_MODIFIER_MOTION_NONE )

function boss_warlock_conflagration:OnSpellStart()
	local caster = self:GetCaster()

	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), FIND_UNITS_EVERYWHERE)
	for _,enemy in pairs(enemies) do
		if enemy:IsHero() then
			if not enemy:TriggerSpellAbsorb(self) then
				enemy:AddNewModifier(caster, self, "modifier_boss_warlock_conflagration", {Duration = self:GetSpecialValueFor("duration")})
				enemy:Daze(self, caster, self:GetSpecialValueFor("duration"))
			end
			break
		end
	end
end

modifier_boss_warlock_conflagration = class({})
function modifier_boss_warlock_conflagration:OnCreated(table)
	if IsServer() then
		self:StartIntervalThink(1)
	end
end

function modifier_boss_warlock_conflagration:OnIntervalThink()
	local caster = self:GetCaster()
	local parent = self:GetParent()
	self:GetAbility():DealDamage(caster, parent, self:GetSpecialValueFor("damage"), {}, 0)
	if RollPercentage(self:GetSpecialValueFor("chance")) then
		local enemies = caster:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), self:GetAbility():GetTrueCastRange())
		for _,enemy in pairs(enemies) do
			if enemy ~= parent then
				self:GetAbility():DealDamage(caster, enemy, self:GetSpecialValueFor("damage")/#enemies, {}, 0)
			end
		end
	end
	self:StartIntervalThink(0.5)
end

function modifier_boss_warlock_conflagration:GetEffectName()
	return "particles/units/heroes/hero_huskar/huskar_burning_spear_debuff.vpcf"
end

function modifier_boss_warlock_conflagration:GetStatusEffectName()
	return "particles/status_fx/status_effect_burn.vpcf"
end

function modifier_boss_warlock_conflagration:StatusEffectPriority()
	return 12
end

function modifier_boss_warlock_conflagration:IsDebuff()
	return true
endboss_warlock_demon_lust = class({})
LinkLuaModifier( "modifier_boss_warlock_demon_lust", "bosses/boss_warlock/boss_warlock_demon_lust", LUA_MODIFIER_MOTION_NONE )

function boss_warlock_demon_lust:OnSpellStart()
	local caster = self:GetCaster()

	caster:AddNewModifier(caster, self, "modifier_boss_warlock_demon_lust", {Duration = self:GetSpecialValueFor("duration")})
end

modifier_boss_warlock_demon_lust = class({})
function modifier_boss_warlock_demon_lust:DeclareFunctions()
    local funcs = {
        
    }
    return funcs
end

function modifier_boss_warlock_demon_lust:GetModifierAttackSpeedBonus()
    return self:GetSpecialValueFor("bonus_as")
end

function modifier_boss_warlock_demon_lust:GetBaseAttackTime_Bonus()
    return self:GetSpecialValueFor("bonus_at")
end

function modifier_boss_warlock_demon_lust:IsDebuff()
    return false
end

function modifier_boss_warlock_demon_lust:GetEffectName()
    return "particles/units/heroes/hero_ogre_magi/ogre_magi_bloodlust_buff.vpcf"
endboss_warlock_desecrate = class({})
LinkLuaModifier( "modifier_boss_warlock_desecrate", "bosses/boss_warlock/boss_warlock_desecrate", LUA_MODIFIER_MOTION_NONE )

function boss_warlock_desecrate:GetChannelTime()
	return self:GetSpecialValueFor("duration")
end

function boss_warlock_desecrate:GetChannelAnimation()
	return ACT_DOTA_CHANNEL_ABILITY_3
end

function boss_warlock_desecrate:GetChannelAnimation()
	return ACT_DOTA_CHANNEL_ABILITY_3
end

function boss_warlock_desecrate:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle(self:GetCaster():GetAbsOrigin(), 500)
	return true
end

function boss_warlock_desecrate:OnSpellStart()
	local caster = self:GetCaster()

	caster:AddNewModifier(caster, self, "modifier_status_immunity", {Duration = self:GetSpecialValueFor("duration")})

	self.newRadius = 0

	EmitSoundOn("Hero_ShadowDemon.DemonicPurge.Cast", self.caster)

	self.nfx = ParticleManager:CreateParticle("particles/bosses/boss_warlock/boss_warlock_desecrate.vpcf", PATTACH_ABSORIGIN_FOLLOW, caster)
	ParticleManager:SetParticleControl(self.nfx, 0, caster:GetAbsOrigin()+Vector(0,0,100) )
	ParticleManager:SetParticleControl(self.nfx, 1, Vector(self.newRadius,self.newRadius,self.newRadius))
end

function boss_warlock_desecrate:OnChannelThink(flInterval)
	self.newRadius = self.newRadius + 100 * FrameTime()
	ParticleManager:SetParticleControl(self.nfx, 1, Vector(self.newRadius,self.newRadius,self.newRadius))
	local enemies = self:GetCaster():FindEnemyUnitsInRadius(self:GetCaster():GetAbsOrigin(), self.newRadius)
	for _,enemy in pairs(enemies) do
		if not enemy:IsMagicImmune() and not enemy:IsInvulnerable() then
			enemy:DisableHealing(0.5)
			enemy:AddNewModifier(self:GetCaster(), self, "modifier_boss_warlock_desecrate", {Duration = 0.5}):IncrementStackCount()
		end
	end
end

function boss_warlock_desecrate:OnChannelFinish(bInterrupted)
	ParticleManager:ClearParticle(self.nfx)
	self:GetCaster():RemoveModifierByName("modifier_status_immunity")
end

modifier_boss_warlock_desecrate = class({})
function modifier_boss_warlock_desecrate:OnCreated(table)
	if IsServer() then self:StartIntervalThink(0.5) end
end

function modifier_boss_warlock_desecrate:OnIntervalThink()
	self:GetAbility():DealDamage(self:GetCaster(), self:GetParent(), self:GetSpecialValueFor("damage")*self:GetStackCount(), {}, 0)
end

function modifier_boss_warlock_desecrate:IsDebuff()
	return true
endboss_warlock_fatal_bonds = class({})
LinkLuaModifier( "modifier_boss_warlock_fatal_bonds_primary", "bosses/boss_warlock/boss_warlock_fatal_bonds", LUA_MODIFIER_MOTION_NONE )
LinkLuaModifier( "modifier_boss_warlock_fatal_bonds_secondary", "bosses/boss_warlock/boss_warlock_fatal_bonds", LUA_MODIFIER_MOTION_NONE )

function boss_warlock_fatal_bonds:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()

	target:AddNewModifier(caster, self, "modifier_boss_warlock_fatal_bonds_primary", {Duration = self:GetSpecialValueFor("duration")})
end

modifier_boss_warlock_fatal_bonds_primary = class({})
function modifier_boss_warlock_fatal_bonds_primary:OnCreated(table)
	if IsServer() then
		local caster = self:GetCaster()
		local parent = self:GetParent()

		local maxTargets = self:GetSpecialValueFor("max_targets") - 1
		local currentTargets = 0

		local enemies = caster:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), FIND_UNITS_EVERYWHERE, {order = FIND_CLOSEST})
		for _,enemy in pairs(enemies) do
			if enemy:IsHero() and currentTargets < maxTargets and enemy ~= parent then
				if not enemy:TriggerSpellAbsorb(self) then
					local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_warlock/warlock_fatal_bonds_base.vpcf", PATTACH_POINT_FOLLOW, caster)
								ParticleManager:SetParticleControlEnt(nfx, 0, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin(), true)
								ParticleManager:SetParticleControlEnt(nfx, 1, enemy, PATTACH_POINT_FOLLOW, "attach_hitloc", enemy:GetAbsOrigin(), true)
					self:AttachEffect(nfx)

					enemy:AddNewModifier(caster, self, "modifier_boss_warlock_fatal_bonds_secondary", {Duration = self:GetSpecialValueFor("duration")})
				end
				currentTargets = currentTargets + 1
			end
		end
	end
end

function modifier_boss_warlock_fatal_bonds_primary:DeclareFunctions()
	local funcs = {
		MODIFIER_EVENT_ON_TAKEDAMAGE
	}

	return funcs
end

function modifier_boss_warlock_fatal_bonds_primary:OnTakeDamage(params)
	if IsServer() then
		local parent = self:GetParent()
		local caster = self:GetCaster()
		if params.unit == parent then
			local damage = params.damage * self:GetSpecialValueFor("damage")/100
			local enemies = caster:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), FIND_UNITS_EVERYWHERE)
			for _,enemy in pairs(enemies) do
				if enemy:HasModifier("modifier_boss_warlock_fatal_bonds_secondary") then
					local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_warlock/warlock_fatal_bonds_hit.vpcf", PATTACH_POINT_FOLLOW, caster)
								ParticleManager:SetParticleControlEnt(nfx, 0, enemy, PATTACH_POINT_FOLLOW, "attach_hitloc", enemy:GetAbsOrigin(), true)
								ParticleManager:SetParticleControlEnt(nfx, 1, parent, PATTACH_POINT_FOLLOW, "attach_hitloc", parent:GetAbsOrigin(), true)
								ParticleManager:ReleaseParticleIndex(nfx)
					self:GetAbility():DealDamage(caster, enemy, damage, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION}, OVERHEAD_ALERT_DAMAGE)
				end
			end
		end
	end
end

function modifier_boss_warlock_fatal_bonds_primary:OnRemoved()
	if IsServer() then
		local caster = self:GetCaster()
		local parent = self:GetParent()
		local enemies = caster:FindEnemyUnitsInRadius(parent:GetAbsOrigin(), FIND_UNITS_EVERYWHERE)
		for _,enemy in pairs(enemies) do
			enemy:RemoveModifierByName("modifier_boss_warlock_fatal_bonds_secondary")
		end
	end
end

function modifier_boss_warlock_fatal_bonds_primary:GetEffectName()
	return "particles/units/heroes/hero_warlock/warlock_fatal_bonds_icon.vpcf"
end

function modifier_boss_warlock_fatal_bonds_primary:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
end

function modifier_boss_warlock_fatal_bonds_primary:IsDebuff()
	return true
end

function modifier_boss_warlock_fatal_bonds_primary:IsPurgable()
	return true
end

modifier_boss_warlock_fatal_bonds_secondary = class({})

function modifier_boss_warlock_fatal_bonds_secondary:GetEffectName()
	return "particles/units/heroes/hero_warlock/warlock_fatal_bonds_icon.vpcf"
end

function modifier_boss_warlock_fatal_bonds_secondary:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
end

function modifier_boss_warlock_fatal_bonds_secondary:IsDebuff()
	return true
end

function modifier_boss_warlock_fatal_bonds_secondary:IsPurgable()
	return true
endboss_warlock_inferno_spikes = class({})
LinkLuaModifier( "modifier_boss_warlock_inferno_spikes", "bosses/boss_warlock/boss_warlock_inferno_spikes", LUA_MODIFIER_MOTION_NONE )

function boss_warlock_inferno_spikes:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	ParticleManager:FireWarningParticle(caster:GetAbsOrigin(), 1000)
	caster:EmitSound("Creature.Laugh")
	return true
end

function boss_warlock_inferno_spikes:OnSpellStart()
	local caster = self:GetCaster()
	local speed = self:GetSpecialValueFor("speed")
	local width = self:GetSpecialValueFor("width")
	local range = 100000

	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), FIND_UNITS_EVERYWHERE)
	for _,enemy in pairs(enemies) do
		if enemy:IsRealHero() and not enemy:IsMagicImmune() and not enemy:IsInvulnerable() and not enemy:IsInvisible() then
			local direction = CalculateDirection(enemy, caster)
			self:FireLinearProjectile("particles/bosses/boss_warlockgolems/boss_ember_spike.vpcf", direction*speed, range, width, {}, false, false, 0)
		end
	end
end

function boss_warlock_inferno_spikes:OnProjectileHit(hTarget, vLocation)
	local caster = self:GetCaster()
	if hTarget then
		local blocked = hTarget:TriggerSpellAbsorb(self)
		if not blocked then
			hTarget:AddNewModifier(caster, self, "modifier_boss_warlock_inferno_spikes", {Duration = self:GetSpecialValueFor("duration")})
			self:DealDamage(caster, hTarget, self:GetSpecialValueFor("damage"), {}, 0)
		end
		return blocked
	end
end

modifier_boss_warlock_inferno_spikes = class({})
function modifier_boss_warlock_inferno_spikes:OnCreated(table)
	if IsServer() then self:StartIntervalThink(FrameTime()) end
end

function modifier_boss_warlock_inferno_spikes:OnIntervalThink()
	self.damage = self.damage or ( self:GetParent():GetMaxHealth() * (self:GetSpecialValueFor("dot")/100) * 0.25 ) / self:GetRemainingTime()
	if self:GetParent():InWater() then
		self:Destroy()
		return 
	end
	self:GetAbility():DealDamage(self:GetCaster(), self:GetParent(), self.damage, {damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION}, 0)
	self:StartIntervalThink(0.25)
end

function modifier_boss_warlock_inferno_spikes:GetEffectName()
	return "particles/units/heroes/hero_huskar/huskar_burning_spear_debuff.vpcf"
end

function modifier_boss_warlock_inferno_spikes:GetStatusEffectName()
	return "particles/status_fx/status_effect_burn.vpcf"
end

function modifier_boss_warlock_inferno_spikes:StatusEffectPriority()
	return 11
end

function modifier_boss_warlock_inferno_spikes:IsDebuff()
	return true
endboss_warlock_rain_of_fire = class({})

function boss_warlock_rain_of_fire:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	self.pos = target:GetAbsOrigin()

	ParticleManager:FireWarningParticle(self.pos, self:GetSpecialValueFor("radius"))

	return true
end

function boss_warlock_rain_of_fire:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	local pos = self.pos
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local delay = self:GetSpecialValueFor("delay")
	local interval = self:GetSpecialValueFor("wave_interval")
	local maxWaves = self:GetSpecialValueFor("wave_number")
	local currentWaves = 0

	Timers:CreateTimer(0, function()
		if currentWaves < maxWaves then
			local nfx = ParticleManager:CreateParticle("particles/bosses/boss_warlock/boss_warlock_rain_of_fire.vpcf", PATTACH_POINT, caster)
						ParticleManager:SetParticleControl(nfx, 0, pos)
						ParticleManager:SetParticleControl(nfx, 1, pos)
						ParticleManager:SetParticleControl(nfx, 3, pos)
						ParticleManager:SetParticleControl(nfx, 4, Vector(radius,radius,radius))
						ParticleManager:SetParticleControl(nfx, 5, Vector(1,0,0))
						ParticleManager:SetParticleControl(nfx, 6, pos)
						ParticleManager:SetParticleControl(nfx, 7, pos)
						ParticleManager:SetParticleControl(nfx, 8, pos)
						ParticleManager:SetParticleControl(nfx, 16, pos)
						ParticleManager:ReleaseParticleIndex(nfx)
			Timers:CreateTimer(delay, function()
				local enemies = caster:FindEnemyUnitsInRadius(pos, radius)
				for _,enemy in pairs(enemies) do
					if not enemy:TriggerSpellAbsorb(self) then
						self:DealDamage(caster, enemy, damage, {}, 0)
					end
				end
			end)
			currentWaves = currentWaves + 1
			return interval
		else
			return nil
		end
	end)
end
boss_warlock_ultimate_form = class({})
LinkLuaModifier( "modifier_boss_warlock_ultimate_form", "bosses/boss_warlock/boss_warlock_ultimate_form", LUA_MODIFIER_MOTION_NONE )

function boss_warlock_ultimate_form:GetIntrinsicModifierName()
	return "modifier_boss_warlock_ultimate_form"
end

modifier_boss_warlock_ultimate_form = class({})
function modifier_boss_warlock_ultimate_form:DeclareFunctions()
	local funcs = {
		MODIFIER_EVENT_ON_DEATH
	}

	return funcs
end

function modifier_boss_warlock_ultimate_form:OnDeath(params)
	if IsServer() then
		if params.unit == self:GetCaster() and self:GetAbility():IsActivated() then
			local caster = self:GetCaster()

			local demon = CreateUnitByName("npc_dota_boss_warlock_true_form", caster:GetAbsOrigin(), true, caster, caster, caster:GetTeam())
			local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_life_stealer/life_stealer_infest_emerge_bloody.vpcf", PATTACH_POINT, demon)
					ParticleManager:SetParticleControl(nfx, 0, demon:GetAbsOrigin())
					ParticleManager:ReleaseParticleIndex(nfx)
			demon.unitIsRoundNecessary = true
			if RoundManager:GetCurrentEvent():GetEventType() ~= 4 then
				demon:SetCoreHealth(2500)
			end
			FindClearSpaceForUnit(demon, demon:GetAbsOrigin(), true)
		end
	end
end

function modifier_boss_warlock_ultimate_form:IsDebuff()
	return true
endboss_warlock_unholy_summon = class({})

function boss_warlock_unholy_summon:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local maxTargets = self:GetSpecialValueFor("max_targets")
	local currentTargets = 0

	self.locations = {}

	local enemies = caster:FindEnemyUnitsInRadius(caster:GetAbsOrigin(), FIND_UNITS_EVERYWHERE)
	for _,enemy in pairs(enemies) do
		if enemy:IsHero() and currentTargets < maxTargets then
			if not enemy:TriggerSpellAbsorb(self) then
				ParticleManager:FireWarningParticle(enemy:GetAbsOrigin(), self:GetSpecialValueFor("radius"))
				ParticleManager:FireParticle("particles/units/heroes/hero_warlock/warlock_rain_of_chaos_start.vpcf", PATTACH_POINT, caster, {[0]=enemy:GetAbsOrigin()})
				table.insert(self.locations, enemy:GetAbsOrigin())
			end
			currentTargets = currentTargets + 1
		end
	end
	return true
end

function boss_warlock_unholy_summon:OnSpellStart()
	local caster = self:GetCaster()

	for _,location in pairs(self.locations) do
		local nfx = ParticleManager:CreateParticle("particles/units/heroes/hero_warlock/warlock_rain_of_chaos.vpcf", PATTACH_POINT, caster)
					ParticleManager:SetParticleControl(nfx, 0, location)
					ParticleManager:SetParticleControl(nfx, 1, Vector(1,1,1))
					ParticleManager:SetParticleControl(nfx, 2, location)
					ParticleManager:SetParticleControl(nfx, 5, location)
					ParticleManager:ReleaseParticleIndex(nfx)
		
		local demon = CreateUnitByName("npc_dota_boss_warlock_demon", location, true, caster, caster, caster:GetTeam())
		FindClearSpaceForUnit(demon, demon:GetAbsOrigin(), true)

		local enemies = caster:FindEnemyUnitsInRadius(location, self:GetSpecialValueFor("radius"))
		for _,enemy in pairs(enemies) do
			if not enemy:IsMagicImmune() and not enemy:IsInvulnerable() and not enemy:TriggerSpellAbsorb(self) then
				self:Stun(enemy, 1)
				self:DealDamage(caster, enemy, self:GetSpecialValueFor("damage"))
			end
		end
	end
endboss_reaper_multi_shot = class({})

function boss_reaper_multi_shot:GetIntrinsicModifierName()
	return "modifier_boss_reaper_multi_shot"
end

function boss_reaper_multi_shot:OnProjectileHit(target, position)
	if target then
		self:DealDamage(self:GetCaster(), target, self:GetCaster():GetAttackDamage(), {damage_type = DAMAGE_TYPE_PHYSICAL, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
	end
end

modifier_boss_reaper_multi_shot = class({})
LinkLuaModifier("modifier_boss_reaper_multi_shot", "bosses/boss_wk/boss_reaper_multi_shot", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_reaper_multi_shot:OnCreated()
	self.procHit = self:GetSpecialValueFor("attacks_to_proc")
	self.radius = self:GetSpecialValueFor("search_radius")
	self.hits = 0
end

function modifier_boss_reaper_multi_shot:OnRefresh()
	self.procHit = self:GetSpecialValueFor("attacks_to_proc")
	self.radius = self:GetSpecialValueFor("search_radius")
end

function modifier_boss_reaper_multi_shot:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK}
end

function modifier_boss_reaper_multi_shot:OnAttack(params)
	if params.attacker == self:GetParent() and not params.attacker:PassivesDisabled() then
		if self.hits > self.procHit then
			self.hits = 0
			for _, enemy in ipairs( params.attacker:FindEnemyUnitsInRadius( params.target:GetAbsOrigin(), self.radius ) ) do
				if params.target ~= enemy then
					self:GetAbility():FireTrackingProjectile( params.attacker:GetRangedProjectileName(), enemy, params.attacker:GetProjectileSpeed() )
				end
			end
		end
		self.hits = self.hits + 1
	end
end

function modifier_boss_reaper_multi_shot:IsHidden()
	return true
endboss_reaper_necrotic_hail = class({})

function boss_reaper_necrotic_hail:OnAbilityPhaseStart()
	local radius = self:GetSpecialValueFor("radius")
	ParticleManager:FireWarningParticle(self:GetCursorPosition(), radius)
	return true
end

function boss_reaper_necrotic_hail:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local radius = self:GetSpecialValueFor("radius")
	local damage = self:GetSpecialValueFor("damage")
	local duration = self:GetSpecialValueFor("duration")
	
	local soundBites = 5
	Timers:CreateTimer(function()
		EmitSoundOnLocationWithCaster(target + RandomVector(radius), "Hero_Clinkz.SearingArrows.Impact", caster)
		soundBites = soundBites - 1
		if soundBites > 0 then
			return 0.05
		end
	end)
	ParticleManager:FireParticle("particles/units/heroes/hero_legion_commander/legion_commander_odds.vpcf", PATTACH_CUSTOMORIGIN, caster, {	[0] = target, 
																																			[4] = Vector(radius + 150,1,1),
																																			[5] = Vector(radius + 150,1,1)} )
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( target, radius ) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, enemy, damage, {damage_type = DAMAGE_TYPE_PHYSICAL})
			enemy:AddNewModifier(caster, self, "modifier_boss_reaper_necrotic_hail", {duration = duration})
		end
	end
end

modifier_boss_reaper_necrotic_hail = class({})
LinkLuaModifier("modifier_boss_reaper_necrotic_hail", "bosses/boss_wk/boss_reaper_necrotic_hail", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_reaper_necrotic_hail:OnCreated()
	self.healRed = self:GetSpecialValueFor("heal_reduction")
	self.dmgAmp = self:GetSpecialValueFor("damage_amp")
end

function modifier_boss_reaper_necrotic_hail:OnCreated()
	self.healRed = self:GetSpecialValueFor("heal_reduction")
	self.dmgAmp = self:GetSpecialValueFor("damage_amp")
end

function modifier_boss_reaper_necrotic_hail:DeclareFunctions()
	return {MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_reaper_necrotic_hail:GetModifierHealAmplify_Percentage()
	return self.healRed
end

function modifier_boss_reaper_necrotic_hail:GetModifierIncomingDamage_Percentage()
	return self.dmgAmp
endboss_reaper_reposition = class({})

function boss_reaper_reposition:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_boss_reaper_reposition", {duration = self:GetSpecialValueFor("duration")})
	
	caster:EmitSound("Hero_Clinkz.WindWalk")
	ParticleManager:FireParticle("particles/units/heroes/hero_clinkz/clinkz_windwalk.vpcf", PATTACH_POINT_FOLLOW, caster)
end

modifier_boss_reaper_reposition = class({})
LinkLuaModifier("modifier_boss_reaper_reposition", "bosses/boss_wk/boss_reaper_reposition", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_reaper_reposition:OnDestroy()
	if IsServer() then self:GetParent().aiChasing = nil end
end

function modifier_boss_reaper_reposition:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_reaper_reposition:GetModifierMoveSpeedBonus_Percentage()
	return self:GetSpecialValueFor("bonus_ms")
end

function modifier_boss_reaper_reposition:GetEffectName()
	return "particles/units/heroes/hero_clinkz/clinkz_death_pact_buff.vpcf"
endboss_vanguard_back_breaker = class({})

function boss_vanguard_back_breaker:GetIntrinsicModifierName()
	return "modifier_boss_vanguard_back_breaker"
end

function boss_vanguard_back_breaker:OnProjectileHit(target, position)
	if target then
		self:DealDamage(self:GetCaster(), target, self:GetCaster():GetAttackDamage(), {damage_type = DAMAGE_TYPE_PHYSICAL, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
	end
end

modifier_boss_vanguard_back_breaker = class({})
LinkLuaModifier("modifier_boss_vanguard_back_breaker", "bosses/boss_wk/boss_vanguard_back_breaker", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_vanguard_back_breaker:OnCreated()
	self.procHit = self:GetSpecialValueFor("attacks_to_proc")
	self.duration = self:GetSpecialValueFor("duration")
	self.hits = 0
end

function modifier_boss_vanguard_back_breaker:OnRefresh()
	self.procHit = self:GetSpecialValueFor("attacks_to_proc")
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_vanguard_back_breaker:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK}
end

function modifier_boss_vanguard_back_breaker:OnAttack(params)
	if params.attacker == self:GetParent() and not params.attacker:PassivesDisabled() then
		if self.hits > self.procHit then
			self.hits = 0
			params.target:Disarm(self:GetAbility(), params.attacker, self.duration)
			params.target:Silence(self:GetAbility(), params.attacker, self.duration)
		end
		self.hits = self.hits + 1
	end
end

function modifier_boss_vanguard_back_breaker:IsHidden()
	return true
endboss_vanguard_bone_wall = class({})

function boss_vanguard_bone_wall:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_boss_vanguard_bone_wall", {duration = self:GetSpecialValueFor("duration")})
end

modifier_boss_vanguard_bone_wall = class({})
LinkLuaModifier("modifier_boss_vanguard_bone_wall", "bosses/boss_wk/boss_vanguard_bone_wall", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_vanguard_bone_wall:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_boss_vanguard_bone_wall:GetModifierIncomingDamage_Percentage()
	return self:GetSpecialValueFor("damage_red")
end

function modifier_boss_vanguard_bone_wall:GetModifierMoveSpeedBonus_Percentage()
	return self:GetSpecialValueFor("slow")
end

function modifier_boss_vanguard_bone_wall:GetStatusEffectName()
	return "particles/status_fx/status_effect_dark_willow_wisp_fear.vpcf"
end

function modifier_boss_vanguard_bone_wall:StatusEffectPriority()
	return 15
endboss_vanguard_shin_shatter = class({})

function boss_vanguard_shin_shatter:OnAbilityPhaseStart()
	ParticleManager:FireWarningParticle( self:GetCaster():GetAbsOrigin(), self:GetSpecialValueFor("radius") )
	return true
end

function boss_vanguard_shin_shatter:OnSpellStart()
	local caster = self:GetCaster()
	
	local damage = self:GetSpecialValueFor("damage")
	local duration = self:GetSpecialValueFor("stun_duration")
	local radius = self:GetSpecialValueFor("radius")
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), radius ) ) do
		self:DealDamage( caster, enemy, damage )
		self:Stun(enemy, duration)
	end
	ParticleManager:FireParticle("particles/test_particle/ogre_melee_smash.vpcf", PATTACH_POINT_FOLLOW, caster, {[0] = caster:GetAbsOrigin(), [1] = Vector(radius, 1, 1) })
	EmitSoundOnLocationWithCaster(caster:GetAbsOrigin(), "Ability.MeleeSmashLand", caster)
endboss_wk_culling_blow = class({})

function boss_wk_culling_blow:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier(caster, self, "modifier_boss_wk_culling_blow", {duration = self:GetSpecialValueFor("1")})
end

function boss_wk_culling_blow:OnProjectileHit(target, position)
	if target then
		self:DealDamage(self:GetCaster(), target, target:GetMaxHealth() * self:GetSpecialValueFor("max_hp_damage") / 100, {damage_type = DAMAGE_TYPE_PHYSICAL, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
	end
end

modifier_boss_wk_culling_blow = class({})
LinkLuaModifier("modifier_boss_wk_culling_blow", "bosses/boss_wk/boss_wk_culling_blow", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_culling_blow:DeclareFunctions()
	return {MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE, MODIFIER_PROPERTY_TRANSLATE_ACTIVITY_MODIFIERS}
end

function modifier_boss_wk_culling_blow:GetModifierPreAttack_CriticalStrike()
	local caster = self:GetCaster()
	caster:EmitSound("Hero_SkeletonKing.CriticalStrike")
	if caster:HasModifier("modifier_boss_wk_reincarnation_enrage") then
		self:GetAbility():FireLinearProjectile("particles/heroes/wraith/wraith_life_strikewave.vpcf", caster:GetForwardVector() * 300, 1200, 350)
	end
	self:Destroy()
	return self:GetSpecialValueFor("critical")
end

function modifier_boss_wk_culling_blow:GetActivityTranslationModifiers()
	return "wraith_spin"
endboss_wk_hellfire_fury = class({})boss_wk_mortal_strike = class({})

function boss_wk_mortal_strike:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	
	local duration = self:GetSpecialValueFor("duration")
	local steal = self:GetSpecialValueFor("max_hp_steal") / 100
	local stolenHP = math.floor( target:GetMaxHealth() * steal )
	local cHpPct = caster:GetHealth() / caster:GetMaxHealth()
	
	local buff = caster:AddNewModifier( caster, self, "modifier_boss_wk_mortal_strike_buff", {duration = duration} )
	if buff then buff:SetStackCount( stolenHP ) end
	caster:SetHealth( cHpPct * caster:GetMaxHealth() )
	local debuff = target:AddNewModifier( caster, self, "modifier_boss_wk_mortal_strike_debuff", {duration = duration} )
	if debuff then debuff:SetStackCount( stolenHP ) end
end

modifier_boss_wk_mortal_strike_debuff = class({})
LinkLuaModifier("modifier_boss_wk_mortal_strike_debuff", "bosses/boss_wk/boss_wk_mortal_strike", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_mortal_strike_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS }
end

function modifier_boss_wk_mortal_strike_debuff:GetModifierExtraHealthBonus()
	return -self:GetStackCount()
end

modifier_boss_wk_mortal_strike_buff = class({})
LinkLuaModifier("modifier_boss_wk_mortal_strike_buff", "bosses/boss_wk/boss_wk_mortal_strike", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_mortal_strike_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_EXTRA_HEALTH_BONUS }
end

function modifier_boss_wk_mortal_strike_buff:GetModifierExtraHealthBonus()
	return self:GetStackCount()
endboss_wk_reincarnation = class({})

function boss_wk_reincarnation:GetIntrinsicModifierName()
	return "modifier_boss_wk_reincarnation"
end

modifier_boss_wk_reincarnation = class({})
LinkLuaModifier("modifier_boss_wk_reincarnation", "bosses/boss_wk/boss_wk_reincarnation", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_reincarnation:OnCreated()
	self.cd = self:GetSpecialValueFor("reincarnation_cd")
	self.delay = self:GetSpecialValueFor("reincarnation_delay")
	self.addedCD = self:GetSpecialValueFor("phase_bonus_cd")
	self.hpLoss = 1 - self:GetSpecialValueFor("revive_hp_loss") / 100
	self.bonusCD = 0
	self.revives = 0
end

function modifier_boss_wk_reincarnation:OnRefresh()
	self.cd = self:GetSpecialValueFor("reincarnation_cd")
	self.delay = self:GetSpecialValueFor("reincarnation_delay")
	self.addedCD = self:GetSpecialValueFor("phase_bonus_cd")
	self.hpLoss = 1 - self:GetSpecialValueFor("revive_hp_loss") / 100
	self.bonusCD = 0
	self.revives = 0
end

function modifier_boss_wk_reincarnation:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE, MODIFIER_PROPERTY_MIN_HEALTH }
end

function modifier_boss_wk_reincarnation:OnTakeDamage(params)
	local parent = self:GetParent()
	if params.unit == parent and self:GetAbility():IsCooldownReady() and params.damage > parent:GetHealth() then
		self:GetAbility():StartCooldown( self.cd + self.bonusCD )
		parent:AddNewModifier(parent, self:GetAbility(), "modifier_boss_wk_reincarnation_enrage", {duration = self.cd + self.bonusCD}):SetStackCount( self.revives )
		self.bonusCD = self.bonusCD + self.addedCD
		parent:SetCoreHealth( math.ceil( parent:GetMaxHealth() * self.hpLoss ) )
		parent:SetHealth( parent:GetMaxHealth() / 2 )
		parent:HealEvent( parent:GetMaxHealth(), source, parent )
		self.revives = self.revives + 1
	end
end

function modifier_boss_wk_reincarnation:GetMinHealth(params)
	if self:GetAbility():IsCooldownReady() then
		return 1
	end
end

function modifier_boss_wk_reincarnation:IsHidden()
	return true
end

function modifier_boss_wk_reincarnation:IsPurgable()
	return false
end

modifier_boss_wk_reincarnation_enrage = class({})
LinkLuaModifier("modifier_boss_wk_reincarnation_enrage", "bosses/boss_wk/boss_wk_reincarnation", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_reincarnation_enrage:OnCreated()
	self.as = self:GetSpecialValueFor("enrage_as") 
	self.bonus_as = self:GetSpecialValueFor("revive_bonus_as")
	self.ms = self:GetSpecialValueFor("enrage_ms")
	self.radius = self:GetSpecialValueFor("enrage_radius")
	if IsServer() then
		self:GetParent():SwapAbilities("boss_wk_reincarnation", "boss_wk_hellfire_fury", false, true)
		
		local ghostFX = ParticleManager:CreateParticle("particles/units/heroes/hero_skeletonking/wraith_king_ghosts_ambient.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
		ParticleManager:SetParticleControlEnt(ghostFX, 0, self:GetParent(), PATTACH_POINT_FOLLOW, "attach_hitloc", self:GetParent():GetAbsOrigin(), true)
		self:AddEffect(ghostFX)
	end
end

function modifier_boss_wk_reincarnation_enrage:OnDestroy()
	if IsServer() then
		self:GetParent():SwapAbilities("boss_wk_reincarnation", "boss_wk_hellfire_fury", true, false)
	end
end

function modifier_boss_wk_reincarnation_enrage:IsAura()
	return (not self:GetCaster():PassivesDisabled())
end

function modifier_boss_wk_reincarnation_enrage:GetModifierAura()
	return "modifier_boss_wk_reincarnation_aura"
end

function modifier_boss_wk_reincarnation_enrage:GetAuraRadius()
	return self.radius
end

function modifier_boss_wk_reincarnation_enrage:GetAuraDuration()
	return 0.5
end

function modifier_boss_wk_reincarnation_enrage:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_boss_wk_reincarnation_enrage:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_wk_reincarnation_enrage:GetAuraSearchFlags()    
	return DOTA_UNIT_TARGET_FLAG_NONE
end

function modifier_boss_wk_reincarnation_enrage:DeclareFunctions()
	return { MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE }
end

function modifier_boss_wk_reincarnation_enrage:GetModifierAttackSpeedBonus()
	return self.as + self.bonus_as * self:GetStackCount()
end

function modifier_boss_wk_reincarnation_enrage:GetModifierMoveSpeedBonus_Percentage()
	return self.ms
end

function modifier_boss_wk_reincarnation_enrage:GetStatusEffectName()
	return "particles/status_fx/status_effect_wraithking_ghosts.vpcf"
end

function modifier_boss_wk_reincarnation_enrage:StatusEffectPriority()
	return 25
end

modifier_boss_wk_reincarnation_aura = class({})
LinkLuaModifier("modifier_boss_wk_reincarnation_aura", "bosses/boss_wk/boss_wk_reincarnation", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_reincarnation_aura:OnCreated()
	if IsServer() then
		self.dmg = self:GetSpecialValueFor("enrage_dmg") + self:GetSpecialValueFor("revive_bonus_dmg") * self:GetCaster():GetModifierStackCount("modifier_boss_wk_reincarnation_enrage", self:GetCaster())
		self:StartIntervalThink(1) 
	end
end

function modifier_boss_wk_reincarnation_aura:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.dmg, {damage_type = DAMAGE_TYPE_MAGICAL} )
end

function modifier_boss_wk_reincarnation_aura:GetEffectName()
	return "particles/econ/items/wraith_king/wraith_king_ti6_bracer/wraith_king_ti6_hellfireblast_debuff.vpcf"
end
boss_wk_scourge_blast = class({})

function boss_wk_scourge_blast:GetCastPoint()
	if self:GetCaster():HasModifier("modifier_boss_wk_reincarnation_enrage") then
		return self.BaseClass.GetCastPoint(self) + 1
	else
		return self.BaseClass.GetCastPoint(self)
	end
end

function boss_wk_scourge_blast:OnAbilityPhaseStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	if caster:HasModifier("modifier_boss_wk_reincarnation_enrage") then
		ParticleManager:FireWarningParticle(caster:GetAbsOrigin(), self:GetTrueCastRange())
	else
		local direction = CalculateDirection(target, caster)
		local origPos = caster:GetAbsOrigin()
		local endPos = caster:GetAbsOrigin() + direction * 900
		
		local width = self:GetSpecialValueFor("width")
		local radius = self:GetSpecialValueFor("radius")
		
		ParticleManager:FireWarningParticle(endPos, 225)
		ParticleManager:FireLinearWarningParticle(origPos, endPos, 120)
	end
	return true
end

function boss_wk_scourge_blast:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorPosition()
	
	local direction = CalculateDirection(target, caster)
	local distance = 900
	
	local width = self:GetSpecialValueFor("width")
	caster:EmitSound("Hero_SkeletonKing.Hellfire_Blast")
	if caster:HasModifier("modifier_boss_wk_reincarnation_enrage") then	
		distance = self:GetTrueCastRange()
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), distance ) ) do
			self:FireTrackingProjectile("particles/units/heroes/hero_skeletonking/skeletonking_hellfireblast.vpcf", enemy, 150, { duration = GameRules:GetGameTime() + 5 })
		end
	else
		self:FireLinearProjectile("particles/frostivus_gameplay/frostivus_skeletonking_hellfireblast.vpcf", direction * 900, distance, width, {origin = caster:GetAbsOrigin() + Vector(0,0,128)})
	end
end

function boss_wk_scourge_blast:OnProjectileHit(target, position)
	local caster = self:GetCaster()
	
	local stunDuration = self:GetSpecialValueFor("stun_duration")
	local totDuration = self:GetSpecialValueFor("total_duration")
	local damage = self:GetSpecialValueFor("impact_damage")
	local radius = self:GetSpecialValueFor("radius")
	
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
		if not enemy:TriggerSpellAbsorb(self) then
			self:DealDamage(caster, enemy, damage)
			self:Stun(enemy, stunDuration)
			enemy:AddNewModifier( caster, self, "modifier_boss_wk_scourge_blast_debuff", {duration = totDuration})
		end
	end
	EmitSoundOnLocationWithCaster(position, "Hero_SkeletonKing.Hellfire_BlastImpact", caster)
	return true
end

modifier_boss_wk_scourge_blast_debuff = class({})
LinkLuaModifier("modifier_boss_wk_scourge_blast_debuff", "bosses/boss_wk/boss_wk_scourge_blast", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_scourge_blast_debuff:OnCreated()
	self.damage = self:GetSpecialValueFor("burn_damage")
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_boss_wk_scourge_blast_debuff:OnRefresh()
	self.damage = self:GetSpecialValueFor("burn_damage")
	self.slow = self:GetSpecialValueFor("slow")
end

function modifier_boss_wk_scourge_blast_debuff:OnIntervalThink()
	self:GetAbility():DealDamage(self:GetCaster(), self:GetParent(), self.damage)
end

function modifier_boss_wk_scourge_blast_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_wk_scourge_blast_debuff:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end

function modifier_boss_wk_scourge_blast_debuff:GetEffectName()
	return "particles/units/heroes/hero_skeletonking/skeletonking_hellfireblast_debuff.vpcf"
endboss_wk_summon_reaper = class({})

function boss_wk_summon_reaper:GetChannelTime()
	return 1.5
end

function boss_wk_summon_reaper:GetChannelAnimation()
	return ACT_DOTA_TELEPORT
end

function boss_wk_summon_reaper:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_SkeletonKing.Reincarnate.Ghost", caster)
	self.warmUpFX = ParticleManager:CreateParticle("particles/bosses/boss_wk/boss_wk_summon_reaper.vpcf", PATTACH_POINT_FOLLOW, caster)
	caster.reaperTable = caster.reaperTable or {}
	setmetatable(caster.reaperTable, { __mode = 'k' })
end

function boss_wk_summon_reaper:OnChannelFinish(bInterrupted)
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmUpFX)
	if not bInterrupted then
		local reaperCount = self:GetSpecialValueFor("spawn_reaper")
		if (GetTableLength(caster.reaperTable) + reaperCount) > self:GetSpecialValueFor("max_reaper") then
			local toKill = (GetTableLength(caster.reaperTable) + reaperCount) - self:GetSpecialValueFor("max_reaper")
			for reaper,_ in pairs(caster.reaperTable) do
				caster.vanguardTable[reaper] = nil
				if not reaper:IsNull() then reaper:ForceKill(true) end
				toKill = toKill - 1
				if toKill == 0 then break end
			end
		end
		for i = 1, reaperCount do
			local reaperPos = caster:GetAbsOrigin() + ActualRandomVector(600, 150)
			local reaper = CreateUnitByName("npc_dota_boss24_archer", reaperPos, true, caster, caster, caster:GetTeamNumber())
			ParticleManager:FireParticle("particles/units/heroes/hero_ursa/ursa_earthshock_energy.vpcf", PATTACH_POINT_FOLLOW, reaper)
			reaper:FindAbilityByName("boss_reaper_necrotic_hail"):SetLevel(self:GetLevel())
			reaper:FindAbilityByName("boss_reaper_reposition"):SetLevel(self:GetLevel())
			reaper:FindAbilityByName("boss_reaper_multi_shot"):SetLevel(self:GetLevel())
			EmitSoundOn("Hero_SkeletonKing.PreAttack", reaper)
			caster.reaperTable[reaper] = true
		end
	end
endboss_wk_summon_vanguard = class({})

function boss_wk_summon_vanguard:GetChannelTime()
	return 1.5
end

function boss_wk_summon_vanguard:GetChannelAnimation()
	return ACT_DOTA_TELEPORT
end

function boss_wk_summon_vanguard:OnSpellStart()
	local caster = self:GetCaster()
	EmitSoundOn("Hero_SkeletonKing.Reincarnate.Ghost", caster)
	self.warmUpFX = ParticleManager:CreateParticle("particles/bosses/boss_wk/boss_wk_summon_vanguard.vpcf", PATTACH_POINT_FOLLOW, caster)
	caster.vanguardTable = caster.vanguardTable or {}
	setmetatable(caster.vanguardTable, { __mode = 'k' })
end

function boss_wk_summon_vanguard:OnChannelFinish(bInterrupted)
	local caster = self:GetCaster()
	ParticleManager:ClearParticle(self.warmUpFX)
	if not bInterrupted then
		local vanguardCount = self:GetSpecialValueFor("spawn_vanguard")
		if (GetTableLength(caster.vanguardTable) + vanguardCount) > self:GetSpecialValueFor("max_vanguard") then
			local toKill = (GetTableLength(caster.vanguardTable) + vanguardCount) - self:GetSpecialValueFor("max_vanguard")
			
			for vanguard,_ in pairs(caster.vanguardTable) do
				caster.vanguardTable[vanguard] = nil
				if not vanguard:IsNull() then vanguard:ForceKill(true) end
				toKill = toKill - 1
				if toKill == 0 then break end
			end
		end
		for i = 1, vanguardCount do
			local vanguardPos = caster:GetAbsOrigin() + ActualRandomVector(600, 150)
			local vanguard = CreateUnitByName("npc_dota_boss24_stomper", vanguardPos, true, caster, caster, caster:GetTeamNumber())
			ParticleManager:FireParticle("particles/units/heroes/hero_ursa/ursa_earthshock_energy.vpcf", PATTACH_POINT_FOLLOW, vanguard)
			vanguard:FindAbilityByName("boss_vanguard_bone_wall"):SetLevel(self:GetLevel())
			vanguard:FindAbilityByName("boss_vanguard_shin_shatter"):SetLevel(self:GetLevel())
			vanguard:FindAbilityByName("boss_vanguard_back_breaker"):SetLevel(self:GetLevel())
			EmitSoundOn("Hero_SkeletonKing.PreAttack", vanguard)
			caster.vanguardTable[vanguard] = true
		end
	end
endboss_wk_vampirism = class({})

function boss_wk_vampirism:GetIntrinsicModifierName()
	return "modifier_boss_wk_vampirism"
end

modifier_boss_wk_vampirism = class({})
LinkLuaModifier("modifier_boss_wk_vampirism", "bosses/boss_wk/boss_wk_vampirism", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wk_vampirism:OnCreated()
	self.lifesteal = self:GetSpecialValueFor("lifesteal") / 100
end

function modifier_boss_wk_vampirism:OnRefresh()
	self.lifesteal = self:GetSpecialValueFor("lifesteal") / 100
end

function modifier_boss_wk_vampirism:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_boss_wk_vampirism:OnTakeDamage(params)
	if params.attacker == self:GetParent() and params.unit ~= self:GetParent() and self:GetParent():GetHealth() > 0 and not self:GetParent():PassivesDisabled() and not ( HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_HPLOSS) or HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_REFLECTION) or HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_NO_SPELL_LIFESTEAL) ) then
		local lifesteal = self.lifesteal
		if params.inflictor then 
			ParticleManager:FireParticle("particles/items3_fx/octarine_core_lifesteal.vpcf", PATTACH_ABSORIGIN_FOLLOW, self)
		end
		ParticleManager:FireParticle("particles/units/heroes/hero_skeletonking/wraith_king_vampiric_aura_lifesteal.vpcf", PATTACH_ABSORIGIN_FOLLOW, self)
		local flHeal = params.damage * lifesteal
		params.attacker:HealEvent(flHeal, self:GetAbility(), params.attacker)
	end
end

function modifier_boss_wk_vampirism:IsHidden()
	return true
endboss_alpha_wolf_aura = class({})

function boss_alpha_wolf_aura:GetIntrinsicModifierName()
	return "modifier_boss_alpha_wolf_aura"
end

modifier_boss_alpha_wolf_aura = class({})
LinkLuaModifier("modifier_boss_alpha_wolf_aura", "bosses/boss_wolves/boss_alpha_wolf_aura", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_alpha_wolf_aura:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_alpha_wolf_aura:OnRefresh()
	self.radius = self:GetSpecialValueFor("radius")
end

function modifier_boss_alpha_wolf_aura:IsAura()
	return not self:GetCaster():PassivesDisabled()
end

function modifier_boss_alpha_wolf_aura:GetModifierAura()
	return "modifier_boss_alpha_wolf_aura_buff"
end

function modifier_boss_alpha_wolf_aura:GetAuraRadius()
	return self.radius
end

function modifier_boss_alpha_wolf_aura:GetAuraDuration()
	return 0.5
end

function modifier_boss_alpha_wolf_aura:GetAuraSearchTeam()    
	return DOTA_UNIT_TARGET_TEAM_FRIENDLY
end

function modifier_boss_alpha_wolf_aura:GetAuraSearchType()    
	return DOTA_UNIT_TARGET_BASIC + DOTA_UNIT_TARGET_HERO
end

function modifier_boss_alpha_wolf_aura:IsHidden()    
	return true
end

modifier_boss_alpha_wolf_aura_buff = class({})
LinkLuaModifier("modifier_boss_alpha_wolf_aura_buff", "bosses/boss_wolves/boss_alpha_wolf_aura", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_alpha_wolf_aura_buff:OnCreated()
	self.dmg = self:GetSpecialValueFor("damage")
	self.armor = self:GetSpecialValueFor("armor")
end

function modifier_boss_alpha_wolf_aura_buff:OnRefresh()
	self.dmg = self:GetSpecialValueFor("damage")
	self.armor = self:GetSpecialValueFor("armor")
end

function modifier_boss_alpha_wolf_aura_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS, MODIFIER_PROPERTY_BASEDAMAGEOUTGOING_PERCENTAGE}
end

function modifier_boss_alpha_wolf_aura_buff:GetModifierBaseDamageOutgoing_Percentage()
	return self.dmg
end

function modifier_boss_alpha_wolf_aura_buff:GetModifierPhysicalArmorBonus()
	return self.armor
endboss_alpha_wolf_howl = class({})

function boss_alpha_wolf_howl:OnSpellStart()
	local caster = self:GetCaster()
	
	for _, ally in ipairs( caster:FindFriendlyUnitsInRadius( caster:GetAbsOrigin(), -1 ) ) do
		ally:AddNewModifier( caster, self, "modifier_boss_alpha_wolf_howl", {duration = self:GetSpecialValueFor("duration")})
	end
	caster:EmitSound("Hero_Lycan.Howl")
	caster:EmitSound("Hero_Lycan.Howl.Team")
	
	ParticleManager:FireParticle("particles/units/heroes/hero_lycan/lycan_howl_cast.vpcf", PATTACH_POINT_FOLLOW, caster)
end

modifier_boss_alpha_wolf_howl = class({})
LinkLuaModifier("modifier_boss_alpha_wolf_howl", "bosses/boss_wolves/boss_alpha_wolf_howl", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_alpha_wolf_howl:OnCreated()
	self.damage = self:GetSpecialValueFor("damage")
	self.as = self:GetSpecialValueFor("attack_speed")
end

function modifier_boss_alpha_wolf_howl:OnRefresh()
	self.damage = self:GetSpecialValueFor("damage")
	self.as = self:GetSpecialValueFor("attack_speed")
end

function modifier_boss_alpha_wolf_howl:DeclareFunctions()
	return {  MODIFIER_PROPERTY_DAMAGEOUTGOING_PERCENTAGE }
end

function modifier_boss_alpha_wolf_howl:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_boss_alpha_wolf_howl:GetModifierDamageOutgoing_Percentage()
	return self.damage
end

function modifier_boss_alpha_wolf_howl:GetEffectName()
	return "particles/units/heroes/hero_lycan/lycan_howl_buff.vpcf"
endboss_wolves_critical = class({})

function boss_wolves_critical:GetIntrinsicModifierName()
	return "modifier_boss_wolves_critical"
end

modifier_boss_wolves_critical = class({})
LinkLuaModifier("modifier_boss_wolves_critical", "bosses/boss_wolves/boss_wolves_critical", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wolves_critical:OnCreated()
	self.chance = self:GetSpecialValueFor("chance")
	self.damage = self:GetSpecialValueFor("crit")
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_wolves_critical:OnRefresh()
	self.chance = self:GetSpecialValueFor("chance")
	self.damage = self:GetSpecialValueFor("crit")
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_boss_wolves_critical:DeclareFunctions()
	return {MODIFIER_PROPERTY_PREATTACK_CRITICALSTRIKE }
end

function modifier_boss_wolves_critical:GetModifierPreAttack_CriticalStrike(params)
	if self:RollPRNG( self.chance ) and not params.attacker:PassivesDisabled() then
		if not params.target:IsMagicImmune() then
			params.target:AddNewModifier( params.attacker, self:GetAbility(), "modifier_boss_wolves_critical_cripple", {duration = self.duration})
		end
		return self.damage
	end
end

function modifier_boss_wolves_critical:IsHidden()
	return true
end

modifier_boss_wolves_critical_cripple = class({})
LinkLuaModifier("modifier_boss_wolves_critical_cripple", "bosses/boss_wolves/boss_wolves_critical", LUA_MODIFIER_MOTION_NONE)

function modifier_boss_wolves_critical_cripple:OnCreated()
	self.as = self:GetSpecialValueFor("as")
	self.ms = self:GetSpecialValueFor("ms")
	self.bleed = self:GetSpecialValueFor("bleed")
	if self.bleed > 0 and IsServer() then
		self:StartIntervalThink(1)
	end
end

function modifier_boss_wolves_critical_cripple:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.bleed, {damage_type = DAMAGE_TYPE_PHYSICAL} )
end

function modifier_boss_wolves_critical_cripple:DeclareFunctions()
	return { MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE}
end

function modifier_boss_wolves_critical_cripple:GetModifierMoveSpeedBonus_Percentage()
	return self.ms
end

function modifier_boss_wolves_critical_cripple:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_boss_wolves_critical_cripple:GetAttributes()
	return MODIFIER_ATTRIBUTE_MULTIPLE
endboss_wolves_leap = class({})

function boss_wolves_leap:OnAbilityPhaseStart()
	local casterPos = self:GetCaster():GetAbsOrigin()
	local target = self:GetCursorPosition()
	local direction = CalculateDirection(target, casterPos)
	local distance = math.min( CalculateDistance( target, casterPos ), self:GetSpecialValueFor("distance") )
	ParticleManager:FireLinearWarningParticle( casterPos, casterPos + direction * distance, self:GetCaster():GetHullRadius() )
	return true
end

function boss_wolves_leap:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier( caster, self, "modifier_boss_wolves_leap", {})
end

modifier_boss_wolves_leap = class({})
LinkLuaModifier("modifier_boss_wolves_leap", "bosses/boss_wolves/boss_wolves_leap", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_boss_wolves_leap:OnCreated()
		local parent = self:GetParent()
		local cursorPos = self:GetAbility():GetCursorPosition()
		self.distance = math.min( CalculateDistance( cursorPos, parent ), self:GetSpecialValueFor("distance") )
		self.direction = CalculateDirection( cursorPos, parent )
		self.endPos = parent:GetAbsOrigin() + self.direction * self.distance
		self.speed = self:GetSpecialValueFor("speed") * FrameTime()
		self.initHeight = GetGroundHeight(parent:GetAbsOrigin(), parent)
		self.height = self.initHeight
		self.maxHeight = self:GetSpecialValueFor("max_height")
		self:StartMotionController()
	end
	
	function modifier_boss_wolves_leap:DoControlledMotion()
		if self:GetParent():IsNull() then return end
		local parent = self:GetParent()
		self.distanceTraveled =  self.distanceTraveled or 0
		if parent:IsAlive() and self.distanceTraveled <= self.distance and not parent:IsStunned() and not parent:IsRooted() then
			local newPos = GetGroundPosition(parent:GetAbsOrigin(), parent) + self.direction * self.speed
			newPos.z = self.height + self.maxHeight * math.sin( (self.distanceTraveled/self.distance) * math.pi )
			parent:SetAbsOrigin( newPos )
			
			self.distanceTraveled = self.distanceTraveled + self.speed
		else
			local newPos = GetGroundPosition(self.endPos, parent)
			parent:SetAbsOrigin( newPos )
			
			FindClearSpaceForUnit(parent, parent:GetAbsOrigin(), true)
			self:Destroy()
			return nil
		end       
	end
endelite_accurate = class({})

function elite_accurate:GetIntrinsicModifierName()
	return "modifier_elite_accurate"
end

modifier_elite_accurate = class(relicBaseClass)
LinkLuaModifier("modifier_elite_accurate", "elites/elite_accurate", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_accurate:OnCreated()
	if IsServer() then
		
	end
end

function modifier_elite_accurate:CheckState()
	return {[MODIFIER_STATE_CANNOT_MISS] = not self:GetParent():PassivesDisabled()}
end

function modifier_elite_accurate:GetPriority()
	return MODIFIER_PRIORITY_LOW
endelite_assassin = class({})

function elite_assassin:GetIntrinsicModifierName()
	return "modifier_elite_assassin"
end

modifier_elite_assassin = (relicBaseClass)
LinkLuaModifier("modifier_elite_assassin", "elites/elite_assassin", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_assassin:OnCreated()
	
endelite_blinking = class({}) 

function elite_blinking:GetIntrinsicModifierName()
	return "modifier_elite_blinking"
end

function elite_blinking:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()  
	
	local max_distance = self:GetSpecialValueFor("blink_range")
	local min_distance = self:GetSpecialValueFor("min_blink_range")
	caster:Blink( caster:GetAbsOrigin() + CalculateDirection( position, caster ) * math.min(max_distance, math.max(min_distance, CalculateDistance(caster, position) ) ) )
end

modifier_elite_blinking = class(relicBaseClass)
LinkLuaModifier("modifier_elite_blinking", "elites/elite_blinking", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_blinking:OnCreated()
		self:StartIntervalThink( 1 )
	end

	function modifier_elite_blinking:OnIntervalThink()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() or caster:IsStunned() or caster:IsSilenced() or caster:GetCurrentActiveAbility() or caster:IsHexed() or caster:IsRooted() then return end
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), -1) ) do
			ability:CastSpell( enemy:GetAbsOrigin() )
			break
		end
	end
endelite_breaking = class({})

function elite_breaking:OnSpellStart()
	local caster = self:GetCaster()
	local target = self:GetCursorTarget()
	target:ModifyThreat(25)
	target:AddNewModifier(caster, self, "modifier_elite_breaking_debuff", {duration = self:GetSpecialValueFor("duration")})
end

function elite_breaking:GetIntrinsicModifierName()
	return "modifier_elite_breaking"
end

modifier_elite_breaking = class(relicBaseClass)
LinkLuaModifier("modifier_elite_breaking", "elites/elite_breaking", LUA_MODIFIER_MOTION_NONE)
if IsServer() then
	function modifier_elite_breaking:OnCreated()
		self:StartIntervalThink( 1 )
	end

	function modifier_elite_breaking:OnIntervalThink()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() or caster:GetCurrentActiveAbility() then return end
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), 900 ) ) do
			ability:CastSpell( enemy )
			break
		end
	end
end

modifier_elite_breaking_debuff = class({})
LinkLuaModifier("modifier_elite_breaking_debuff", "elites/elite_breaking", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_breaking_debuff:OnCreated()
	self.armor = self:GetSpecialValueFor("minus_armor_per_raid")
	if IsServer() then
		self:SetStackCount( 1 + RoundManager:GetRaidsFinished() )
	end
end

function modifier_elite_breaking_debuff:DeclareFunctions()
	return {MODIFIER_PROPERTY_PHYSICAL_ARMOR_BONUS}
end

function modifier_elite_breaking_debuff:GetModifierPhysicalArmorBonus()
	return self.armor * self:GetStackCount()
end

function modifier_elite_breaking_debuff:GetEffectName()
	return "particles/units/heroes/hero_slardar/slardar_amp_damage.vpcf"
end

function modifier_elite_breaking_debuff:GetEffectAttachType()
	return PATTACH_OVERHEAD_FOLLOW
endelite_burning = class({})

function elite_burning:GetIntrinsicModifierName()
	return "modifier_elite_burning"
end

modifier_elite_burning = class(relicBaseClass)
LinkLuaModifier("modifier_elite_burning", "elites/elite_burning", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_burning:OnCreated()
		self.duration = self:GetSpecialValueFor("duration")
		self:StartIntervalThink(1)
	end
	
	function modifier_elite_burning:OnIntervalThink()
		local caster = self:GetCaster()
		if caster:PassivesDisabled() or not caster:IsAlive() then return end
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() then return end
		if #caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), 800 ) <= 0 then return end
		
		local duration = self:GetAbility():GetSpecialValueFor("duration")
		EmitSoundOn("n_black_dragon.Fireball.Target", caster)
		ability:StartCooldown( duration * 2 )
		
		local startPos = caster:GetAbsOrigin()
		local direction = caster:GetForwardVector()
		local distance = self:GetSpecialValueFor("radius") * 0.95
		
		for i = 1, 6 do
			CreateModifierThinker(caster, ability, "modifier_elite_burning_dummy", {Duration = duration}, startPos + direction * distance * i, caster:GetTeam(), false)
		end
	end
end

modifier_elite_burning_dummy = class({})
LinkLuaModifier("modifier_elite_burning_dummy", "elites/elite_burning", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_burning_dummy:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
	if IsServer() then
		local  macropyre = ParticleManager:CreateParticle("particles/neutral_fx/black_dragon_fireball.vpcf", PATTACH_ABSORIGIN_FOLLOW, self:GetParent())
		ParticleManager:SetParticleControl(macropyre, 0, self:GetParent():GetAbsOrigin())
		ParticleManager:SetParticleControl(macropyre, 2, Vector(self:GetRemainingTime(),0,0))
		self:AddEffect( macropyre )
	end
end

function modifier_elite_burning_dummy:OnDestroy()
	if IsServer() then
		self:GetParent():ForceKill(false)
	end
end

function modifier_elite_burning_dummy:IsAura()
	return true
end

function modifier_elite_burning_dummy:GetAuraDuration()
    return 0.5
end

function modifier_elite_burning_dummy:GetAuraRadius()
    return self.radius
end

function modifier_elite_burning_dummy:GetAuraSearchTeam()
    return DOTA_UNIT_TARGET_TEAM_ENEMY
end

function modifier_elite_burning_dummy:GetAuraSearchType()
    return DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC
end

function modifier_elite_burning_dummy:GetModifierAura()
    return "modifier_elite_burning_aura"
end

function modifier_elite_burning_dummy:IsHidden()
    return true
end

modifier_elite_burning_aura = class({})
LinkLuaModifier("modifier_elite_burning_aura", "elites/elite_burning", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_burning_aura:OnCreated()
	self.damage = self:GetSpecialValueFor("aoe_damage")
	if IsServer() then
		self:StartIntervalThink(0.5)
	end
end

function modifier_elite_burning_aura:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.damage )
endelite_elusive = class({})

function elite_elusive:GetIntrinsicModifierName()
	return "modifier_elite_elusive"
end

modifier_elite_elusive = class(relicBaseClass)
LinkLuaModifier("modifier_elite_elusive", "elites/elite_elusive", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_elusive:OnCreated()
		self.fadeTime = self:GetSpecialValueFor("fade_time")
		self.searchRadius = self:GetSpecialValueFor("detection_radius")
		self:StartIntervalThink( 1 )
	end
	
	function modifier_elite_elusive:OnIntervalThink()
		local parent = self:GetParent()
		self.fadeTime = self:GetSpecialValueFor("fade_time")
		self.searchRadius = self:GetSpecialValueFor("detection_radius")
		local enemies = parent:FindEnemyUnitsInRadius( parent:GetAbsOrigin(), self.searchRadius )
		
		self:StartIntervalThink( 0.25 )
		if not parent:HasModifier("modifier_elite_elusive_fade") then
			if #enemies > 0 then
				parent:RemoveModifierByName("modifier_invisible")
			else
				self:StartIntervalThink(self.fadeTime)
				parent:AddNewModifier( parent, nil, "modifier_elite_elusive_fade", {duration = self.fadeTime} )
				Timers:CreateTimer( self.fadeTime, function()
					if parent:IsNull() then return end
					parent:RemoveModifierByName( "modifier_elite_elusive_fade" )
					parent:AddNewModifier( parent, nil, "modifier_invisible", {} )
				end)
			end
		end
	end
end

modifier_elite_elusive_fade = class({})
LinkLuaModifier("modifier_elite_elusive_fade", "elites/elite_elusive", LUA_MODIFIER_MOTION_NONE)


function modifier_elite_elusive_fade:DeclareFunctions()
    local funcs = {
        MODIFIER_PROPERTY_INVISIBILITY_LEVEL,
    }

    return funcs
end

function modifier_elite_elusive_fade:GetModifierInvisibilityLevel( params )
    return 0.45
end
elite_fortified = class({})

function elite_fortified:OnSpellStart()
	local caster = self:GetCaster()
	
	ParticleManager:FireParticle("particles/units/heroes/hero_tidehunter/tidehunter_krakenshell_purge.vpcf", PATTACH_POINT_FOLLOW, caster)
	caster:AddNewModifier(caster, self, "modifier_elite_fortified_buff", {duration = self:GetSpecialValueFor("duration")})
end

function elite_fortified:GetIntrinsicModifierName()
	return "modifier_elite_fortified"
end

modifier_elite_fortified = class(relicBaseClass)
LinkLuaModifier("modifier_elite_fortified", "elites/elite_fortified", LUA_MODIFIER_MOTION_NONE)
if IsServer() then
	function modifier_elite_fortified:OnCreated()
		self.hp = self:GetParent():GetHealthPercent()
		self:StartIntervalThink( 1 )
	end

	function modifier_elite_fortified:OnIntervalThink()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() or caster:GetCurrentActiveAbility() then return end
		if self.hp > self:GetParent():GetHealthPercent() then
			ability:CastSpell()
			self.hp = self:GetParent():GetHealthPercent()
		end
	end
end

modifier_elite_fortified_buff = class({})
LinkLuaModifier("modifier_elite_fortified_buff", "elites/elite_fortified", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_fortified_buff:OnCreated()
	self.reduction = self:GetSpecialValueFor("dmg_reduction")
	self.slow = self:GetSpecialValueFor("move_slow")
end

function modifier_elite_fortified_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, MODIFIER_PROPERTY_INCOMING_DAMAGE_PERCENTAGE}
end

function modifier_elite_fortified_buff:GetModifierIncomingDamage_Percentage()
	return self.reduction
end

function modifier_elite_fortified_buff:GetModifierMoveSpeedBonus_Percentage()
	return self.slow
end

function modifier_elite_fortified_buff:GetEffectName()
	return "particles/units/heroes/hero_tidehunter/tidehunter_gush_slow.vpcf"
endelite_freezing = class({})

function elite_freezing:GetIntrinsicModifierName()
	return "modifier_elite_freezing"
end

modifier_elite_freezing = class({})
LinkLuaModifier("modifier_elite_freezing", "elites/elite_freezing", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_freezing:OnCreated()
		self:StartIntervalThink(1)
	end

	function modifier_elite_freezing:OnIntervalThink()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if not caster:IsAlive() or caster:PassivesDisabled() then return end
		self.radius = self:GetSpecialValueFor("radius")
		self.damage = self:GetSpecialValueFor("damage")
		self.stDur = self:GetSpecialValueFor("snap_duration")
		self.slDur = self:GetSpecialValueFor("slow_duration")
		self.grDur = self:GetSpecialValueFor("growth_duration")
		self.tick = self:GetSpecialValueFor("tick_rate")
		self:StartIntervalThink(self.tick)
		
		local shardLoc = caster:GetAbsOrigin() + ActualRandomVector(800, 150)
		local frostShard = ParticleManager:CreateParticle("particles/elite_freezing_parent.vpcf", PATTACH_WORLDORIGIN, nil)
		ParticleManager:SetParticleControl(frostShard, 0, shardLoc)
		EmitSoundOnLocationWithCaster(shardLoc, "hero_Crystal.frostbite", caster)
		ParticleManager:FireWarningParticle(shardLoc, self.radius)
		Timers:CreateTimer(self.grDur, function()
			ParticleManager:ClearParticle(frostShard)
			EmitSoundOn("Hero_Ancient_Apparition.IceBlast.Target", caster)
			for _, frozenTarget in pairs( caster:FindEnemyUnitsInRadius( shardLoc, self.radius ) ) do
				ApplyDamage({ victim = frozenTarget, attacker = caster, damage = self.damage, damage_type = DAMAGE_TYPE_MAGICAL, ability = ability })
				frozenTarget:AddNewModifier(caster, ability, "modifier_elite_freezing_snap", {duration = self.stDur})
				frozenTarget:AddNewModifier(caster, ability, "modifier_elite_freezing_slow", {duration = self.stDur + self.slDur})
			end
		end)
	end
end

modifier_elite_freezing_snap = class({})
LinkLuaModifier("modifier_elite_freezing_snap", "elites/elite_freezing", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_freezing_snap:CheckState()
	return {[MODIFIER_STATE_STUNNED] = true,
			[MODIFIER_STATE_FROZEN] = true}
end

modifier_elite_freezing_slow = class({})
LinkLuaModifier("modifier_elite_freezing_slow", "elites/elite_freezing", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_freezing_slow:OnCreated()
	self.ms_slow = self:GetSpecialValueFor("move_slow")
	self.as_slow = self:GetSpecialValueFor("attack_slow")
	
	self.ms_loss = self.ms_slow / self:GetSpecialValueFor("slow_duration") * 0.1
	self.as_loss = self.as_slow / self:GetSpecialValueFor("slow_duration") * 0.1
	self:StartIntervalThink( 0.1 )
end

function modifier_elite_freezing_slow:OnIntervalThink()
	parent = self:GetParent()
	if not parent:HasModifier("modifier_elite_freezing_snap") then
		self.ms_slow = math.min(self.ms_slow + self.ms_loss, 0)
		self.as_slow = math.min(self.as_slow + self.as_loss, 0)
	end
end

function modifier_elite_freezing_slow:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, }
end

function modifier_elite_freezing_slow:GetModifierMoveSpeedBonus_Percentage()
	return self.ms_slow
end

function modifier_elite_freezing_slow:GetModifierAttackSpeedBonus()
	return self.as_slow
endelite_frenzied = class({})

function elite_frenzied:OnSpellStart()
	local caster = self:GetCaster()
	
	caster:AddNewModifier( caster, self, "modifier_elite_frenzied_buff", {duration = self:GetSpecialValueFor("duration")})
end

function elite_frenzied:GetIntrinsicModifierName()
	return "modifier_elite_frenzied"
end

modifier_elite_frenzied = class(relicBaseClass)
LinkLuaModifier("modifier_elite_frenzied", "elites/elite_frenzied", LUA_MODIFIER_MOTION_NONE)
if IsServer() then
	function modifier_elite_frenzied:OnCreated()
		self:StartIntervalThink(1)
	end
	
	function modifier_elite_frenzied:OnIntervalThink()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if not caster:IsAttacking() or not ability:IsFullyCastable() or caster:PassivesDisabled() then return end
		ability:CastSpell()
	end
end


modifier_elite_frenzied_buff = class({})
LinkLuaModifier("modifier_elite_frenzied_buff", "elites/elite_frenzied", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_frenzied_buff:OnCreated()
	self.as = self:GetSpecialValueFor("attackspeed")
	self.ms = self:GetSpecialValueFor("movespeed")
end

function modifier_elite_frenzied_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_BONUS_PERCENTAGE, }
end

function modifier_elite_frenzied_buff:GetModifierAttackSpeedBonus()
	return self.as
end

function modifier_elite_frenzied_buff:GetModifierMoveSpeedBonus_Percentage()
	return self.ms
end

function modifier_elite_frenzied_buff:GetEffectName()
	return	"particles/items2_fx/mask_of_madness.vpcf"
endelite_graverobber = class({})

function elite_graverobber:GetIntrinsicModifierName()
	return "modifier_elite_graverobber"
end

modifier_elite_graverobber = class({})
LinkLuaModifier("modifier_elite_graverobber", "elites/elite_graverobber", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_graverobber:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH}
end

function modifier_elite_graverobber:OnDeath(params)
	if params.attacker == self:GetParent() then
		params.unit.tombstoneDisabled = true
	end
endelite_hasted = class({})

function elite_hasted:GetIntrinsicModifierName()
	return "modifier_elite_hasted"
end

modifier_elite_hasted = class({})
LinkLuaModifier("modifier_elite_hasted", "elites/elite_hasted", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_hasted:OnCreated()
	self.ms = self:GetSpecialValueFor("movespeed")
end

function modifier_elite_hasted:OnRefresh()
	self.ms = self:GetSpecialValueFor("movespeed")
end

function modifier_elite_hasted:DeclareFunctions()
	return {MODIFIER_PROPERTY_MOVESPEED_ABSOLUTE_MIN }
end

function modifier_elite_hasted:GetModifierMoveSpeed_AbsoluteMin()
	return self.ms
end

function modifier_elite_hasted:GetEffectName()
	return "particles/generic_gameplay/rune_haste_owner.vpcf"
end

function modifier_elite_hasted:IsHidden()
	return true
endelite_massive = class({})

function elite_massive:OnSpellStart()
	local caster = self:GetCaster()
	caster:AddNewModifier( caster, self, "modifier_elite_massive_buff", {duration = self:GetSpecialValueFor("duration")})
end

function elite_massive:GetIntrinsicModifierName()
	return "modifier_elite_massive"
end

modifier_elite_massive = class(relicBaseClass)
LinkLuaModifier("modifier_elite_massive", "elites/elite_massive", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_massive:OnCreated()
		self:StartIntervalThink(1)
	end
	
	function modifier_elite_massive:OnIntervalThink()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if caster:PassivesDisabled() or not ability:IsFullyCastable() or caster:HasActiveAbility() then return end
		ability:CastSpell()
	end
end

modifier_elite_massive_buff = class({})
LinkLuaModifier("modifier_elite_massive_buff", "elites/elite_massive", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_massive_buff:OnCreated()
		self.pull = self:GetSpecialValueFor("pull_strength") * FrameTime()
		self.radius = self:GetSpecialValueFor("radius")
		self:StartIntervalThink(0)
	end
	
	function modifier_elite_massive_buff:OnIntervalThink()
		local caster = self:GetCaster()
		local pullPosition = caster:GetAbsOrigin()
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( pullPosition, self.radius ) ) do
			local enemyPos = enemy:GetAbsOrigin()
			local direction = CalculateDirection( pullPosition, enemyPos )
			enemy:SetAbsOrigin( enemyPos + direction * self.pull )
		end
		
		ResolveNPCPositions(pullPosition, self.radius + 25)
	end
	
	function modifier_elite_massive_buff:OnDestroy()
		ResolveNPCPositions(self:GetCaster():GetAbsOrigin(), self.radius + 25)
	end
end

function modifier_elite_massive_buff:GetEffectName()
	return "particles/units/unit_greevil/greevil_blackhole.vpcf"
endelite_nimble = class({})

function elite_nimble:GetIntrinsicModifierName()
	return "modifier_elite_nimble"
end

function elite_nimble:OnSpellStart()
	local caster = self:GetCaster()
	
	caster:AddNewModifier(caster, self, "modifier_elite_nimble_buff", {duration = self:GetSpecialValueFor("duration")})
end

modifier_elite_nimble = class(relicBaseClass)
LinkLuaModifier("modifier_elite_nimble", "elites/elite_nimble", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_nimble:OnCreated()
		self.duration = self:GetSpecialValueFor("duration")
		self:StartIntervalThink(0.2)
	end
	
	function modifier_elite_nimble:OnIntervalThink()
		local caster = self:GetCaster()
		if caster:PassivesDisabled() or not caster:IsAlive() or caster:HasActiveAbility() then return end
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() then return end
		if #caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), 800 ) <= 0 then return end
		
		ability:CastSpell()
	end
end

function modifier_elite_nimble:IsHidden()
	return true
end

modifier_elite_nimble_buff = class({})
LinkLuaModifier("modifier_elite_nimble_buff", "elites/elite_nimble", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_nimble_buff:OnCreated()
		self:GetAbility():StartDelayedCooldown()
	end
	
	function modifier_elite_nimble_buff:OnDestroy()
		self:GetAbility():EndDelayedCooldown()
	end
end

function modifier_elite_nimble_buff:DeclareFunctions()
	return {MODIFIER_PROPERTY_AVOID_DAMAGE}
end

function modifier_elite_nimble_buff:GetModifierAvoidDamage()
	ParticleManager:FireParticle("particles/units/heroes/hero_faceless_void/faceless_void_backtrack.vpcf", PATTACH_POINT_FOLLOW, self:GetParent())
	return 1
end

function modifier_elite_nimble_buff:GetEffectName()
	return "particles/units/heroes/hero_phantom_assassin/phantom_assassin_blur.vpcf"
endelite_overgrown = class({})

function elite_overgrown:GetIntrinsicModifierName()
	return "modifier_elite_overgrown"
end

modifier_elite_overgrown = class(relicBaseClass)
LinkLuaModifier("modifier_elite_overgrown", "elites/elite_overgrown", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_overgrown:OnCreated()
		self.lifetime = self:GetSpecialValueFor("bramble_lifetime")
		self.delay = self:GetSpecialValueFor("bramble_rate")
		self:StartIntervalThink( 1 )
	end
	
	function modifier_elite_overgrown:OnRefresh()
		self.lifetime = self:GetSpecialValueFor("bramble_lifetime")
		self.delay = self:GetSpecialValueFor("bramble_rate")
	end
	
	function modifier_elite_overgrown:OnIntervalThink()
		local caster = self:GetCaster()
		if caster:PassivesDisabled() or not caster:IsAlive() then return end
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() then return end
		if #caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), 800 ) <= 0 then return end
		
		self.lifetime = self:GetSpecialValueFor("bramble_lifetime")
		self.delay = self:GetSpecialValueFor("bramble_rate")
		
		EmitSoundOn("n_black_dragon.Fireball.Target", caster)
		self:StartIntervalThink( self.delay )
		CreateModifierThinker(caster, ability, "modifier_elite_overgrown_dummy", {Duration = self.lifetime}, caster:GetAbsOrigin() + ActualRandomVector(750, 150), caster:GetTeam(), false)
	end
end

modifier_elite_overgrown_dummy = class({})
LinkLuaModifier("modifier_elite_overgrown_dummy", "elites/elite_overgrown", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_overgrown_dummy:OnCreated()
	if IsServer() then
		local  bramble = ParticleManager:CreateParticle("particles/units/heroes/hero_dark_willow/dark_willow_bramble.vpcf", PATTACH_ABSORIGIN, self:GetParent())
		self:AddEffect( bramble )
		self:StartIntervalThink(1)
	end
end

function modifier_elite_overgrown_dummy:OnIntervalThink()
	if not self.root or not self.radius then
		self.radius = self:GetSpecialValueFor("root_radius")
		self.root = self:GetSpecialValueFor("root_duration")
		self:StartIntervalThink(0.25)
	end
	local caster = self:GetCaster()
	local parent = self:GetParent()
	local ability = self:GetAbility()
	if not caster or caster:IsNull() then
		self:Destroy()
		return
	end
	for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( parent:GetAbsOrigin(), self.radius ) ) do
		enemy:AddNewModifier( caster, ability, "modifier_elite_overgrown_root", {duration = self.root} )
		self:Destroy()
		break
	end
end

function modifier_elite_overgrown_dummy:OnDestroy()
	if IsServer() then
		self:GetParent():ForceKill(false)
	end
end

modifier_elite_overgrown_root = class({})
LinkLuaModifier("modifier_elite_overgrown_root", "elites/elite_overgrown", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_overgrown_root:CheckState()
	return {[MODIFIER_STATE_ROOTED] = true,
			[MODIFIER_STATE_DISARMED] = true,
			[MODIFIER_STATE_INVISIBLE] = false}
end

function modifier_elite_overgrown_root:GetEffectName()
	return "particles/units/heroes/hero_dark_willow/dark_willow_bramble.vpcf"
end
elite_parrying = class({})

function elite_parrying:GetIntrinsicModifierName()
	return "modifier_elite_parrying"
end

function elite_parrying:OnSpellStart()
	local caster = self:GetCaster()
	
	ParticleManager:FireWarningParticle( caster:GetAbsOrigin(), 150 )
	local cd = self:GetCooldownTimeRemaining()
	caster:EmitSound("DOTA_Item.BladeMail.Activate")
	Timers:CreateTimer(1.5, function()
		self:EndCooldown()
		self:SetCooldown(cd)
		caster:AddNewModifier(caster, self, "modifier_elite_parrying_buff", {duration = self:GetSpecialValueFor("duration")})
	end)
end

modifier_elite_parrying = class(relicBaseClass)
LinkLuaModifier("modifier_elite_parrying", "elites/elite_parrying", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_parrying:OnCreated()
		self:StartIntervalThink( 1 )
	end
	
	function modifier_elite_parrying:OnIntervalThink()
		local caster = self:GetCaster()
		if caster:PassivesDisabled() or not caster:IsAlive() or caster:HasActiveAbility() then return end
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() then return end
		if #caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), 800 ) <= 0 then return end
		ability:CastSpell()
	end
end


modifier_elite_parrying_buff = class({})
LinkLuaModifier("modifier_elite_parrying_buff", "elites/elite_parrying", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_parrying:OnDestroy() 
	if IsServer() then self:GetCaster():EmitSound("DOTA_Item.BladeMail.Deactivate") end
end

function modifier_elite_parrying_buff:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_elite_parrying_buff:OnTakeDamage(params)
	local hero = self:GetParent()
	if params.unit ~= hero then return end
    local dmg = params.original_damage
	local dmgtype = params.damage_type
	local attacker = params.attacker
	if attacker:GetTeamNumber()  ~= hero:GetTeamNumber() and not ( HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_HPLOSS) or HasBit(params.damage_flags, DOTA_DAMAGE_FLAG_REFLECTION) ) then
		self:GetAbility():DealDamage( hero, attacker, dmg, {damage_type = dmgtype, damage_flags = DOTA_DAMAGE_FLAG_REFLECTION + DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION} )
	end
end

function modifier_elite_parrying_buff:GetEffectName()
	return "particles/items_fx/blademail.vpcf"
endelite_piercing = class({})

function elite_piercing:GetIntrinsicModifierName()
	return "modifier_elite_piercing"
end

function elite_piercing:OnSpellStart()
	local caster = self:GetCaster()
	
	caster:AddNewModifier(caster, self, "modifier_elite_piercing_buff", {})
end

modifier_elite_piercing = class(relicBaseClass)
LinkLuaModifier("modifier_elite_piercing", "elites/elite_piercing", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_piercing:OnCreated()
		self:StartIntervalThink(0.2)
	end
	
	function modifier_elite_piercing:OnIntervalThink()
		local caster = self:GetCaster()
		if caster:PassivesDisabled() or not caster:IsAlive() or not caster:IsAttacking() then return end
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() then return end
		
		ability:CastSpell()
	end
end


modifier_elite_piercing_buff = class({})
LinkLuaModifier("modifier_elite_piercing_buff", "elites/elite_piercing", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_piercing_buff:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_elite_piercing_buff:OnAttackLanded(params)
	if params.attacker == self:GetParent() then
		local nFXIndex = ParticleManager:CreateParticle( "particles/units/heroes/hero_phantom_assassin/phantom_assassin_crit_impact.vpcf", PATTACH_CUSTOMORIGIN, params.attacker )
                    ParticleManager:SetParticleControlEnt( nFXIndex, 0, params.target, PATTACH_POINT_FOLLOW, "attach_hitloc", params.target:GetOrigin(), true )
                    ParticleManager:SetParticleControl( nFXIndex, 1, params.target:GetOrigin() )
                    ParticleManager:SetParticleControlForward( nFXIndex, 1, params.attacker:GetForwardVector() )
                    ParticleManager:SetParticleControlEnt( nFXIndex, 10, params.target, PATTACH_ABSORIGIN_FOLLOW, nil, params.target:GetOrigin(), true )
                    ParticleManager:ReleaseParticleIndex( nFXIndex )
		self:GetAbility():DealDamage(params.attacker, params.target, params.original_damage, {damage_type = DAMAGE_TYPE_PURE, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
		self:Destroy()
	end
endelite_plagued = class({})

function elite_plagued:GetIntrinsicModifierName()
	return "modifier_elite_plagued"
end


modifier_elite_plagued = class(relicBaseClass)
LinkLuaModifier("modifier_elite_plagued", "elites/elite_plagued", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_plagued:OnCreated()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_elite_plagued:OnRefresh()
	self.duration = self:GetSpecialValueFor("duration")
end

function modifier_elite_plagued:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_elite_plagued:OnAttackLanded(params)
	if params.target == self:GetParent() then
		self.duration = self:GetSpecialValueFor("duration")
		params.attacker:AddNewModifier(params.target, self:GetAbility(), "modifier_elite_plagued_debuff", {duration = self.duration})
	end
end

modifier_elite_plagued_debuff = class({})
LinkLuaModifier("modifier_elite_plagued_debuff", "elites/elite_plagued", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_plagued_debuff:OnCreated()
	self.damage = self:GetSpecialValueFor("damage")
	if IsServer() then
		self:SetStackCount(1)
		self:StartIntervalThink(0.5)
	end
end

function modifier_elite_plagued_debuff:OnRefresh()
	self.damage = self:GetSpecialValueFor("damage")
	if IsServer() then
		self:AddIndependentStack()
	end
end

function modifier_elite_plagued_debuff:OnIntervalThink()
	self:GetAbility():DealDamage( self:GetCaster(), self:GetParent(), self.damage * self:GetStackCount(), {damage_type = DAMAGE_TYPE_MAGICAL} )
end

function modifier_elite_plagued_debuff:GetEffectName()
	return "particles/units/heroes/hero_undying/undying_decay_strength_debuff.vpcf"
endelite_pulsar = class({})

function elite_pulsar:GetIntrinsicModifierName()
	return "modifier_elite_pulsar"
end

modifier_elite_pulsar = class(relicBaseClass)
LinkLuaModifier("modifier_elite_pulsar", "elites/elite_pulsar", LUA_MODIFIER_MOTION_NONE)
function modifier_elite_pulsar:DeclareFunctions()
	return {MODIFIER_EVENT_ON_DEATH}
end

function modifier_elite_pulsar:OnDeath(params)
	if params.unit == self:GetParent() then
		local ability = self:GetAbility()
		local caster = self:GetCaster()
		
		local radius = self:GetSpecialValueFor("radius")
		local delay = self:GetSpecialValueFor("delay")
		local damage = self:GetSpecialValueFor("max_hp_dmg")
		
		local position = caster:GetAbsOrigin()
		
		ParticleManager:FireWarningParticle(position, radius)
		
		ParticleManager:FireParticle("particles/units/heroes/hero_pugna/pugna_netherblast_pre.vpcf", PATTACH_POINT_FOLLOW, caster, {[1] = Vector(radius,delay,delay)})
		ParticleManager:FireParticle("particles/bosses/boss_green_dragon/boss_green_dragon_explosion_prep.vpcf", PATTACH_POINT_FOLLOW, caster)
		Timers:CreateTimer(delay, function()
			ParticleManager:FireParticle("particles/bosses/boss_green_dragon/boss_green_dragon_rot_explosion.vpcf", PATTACH_POINT_FOLLOW, caster)
			for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( position, radius ) ) do
				ability:DealDamage( caster, enemy, enemy:GetMaxHealth() * damage, {damage_type = DAMAGE_TYPE_PHYSICAL} )
			end
		end)
	end
endelite_sweeping = class({})

function elite_sweeping:GetIntrinsicModifierName()
	return "modifier_elite_sweeping"
end

modifier_elite_sweeping = class(relicBaseClass)
LinkLuaModifier("modifier_elite_sweeping", "elites/elite_sweeping", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_sweeping:OnCreated()
	self.radius = self:GetSpecialValueFor("radius")
	self.dmg_pct = self:GetSpecialValueFor("damage_pct")
end

function modifier_elite_sweeping:DeclareFunctions()
	return {MODIFIER_EVENT_ON_ATTACK_LANDED}
end

function modifier_elite_sweeping:OnAttackLanded(params)
	if params.attacker == self:GetParent() then
		self.radius = self:GetSpecialValueFor("radius")
		self.dmg_pct = self:GetSpecialValueFor("damage_pct") / 100
		local ability = self:GetAbility()
		for _, enemy in ipairs( params.attacker:FindEnemyUnitsInRadius( params.target:GetAbsOrigin(), self.radius ) ) do
			if enemy ~= params.target then
				ability:DealDamage(params.attacker, enemy, params.damage * self.dmg_pct, {damage_type = DAMAGE_TYPE_PHYSICAL, damage_flags = DOTA_DAMAGE_FLAG_NO_SPELL_AMPLIFICATION})
			end
		end
	end
endelite_temporal = class({})

function elite_temporal:GetIntrinsicModifierName()
	return "modifier_elite_temporal"
end

function elite_temporal:OnSpellStart()
	local caster = self:GetCaster()
	local position = self:GetCursorPosition()
	CreateModifierThinker(caster, self, "modifier_elite_temporal_dummy", {duration = self:GetSpecialValueFor("bubble_duration")}, position, caster:GetTeam(), false)
end

modifier_elite_temporal = class(relicBaseClass)
LinkLuaModifier("modifier_elite_temporal", "elites/elite_temporal", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_temporal:OnCreated()
		self.duration = self:GetSpecialValueFor("duration")
		self:StartIntervalThink(0.2)
	end
	
	function modifier_elite_temporal:OnIntervalThink()
		local caster = self:GetCaster()
		if caster:PassivesDisabled() or not caster:IsAlive() or caster:HasActiveAbility() then return end
		local ability = self:GetAbility()
		if not ability:IsFullyCastable() or #caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), 800 ) <= 0 then return end
		local position = caster:GetAbsOrigin() + ActualRandomVector(600, 150)
		ParticleManager:FireWarningParticle( position, self:GetSpecialValueFor("bubble_radius") )
		ability:CastSpell(position)
	end
end

modifier_elite_temporal_dummy = class({})
LinkLuaModifier("modifier_elite_temporal_dummy", "elites/elite_temporal", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_temporal_dummy:OnCreated()
		self.radius = self:GetSpecialValueFor("bubble_radius")
		self.cd_per_sec = FrameTime() + self:GetSpecialValueFor("cd_increase_per_sec") * FrameTime()
		if IsServer() then
			self.bubbleFX = ParticleManager:CreateParticle("particles/units/heroes/hero_faceless_void/faceless_void_chronosphere.vpcf", PATTACH_ABSORIGIN, self:GetParent())
				ParticleManager:SetParticleControl(self.bubbleFX, 1, Vector(self.radius,self.radius,self.radius)) --radius
			self:StartIntervalThink(1)
		end
	end
	
	function modifier_elite_temporal_dummy:OnIntervalThink()
		local caster = self:GetCaster()
		local parent = self:GetParent()
		self:StartIntervalThink(0)
		for _, enemy in ipairs( caster:FindEnemyUnitsInRadius( parent:GetAbsOrigin(), self.radius ) ) do
			for i = 0, 12 do
				local checkedAb = enemy:GetAbilityByIndex(i)
				if checkedAb  and not checkedAb:IsPassive() then
					if not checkedAb:IsCooldownReady() then
						local cd = checkedAb:GetCooldownTimeRemaining()
						checkedAb:EndCooldown()
						checkedAb:StartCooldown(cd + self.cd_per_sec)
					else
						checkedAb:StartCooldown(self.cd_per_sec)
					end
				end
			end
		end
	end
	
	function modifier_elite_temporal_dummy:OnDestroy()
		ParticleManager:ClearParticle(self.bubbleFX)
		self:GetParent():ForceKill(false)
	end
endelite_tiny = class({})

function elite_tiny:GetIntrinsicModifierName()
	return "modifier_elite_tiny"
end

modifier_elite_tiny = class({})
LinkLuaModifier("modifier_elite_tiny", "elites/elite_tiny", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_tiny:DeclareFunctions()
	return {MODIFIER_PROPERTY_MODEL_SCALE }
end

function modifier_elite_tiny:GetModifierModelScale()
	return -65
end

function relicBaseClass:GetAttributes()
	return MODIFIER_ATTRIBUTE_IGNORE_INVULNERABLE + MODIFIER_ATTRIBUTE_PERMANENT
end

function relicBaseClass:IsHidden()
	return true
endelite_unbreakable = class({})

function elite_unbreakable:GetIntrinsicModifierName()
	return "modifier_elite_unbreakable"
end

modifier_elite_unbreakable = class(relicBaseClass)
LinkLuaModifier("modifier_elite_unbreakable", "elites/elite_unbreakable", LUA_MODIFIER_MOTION_NONE)


function modifier_elite_unbreakable:CheckState()
	return {[MODIFIER_STATE_ROOTED] = false,
			[MODIFIER_STATE_DISARMED] = false,
			[MODIFIER_STATE_SILENCED] = false,
			[MODIFIER_STATE_MUTED] = false,
			[MODIFIER_STATE_STUNNED] = false,
			[MODIFIER_STATE_HEXED] = false,
			[MODIFIER_STATE_FROZEN] = false,
			[MODIFIER_STATE_PASSIVES_DISABLED] = false}
end

function modifier_elite_unbreakable:GetPriority()
	return MODIFIER_PRIORITY_HIGH
endelite_unstable = class({})

function elite_unstable:GetIntrinsicModifierName()
	return "modifier_elite_unstable"
end

modifier_elite_unstable = class(relicBaseClass)
LinkLuaModifier("modifier_elite_unstable", "elites/elite_unstable", LUA_MODIFIER_MOTION_NONE)

if IsServer() then
	function modifier_elite_unstable:OnCreated()
		self.lifetime = self:GetSpecialValueFor("bramble_lifetime")
		self.delay = self:GetSpecialValueFor("bramble_rate")
		self:StartIntervalThink( 1 )
	end
	
	function modifier_elite_unstable:OnIntervalThink()
		local caster = self:GetCaster()
		local ability = self:GetAbility()
		if caster:PassivesDisabled() or not caster:IsAlive() then return end
		local enemies = caster:FindEnemyUnitsInRadius( caster:GetAbsOrigin(), 1200)
		if not enemies then return end
		for _,unit in pairs(enemies) do
			if RollPercentage(20) then
				local location = unit:GetAbsOrigin() + RandomVector( 1200 )
				local rnd = RandomInt(1,100)
				if rnd > 33 and rnd < 66 then
					ability:ApplyAOE({particles = "particles/econ/items/shadow_fiend/sf_fire_arcana/sf_fire_arcana_shadowraze.vpcf",
									  location = location,
									  radius = 350,
									  damage = 200,
									  damage_type = DAMAGE_TYPE_MAGICAL,
									  delay = 2.5,
									  sound = "Hero_Enigma.Demonic_Conversion"})				
				elseif rnd < 33 then
					ability:ApplyAOE({particles = "particles/units/heroes/hero_lina/lina_spell_light_strike_array.vpcf",
									  location = location,
									  radius = 150,
									  damage = 75,
									  damage_type = DAMAGE_TYPE_MAGICAL,
									  modifier = "modifier_elite_unstable_stun",
									  duration = 1,
									  delay = 2.5,
									  sound = "Hero_Enigma.Demonic_Conversion"})
				else
					ability:ApplyAOE({particles = "particles/econ/items/kunkka/kunkka_weapon_whaleblade/kunkka_spell_torrent_splash_whaleblade.vpcf",
									  location = location,
									  radius = 225,
									  damage = 140,
									  damage_type = DAMAGE_TYPE_MAGICAL,
									  modifier = "modifier_chill_generic",
									  stacks = 50,
									  duration = 3,
									  delay = 2.5,
									  sound = "Hero_Enigma.Demonic_Conversion"})
				end
			end
		end
	end
endelite_vampiric = class({})

function elite_vampiric:GetIntrinsicModifierName()
	return "modifier_elite_vampiric"
end

modifier_elite_vampiric = class(relicBaseClass)
LinkLuaModifier("modifier_elite_vampiric", "elites/elite_vampiric", LUA_MODIFIER_MOTION_NONE)

function modifier_elite_vampiric:DeclareFunctions()
	return {MODIFIER_EVENT_ON_TAKEDAMAGE}
end

function modifier_elite_vampiric:OnTakeDamage(params)
	if params.attacker == self:GetParent() and params.damage_category == DOTA_DAMAGE_CATEGORY_ATTACK and self:GetParent():GetHealth() > 0 and not params.inflictor then
		ParticleManager:FireParticle( "particles/units/heroes/hero_skeletonking/wraith_king_vampiric_aura_lifesteal.vpcf", PATTACH_POINT_FOLLOW, self:GetParent() )
		local flHeal = params.damage * self:GetSpecialValueFor("lifesteal") / 100
		params.attacker:HealEvent(flHeal, self:GetAbility(), params.attacker)
	end
end
if EventManager == nil then
	print ( 'creating event manager' )
	EventManager = {}
	EventManager.__index = EventManager
end

function EventManager:new( o )
	o = o or {}
	setmetatable( o, EventManager )
	return o
end

PUBLIC_EVENTS = PUBLIC_EVENTS or {["boss_hunters_event_started"] = {},
				 ["boss_hunters_event_finished"] = {},
				 ["boss_hunters_raid_finished"] = {},
				 ["boss_hunters_zone_finished"] = {},
				 ["boss_hunters_game_finished"] = {}}
				 
function EventManager:SubscribeListener(event, callback)
	local eventTable = PUBLIC_EVENTS[event]
	local id = DoUniqueString("event")
	eventTable[id] = callback
	return id
end

function EventManager:FireEvent(event, args)
	for id, callback in pairs( PUBLIC_EVENTS[event] ) do
		status, err, ret = pcall(callback, args)
		if not status  and not self.gameHasBeenBroken then
			self:SendErrorReport(err)
		end
	end
end

function EventManager:UnsubscribeListener(event, id)
	local eventTable = PUBLIC_EVENTS[event]
	eventTable[id] = nil
end

function EventManager:SendErrorReport(err)
	self.gameHasBeenBroken = true
	Notifications:BottomToAll({text="An error has occurred! Please screenshot this: "..err, duration=15.0})
	print(err)
end

function EventManager:CreateNewEvent(name)
	PUBLIC_EVENTS[name] = {}
end

function EventManager:RemoveEvent(name)
	PUBLIC_EVENTS[name] = nil
end

function EventManager:ShowErrorMessage(pID, sError)
	local player = PlayerResource:GetPlayer(pID)
	if player then
		CustomGameEventManager:Send_ServerToPlayer(player, "bh_show_error_message", {_error = sError or ""} )
	end
endlocal function OnEntityKilled(self, event)
	local EntityKillCatch = function( ... )
		if not event.entindex_killed then return end
		local killedTarget = EntIndexToHScript(event.entindex_killed)
		if not killedTarget or not self or self.eventEnded then return end
		if not killedTarget:IsRealHero() and killedTarget:IsRoundNecessary() and self.enemiesToSpawn <= 0 then
			for _, unit in ipairs( FindAllUnits({team = DOTA_UNIT_TARGET_TEAM_BOTH}) ) do
				if unit:IsRoundNecessary() and unit:IsAlive() then
					return
				end
			end
			Timers:CreateTimer(3, function()
				self:EndEvent(true)
			end)
		elseif killedTarget:IsRealHero() then
			if not killedTarget:NotDead() then
				killedTarget:CreateTombstone()
			end
			if RoundManager:EvaluateLoss() then
				Timers:CreateTimer(3, function()
					if RoundManager:EvaluateLoss() then
						self:EndEvent(false)
					end
				end)
			end
		end
	end
	status, err, ret = xpcall(EntityKillCatch, debug.traceback, self, event )
	if not status  and not self.gameHasBeenBroken then
		SendErrorReport(err)
	end
end
return OnEntityKilledBaseEvent = class({})

EVENT_TYPE_COMBAT = 1
EVENT_TYPE_ELITE = 2
EVENT_TYPE_EVENT = 3
EVENT_TYPE_BOSS = 4

ROUND_END_DELAY = 3

function SendErrorReport(err, context)
	Notifications:BottomToAll({text="An error has occurred! Please screenshot this: "..err, duration=15.0})
	print(err)
	if context then context.gameHasBeenBroken = true end
end

function BaseEvent:constructor(zoneName, eventType, eventName)
	self.eventType = tonumber(eventType)
	self.eventName = eventName
	self.zoneName = zoneName
	self.eventID = DoUniqueString(eventName)
	self.eventHasStarted = false
	local eventFolder = "combat"
	if self.eventType == EVENT_TYPE_EVENT then
		eventFolder = "event"
	elseif self.eventType == EVENT_TYPE_BOSS or self.eventType == EVENT_TYPE_ELITE then
		eventFolder = "boss"
	end
	
	local funcs = require("events/"..eventFolder.."/"..eventName)
	self["HandoutRewards"] = BaseEvent.HandoutRewards
	for functionName, functionMethod in pairs( funcs ) do
		-- Precaching really doesn't like it when you change context
		if functionName ~= 'PrecacheUnits' then
			self[functionName] = function( self, optArg1, optArg2, optArg3  )
									status, err, ret = xpcall(functionMethod, debug.traceback, self, optArg1, optArg2, optArg3 ) -- optArg1 to 3 should just be nil and ignored if empty
									if not status  and not self.gameHasBeenBroken then
										SendErrorReport(err)
									end
								end
		else
			self[functionName] = functionMethod
		end
	end
end

function BaseEvent:StartEvent()
	print("Event not initialized")
	return nil
end

function BaseEvent:PrecacheUnits()
	print("Precache not initialized")
end

function BaseEvent:EndEvent()
	print("EndEvent not initialized")
end

function BaseEvent:GetZone()
	return self.zoneName
end

function BaseEvent:LoadSpawns()
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		local zoneName = self:GetZone()
		local eventType = "combat"
		local choices = 4
		if self:GetEventType() == EVENT_TYPE_BOSS then
			eventType = "boss"
			choices = 2
		end
		local roll = RandomInt(1,choices)
		RoundManager.boundingBox = string.lower(zoneName).."_"..eventType.."_"..roll
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		self.spawnLoadCompleted = true
	end
end

function BaseEvent:GetHeroSpawnPosition()
	return RoundManager.heroSpawnPosition
end

function BaseEvent:HandoutRewards(bWon)
	if not self:IsEvent() then
		local EVENT_MAX = 5 * 2 * 4
		local eventScaling = math.min( RoundManager:GetEventsFinished(), EVENT_MAX ) * 0.75
		local raidScaling = 1 + math.min( RoundManager:GetRaidsFinished(), EVENT_MAX ) * 0.125
		local playerScaling = 1 + ( GameRules.BasePlayers - HeroList:GetActiveHeroCount() ) / 10
		local baseXP = ( ( 700 + ( (45) * eventScaling ) ) + (250 * raidScaling) )
		local baseGold = ( ( 200 + ( (25) * eventScaling ) ) + (80 * raidScaling) ) 
		if not bWon then
			baseXP = baseXP / 4
			baseGold = baseGold / 4
		end
		if self:IsBoss() then
			baseXP = baseXP * 1.5
			baseGold = baseGold * 1.5
		end
		for _, hero in ipairs( HeroList:GetRealHeroes() ) do
			hero:AddGold( baseGold )
			hero:AddXP( baseXP )
			local pID = hero:GetPlayerOwnerID()
			if bWon then
				if self:IsElite() and RoundManager:GetAscensions() < 1 then
					RelicManager:RollEliteRelicsForPlayer(pID)
				elseif self:IsBoss() and RoundManager:GetAscensions() < 2 then
					RelicManager:RollBossRelicsForPlayer(pID)
				end
			end
		end
	end
end

function BaseEvent:IsEvent()
	return self.eventType == EVENT_TYPE_EVENT
end

function BaseEvent:IsCombat()
	return self.eventType == EVENT_TYPE_COMBAT
end

function BaseEvent:IsBoss()
	return self.eventType == EVENT_TYPE_BOSS
end

function BaseEvent:IsElite()
	return self.eventType == EVENT_TYPE_ELITE
end

function BaseEvent:GetEventName()
	return self.eventName
end

function BaseEvent:GetEventID()
	return self.eventID
end

function BaseEvent:GetEventType()
	return self.eventType
end

function BaseEvent:HasStarted()
	return self.eventHasStarted or false
endlocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss38", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss38", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss39", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss39", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	
	Timers:CreateTimer(1, function()
		Notifications:BottomToAll({text="It comes.", duration=5.0})
	end)
	
	local position
	if Entities:FindByName(nil, RoundManager.boundingBox.."_edge_collider") then
		position = Entities:FindByName(nil, RoundManager.boundingBox.."_edge_collider"):GetAbsOrigin()
	end
	
	local nFX = ParticleManager:CreateParticle("particles/units/heroes/heroes_underlord/abyssal_underlord_darkrift_target.vpcf", PATTACH_ABSORIGIN, nil)
	ParticleManager:SetParticleControl( nFX, 0, position + Vector(0,0,128) ) 
	ParticleManager:SetParticleControl( nFX, 6, position + Vector(0,0,128) ) 
	ParticleManager:SetParticleControl( nFX, 60, Vector(168, 100, 219) ) 
	ParticleManager:SetParticleControl( nFX, 61, Vector(168, 100, 219) ) 
	self.eventHandler = Timers:CreateTimer(10, function()
		local spawn = CreateUnitByName("npc_dota_boss_apotheosis", position or RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		ParticleManager:ClearParticle( nFX )
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss38", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.eventEnded = false
	self.enemiesToSpawn = 1
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss36_guardian", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		spawn.shield = spawn:FindAbilityByName("boss_evil_guardian_fire_shield")
		spawn.purge = spawn:FindAbilityByName("boss_evil_guardian_purge_their_sin")
		spawn.pool = spawn:FindAbilityByName("boss_evil_guardian_hell_on_earth")
	
		spawn.raze1 = spawn:FindAbilityByName("boss_evil_guardian_annihilation")
		spawn.raze2 = spawn:FindAbilityByName("boss_evil_guardian_destruction")
		spawn.raze3 = spawn:FindAbilityByName("boss_evil_guardian_apocalypse")
		spawn.fist = spawn:FindAbilityByName("boss_evil_guardian_rise_of_hell")
		spawn.stun = spawn:FindAbilityByName("boss_evil_guardian_end_of_days")
	
		if math.floor(GameRules:GetGameDifficulty() + 0.5) == 2 then 
			spawn.shield:SetLevel(1)
			spawn.purge:SetLevel(1)
			spawn.pool:SetLevel(1)
			spawn.raze1:SetLevel(1)
			spawn.raze2:SetLevel(1)
			spawn.raze3:SetLevel(1)
			spawn.fist:SetLevel(1)
			spawn.stun:SetLevel(1)
		else
			spawn.shield:SetLevel(2)
			spawn.purge:SetLevel(2)
			spawn.pool:SetLevel(2)
			spawn.raze1:SetLevel(2)
			spawn.raze2:SetLevel(2)
			spawn.raze3:SetLevel(2)
			spawn.fist:SetLevel(2)
			spawn.stun:SetLevel(2)
		end
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss36_guardian", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "solitude_asura_boss"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss37", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1

		if self.enemiesToSpawn > 0 then
			return 25
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss37", context)
	PrecacheUnitByNameSync("npc_dota_creature_broodmother", context)
	PrecacheUnitByNameSync("npc_dota_creature_broodmother_egg", context)
	PrecacheUnitByNameSync("npc_dota_creature_spiderling", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.eventEnded = false
	self.enemiesToSpawn = 1
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_genesis", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 25
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_genesis", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_ammetot", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_ammetot", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "solitude_asura_boss"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = RoundManager:GetCurrentRaidTier()
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss12_golem", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 3
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss12_golem", context)
	PrecacheUnitByNameSync("npc_dota_boss12_shardling", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss30", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 25
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss30", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss21", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		spawn:SetCoreHealth(5000)
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss21", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.ceil( math.log( (RoundManager:GetRaidsFinished() / 2) + 1 ) )
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss27", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss27", context)
	PrecacheUnitByNameSync("npc_dota_boss26", context)
	PrecacheUnitByNameSync("npc_dota_boss26_mini", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss23", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss23", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss28", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss28", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_green_dragon", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		local greenPool = spawn:FindAbilityByName("green_dragon_toxic_pool")
		if greenPool then greenPool:StartCooldown(10) end
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_green_dragon", context)
	PrecacheUnitByNameSync("npc_dota_green_dragon_bug", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "grove_boss_green_dragon"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end

		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.greymane = 1
	self.alpha = RoundManager:GetCurrentRaidTier() * RoundManager:GetAscensions()
	self.wolf =  ( 1 + RoundManager:GetCurrentRaidTier() ) * RoundManager:GetAscensions()
	self.enemiesToSpawn = self.greymane
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		if self.alpha > 0 then
			local alpha = CreateUnitByName("npc_dota_boss_alpha_wolf", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
			alpha:SetCoreHealth(850)
			self.alpha = self.alpha - 1
		end
		if self.wolf > 0 then
			local wolf = CreateUnitByName("npc_dota_boss_wolf", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
			wolf:SetCoreHealth(500)
			self.wolf = self.wolf - 1
		end
		if self.greymane > 0 then
			local spawn = CreateUnitByName("npc_dota_boss_greymane", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
			spawn.unitIsBoss = true
			spawn.unitIsRoundNecessary = true
			self.enemiesToSpawn = self.enemiesToSpawn - 1
			self.greymane = self.greymane - 1
		end
		if self.alpha + self.wolf + self.greymane > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_greymane", context)
	PrecacheUnitByNameSync("npc_dota_boss_wolf", context)
	PrecacheUnitByNameSync("npc_dota_boss_alpha_wolf", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_troll_warlord", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 35
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_troll_warlord", context)
	PrecacheUnitByNameSync("npc_dota_mini_boss2", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_valgraduth", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_valgraduth", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "solitude_asura_boss"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss22", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 15
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss22", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss34", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 30
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss34", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss4", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 18
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss4", context)
	PrecacheUnitByNameSync("npc_dota_mini_boss1", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local position = RoundManager:PickRandomSpawn()
		local spawn = CreateUnitByName("npc_dota_boss_vile_archmage", position, true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		
		if self.enemiesToSpawn > 0 then
			return 20
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_vile_archmage", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.mobsToSpawn = 3
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local position = RoundManager:PickRandomSpawn()
		local spawn = CreateUnitByName("npc_dota_boss25", position, true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		
		for i = 1, self.mobsToSpawn do
			local mobName = "npc_dota_boss24_stomper"
			if RollPercentage(50) then
				mobName = "npc_dota_boss24_archer"
			end
			CreateUnitByName(mobName, position + RandomVector(600), true, nil, nil, DOTA_TEAM_BADGUYS)
		end
		
		if self.enemiesToSpawn > 0 then
			return 30
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss25", context)
	PrecacheUnitByNameSync("npc_dota_boss24_stomper", context)
	PrecacheUnitByNameSync("npc_dota_boss24_archer", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_arthromos", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_arthromos", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "solitude_asura_boss"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetAscensions()
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss35", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 30
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss35", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss36", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss36", context)
	PrecacheUnitByNameSync("npc_dota_boss35", context)
	PrecacheUnitByNameSync("npc_dota_boss34", context)
	PrecacheUnitByNameSync("npc_dota_boss33_a", context)
	PrecacheUnitByNameSync("npc_dota_boss33_b", context)
	PrecacheUnitByNameSync("npc_dota_boss32_trueform", context)
	PrecacheUnitByNameSync("npc_dota_boss31", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "solitude_asura_boss"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min(4 , 1 + RoundManager:GetAscensions() )
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss33_a", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		local spawn2 = CreateUnitByName("npc_dota_boss33_b", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn2.unitIsRoundNecessary = true
		
		spawn.unitIsBoss = true
		spawn2.unitIsBoss = true
		spawn.twinDemon = spawn2
		spawn2.twinDemon = spawn
		
		spawn.IsTwinAlive = function(spawn)
			return spawn.twinDemon and not spawn.twinDemon:IsNull() and spawn.twinDemon:IsAlive()
		end
		
		spawn2.IsTwinAlive = function(spawn2)
			return spawn2.twinDemon and not spawn2.twinDemon:IsNull() and spawn2.twinDemon:IsAlive()
		end
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 30
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss33_a", context)
	PrecacheUnitByNameSync("npc_dota_boss33_b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + math.floor( math.log( RoundManager:GetRaidsFinished() + 1) )
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_warlock", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn.unitIsBoss = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_warlock", context)
	PrecacheUnitByNameSync("npc_dota_boss_warlock_demon", context)
	PrecacheUnitByNameSync("npc_dota_boss_warlock_true_form", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_durva", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsBoss = true
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_durva", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "solitude_asura_boss"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetCurrentRaidTier() * 2
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_archangel", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10 / GameRules:GetGameDifficulty()
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_archangel", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	self.enemiesToSpawn = 2 + RoundManager:GetCurrentRaidTier() + RoundManager:GetAscensions() * 1
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss28", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		spawn:SetCoreHealth(2250)
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss28", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1 + RoundManager:GetCurrentRaidTier() * 2
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_fallen_one", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 8 / GameRules:GetGameDifficulty()
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_fallen_one", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 3
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss34", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		spawn:FindAbilityByName("boss_necro_plague_wave"):SetActivated(false)
		spawn:SetCoreHealth(2000)
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 20
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss34", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min(10, math.max( 2, math.ceil( math.log( 1 + RoundManager:GetRaidsFinished() * 15 ) * 1.5) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local position = RoundManager:PickRandomSpawn()
		local bigSpider = CreateUnitByName("npc_dota_creature_broodmother", position, true, nil, nil, DOTA_TEAM_BADGUYS)
		bigSpider.unitIsRoundNecessary = true
		bigSpider:SetCoreHealth( 2250 )
		bigSpider:SetBaseMagicalResistanceValue( 30 )
		bigSpider:SetPhysicalArmorBaseValue( -3 )
		bigSpider:SetAverageBaseDamage(100, 30)
		bigSpider:SetBaseMoveSpeed(350)
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 8 / (RoundManager:GetRaidsFinished() + 1)
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_creature_broodmother", context)
	PrecacheUnitByNameSync("npc_dota_creature_spiderling", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 3
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_warlock", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn:SetCoreHealth( 1750 )
		spawn.unitIsRoundNecessary = true
		
		spawn:FindAbilityByName("boss_warlock_ultimate_form"):SetActivated(false)
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_warlock", context)
	PrecacheUnitByNameSync("npc_dota_boss_warlock_demon", context)
	PrecacheUnitByNameSync("npc_dota_boss_warlock_true_form", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 2 + math.floor( math.log( (RoundManager:GetEventsFinished() * 2) + 1 ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss11", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 12 / (RoundManager:GetRaidsFinished() + 1)
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss11", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	local roll = RandomInt(1, 3)
	self.noSmash = 0
	self.wizardSmash = 0
	self.smallSmash = 0
	self.bigSmash = 0
	if roll == 1 then	
		self.bigSmash = RoundManager:GetCurrentRaidTier()
		self.wizardSmash = 1 + RoundManager:GetCurrentRaidTier()
		self.noSmash = 1 + RoundManager:GetCurrentRaidTier() * 2
	elseif roll == 2 then
		self.wizardSmash = RoundManager:GetCurrentRaidTier()
		self.smallSmash = RoundManager:GetCurrentRaidTier()
		self.noSmash = 2 + RoundManager:GetCurrentRaidTier() * 3
	else
		self.smallSmash = 1 + RoundManager:GetCurrentRaidTier()
		self.bigSmash = RoundManager:GetCurrentRaidTier()
		self.noSmash = 1 + RoundManager:GetCurrentRaidTier() * 2
	end
	self.enemiesToSpawn = self.noSmash + self.wizardSmash + self.smallSmash + self.bigSmash
	local bigSpawnDelay = 7
	local smallSpawnDelay = 6
	local wizardSpawnDelay = 3
	local noSpawnDelay = 1
	self.eventHandler = Timers:CreateTimer(3, function()
		if self.bigSmash > 0 then
			if bigSpawnDelay <= 0 then
				local spawn = CreateUnitByName("npc_dota_boss16", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn.unitIsRoundNecessary = true
				bigSpawnDelay = 15
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			else
				bigSpawnDelay = bigSpawnDelay - 1
			end
		end
		if self.wizardSmash > 0 then
			if wizardSpawnDelay <= 0 then
				local spawn = CreateUnitByName("npc_dota_boss14", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn.unitIsRoundNecessary = true
				wizardSpawnDelay = 10
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			else
				wizardSpawnDelay = wizardSpawnDelay - 1
			end
		end
		if self.smallSmash > 0 then
			if smallSpawnDelay <= 0 then
				local spawn = CreateUnitByName("npc_dota_boss15", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn.unitIsRoundNecessary = true
				smallSpawnDelay = 10
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			else
				smallSpawnDelay = smallSpawnDelay - 1
			end
		end
		if self.noSmash > 0 then
			if noSpawnDelay <= 0 then
				local spawn = CreateUnitByName("npc_dota_boss13", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn.unitIsRoundNecessary = true
				spawn.unitIsMinion = true
				noSpawnDelay = 5
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			else
				noSpawnDelay = noSpawnDelay - 1
			end
		end
		if self.enemiesToSpawn > 0 then
			return 1
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss13", context)
	PrecacheUnitByNameSync("npc_dota_boss14", context)
	PrecacheUnitByNameSync("npc_dota_boss15", context)
	PrecacheUnitByNameSync("npc_dota_boss16", context)
	PrecacheUnitByNameSync("npc_dota_mini_boss2", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 2 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = "npc_dota_boss6"
		if RollPercentage(30) then
			enemyName = "npc_dota_boss6_b"
		end
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 4
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss6", context)
	PrecacheUnitByNameSync("npc_dota_boss6_b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.bigBears = 0
	self.smallBears = 0
	local bigBearsGuaranteed = RollPercentage( 50 )
	if bigBearsGuaranteed then
		self.bigBears = RoundManager:GetCurrentRaidTier()
		self.smallBears = 1 + RoundManager:GetCurrentRaidTier() + HeroList:GetActiveHeroCount()
	else
		self.bigBears = RoundManager:GetCurrentRaidTier() - 1
		self.smallBears = 1 + RoundManager:GetCurrentRaidTier() * 2 + HeroList:GetActiveHeroCount()
	end
	self.enemiesToSpawn = self.bigBears + self.smallBears
	local bigSpawn = 0
	local smallSpawn = 0
	self.eventHandler = Timers:CreateTimer(3, function()
		if self.bigBears > 0 then
			bigSpawn = bigSpawn + 1
			if bigSpawn >= 10 then
				local spawn = CreateUnitByName("npc_dota_boss26", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn:SetCoreHealth(2200)
				spawn.unitIsRoundNecessary = true
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			end
		end
		if self.smallBears > 0 then
			smallSpawn = smallSpawn + 1
			if smallSpawn >= 6 then
				local spawn = CreateUnitByName("npc_dota_boss26_mini", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn:SetCoreHealth(1350)
				spawn.unitIsMinion = not bigBearsGuaranteed
				spawn.unitIsRoundNecessary = true
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			end
		end
		
		if self.enemiesToSpawn > 0 then
			return 1
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss26", context)
	PrecacheUnitByNameSync("npc_dota_boss26_mini", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 2 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = ""
		local roll = RandomInt(1, 5)
		
		if roll <= 2 then
			enemyName = "npc_dota_boss8a"
		elseif roll <= 4 then
			enemyName = "npc_dota_boss8b"
		else
			enemyName = "npc_dota_boss8c_spawner"
		end
		
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 15 / (GameRules:GetGameDifficulty() + 1)
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss8c", context)
	PrecacheUnitByNameSync("npc_dota_boss8c_spawner", context)
	PrecacheUnitByNameSync("npc_dota_boss8a", context)
	PrecacheUnitByNameSync("npc_dota_boss8b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 2 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = "npc_dota_boss8a"
		if RollPercentage(50) then
			enemyName = "npc_dota_boss8b"
		end
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 15 / (GameRules:GetGameDifficulty() + 1)
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss8a", context)
	PrecacheUnitByNameSync("npc_dota_boss8b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	self.enemiesToSpawn = 2 + math.floor( RoundManager:GetCurrentRaidTier() * 1.5 )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss10", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 6
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss10", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = RoundManager:GetCurrentRaidTier()
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = "npc_dota_boss9"
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 12
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss9", context)
	PrecacheUnitByNameSync("npc_dota_mini_slither", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min( 12, 3 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = "npc_dota_boss23_m"
		if RollPercentage(20) then	
			enemyName = "npc_dota_boss18"
		end
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		if enemyName == "npc_dota_boss18" then
			spawn.armor = spawn:FindAbilityByName("boss_living_armor")
			if spawn.armor then spawn.armor:SetLevel( math.max(5, RoundManager:GetRaidsFinished() ) ) end
		else
			spawn.conflag = spawn:AddAbility("boss16_conflagration")
			if  math.floor(GameRules.gameDifficulty + 0.5) < 2 then 
				spawn.conflag:SetLevel(1)
			else
				spawn.conflag:SetLevel(2)
			end
		end
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 5
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss23_m", context)
	PrecacheUnitByNameSync("npc_dota_boss18", context)
	PrecacheUnitByNameSync("npc_dota_mini_tree", context)
	PrecacheUnitByNameSync("npc_dota_mini_tree2", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 2 + RoundManager:GetCurrentRaidTier() + math.floor(HeroList:GetActiveHeroCount() / 2)
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss8c_spawner", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 12
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss8c_spawner", context)
	PrecacheUnitByNameSync("npc_dota_boss8c", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min( 12, 1 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = "npc_dota_boss18"
		local roll = RandomInt(1, 11)
		if RollPercentage(33) then
			enemyName = "npc_dota_boss19"
		end
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		
		if enemyName == "npc_dota_boss19" or enemyName == "npc_dota_boss18" then
			spawn.armor = spawn:FindAbilityByName("boss_living_armor")
			if spawn.armor then spawn.armor:SetLevel( math.max(5, RoundManager:GetRaidsFinished() ) ) end
		end
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 4
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss18", context)
	PrecacheUnitByNameSync("npc_dota_boss19", context)
	PrecacheUnitByNameSync("npc_dota_mini_tree", context)
	PrecacheUnitByNameSync("npc_dota_mini_tree2", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local wolves = 3 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) )
	local alpha = 1 + RoundManager:GetAscensions()
	
	self.enemiesToSpawn = wolves + alpha
	
	local delay = 10
	tick = 15 / (GameRules:GetGameDifficulty() + 1)
	self.eventHandler = Timers:CreateTimer(3, function()
		if wolves > 0 then
			local wolf = CreateUnitByName("npc_dota_boss_wolf", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
			wolf.unitIsRoundNecessary = true
			
			self.enemiesToSpawn = self.enemiesToSpawn - 1
			wolves = wolves - 1
		end
		
		delay = delay - tick
		if delay <= 0 and alpha > 0 then
			local alphaWolf = CreateUnitByName("npc_dota_boss_alpha_wolf", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
			alphaWolf.unitIsRoundNecessary = true
			self.enemiesToSpawn = self.enemiesToSpawn - 1
			alpha = alpha - 1
		end
		if self.enemiesToSpawn > 0 then
			return tick
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_alpha_wolf", context)
	PrecacheUnitByNameSync("npc_dota_boss_wolf", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.set = self.set or RandomInt(1,2)
	if self.set == 1 then
		self.reapersToSpawn = 2 + RoundManager:GetCurrentRaidTier()
		self.vanguardToSpawn = 3
	else
		self.reapersToSpawn = 2
		self.vanguardToSpawn = 3 + RoundManager:GetCurrentRaidTier()
	end
	self.enemiesToSpawn = self.reapersToSpawn + self.vanguardToSpawn
	local maxEnemies = self.enemiesToSpawn
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = "npc_dota_boss24_archer"
		if RollPercentage(self.vanguardToSpawn/maxEnemies) or self.reapersToSpawn == 0 then
			enemyName = "npc_dota_boss24_stomper"
		else
			self.reapersToSpawn = self.reapersToSpawn - 1
		end
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 3
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss24_archer", context)
	PrecacheUnitByNameSync("npc_dota_boss24_stomper", context)
	PrecacheUnitByNameSync("npc_dota_boss24_m", context)
	return true
end


local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min( 18, 4 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local enemyName = ""
		local roll = RandomInt(1, 11)
		if roll <= 3 then
			enemyName = "npc_dota_boss1"
		elseif roll <= 6 then
			enemyName = "npc_dota_boss2"
		elseif roll <= 8 then
			enemyName = "npc_dota_boss3a"
		elseif roll <= 10 then
			enemyName = "npc_dota_boss3b"
		elseif roll == 11 then
			enemyName = "npc_dota_boss7"
		end
		local spawn = CreateUnitByName(enemyName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 12
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss1", context)
	PrecacheUnitByNameSync("npc_dota_boss2", context)
	PrecacheUnitByNameSync("npc_dota_boss3a", context)
	PrecacheUnitByNameSync("npc_dota_boss3a_b", context)
	PrecacheUnitByNameSync("npc_dota_boss3b", context)
	PrecacheUnitByNameSync("npc_dota_boss7", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	self.enemiesToSpawn = math.min( 8, RoundManager:GetCurrentRaidTier() * (RoundManager:GetAscensions() + 1) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_flesh_behemoth", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_flesh_behemoth", context)
	PrecacheUnitByNameSync("npc_dota_boss3a_b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = RoundManager:GetCurrentRaidTier() * 2
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss7", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 12
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss7", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local bansheeSpawn = 20 / GameRules:GetGameDifficulty()
	local ghostSpawn = 10 / GameRules:GetGameDifficulty()
	local bTimer = 0
	local gTimer = 0
	self.bToSpawn = 2 + RoundManager:GetCurrentRaidTier() * 2
	self.gToSpawn = 4 + RoundManager:GetCurrentRaidTier() * 4
	self.enemiesToSpawn = self.bToSpawn + self.gToSpawn
	self.eventHandler = Timers:CreateTimer(3, function()
		if self.bToSpawn > 0 then
			bTimer = bTimer + 1
			if bTimer >= bansheeSpawn then
				local spawn = CreateUnitByName("npc_dota_boss_phantom", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn.unitIsRoundNecessary = true
				self.bToSpawn = self.bToSpawn - 1
				self.enemiesToSpawn = self.enemiesToSpawn - 1
				bTimer = 0
			end
		end
		if self.gToSpawn > 0 then
			gTimer = gTimer + 1
			if gTimer >= ghostSpawn then
				local spawn = CreateUnitByName("npc_dota_boss22b", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				spawn:SetCoreHealth(1250)
				spawn:SetAverageBaseDamage( 100, 25 )
				spawn.unitIsMinion = true
				spawn.unitIsRoundNecessary = true
				self.gToSpawn = self.gToSpawn - 1
				self.enemiesToSpawn = self.enemiesToSpawn - 1
				gTimer = 0
			end
		end
		if self.enemiesToSpawn > 0 then
			return 1
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_phantom", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min(15, 3 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local vhoulName = "npc_dota_boss1"
		if RollPercentage(50) then
			vhoulName = "npc_dota_boss2"
		end
		local spawn = CreateUnitByName(vhoulName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 7
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss1", context)
	PrecacheUnitByNameSync("npc_dota_boss2", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min(15, 3 + math.floor( math.log( RoundManager:GetEventsFinished() + 1 ) ))
	self.eventHandler = Timers:CreateTimer(3, function()
		local zombieName = "npc_dota_boss3a"
		if RollPercentage(50) then
			zombieName = "npc_dota_boss3b"
		end
		local spawn = CreateUnitByName(zombieName, RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 5
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss3a", context)
	PrecacheUnitByNameSync("npc_dota_boss3a_b", context)
	PrecacheUnitByNameSync("npc_dota_boss3b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min( 10, 1 + math.floor( RoundManager:GetCurrentRaidTier() + 1.5 * RoundManager:GetAscensions() ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss25", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true

		spawn:SetCoreHealth(2000)
		spawn:SetAverageBaseDamage( 70, 35 )
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 12
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss25", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min( 10, 2 + math.floor( math.log( RoundManager:GetRaidsFinished() + 1 ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss5", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss5", context)
	PrecacheUnitByNameSync("npc_dota_boss5b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 2 + math.floor(HeroList:GetActiveHeroCount() / 2)
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss28", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		spawn:RemoveAbility("boss18b_elusive_huntress")
		spawn:AddAbility("boss18b_corrupted_huntress")
		spawn:SetCoreHealth(2200)
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 8
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss28", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min( 5, math.max( 1, math.floor( math.log( RoundManager:GetRaidsFinished() + 1 ) ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_warlock_demon", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_warlock_demon", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = 1
	self.eventEnded = false
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_green_dragon", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		local greenPool = spawn:FindAbilityByName("green_dragon_toxic_pool")
		if greenPool then greenPool:StartCooldown(10) end
		spawn.unitIsRoundNecessary = true
		spawn:SetCoreHealth(1750)
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 10
		end
	end)
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_green_dragon", context)
	PrecacheUnitByNameSync("npc_dota_green_dragon_bug", context)
	return true
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "grove_boss_green_dragon"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end

		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["LoadSpawns"] = LoadSpawns,
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.min(5, math.max( 1, math.floor( math.log( RoundManager:GetRaidsFinished() + 1 ) ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss33_a", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 6
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss33_a", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = RoundManager:GetZonesFinished() + RoundManager:GetCurrentRaidTier() * 2
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss22", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		spawn:FindAbilityByName("boss15_exorcise"):SetActivated(false)
		spawn:SetCoreHealth(1800)
		
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 6
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss22", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.type = self.type or RandomInt(1, 3)
	if self.type == 1 then
		self.enemiesToSpawn = 6
	elseif self.type == 2 then
		self.enemiesToSpawn = 4
	else
		self.enemiesToSpawn = 9
	end
	self.eventHandler = Timers:CreateTimer(3, function()
		if self.type == 1 then
			if self.enemiesToSpawn == 6 then
				local champion = CreateUnitByName("npc_dota_boss_satyr_champion", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				champion.unitIsRoundNecessary = true
				
				local mage = CreateUnitByName("npc_dota_boss_satyr_mage", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				mage.unitIsRoundNecessary = true
				
				self.enemiesToSpawn = self.enemiesToSpawn - 2
			else
				local follower = CreateUnitByName("npc_dota_boss_satyr_follower", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				follower.unitIsRoundNecessary = true
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			end
		elseif self.type == 2 then
			if self.enemiesToSpawn == 4 then
				local champion = CreateUnitByName("npc_dota_boss_satyr_champion", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				champion.unitIsRoundNecessary = true
			else
				local mage = CreateUnitByName("npc_dota_boss_satyr_mage", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
				mage.unitIsRoundNecessary = true
			end
			self.enemiesToSpawn = self.enemiesToSpawn - 1
		else
			if self.enemiesToSpawn == 5 then
				self.enemiesToSpawn = self.enemiesToSpawn - 1
			else
				local number = 2
				for i = 1, number do
					local follower = CreateUnitByName("npc_dota_boss_satyr_follower", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
					follower.unitIsRoundNecessary = true
					self.enemiesToSpawn = self.enemiesToSpawn - 1
				end
				self.enemiesToSpawn = self.enemiesToSpawn - number
			end
		end
		if self.enemiesToSpawn > 0 then
			return 6
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_satyr_champion", context)
	PrecacheUnitByNameSync("npc_dota_boss_satyr_mage", context)
	PrecacheUnitByNameSync("npc_dota_boss_satyr_follower", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.max( 1, math.floor( math.log( RoundManager:GetRaidsFinished() + 1 ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss_sloth_demon", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 6
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss_sloth_demon", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function StartEvent(self)
	local spawnPos = RoundManager:PickRandomSpawn()
	self.enemiesToSpawn = math.max( 1, math.floor( math.log( RoundManager:GetRaidsFinished() + 1 ) ) )
	self.eventHandler = Timers:CreateTimer(3, function()
		local spawn = CreateUnitByName("npc_dota_boss33_b", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
		spawn.unitIsRoundNecessary = true
		
		self.enemiesToSpawn = self.enemiesToSpawn - 1
		if self.enemiesToSpawn > 0 then
			return 6
		end
	end)
	
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", require("events/base_combat"), self ),
	}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	RoundManager:EndEvent(bWon)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_boss33_b", context)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["EndEvent"] = EndEvent
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddRelic( "relic_angelic_water" )
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddRelic( "relic_breath_of_life" )
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function ThirdChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddRelic( "relic_seraphims_feather" )
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = self:GetEventName(), choices = 3})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_3', Context_Wrap( self, 'ThirdChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["ThirdChoice"] = ThirdChoice,
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_divine_knowledge_1")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_divine_knowledge_2")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function ThirdChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_divine_knowledge_3")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = "elysium_event_divine_knowledge", choices = 3})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_3', Context_Wrap( self, 'ThirdChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}
	
	LinkLuaModifier("event_buff_divine_knowledge_1", "events/modifiers/event_buff_divine_knowledge", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_divine_knowledge_2", "events/modifiers/event_buff_divine_knowledge", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_divine_knowledge_3", "events/modifiers/event_buff_divine_knowledge", LUA_MODIFIER_MOTION_NONE)
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["ThirdChoice"] = ThirdChoice,
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:PurgeCurses( )
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddRelic( "relic_ofuda" )
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function ThirdChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_fountain_of_purity")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = self:GetEventName(), choices = 3})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_3', Context_Wrap( self, 'ThirdChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}

	LinkLuaModifier("event_buff_fountain_of_purity", "events/modifiers/event_buff_fountain_of_purity", LUA_MODIFIER_MOTION_NONE)
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["ThirdChoice"] = ThirdChoice,
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	if not hero then return end
	hero:AddGold(-800)
	if RollPercentage(33) then
		RelicManager:PushCustomRelicDropsForPlayer(event.pID, {RelicManager:RollRandomRelicForPlayer(event.pID)})
		if hero:GetPlayerOwner() then
			Timers:CreateTimer(0.5, function() CustomGameEventManager:Send_ServerToPlayer(hero:GetPlayerOwner(), "boss_hunters_event_reward_given", {event = self:GetEventName(), reward = 1}) end)
		end
	end
	
	
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )

	local relicList = {}
	local relicKey
	local rarity = "RARITY_COMMON"
	while relicList[1] == nil and rarity ~= "RARITY_LEGENDARY" do
		for item, relic in pairs( hero.ownedRelics ) do
			if relic.rarity == rarity then
				table.insert(relicList, relic)
			end
		end
		if relicList[1] == nil then
			if rarity == "RARITY_COMMON" then
				rarity = "RARITY_UNCOMMON"
			elseif rarity == "RARITY_UNCOMMON" then
				rarity = "RARITY_RARE"
			elseif rarity == "RARITY_RARE" then
				rarity = "RARITY_LEGENDARY"
			end
		end
	end
	if relicList[1] then
		local relic = relicList[RandomInt(1, #relicList)]
		RelicManager:RemoveRelicOnPlayer(relic, event.pID)
		RelicManager:PushCustomRelicDropsForPlayer(event.pID, {RelicManager:RollRandomRelicForPlayer(event.pID)})
	end
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function ThirdChoice(self, userid, event)
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = self:GetEventName(), choices = 3})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_3', Context_Wrap( self, 'ThirdChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["ThirdChoice"] = ThirdChoice,
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_safe_haven_1")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_safe_haven_2")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function ThirdChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_safe_haven_3")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = self:GetEventName(), choices = 3})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_3', Context_Wrap( self, 'ThirdChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}

	LinkLuaModifier("event_buff_safe_haven_1", "events/modifiers/event_buff_safe_haven", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_safe_haven_2", "events/modifiers/event_buff_safe_haven", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_safe_haven_3", "events/modifiers/event_buff_safe_haven", LUA_MODIFIER_MOTION_NONE)
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["ThirdChoice"] = ThirdChoice,
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	
	hero:AddBlessing("event_buff_ethereal")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = "elysium_event_silent_guardian", choices = 2})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}
	for i = 0, GameRules.BasePlayers do
		if PlayerResource:IsValidPlayerID(i) and PlayerResource:GetPlayer(i) then
			self._playerChoices[i] = false
		end
	end
	LinkLuaModifier("event_buff_ethereal", "events/modifiers/event_buff_ethereal", LUA_MODIFIER_MOTION_NONE)
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_defense_or_offense_1")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_defense_or_offense_2")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function ThirdChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddBlessing("event_buff_defense_or_offense_3")
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = "generic_event_defense_or_offense", choices = 3})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_3', Context_Wrap( self, 'ThirdChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}
	LinkLuaModifier("event_buff_defense_or_offense_1", "events/modifiers/event_buff_defense_or_offense", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_defense_or_offense_2", "events/modifiers/event_buff_defense_or_offense", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_defense_or_offense_3", "events/modifiers/event_buff_defense_or_offense", LUA_MODIFIER_MOTION_NONE)
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["ThirdChoice"] = ThirdChoice,
}

return funcslocal function CheckPlayerChoices(self)
	if not self.eventEnded then
		local votedYes = 0
		local votedNo = 0
		local voted = 0
		local players = 0
		for i = 0, GameRules.BasePlayers do
			if PlayerResource:IsValidPlayerID(i) and PlayerResource:GetPlayer(i) then
				players = players + 1
				if self._playerChoices[i] ~= nil then
					voted = voted + 1
					if self._playerChoices[i] then
						votedYes = votedYes + 1
					else
						votedNo = votedNo + 1
					end
				end
			end
		end
		
		if votedYes > votedNo + (players - voted) then -- yes votes exceed non-votes and no votes
			self:StartCombat(true)
			return true
		elseif votedNo > votedYes + (players - voted) then -- no votes exceed yes and non-votes and every other situation
			self:StartCombat(false)
			return true
		end
	end
	return false
end

local function StartCombat(self, bFight)
	if bFight then
		self.timeRemaining = 0
		self.eventEnded = true
		table.insert( RoundManager.zones[RoundManager:GetCurrentZone()][1], 2,RoundManager:RollRandomEvent(RoundManager:GetCurrentZone(), EVENT_TYPE_BOSS) )
	end
	self:EndEvent(false)
end

local function FirstChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	self._playerChoices[event.pID] = false
	CheckPlayerChoices(self)
end

local function StartEvent(self)	
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = "generic_event_fight_or_flight", choices = 2})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') )
	}
	self.timeRemaining = 15
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if not self.eventEnded then
			if self.timeRemaining >= 0 then
				self.timeRemaining = self.timeRemaining - 1
				return 1
			else
				if not CheckPlayerChoices(self) then
					self:EndEvent(false)
				end
			end
		end
	end)
	
	self._playerChoices = {}
end

local function EndEvent(self, bFought)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	if not bFought then
		RoundManager:EndEvent(true)
	end
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["StartCombat"] = StartCombat,
}

return funcslocal function StartEvent()
	print("event: mamoru")
end

local funcs = {
	["StartEvent"] = StartEvent
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	self:EndEvent(true)
	return true
end

local function FirstChoice(self, userid, event)
	RelicManager:PushCustomRelicDropsForPlayer(event.pID, {RelicManager:RollRandomRelicForPlayer(event.pID)})
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function SecondChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	hero:AddGold(1500)	
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function ThirdChoice(self, userid, event)
	local hero = PlayerResource:GetSelectedHeroEntity( event.pID )
	if RollPercentage(20) then
		RelicManager:PushCustomRelicDropsForPlayer(event.pID, {RelicManager:RollRandomRelicForPlayer(event.pID)})
		hero:AddGold(1500)
	end
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = "generic_event_gold_or_relic", choices = 3})
	self._vEventHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_2', Context_Wrap( self, 'SecondChoice') ),
		CustomGameEventManager:RegisterListener('player_selected_event_choice_3', Context_Wrap( self, 'ThirdChoice') ),
	}
	self.timeRemaining = 30
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if self.timeRemaining >= 0 then
			self.timeRemaining = self.timeRemaining - 1
			return 1
		elseif not self.eventEnded then
			self:EndEvent(true)
		end
	end)
	
	self._playerChoices = {}

	LinkLuaModifier("event_buff_divine_knowledge_1", "events/modifiers/event_buff_divine_knowledge", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_divine_knowledge_2", "events/modifiers/event_buff_divine_knowledge", LUA_MODIFIER_MOTION_NONE)
	LinkLuaModifier("event_buff_divine_knowledge_3", "events/modifiers/event_buff_divine_knowledge", LUA_MODIFIER_MOTION_NONE)
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vEventHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	self.eventEnded = true
	self.timeRemaining = -1
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self)
	return true
end

local funcs = {
	["StartEvent"] = StartEvent,
	["EndEvent"] = EndEvent,
	["PrecacheUnits"] = PrecacheUnits,
	["FirstChoice"] = FirstChoice,
	["SecondChoice"] = SecondChoice,
	["ThirdChoice"] = ThirdChoice,
}

return funcslocal function CheckPlayerChoices(self)
	for _, hero in ipairs( HeroList:GetActiveHeroes() ) do
		local pID = hero:GetPlayerID()
		if pID and not self._playerChoices[pID] then
			return false
		end
	end
	if not self.eventEnded then
		self:StartCombat(true)
	end
	return true
end

local function FirstChoice(self, userid, event)
	self._playerChoices[event.pID] = true
	CheckPlayerChoices(self)
end

local function StartCombat(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_ended", {})
	self.eventEnded = true
	self.combatEnded = false
	Timers:CreateTimer(10, function()
		if not self.totemUnit then
			self:EndEvent(true)
		end
	end)
	self.timeRemaining = 60
	self.eventType = EVENT_TYPE_COMBAT
	self.totemUnit = CreateUnitByName("npc_dota_event_totem", RoundManager:GetHeroSpawnPosition(), true, nil, nil, DOTA_TEAM_GOODGUYS)
	self.totemUnit:SetThreat(5000)
	AddFOWViewer(DOTA_TEAM_BADGUYS, self.totemUnit:GetAbsOrigin(), 312, self.timeRemaining, false)
	
	local activeHeroes = HeroList:GetActiveHeroCount()
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if not self.combatEnded then
			if self.timeRemaining >= 0 then
				self.timeRemaining = self.timeRemaining - 1
				return 1
			else
				self:EndEvent(true)
			end
		end
	end)
	
	Timers:CreateTimer(1, function()
		if not self.totemUnit or self.totemUnit:IsNull() then return end
		if self.totemUnit:IsAlive() then self.totemUnit:SetThreat(5000) end
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if not self.combatEnded then
			if self.timeRemaining >= 0 then
				local spawns = 1 + math.floor( (60 - self.timeRemaining)/15 )
				for i = 1, spawns do
					local zombie = CreateUnitByName("npc_dota_mini_boss1", RoundManager:PickRandomSpawn(), true, nil, nil, DOTA_TEAM_BADGUYS)
					local hp = zombie:GetBaseMaxHealth() * (activeHeroes / 2) * 1.6
					zombie:SetBaseMaxHealth( hp )
					zombie:SetMaxHealth( hp )
					zombie:SetHealth( hp )
				end
				
				return 2
			else
				self:EndEvent(true)
			end
		end
	end)
end

local function OnEntityKilled(self, event)
	local killedTarget = EntIndexToHScript(event.entindex_killed)
	local ROUND_END_DELAY = 3
	if killedTarget == self.totemUnit then
		self:EndEvent(true)
	elseif killedTarget:IsRealHero() then
		if not killedTarget:NotDead() then
			killedTarget:CreateTombstone()
		end
		Timers:CreateTimer( ROUND_END_DELAY, function()
			if RoundManager:EvaluateLoss() then
				self:EndEvent(false)
			end
		end)
	end
end

local function StartEvent(self)
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_has_started", {event = "generic_event_protect", choices = 1})
	self._vListenerHandles = {
		CustomGameEventManager:RegisterListener('player_selected_event_choice_1', Context_Wrap( self, 'FirstChoice') ),
	}
	self._vEventHandles = {
		ListenToGameEvent( "entity_killed", OnEntityKilled, self ),
	}
	self.timeRemaining = 10
	self.eventEnded = false
	Timers:CreateTimer(1, function()
		CustomGameEventManager:Send_ServerToAllClients("updateQuestPrepTime", {prepTime = self.timeRemaining})
		if not self.eventEnded then
			if self.timeRemaining >= 0 then
				self.timeRemaining = self.timeRemaining - 1
				return 1
			else
				self:StartCombat(true)
			end
		end
	end)
	
	self._playerChoices = {}
	LinkLuaModifier("event_buff_protect", "events/modifiers/event_buff_protect", LUA_MODIFIER_MOTION_NONE)
end

local function EndEvent(self, bWon)
	for _, eID in pairs( self._vListenerHandles ) do
		CustomGameEventManager:UnregisterListener( eID )
	end
	for _, eID in pairs( self._vEventHandles ) do
		StopListeningToGameEvent( eID )
	end
	self.eventEnded = true
	self.combatEnded = true
	self.timeRemaining = -1
	
	
	local reward = 2
	if not self.totemUnit:IsNull() and self.totemUnit:IsAlive() then
		for _, hero in ipairs( HeroList:GetRealHeroes() ) do
			hero:ModifyAttributePoints( 2 )
			CustomGameEventManager:Send_ServerToAllClients("dota_player_upgraded_stats", {playerID = hero:GetPlayerID()} )
		end
		reward = 1
		self.totemUnit:ForceKill(false)
	end
	
	CustomGameEventManager:Send_ServerToAllClients("boss_hunters_event_reward_given", {event = "generic_event_protect", reward = reward})
	
	Timers:CreateTimer(3, function() RoundManager:EndEvent(true) end)
end

local function PrecacheUnits(self, context)
	PrecacheUnitByNameSync("npc_dota_mini_boss1", context)
	return true
end

local function HandoutRewards(self)
	return false
end

local function LoadSpawns(self)
	if not self.spawnLoadCompleted then
		RoundManager.spawnPositions = {}
		RoundManager.boundingBox = "elysium_combat_3"
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_spawner" ) ) do
			table.insert( RoundManager.spawnPositions, spawnPos:GetAbsOrigin() )
		end
		self.heroSpawnPosition = self.heroSpawnPosition or nil
		for _,spawnPos in ipairs( Entities:FindAllByName( RoundManager.boundingBox.."_heroes") ) do
			self.heroSpawnPosition = spawnPos:GetAbsOrigin()
			break
		end
		
		self.spawnLoadCompleted = true
	end
end

local funcs = {
	["StartEven